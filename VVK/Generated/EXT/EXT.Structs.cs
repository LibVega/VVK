/*
 * MIT License - Copyright(c) 2020 Sean Moss
 * This file is subject to the terms and conditions of the MIT License, the text of which can be found in the 'LICENSE'
 * file at the root of this repository, or online at<https://opensource.org/licenses/MIT>.
 */

/// This file was generated by VVKGen. Edits to this file will be lost on next generation.

using System;
using System.Runtime.InteropServices;
using System.Runtime.CompilerServices;


namespace VVK.Vk.EXT
{

[StructLayout(LayoutKind.Sequential)]
public unsafe partial struct DirectFBSurfaceCreateInfo
{
	public const Vk.StructureType TYPE = Vk.StructureType.DirectfbSurfaceCreateInfoEXT;

	public Vk.StructureType sType;
	public void* pNext;
	public Vk.EXT.DirectFBSurfaceCreateFlags Flags;
	public void* Dfb;
	public void* Surface;

	/// <summary>Creates a new DirectFBSurfaceCreateInfo value with the correct type field.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void New(out DirectFBSurfaceCreateInfo value) => value = new() { sType = TYPE };
	/// <summary>Initializes the sType and pNext fields to the correct default values.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void Init(ref DirectFBSurfaceCreateInfo value) { value.sType = TYPE; value.pNext = null; }
}

[StructLayout(LayoutKind.Sequential)]
public unsafe partial struct DebugReportCallbackCreateInfo
{
	public const Vk.StructureType TYPE = Vk.StructureType.DebugReportCallbackCreateInfoEXT;

	public Vk.StructureType sType;
	public void* pNext;
	public Vk.EXT.DebugReportFlags Flags;
	public delegate* managed<Vk.EXT.DebugReportFlags, Vk.EXT.DebugReportObjectType, ulong, ulong, int, byte*, byte*, void*, Vk.Bool32> Callback;
	public void* UserData;

	/// <summary>Creates a new DebugReportCallbackCreateInfo value with the correct type field.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void New(out DebugReportCallbackCreateInfo value) => value = new() { sType = TYPE };
	/// <summary>Initializes the sType and pNext fields to the correct default values.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void Init(ref DebugReportCallbackCreateInfo value) { value.sType = TYPE; value.pNext = null; }
}

[StructLayout(LayoutKind.Sequential)]
public unsafe partial struct ValidationFlags
{
	public const Vk.StructureType TYPE = Vk.StructureType.ValidationFlagsEXT;

	public Vk.StructureType sType;
	public void* pNext;
	public uint DisabledValidationCheckCount;
	public Vk.EXT.ValidationCheck* DisabledValidationChecks;

	/// <summary>Creates a new ValidationFlags value with the correct type field.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void New(out ValidationFlags value) => value = new() { sType = TYPE };
	/// <summary>Initializes the sType and pNext fields to the correct default values.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void Init(ref ValidationFlags value) { value.sType = TYPE; value.pNext = null; }
}

[StructLayout(LayoutKind.Sequential)]
public unsafe partial struct ValidationFeatures
{
	public const Vk.StructureType TYPE = Vk.StructureType.ValidationFeaturesEXT;

	public Vk.StructureType sType;
	public void* pNext;
	public uint EnabledValidationFeatureCount;
	public Vk.EXT.ValidationFeatureEnable* EnabledValidationFeatures;
	public uint DisabledValidationFeatureCount;
	public Vk.EXT.ValidationFeatureDisable* DisabledValidationFeatures;

	/// <summary>Creates a new ValidationFeatures value with the correct type field.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void New(out ValidationFeatures value) => value = new() { sType = TYPE };
	/// <summary>Initializes the sType and pNext fields to the correct default values.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void Init(ref ValidationFeatures value) { value.sType = TYPE; value.pNext = null; }
}

[StructLayout(LayoutKind.Sequential)]
public unsafe partial struct DebugMarkerObjectNameInfo
{
	public const Vk.StructureType TYPE = Vk.StructureType.DebugMarkerObjectNameInfoEXT;

	public Vk.StructureType sType;
	public void* pNext;
	public Vk.EXT.DebugReportObjectType ObjectType;
	public ulong Object;
	public byte* ObjectName;

	/// <summary>Creates a new DebugMarkerObjectNameInfo value with the correct type field.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void New(out DebugMarkerObjectNameInfo value) => value = new() { sType = TYPE };
	/// <summary>Initializes the sType and pNext fields to the correct default values.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void Init(ref DebugMarkerObjectNameInfo value) { value.sType = TYPE; value.pNext = null; }
}

[StructLayout(LayoutKind.Sequential)]
public unsafe partial struct DebugMarkerObjectTagInfo
{
	public const Vk.StructureType TYPE = Vk.StructureType.DebugMarkerObjectTagInfoEXT;

	public Vk.StructureType sType;
	public void* pNext;
	public Vk.EXT.DebugReportObjectType ObjectType;
	public ulong Object;
	public ulong TagName;
	public ulong TagSize;
	public void* Tag;

	/// <summary>Creates a new DebugMarkerObjectTagInfo value with the correct type field.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void New(out DebugMarkerObjectTagInfo value) => value = new() { sType = TYPE };
	/// <summary>Initializes the sType and pNext fields to the correct default values.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void Init(ref DebugMarkerObjectTagInfo value) { value.sType = TYPE; value.pNext = null; }
}

[StructLayout(LayoutKind.Sequential)]
public unsafe partial struct DebugMarkerMarkerInfo
{
	public const Vk.StructureType TYPE = Vk.StructureType.DebugMarkerMarkerInfoEXT;

	public Vk.StructureType sType;
	public void* pNext;
	public byte* MarkerName;
	public fixed float Color[4];

	/// <summary>Creates a new DebugMarkerMarkerInfo value with the correct type field.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void New(out DebugMarkerMarkerInfo value) => value = new() { sType = TYPE };
	/// <summary>Initializes the sType and pNext fields to the correct default values.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void Init(ref DebugMarkerMarkerInfo value) { value.sType = TYPE; value.pNext = null; }
}

[StructLayout(LayoutKind.Sequential)]
public unsafe partial struct DevicePrivateDataCreateInfo
{
	public const Vk.StructureType TYPE = Vk.StructureType.DevicePrivateDataCreateInfoEXT;

	public Vk.StructureType sType;
	public void* pNext;
	public uint PrivateDataSlotRequestCount;

	/// <summary>Creates a new DevicePrivateDataCreateInfo value with the correct type field.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void New(out DevicePrivateDataCreateInfo value) => value = new() { sType = TYPE };
	/// <summary>Initializes the sType and pNext fields to the correct default values.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void Init(ref DevicePrivateDataCreateInfo value) { value.sType = TYPE; value.pNext = null; }
}

[StructLayout(LayoutKind.Sequential)]
public unsafe partial struct PrivateDataSlotCreateInfo
{
	public const Vk.StructureType TYPE = Vk.StructureType.PrivateDataSlotCreateInfoEXT;

	public Vk.StructureType sType;
	public void* pNext;
	public Vk.EXT.PrivateDataSlotCreateFlags Flags;

	/// <summary>Creates a new PrivateDataSlotCreateInfo value with the correct type field.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void New(out PrivateDataSlotCreateInfo value) => value = new() { sType = TYPE };
	/// <summary>Initializes the sType and pNext fields to the correct default values.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void Init(ref PrivateDataSlotCreateInfo value) { value.sType = TYPE; value.pNext = null; }
}

[StructLayout(LayoutKind.Sequential)]
public unsafe partial struct PhysicalDevicePrivateDataFeatures
{
	public const Vk.StructureType TYPE = Vk.StructureType.PhysicalDevicePrivateDataFeaturesEXT;

	public Vk.StructureType sType;
	public void* pNext;
	public Vk.Bool32 PrivateData;

	/// <summary>Creates a new PhysicalDevicePrivateDataFeatures value with the correct type field.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void New(out PhysicalDevicePrivateDataFeatures value) => value = new() { sType = TYPE };
	/// <summary>Initializes the sType and pNext fields to the correct default values.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void Init(ref PhysicalDevicePrivateDataFeatures value) { value.sType = TYPE; value.pNext = null; }
}

[StructLayout(LayoutKind.Sequential)]
public unsafe partial struct SurfaceCapabilities2
{
	public const Vk.StructureType TYPE = Vk.StructureType.SurfaceCapabilities2EXT;

	public Vk.StructureType sType;
	public void* pNext;
	public uint MinImageCount;
	public uint MaxImageCount;
	public Vk.Extent2D CurrentExtent;
	public Vk.Extent2D MinImageExtent;
	public Vk.Extent2D MaxImageExtent;
	public uint MaxImageArrayLayers;
	public Vk.KHR.SurfaceTransformFlags SupportedTransforms;
	public Vk.KHR.SurfaceTransformFlags CurrentTransform;
	public Vk.KHR.CompositeAlphaFlags SupportedCompositeAlpha;
	public Vk.ImageUsageFlags SupportedUsageFlags;
	public Vk.EXT.SurfaceCounterFlags SupportedSurfaceCounters;

	/// <summary>Creates a new SurfaceCapabilities2 value with the correct type field.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void New(out SurfaceCapabilities2 value) => value = new() { sType = TYPE };
	/// <summary>Initializes the sType and pNext fields to the correct default values.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void Init(ref SurfaceCapabilities2 value) { value.sType = TYPE; value.pNext = null; }
}

[StructLayout(LayoutKind.Sequential)]
public unsafe partial struct DisplayPowerInfo
{
	public const Vk.StructureType TYPE = Vk.StructureType.DisplayPowerInfoEXT;

	public Vk.StructureType sType;
	public void* pNext;
	public Vk.EXT.DisplayPowerState PowerState;

	/// <summary>Creates a new DisplayPowerInfo value with the correct type field.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void New(out DisplayPowerInfo value) => value = new() { sType = TYPE };
	/// <summary>Initializes the sType and pNext fields to the correct default values.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void Init(ref DisplayPowerInfo value) { value.sType = TYPE; value.pNext = null; }
}

[StructLayout(LayoutKind.Sequential)]
public unsafe partial struct DeviceEventInfo
{
	public const Vk.StructureType TYPE = Vk.StructureType.DeviceEventInfoEXT;

	public Vk.StructureType sType;
	public void* pNext;
	public Vk.EXT.DeviceEventType DeviceEvent;

	/// <summary>Creates a new DeviceEventInfo value with the correct type field.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void New(out DeviceEventInfo value) => value = new() { sType = TYPE };
	/// <summary>Initializes the sType and pNext fields to the correct default values.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void Init(ref DeviceEventInfo value) { value.sType = TYPE; value.pNext = null; }
}

[StructLayout(LayoutKind.Sequential)]
public unsafe partial struct DisplayEventInfo
{
	public const Vk.StructureType TYPE = Vk.StructureType.DisplayEventInfoEXT;

	public Vk.StructureType sType;
	public void* pNext;
	public Vk.EXT.DisplayEventType DisplayEvent;

	/// <summary>Creates a new DisplayEventInfo value with the correct type field.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void New(out DisplayEventInfo value) => value = new() { sType = TYPE };
	/// <summary>Initializes the sType and pNext fields to the correct default values.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void Init(ref DisplayEventInfo value) { value.sType = TYPE; value.pNext = null; }
}

[StructLayout(LayoutKind.Sequential)]
public unsafe partial struct SwapchainCounterCreateInfo
{
	public const Vk.StructureType TYPE = Vk.StructureType.SwapchainCounterCreateInfoEXT;

	public Vk.StructureType sType;
	public void* pNext;
	public Vk.EXT.SurfaceCounterFlags SurfaceCounters;

	/// <summary>Creates a new SwapchainCounterCreateInfo value with the correct type field.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void New(out SwapchainCounterCreateInfo value) => value = new() { sType = TYPE };
	/// <summary>Initializes the sType and pNext fields to the correct default values.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void Init(ref SwapchainCounterCreateInfo value) { value.sType = TYPE; value.pNext = null; }
}

[StructLayout(LayoutKind.Sequential)]
public unsafe partial struct XYColor
{
	public float X;
	public float Y;
}

[StructLayout(LayoutKind.Sequential)]
public unsafe partial struct HdrMetadata
{
	public const Vk.StructureType TYPE = Vk.StructureType.HdrMetadataEXT;

	public Vk.StructureType sType;
	public void* pNext;
	public Vk.EXT.XYColor DisplayPrimaryRed;
	public Vk.EXT.XYColor DisplayPrimaryGreen;
	public Vk.EXT.XYColor DisplayPrimaryBlue;
	public Vk.EXT.XYColor WhitePoint;
	public float MaxLuminance;
	public float MinLuminance;
	public float MaxContentLightLevel;
	public float MaxFrameAverageLightLevel;

	/// <summary>Creates a new HdrMetadata value with the correct type field.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void New(out HdrMetadata value) => value = new() { sType = TYPE };
	/// <summary>Initializes the sType and pNext fields to the correct default values.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void Init(ref HdrMetadata value) { value.sType = TYPE; value.pNext = null; }
}

[StructLayout(LayoutKind.Sequential)]
public unsafe partial struct MetalSurfaceCreateInfo
{
	public const Vk.StructureType TYPE = Vk.StructureType.MetalSurfaceCreateInfoEXT;

	public Vk.StructureType sType;
	public void* pNext;
	public Vk.EXT.MetalSurfaceCreateFlags Flags;
	public void* Layer;

	/// <summary>Creates a new MetalSurfaceCreateInfo value with the correct type field.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void New(out MetalSurfaceCreateInfo value) => value = new() { sType = TYPE };
	/// <summary>Initializes the sType and pNext fields to the correct default values.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void Init(ref MetalSurfaceCreateInfo value) { value.sType = TYPE; value.pNext = null; }
}

[StructLayout(LayoutKind.Sequential)]
public unsafe partial struct PhysicalDeviceDiscardRectangleProperties
{
	public const Vk.StructureType TYPE = Vk.StructureType.PhysicalDeviceDiscardRectanglePropertiesEXT;

	public Vk.StructureType sType;
	public void* pNext;
	public uint MaxDiscardRectangles;

	/// <summary>Creates a new PhysicalDeviceDiscardRectangleProperties value with the correct type field.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void New(out PhysicalDeviceDiscardRectangleProperties value) => value = new() { sType = TYPE };
	/// <summary>Initializes the sType and pNext fields to the correct default values.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void Init(ref PhysicalDeviceDiscardRectangleProperties value) { value.sType = TYPE; value.pNext = null; }
}

[StructLayout(LayoutKind.Sequential)]
public unsafe partial struct PipelineDiscardRectangleStateCreateInfo
{
	public const Vk.StructureType TYPE = Vk.StructureType.PipelineDiscardRectangleStateCreateInfoEXT;

	public Vk.StructureType sType;
	public void* pNext;
	public Vk.EXT.PipelineDiscardRectangleStateCreateFlags Flags;
	public Vk.EXT.DiscardRectangleMode DiscardRectangleMode;
	public uint DiscardRectangleCount;
	public Vk.Rect2D* DiscardRectangles;

	/// <summary>Creates a new PipelineDiscardRectangleStateCreateInfo value with the correct type field.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void New(out PipelineDiscardRectangleStateCreateInfo value) => value = new() { sType = TYPE };
	/// <summary>Initializes the sType and pNext fields to the correct default values.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void Init(ref PipelineDiscardRectangleStateCreateInfo value) { value.sType = TYPE; value.pNext = null; }
}

[StructLayout(LayoutKind.Sequential)]
public unsafe partial struct ConditionalRenderingBeginInfo
{
	public const Vk.StructureType TYPE = Vk.StructureType.ConditionalRenderingBeginInfoEXT;

	public Vk.StructureType sType;
	public void* pNext;
	public Vk.Buffer Buffer;
	public Vk.DeviceSize Offset;
	public Vk.EXT.ConditionalRenderingFlags Flags;

	/// <summary>Creates a new ConditionalRenderingBeginInfo value with the correct type field.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void New(out ConditionalRenderingBeginInfo value) => value = new() { sType = TYPE };
	/// <summary>Initializes the sType and pNext fields to the correct default values.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void Init(ref ConditionalRenderingBeginInfo value) { value.sType = TYPE; value.pNext = null; }
}

[StructLayout(LayoutKind.Sequential)]
public unsafe partial struct PhysicalDeviceSamplerFilterMinmaxProperties
{
	public const Vk.StructureType TYPE = Vk.StructureType.PhysicalDeviceSamplerFilterMinmaxProperties;

	public Vk.StructureType sType;
	public void* pNext;
	public Vk.Bool32 FilterMinmaxSingleComponentFormats;
	public Vk.Bool32 FilterMinmaxImageComponentMapping;

	/// <summary>Creates a new PhysicalDeviceSamplerFilterMinmaxProperties value with the correct type field.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void New(out PhysicalDeviceSamplerFilterMinmaxProperties value) => value = new() { sType = TYPE };
	/// <summary>Initializes the sType and pNext fields to the correct default values.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void Init(ref PhysicalDeviceSamplerFilterMinmaxProperties value) { value.sType = TYPE; value.pNext = null; }
}

[StructLayout(LayoutKind.Sequential)]
public unsafe partial struct SampleLocation
{
	public float X;
	public float Y;
}

[StructLayout(LayoutKind.Sequential)]
public unsafe partial struct SampleLocationsInfo
{
	public const Vk.StructureType TYPE = Vk.StructureType.SampleLocationsInfoEXT;

	public Vk.StructureType sType;
	public void* pNext;
	public Vk.SampleCountFlags SampleLocationsPerPixel;
	public Vk.Extent2D SampleLocationGridSize;
	public uint SampleLocationsCount;
	public Vk.EXT.SampleLocation* SampleLocations;

	/// <summary>Creates a new SampleLocationsInfo value with the correct type field.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void New(out SampleLocationsInfo value) => value = new() { sType = TYPE };
	/// <summary>Initializes the sType and pNext fields to the correct default values.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void Init(ref SampleLocationsInfo value) { value.sType = TYPE; value.pNext = null; }
}

[StructLayout(LayoutKind.Sequential)]
public unsafe partial struct AttachmentSampleLocations
{
	public uint AttachmentIndex;
	public Vk.EXT.SampleLocationsInfo SampleLocationsInfo;
}

[StructLayout(LayoutKind.Sequential)]
public unsafe partial struct SubpassSampleLocations
{
	public uint SubpassIndex;
	public Vk.EXT.SampleLocationsInfo SampleLocationsInfo;
}

[StructLayout(LayoutKind.Sequential)]
public unsafe partial struct RenderPassSampleLocationsBeginInfo
{
	public const Vk.StructureType TYPE = Vk.StructureType.RenderPassSampleLocationsBeginInfoEXT;

	public Vk.StructureType sType;
	public void* pNext;
	public uint AttachmentInitialSampleLocationsCount;
	public Vk.EXT.AttachmentSampleLocations* AttachmentInitialSampleLocations;
	public uint PostSubpassSampleLocationsCount;
	public Vk.EXT.SubpassSampleLocations* PostSubpassSampleLocations;

	/// <summary>Creates a new RenderPassSampleLocationsBeginInfo value with the correct type field.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void New(out RenderPassSampleLocationsBeginInfo value) => value = new() { sType = TYPE };
	/// <summary>Initializes the sType and pNext fields to the correct default values.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void Init(ref RenderPassSampleLocationsBeginInfo value) { value.sType = TYPE; value.pNext = null; }
}

[StructLayout(LayoutKind.Sequential)]
public unsafe partial struct PipelineSampleLocationsStateCreateInfo
{
	public const Vk.StructureType TYPE = Vk.StructureType.PipelineSampleLocationsStateCreateInfoEXT;

	public Vk.StructureType sType;
	public void* pNext;
	public Vk.Bool32 SampleLocationsEnable;
	public Vk.EXT.SampleLocationsInfo SampleLocationsInfo;

	/// <summary>Creates a new PipelineSampleLocationsStateCreateInfo value with the correct type field.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void New(out PipelineSampleLocationsStateCreateInfo value) => value = new() { sType = TYPE };
	/// <summary>Initializes the sType and pNext fields to the correct default values.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void Init(ref PipelineSampleLocationsStateCreateInfo value) { value.sType = TYPE; value.pNext = null; }
}

[StructLayout(LayoutKind.Sequential)]
public unsafe partial struct PhysicalDeviceSampleLocationsProperties
{
	public const Vk.StructureType TYPE = Vk.StructureType.PhysicalDeviceSampleLocationsPropertiesEXT;

	public Vk.StructureType sType;
	public void* pNext;
	public Vk.SampleCountFlags SampleLocationSampleCounts;
	public Vk.Extent2D MaxSampleLocationGridSize;
	public fixed float SampleLocationCoordinateRange[2];
	public uint SampleLocationSubPixelBits;
	public Vk.Bool32 VariableSampleLocations;

	/// <summary>Creates a new PhysicalDeviceSampleLocationsProperties value with the correct type field.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void New(out PhysicalDeviceSampleLocationsProperties value) => value = new() { sType = TYPE };
	/// <summary>Initializes the sType and pNext fields to the correct default values.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void Init(ref PhysicalDeviceSampleLocationsProperties value) { value.sType = TYPE; value.pNext = null; }
}

[StructLayout(LayoutKind.Sequential)]
public unsafe partial struct MultisampleProperties
{
	public const Vk.StructureType TYPE = Vk.StructureType.MultisamplePropertiesEXT;

	public Vk.StructureType sType;
	public void* pNext;
	public Vk.Extent2D MaxSampleLocationGridSize;

	/// <summary>Creates a new MultisampleProperties value with the correct type field.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void New(out MultisampleProperties value) => value = new() { sType = TYPE };
	/// <summary>Initializes the sType and pNext fields to the correct default values.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void Init(ref MultisampleProperties value) { value.sType = TYPE; value.pNext = null; }
}

[StructLayout(LayoutKind.Sequential)]
public unsafe partial struct SamplerReductionModeCreateInfo
{
	public const Vk.StructureType TYPE = Vk.StructureType.SamplerReductionModeCreateInfo;

	public Vk.StructureType sType;
	public void* pNext;
	public Vk.SamplerReductionMode ReductionMode;

	/// <summary>Creates a new SamplerReductionModeCreateInfo value with the correct type field.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void New(out SamplerReductionModeCreateInfo value) => value = new() { sType = TYPE };
	/// <summary>Initializes the sType and pNext fields to the correct default values.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void Init(ref SamplerReductionModeCreateInfo value) { value.sType = TYPE; value.pNext = null; }
}

[StructLayout(LayoutKind.Sequential)]
public unsafe partial struct PhysicalDeviceBlendOperationAdvancedFeatures
{
	public const Vk.StructureType TYPE = Vk.StructureType.PhysicalDeviceBlendOperationAdvancedFeaturesEXT;

	public Vk.StructureType sType;
	public void* pNext;
	public Vk.Bool32 AdvancedBlendCoherentOperations;

	/// <summary>Creates a new PhysicalDeviceBlendOperationAdvancedFeatures value with the correct type field.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void New(out PhysicalDeviceBlendOperationAdvancedFeatures value) => value = new() { sType = TYPE };
	/// <summary>Initializes the sType and pNext fields to the correct default values.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void Init(ref PhysicalDeviceBlendOperationAdvancedFeatures value) { value.sType = TYPE; value.pNext = null; }
}

[StructLayout(LayoutKind.Sequential)]
public unsafe partial struct PhysicalDeviceBlendOperationAdvancedProperties
{
	public const Vk.StructureType TYPE = Vk.StructureType.PhysicalDeviceBlendOperationAdvancedPropertiesEXT;

	public Vk.StructureType sType;
	public void* pNext;
	public uint AdvancedBlendMaxColorAttachments;
	public Vk.Bool32 AdvancedBlendIndependentBlend;
	public Vk.Bool32 AdvancedBlendNonPremultipliedSrcColor;
	public Vk.Bool32 AdvancedBlendNonPremultipliedDstColor;
	public Vk.Bool32 AdvancedBlendCorrelatedOverlap;
	public Vk.Bool32 AdvancedBlendAllOperations;

	/// <summary>Creates a new PhysicalDeviceBlendOperationAdvancedProperties value with the correct type field.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void New(out PhysicalDeviceBlendOperationAdvancedProperties value) => value = new() { sType = TYPE };
	/// <summary>Initializes the sType and pNext fields to the correct default values.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void Init(ref PhysicalDeviceBlendOperationAdvancedProperties value) { value.sType = TYPE; value.pNext = null; }
}

[StructLayout(LayoutKind.Sequential)]
public unsafe partial struct PipelineColorBlendAdvancedStateCreateInfo
{
	public const Vk.StructureType TYPE = Vk.StructureType.PipelineColorBlendAdvancedStateCreateInfoEXT;

	public Vk.StructureType sType;
	public void* pNext;
	public Vk.Bool32 SrcPremultiplied;
	public Vk.Bool32 DstPremultiplied;
	public Vk.EXT.BlendOverlap BlendOverlap;

	/// <summary>Creates a new PipelineColorBlendAdvancedStateCreateInfo value with the correct type field.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void New(out PipelineColorBlendAdvancedStateCreateInfo value) => value = new() { sType = TYPE };
	/// <summary>Initializes the sType and pNext fields to the correct default values.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void Init(ref PipelineColorBlendAdvancedStateCreateInfo value) { value.sType = TYPE; value.pNext = null; }
}

[StructLayout(LayoutKind.Sequential)]
public unsafe partial struct PhysicalDeviceInlineUniformBlockFeatures
{
	public const Vk.StructureType TYPE = Vk.StructureType.PhysicalDeviceInlineUniformBlockFeaturesEXT;

	public Vk.StructureType sType;
	public void* pNext;
	public Vk.Bool32 InlineUniformBlock;
	public Vk.Bool32 DescriptorBindingInlineUniformBlockUpdateAfterBind;

	/// <summary>Creates a new PhysicalDeviceInlineUniformBlockFeatures value with the correct type field.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void New(out PhysicalDeviceInlineUniformBlockFeatures value) => value = new() { sType = TYPE };
	/// <summary>Initializes the sType and pNext fields to the correct default values.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void Init(ref PhysicalDeviceInlineUniformBlockFeatures value) { value.sType = TYPE; value.pNext = null; }
}

[StructLayout(LayoutKind.Sequential)]
public unsafe partial struct PhysicalDeviceInlineUniformBlockProperties
{
	public const Vk.StructureType TYPE = Vk.StructureType.PhysicalDeviceInlineUniformBlockPropertiesEXT;

	public Vk.StructureType sType;
	public void* pNext;
	public uint MaxInlineUniformBlockSize;
	public uint MaxPerStageDescriptorInlineUniformBlocks;
	public uint MaxPerStageDescriptorUpdateAfterBindInlineUniformBlocks;
	public uint MaxDescriptorSetInlineUniformBlocks;
	public uint MaxDescriptorSetUpdateAfterBindInlineUniformBlocks;

	/// <summary>Creates a new PhysicalDeviceInlineUniformBlockProperties value with the correct type field.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void New(out PhysicalDeviceInlineUniformBlockProperties value) => value = new() { sType = TYPE };
	/// <summary>Initializes the sType and pNext fields to the correct default values.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void Init(ref PhysicalDeviceInlineUniformBlockProperties value) { value.sType = TYPE; value.pNext = null; }
}

[StructLayout(LayoutKind.Sequential)]
public unsafe partial struct WriteDescriptorSetInlineUniformBlock
{
	public const Vk.StructureType TYPE = Vk.StructureType.WriteDescriptorSetInlineUniformBlockEXT;

	public Vk.StructureType sType;
	public void* pNext;
	public uint DataSize;
	public void* Data;

	/// <summary>Creates a new WriteDescriptorSetInlineUniformBlock value with the correct type field.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void New(out WriteDescriptorSetInlineUniformBlock value) => value = new() { sType = TYPE };
	/// <summary>Initializes the sType and pNext fields to the correct default values.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void Init(ref WriteDescriptorSetInlineUniformBlock value) { value.sType = TYPE; value.pNext = null; }
}

[StructLayout(LayoutKind.Sequential)]
public unsafe partial struct DescriptorPoolInlineUniformBlockCreateInfo
{
	public const Vk.StructureType TYPE = Vk.StructureType.DescriptorPoolInlineUniformBlockCreateInfoEXT;

	public Vk.StructureType sType;
	public void* pNext;
	public uint MaxInlineUniformBlockBindings;

	/// <summary>Creates a new DescriptorPoolInlineUniformBlockCreateInfo value with the correct type field.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void New(out DescriptorPoolInlineUniformBlockCreateInfo value) => value = new() { sType = TYPE };
	/// <summary>Initializes the sType and pNext fields to the correct default values.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void Init(ref DescriptorPoolInlineUniformBlockCreateInfo value) { value.sType = TYPE; value.pNext = null; }
}

[StructLayout(LayoutKind.Sequential)]
public unsafe partial struct ValidationCacheCreateInfo
{
	public const Vk.StructureType TYPE = Vk.StructureType.ValidationCacheCreateInfoEXT;

	public Vk.StructureType sType;
	public void* pNext;
	public Vk.EXT.ValidationCacheCreateFlags Flags;
	public ulong InitialDataSize;
	public void* InitialData;

	/// <summary>Creates a new ValidationCacheCreateInfo value with the correct type field.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void New(out ValidationCacheCreateInfo value) => value = new() { sType = TYPE };
	/// <summary>Initializes the sType and pNext fields to the correct default values.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void Init(ref ValidationCacheCreateInfo value) { value.sType = TYPE; value.pNext = null; }
}

[StructLayout(LayoutKind.Sequential)]
public unsafe partial struct ShaderModuleValidationCacheCreateInfo
{
	public const Vk.StructureType TYPE = Vk.StructureType.ShaderModuleValidationCacheCreateInfoEXT;

	public Vk.StructureType sType;
	public void* pNext;
	public Vk.EXT.ValidationCache ValidationCache;

	/// <summary>Creates a new ShaderModuleValidationCacheCreateInfo value with the correct type field.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void New(out ShaderModuleValidationCacheCreateInfo value) => value = new() { sType = TYPE };
	/// <summary>Initializes the sType and pNext fields to the correct default values.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void Init(ref ShaderModuleValidationCacheCreateInfo value) { value.sType = TYPE; value.pNext = null; }
}

[StructLayout(LayoutKind.Sequential)]
public unsafe partial struct PhysicalDeviceHostQueryResetFeatures
{
	public const Vk.StructureType TYPE = Vk.StructureType.PhysicalDeviceHostQueryResetFeatures;

	public Vk.StructureType sType;
	public void* pNext;
	public Vk.Bool32 HostQueryReset;

	/// <summary>Creates a new PhysicalDeviceHostQueryResetFeatures value with the correct type field.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void New(out PhysicalDeviceHostQueryResetFeatures value) => value = new() { sType = TYPE };
	/// <summary>Initializes the sType and pNext fields to the correct default values.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void Init(ref PhysicalDeviceHostQueryResetFeatures value) { value.sType = TYPE; value.pNext = null; }
}

[StructLayout(LayoutKind.Sequential)]
public unsafe partial struct DeviceQueueGlobalPriorityCreateInfo
{
	public const Vk.StructureType TYPE = Vk.StructureType.DeviceQueueGlobalPriorityCreateInfoEXT;

	public Vk.StructureType sType;
	public void* pNext;
	public Vk.EXT.QueueGlobalPriority GlobalPriority;

	/// <summary>Creates a new DeviceQueueGlobalPriorityCreateInfo value with the correct type field.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void New(out DeviceQueueGlobalPriorityCreateInfo value) => value = new() { sType = TYPE };
	/// <summary>Initializes the sType and pNext fields to the correct default values.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void Init(ref DeviceQueueGlobalPriorityCreateInfo value) { value.sType = TYPE; value.pNext = null; }
}

[StructLayout(LayoutKind.Sequential)]
public unsafe partial struct DebugUtilsObjectNameInfo
{
	public const Vk.StructureType TYPE = Vk.StructureType.DebugUtilsObjectNameInfoEXT;

	public Vk.StructureType sType;
	public void* pNext;
	public Vk.ObjectType ObjectType;
	public ulong ObjectHandle;
	public byte* ObjectName;

	/// <summary>Creates a new DebugUtilsObjectNameInfo value with the correct type field.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void New(out DebugUtilsObjectNameInfo value) => value = new() { sType = TYPE };
	/// <summary>Initializes the sType and pNext fields to the correct default values.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void Init(ref DebugUtilsObjectNameInfo value) { value.sType = TYPE; value.pNext = null; }
}

[StructLayout(LayoutKind.Sequential)]
public unsafe partial struct DebugUtilsObjectTagInfo
{
	public const Vk.StructureType TYPE = Vk.StructureType.DebugUtilsObjectTagInfoEXT;

	public Vk.StructureType sType;
	public void* pNext;
	public Vk.ObjectType ObjectType;
	public ulong ObjectHandle;
	public ulong TagName;
	public ulong TagSize;
	public void* Tag;

	/// <summary>Creates a new DebugUtilsObjectTagInfo value with the correct type field.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void New(out DebugUtilsObjectTagInfo value) => value = new() { sType = TYPE };
	/// <summary>Initializes the sType and pNext fields to the correct default values.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void Init(ref DebugUtilsObjectTagInfo value) { value.sType = TYPE; value.pNext = null; }
}

[StructLayout(LayoutKind.Sequential)]
public unsafe partial struct DebugUtilsLabel
{
	public const Vk.StructureType TYPE = Vk.StructureType.DebugUtilsLabelEXT;

	public Vk.StructureType sType;
	public void* pNext;
	public byte* LabelName;
	public fixed float Color[4];

	/// <summary>Creates a new DebugUtilsLabel value with the correct type field.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void New(out DebugUtilsLabel value) => value = new() { sType = TYPE };
	/// <summary>Initializes the sType and pNext fields to the correct default values.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void Init(ref DebugUtilsLabel value) { value.sType = TYPE; value.pNext = null; }
}

[StructLayout(LayoutKind.Sequential)]
public unsafe partial struct DebugUtilsMessengerCreateInfo
{
	public const Vk.StructureType TYPE = Vk.StructureType.DebugUtilsMessengerCreateInfoEXT;

	public Vk.StructureType sType;
	public void* pNext;
	public Vk.EXT.DebugUtilsMessengerCreateFlags Flags;
	public Vk.EXT.DebugUtilsMessageSeverityFlags MessageSeverity;
	public Vk.EXT.DebugUtilsMessageTypeFlags MessageType;
	public delegate* managed<Vk.EXT.DebugUtilsMessageSeverityFlags, Vk.EXT.DebugUtilsMessageTypeFlags, Vk.EXT.DebugUtilsMessengerCallbackData*, void*, Vk.Bool32> UserCallback;
	public void* UserData;

	/// <summary>Creates a new DebugUtilsMessengerCreateInfo value with the correct type field.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void New(out DebugUtilsMessengerCreateInfo value) => value = new() { sType = TYPE };
	/// <summary>Initializes the sType and pNext fields to the correct default values.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void Init(ref DebugUtilsMessengerCreateInfo value) { value.sType = TYPE; value.pNext = null; }
}

[StructLayout(LayoutKind.Sequential)]
public unsafe partial struct DebugUtilsMessengerCallbackData
{
	public const Vk.StructureType TYPE = Vk.StructureType.DebugUtilsMessengerCallbackDataEXT;

	public Vk.StructureType sType;
	public void* pNext;
	public Vk.EXT.DebugUtilsMessengerCallbackDataFlags Flags;
	public byte* MessageIdName;
	public int MessageIdNumber;
	public byte* Message;
	public uint QueueLabelCount;
	public Vk.EXT.DebugUtilsLabel* QueueLabels;
	public uint CmdBufLabelCount;
	public Vk.EXT.DebugUtilsLabel* CmdBufLabels;
	public uint ObjectCount;
	public Vk.EXT.DebugUtilsObjectNameInfo* Objects;

	/// <summary>Creates a new DebugUtilsMessengerCallbackData value with the correct type field.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void New(out DebugUtilsMessengerCallbackData value) => value = new() { sType = TYPE };
	/// <summary>Initializes the sType and pNext fields to the correct default values.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void Init(ref DebugUtilsMessengerCallbackData value) { value.sType = TYPE; value.pNext = null; }
}

[StructLayout(LayoutKind.Sequential)]
public unsafe partial struct ImportMemoryHostPointerInfo
{
	public const Vk.StructureType TYPE = Vk.StructureType.ImportMemoryHostPointerInfoEXT;

	public Vk.StructureType sType;
	public void* pNext;
	public Vk.ExternalMemoryHandleTypeFlags HandleType;
	public void* HostPointer;

	/// <summary>Creates a new ImportMemoryHostPointerInfo value with the correct type field.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void New(out ImportMemoryHostPointerInfo value) => value = new() { sType = TYPE };
	/// <summary>Initializes the sType and pNext fields to the correct default values.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void Init(ref ImportMemoryHostPointerInfo value) { value.sType = TYPE; value.pNext = null; }
}

[StructLayout(LayoutKind.Sequential)]
public unsafe partial struct MemoryHostPointerProperties
{
	public const Vk.StructureType TYPE = Vk.StructureType.MemoryHostPointerPropertiesEXT;

	public Vk.StructureType sType;
	public void* pNext;
	public uint MemoryTypeBits;

	/// <summary>Creates a new MemoryHostPointerProperties value with the correct type field.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void New(out MemoryHostPointerProperties value) => value = new() { sType = TYPE };
	/// <summary>Initializes the sType and pNext fields to the correct default values.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void Init(ref MemoryHostPointerProperties value) { value.sType = TYPE; value.pNext = null; }
}

[StructLayout(LayoutKind.Sequential)]
public unsafe partial struct PhysicalDeviceExternalMemoryHostProperties
{
	public const Vk.StructureType TYPE = Vk.StructureType.PhysicalDeviceExternalMemoryHostPropertiesEXT;

	public Vk.StructureType sType;
	public void* pNext;
	public Vk.DeviceSize MinImportedHostPointerAlignment;

	/// <summary>Creates a new PhysicalDeviceExternalMemoryHostProperties value with the correct type field.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void New(out PhysicalDeviceExternalMemoryHostProperties value) => value = new() { sType = TYPE };
	/// <summary>Initializes the sType and pNext fields to the correct default values.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void Init(ref PhysicalDeviceExternalMemoryHostProperties value) { value.sType = TYPE; value.pNext = null; }
}

[StructLayout(LayoutKind.Sequential)]
public unsafe partial struct PhysicalDeviceConservativeRasterizationProperties
{
	public const Vk.StructureType TYPE = Vk.StructureType.PhysicalDeviceConservativeRasterizationPropertiesEXT;

	public Vk.StructureType sType;
	public void* pNext;
	public float PrimitiveOverestimationSize;
	public float MaxExtraPrimitiveOverestimationSize;
	public float ExtraPrimitiveOverestimationSizeGranularity;
	public Vk.Bool32 PrimitiveUnderestimation;
	public Vk.Bool32 ConservativePointAndLineRasterization;
	public Vk.Bool32 DegenerateTrianglesRasterized;
	public Vk.Bool32 DegenerateLinesRasterized;
	public Vk.Bool32 FullyCoveredFragmentShaderInputVariable;
	public Vk.Bool32 ConservativeRasterizationPostDepthCoverage;

	/// <summary>Creates a new PhysicalDeviceConservativeRasterizationProperties value with the correct type field.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void New(out PhysicalDeviceConservativeRasterizationProperties value) => value = new() { sType = TYPE };
	/// <summary>Initializes the sType and pNext fields to the correct default values.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void Init(ref PhysicalDeviceConservativeRasterizationProperties value) { value.sType = TYPE; value.pNext = null; }
}

[StructLayout(LayoutKind.Sequential)]
public unsafe partial struct CalibratedTimestampInfo
{
	public const Vk.StructureType TYPE = Vk.StructureType.CalibratedTimestampInfoEXT;

	public Vk.StructureType sType;
	public void* pNext;
	public Vk.EXT.TimeDomain TimeDomain;

	/// <summary>Creates a new CalibratedTimestampInfo value with the correct type field.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void New(out CalibratedTimestampInfo value) => value = new() { sType = TYPE };
	/// <summary>Initializes the sType and pNext fields to the correct default values.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void Init(ref CalibratedTimestampInfo value) { value.sType = TYPE; value.pNext = null; }
}

[StructLayout(LayoutKind.Sequential)]
public unsafe partial struct PipelineRasterizationConservativeStateCreateInfo
{
	public const Vk.StructureType TYPE = Vk.StructureType.PipelineRasterizationConservativeStateCreateInfoEXT;

	public Vk.StructureType sType;
	public void* pNext;
	public Vk.EXT.PipelineRasterizationConservativeStateCreateFlags Flags;
	public Vk.EXT.ConservativeRasterizationMode ConservativeRasterizationMode;
	public float ExtraPrimitiveOverestimationSize;

	/// <summary>Creates a new PipelineRasterizationConservativeStateCreateInfo value with the correct type field.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void New(out PipelineRasterizationConservativeStateCreateInfo value) => value = new() { sType = TYPE };
	/// <summary>Initializes the sType and pNext fields to the correct default values.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void Init(ref PipelineRasterizationConservativeStateCreateInfo value) { value.sType = TYPE; value.pNext = null; }
}

[StructLayout(LayoutKind.Sequential)]
public unsafe partial struct PhysicalDeviceDescriptorIndexingFeatures
{
	public const Vk.StructureType TYPE = Vk.StructureType.PhysicalDeviceDescriptorIndexingFeatures;

	public Vk.StructureType sType;
	public void* pNext;
	public Vk.Bool32 ShaderInputAttachmentArrayDynamicIndexing;
	public Vk.Bool32 ShaderUniformTexelBufferArrayDynamicIndexing;
	public Vk.Bool32 ShaderStorageTexelBufferArrayDynamicIndexing;
	public Vk.Bool32 ShaderUniformBufferArrayNonUniformIndexing;
	public Vk.Bool32 ShaderSampledImageArrayNonUniformIndexing;
	public Vk.Bool32 ShaderStorageBufferArrayNonUniformIndexing;
	public Vk.Bool32 ShaderStorageImageArrayNonUniformIndexing;
	public Vk.Bool32 ShaderInputAttachmentArrayNonUniformIndexing;
	public Vk.Bool32 ShaderUniformTexelBufferArrayNonUniformIndexing;
	public Vk.Bool32 ShaderStorageTexelBufferArrayNonUniformIndexing;
	public Vk.Bool32 DescriptorBindingUniformBufferUpdateAfterBind;
	public Vk.Bool32 DescriptorBindingSampledImageUpdateAfterBind;
	public Vk.Bool32 DescriptorBindingStorageImageUpdateAfterBind;
	public Vk.Bool32 DescriptorBindingStorageBufferUpdateAfterBind;
	public Vk.Bool32 DescriptorBindingUniformTexelBufferUpdateAfterBind;
	public Vk.Bool32 DescriptorBindingStorageTexelBufferUpdateAfterBind;
	public Vk.Bool32 DescriptorBindingUpdateUnusedWhilePending;
	public Vk.Bool32 DescriptorBindingPartiallyBound;
	public Vk.Bool32 DescriptorBindingVariableDescriptorCount;
	public Vk.Bool32 RuntimeDescriptorArray;

	/// <summary>Creates a new PhysicalDeviceDescriptorIndexingFeatures value with the correct type field.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void New(out PhysicalDeviceDescriptorIndexingFeatures value) => value = new() { sType = TYPE };
	/// <summary>Initializes the sType and pNext fields to the correct default values.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void Init(ref PhysicalDeviceDescriptorIndexingFeatures value) { value.sType = TYPE; value.pNext = null; }
}

[StructLayout(LayoutKind.Sequential)]
public unsafe partial struct PhysicalDeviceDescriptorIndexingProperties
{
	public const Vk.StructureType TYPE = Vk.StructureType.PhysicalDeviceDescriptorIndexingProperties;

	public Vk.StructureType sType;
	public void* pNext;
	public uint MaxUpdateAfterBindDescriptorsInAllPools;
	public Vk.Bool32 ShaderUniformBufferArrayNonUniformIndexingNative;
	public Vk.Bool32 ShaderSampledImageArrayNonUniformIndexingNative;
	public Vk.Bool32 ShaderStorageBufferArrayNonUniformIndexingNative;
	public Vk.Bool32 ShaderStorageImageArrayNonUniformIndexingNative;
	public Vk.Bool32 ShaderInputAttachmentArrayNonUniformIndexingNative;
	public Vk.Bool32 RobustBufferAccessUpdateAfterBind;
	public Vk.Bool32 QuadDivergentImplicitLod;
	public uint MaxPerStageDescriptorUpdateAfterBindSamplers;
	public uint MaxPerStageDescriptorUpdateAfterBindUniformBuffers;
	public uint MaxPerStageDescriptorUpdateAfterBindStorageBuffers;
	public uint MaxPerStageDescriptorUpdateAfterBindSampledImages;
	public uint MaxPerStageDescriptorUpdateAfterBindStorageImages;
	public uint MaxPerStageDescriptorUpdateAfterBindInputAttachments;
	public uint MaxPerStageUpdateAfterBindResources;
	public uint MaxDescriptorSetUpdateAfterBindSamplers;
	public uint MaxDescriptorSetUpdateAfterBindUniformBuffers;
	public uint MaxDescriptorSetUpdateAfterBindUniformBuffersDynamic;
	public uint MaxDescriptorSetUpdateAfterBindStorageBuffers;
	public uint MaxDescriptorSetUpdateAfterBindStorageBuffersDynamic;
	public uint MaxDescriptorSetUpdateAfterBindSampledImages;
	public uint MaxDescriptorSetUpdateAfterBindStorageImages;
	public uint MaxDescriptorSetUpdateAfterBindInputAttachments;

	/// <summary>Creates a new PhysicalDeviceDescriptorIndexingProperties value with the correct type field.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void New(out PhysicalDeviceDescriptorIndexingProperties value) => value = new() { sType = TYPE };
	/// <summary>Initializes the sType and pNext fields to the correct default values.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void Init(ref PhysicalDeviceDescriptorIndexingProperties value) { value.sType = TYPE; value.pNext = null; }
}

[StructLayout(LayoutKind.Sequential)]
public unsafe partial struct DescriptorSetLayoutBindingFlagsCreateInfo
{
	public const Vk.StructureType TYPE = Vk.StructureType.DescriptorSetLayoutBindingFlagsCreateInfo;

	public Vk.StructureType sType;
	public void* pNext;
	public uint BindingCount;
	public Vk.DescriptorBindingFlags* BindingFlags;

	/// <summary>Creates a new DescriptorSetLayoutBindingFlagsCreateInfo value with the correct type field.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void New(out DescriptorSetLayoutBindingFlagsCreateInfo value) => value = new() { sType = TYPE };
	/// <summary>Initializes the sType and pNext fields to the correct default values.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void Init(ref DescriptorSetLayoutBindingFlagsCreateInfo value) { value.sType = TYPE; value.pNext = null; }
}

[StructLayout(LayoutKind.Sequential)]
public unsafe partial struct DescriptorSetVariableDescriptorCountAllocateInfo
{
	public const Vk.StructureType TYPE = Vk.StructureType.DescriptorSetVariableDescriptorCountAllocateInfo;

	public Vk.StructureType sType;
	public void* pNext;
	public uint DescriptorSetCount;
	public uint* DescriptorCounts;

	/// <summary>Creates a new DescriptorSetVariableDescriptorCountAllocateInfo value with the correct type field.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void New(out DescriptorSetVariableDescriptorCountAllocateInfo value) => value = new() { sType = TYPE };
	/// <summary>Initializes the sType and pNext fields to the correct default values.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void Init(ref DescriptorSetVariableDescriptorCountAllocateInfo value) { value.sType = TYPE; value.pNext = null; }
}

[StructLayout(LayoutKind.Sequential)]
public unsafe partial struct DescriptorSetVariableDescriptorCountLayoutSupport
{
	public const Vk.StructureType TYPE = Vk.StructureType.DescriptorSetVariableDescriptorCountLayoutSupport;

	public Vk.StructureType sType;
	public void* pNext;
	public uint MaxVariableDescriptorCount;

	/// <summary>Creates a new DescriptorSetVariableDescriptorCountLayoutSupport value with the correct type field.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void New(out DescriptorSetVariableDescriptorCountLayoutSupport value) => value = new() { sType = TYPE };
	/// <summary>Initializes the sType and pNext fields to the correct default values.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void Init(ref DescriptorSetVariableDescriptorCountLayoutSupport value) { value.sType = TYPE; value.pNext = null; }
}

[StructLayout(LayoutKind.Sequential)]
public unsafe partial struct VertexInputBindingDivisorDescription
{
	public uint Binding;
	public uint Divisor;
}

[StructLayout(LayoutKind.Sequential)]
public unsafe partial struct PipelineVertexInputDivisorStateCreateInfo
{
	public const Vk.StructureType TYPE = Vk.StructureType.PipelineVertexInputDivisorStateCreateInfoEXT;

	public Vk.StructureType sType;
	public void* pNext;
	public uint VertexBindingDivisorCount;
	public Vk.EXT.VertexInputBindingDivisorDescription* VertexBindingDivisors;

	/// <summary>Creates a new PipelineVertexInputDivisorStateCreateInfo value with the correct type field.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void New(out PipelineVertexInputDivisorStateCreateInfo value) => value = new() { sType = TYPE };
	/// <summary>Initializes the sType and pNext fields to the correct default values.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void Init(ref PipelineVertexInputDivisorStateCreateInfo value) { value.sType = TYPE; value.pNext = null; }
}

[StructLayout(LayoutKind.Sequential)]
public unsafe partial struct PhysicalDeviceVertexAttributeDivisorProperties
{
	public const Vk.StructureType TYPE = Vk.StructureType.PhysicalDeviceVertexAttributeDivisorPropertiesEXT;

	public Vk.StructureType sType;
	public void* pNext;
	public uint MaxVertexAttribDivisor;

	/// <summary>Creates a new PhysicalDeviceVertexAttributeDivisorProperties value with the correct type field.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void New(out PhysicalDeviceVertexAttributeDivisorProperties value) => value = new() { sType = TYPE };
	/// <summary>Initializes the sType and pNext fields to the correct default values.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void Init(ref PhysicalDeviceVertexAttributeDivisorProperties value) { value.sType = TYPE; value.pNext = null; }
}

[StructLayout(LayoutKind.Sequential)]
public unsafe partial struct PhysicalDevicePCIBusInfoProperties
{
	public const Vk.StructureType TYPE = Vk.StructureType.PhysicalDevicePciBusInfoPropertiesEXT;

	public Vk.StructureType sType;
	public void* pNext;
	public uint PciDomain;
	public uint PciBus;
	public uint PciDevice;
	public uint PciFunction;

	/// <summary>Creates a new PhysicalDevicePCIBusInfoProperties value with the correct type field.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void New(out PhysicalDevicePCIBusInfoProperties value) => value = new() { sType = TYPE };
	/// <summary>Initializes the sType and pNext fields to the correct default values.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void Init(ref PhysicalDevicePCIBusInfoProperties value) { value.sType = TYPE; value.pNext = null; }
}

[StructLayout(LayoutKind.Sequential)]
public unsafe partial struct CommandBufferInheritanceConditionalRenderingInfo
{
	public const Vk.StructureType TYPE = Vk.StructureType.CommandBufferInheritanceConditionalRenderingInfoEXT;

	public Vk.StructureType sType;
	public void* pNext;
	public Vk.Bool32 ConditionalRenderingEnable;

	/// <summary>Creates a new CommandBufferInheritanceConditionalRenderingInfo value with the correct type field.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void New(out CommandBufferInheritanceConditionalRenderingInfo value) => value = new() { sType = TYPE };
	/// <summary>Initializes the sType and pNext fields to the correct default values.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void Init(ref CommandBufferInheritanceConditionalRenderingInfo value) { value.sType = TYPE; value.pNext = null; }
}

[StructLayout(LayoutKind.Sequential)]
public unsafe partial struct PhysicalDeviceConditionalRenderingFeatures
{
	public const Vk.StructureType TYPE = Vk.StructureType.PhysicalDeviceConditionalRenderingFeaturesEXT;

	public Vk.StructureType sType;
	public void* pNext;
	public Vk.Bool32 ConditionalRendering;
	public Vk.Bool32 InheritedConditionalRendering;

	/// <summary>Creates a new PhysicalDeviceConditionalRenderingFeatures value with the correct type field.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void New(out PhysicalDeviceConditionalRenderingFeatures value) => value = new() { sType = TYPE };
	/// <summary>Initializes the sType and pNext fields to the correct default values.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void Init(ref PhysicalDeviceConditionalRenderingFeatures value) { value.sType = TYPE; value.pNext = null; }
}

[StructLayout(LayoutKind.Sequential)]
public unsafe partial struct PhysicalDeviceShaderAtomicFloatFeatures
{
	public const Vk.StructureType TYPE = Vk.StructureType.PhysicalDeviceShaderAtomicFloatFeaturesEXT;

	public Vk.StructureType sType;
	public void* pNext;
	public Vk.Bool32 ShaderBufferFloat32Atomics;
	public Vk.Bool32 ShaderBufferFloat32AtomicAdd;
	public Vk.Bool32 ShaderBufferFloat64Atomics;
	public Vk.Bool32 ShaderBufferFloat64AtomicAdd;
	public Vk.Bool32 ShaderSharedFloat32Atomics;
	public Vk.Bool32 ShaderSharedFloat32AtomicAdd;
	public Vk.Bool32 ShaderSharedFloat64Atomics;
	public Vk.Bool32 ShaderSharedFloat64AtomicAdd;
	public Vk.Bool32 ShaderImageFloat32Atomics;
	public Vk.Bool32 ShaderImageFloat32AtomicAdd;
	public Vk.Bool32 SparseImageFloat32Atomics;
	public Vk.Bool32 SparseImageFloat32AtomicAdd;

	/// <summary>Creates a new PhysicalDeviceShaderAtomicFloatFeatures value with the correct type field.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void New(out PhysicalDeviceShaderAtomicFloatFeatures value) => value = new() { sType = TYPE };
	/// <summary>Initializes the sType and pNext fields to the correct default values.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void Init(ref PhysicalDeviceShaderAtomicFloatFeatures value) { value.sType = TYPE; value.pNext = null; }
}

[StructLayout(LayoutKind.Sequential)]
public unsafe partial struct PhysicalDeviceVertexAttributeDivisorFeatures
{
	public const Vk.StructureType TYPE = Vk.StructureType.PhysicalDeviceVertexAttributeDivisorFeaturesEXT;

	public Vk.StructureType sType;
	public void* pNext;
	public Vk.Bool32 VertexAttributeInstanceRateDivisor;
	public Vk.Bool32 VertexAttributeInstanceRateZeroDivisor;

	/// <summary>Creates a new PhysicalDeviceVertexAttributeDivisorFeatures value with the correct type field.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void New(out PhysicalDeviceVertexAttributeDivisorFeatures value) => value = new() { sType = TYPE };
	/// <summary>Initializes the sType and pNext fields to the correct default values.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void Init(ref PhysicalDeviceVertexAttributeDivisorFeatures value) { value.sType = TYPE; value.pNext = null; }
}

[StructLayout(LayoutKind.Sequential)]
public unsafe partial struct ImageViewASTCDecodeMode
{
	public const Vk.StructureType TYPE = Vk.StructureType.ImageViewAstcDecodeModeEXT;

	public Vk.StructureType sType;
	public void* pNext;
	public Vk.Format DecodeMode;

	/// <summary>Creates a new ImageViewASTCDecodeMode value with the correct type field.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void New(out ImageViewASTCDecodeMode value) => value = new() { sType = TYPE };
	/// <summary>Initializes the sType and pNext fields to the correct default values.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void Init(ref ImageViewASTCDecodeMode value) { value.sType = TYPE; value.pNext = null; }
}

[StructLayout(LayoutKind.Sequential)]
public unsafe partial struct PhysicalDeviceASTCDecodeFeatures
{
	public const Vk.StructureType TYPE = Vk.StructureType.PhysicalDeviceAstcDecodeFeaturesEXT;

	public Vk.StructureType sType;
	public void* pNext;
	public Vk.Bool32 DecodeModeSharedExponent;

	/// <summary>Creates a new PhysicalDeviceASTCDecodeFeatures value with the correct type field.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void New(out PhysicalDeviceASTCDecodeFeatures value) => value = new() { sType = TYPE };
	/// <summary>Initializes the sType and pNext fields to the correct default values.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void Init(ref PhysicalDeviceASTCDecodeFeatures value) { value.sType = TYPE; value.pNext = null; }
}

[StructLayout(LayoutKind.Sequential)]
public unsafe partial struct PhysicalDeviceTransformFeedbackFeatures
{
	public const Vk.StructureType TYPE = Vk.StructureType.PhysicalDeviceTransformFeedbackFeaturesEXT;

	public Vk.StructureType sType;
	public void* pNext;
	public Vk.Bool32 TransformFeedback;
	public Vk.Bool32 GeometryStreams;

	/// <summary>Creates a new PhysicalDeviceTransformFeedbackFeatures value with the correct type field.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void New(out PhysicalDeviceTransformFeedbackFeatures value) => value = new() { sType = TYPE };
	/// <summary>Initializes the sType and pNext fields to the correct default values.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void Init(ref PhysicalDeviceTransformFeedbackFeatures value) { value.sType = TYPE; value.pNext = null; }
}

[StructLayout(LayoutKind.Sequential)]
public unsafe partial struct PhysicalDeviceTransformFeedbackProperties
{
	public const Vk.StructureType TYPE = Vk.StructureType.PhysicalDeviceTransformFeedbackPropertiesEXT;

	public Vk.StructureType sType;
	public void* pNext;
	public uint MaxTransformFeedbackStreams;
	public uint MaxTransformFeedbackBuffers;
	public Vk.DeviceSize MaxTransformFeedbackBufferSize;
	public uint MaxTransformFeedbackStreamDataSize;
	public uint MaxTransformFeedbackBufferDataSize;
	public uint MaxTransformFeedbackBufferDataStride;
	public Vk.Bool32 TransformFeedbackQueries;
	public Vk.Bool32 TransformFeedbackStreamsLinesTriangles;
	public Vk.Bool32 TransformFeedbackRasterizationStreamSelect;
	public Vk.Bool32 TransformFeedbackDraw;

	/// <summary>Creates a new PhysicalDeviceTransformFeedbackProperties value with the correct type field.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void New(out PhysicalDeviceTransformFeedbackProperties value) => value = new() { sType = TYPE };
	/// <summary>Initializes the sType and pNext fields to the correct default values.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void Init(ref PhysicalDeviceTransformFeedbackProperties value) { value.sType = TYPE; value.pNext = null; }
}

[StructLayout(LayoutKind.Sequential)]
public unsafe partial struct PipelineRasterizationStateStreamCreateInfo
{
	public const Vk.StructureType TYPE = Vk.StructureType.PipelineRasterizationStateStreamCreateInfoEXT;

	public Vk.StructureType sType;
	public void* pNext;
	public Vk.EXT.PipelineRasterizationStateStreamCreateFlags Flags;
	public uint RasterizationStream;

	/// <summary>Creates a new PipelineRasterizationStateStreamCreateInfo value with the correct type field.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void New(out PipelineRasterizationStateStreamCreateInfo value) => value = new() { sType = TYPE };
	/// <summary>Initializes the sType and pNext fields to the correct default values.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void Init(ref PipelineRasterizationStateStreamCreateInfo value) { value.sType = TYPE; value.pNext = null; }
}

[StructLayout(LayoutKind.Sequential)]
public unsafe partial struct DrmFormatModifierPropertiesList
{
	public const Vk.StructureType TYPE = Vk.StructureType.DrmFormatModifierPropertiesListEXT;

	public Vk.StructureType sType;
	public void* pNext;
	public uint DrmFormatModifierCount;
	public Vk.EXT.DrmFormatModifierProperties* DrmFormatModifierProperties;

	/// <summary>Creates a new DrmFormatModifierPropertiesList value with the correct type field.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void New(out DrmFormatModifierPropertiesList value) => value = new() { sType = TYPE };
	/// <summary>Initializes the sType and pNext fields to the correct default values.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void Init(ref DrmFormatModifierPropertiesList value) { value.sType = TYPE; value.pNext = null; }
}

[StructLayout(LayoutKind.Sequential)]
public unsafe partial struct DrmFormatModifierProperties
{
	public ulong DrmFormatModifier;
	public uint DrmFormatModifierPlaneCount;
	public Vk.FormatFeatureFlags DrmFormatModifierTilingFeatures;
}

[StructLayout(LayoutKind.Sequential)]
public unsafe partial struct PhysicalDeviceImageDrmFormatModifierInfo
{
	public const Vk.StructureType TYPE = Vk.StructureType.PhysicalDeviceImageDrmFormatModifierInfoEXT;

	public Vk.StructureType sType;
	public void* pNext;
	public ulong DrmFormatModifier;
	public Vk.SharingMode SharingMode;
	public uint QueueFamilyIndexCount;
	public uint* QueueFamilyIndices;

	/// <summary>Creates a new PhysicalDeviceImageDrmFormatModifierInfo value with the correct type field.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void New(out PhysicalDeviceImageDrmFormatModifierInfo value) => value = new() { sType = TYPE };
	/// <summary>Initializes the sType and pNext fields to the correct default values.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void Init(ref PhysicalDeviceImageDrmFormatModifierInfo value) { value.sType = TYPE; value.pNext = null; }
}

[StructLayout(LayoutKind.Sequential)]
public unsafe partial struct ImageDrmFormatModifierListCreateInfo
{
	public const Vk.StructureType TYPE = Vk.StructureType.ImageDrmFormatModifierListCreateInfoEXT;

	public Vk.StructureType sType;
	public void* pNext;
	public uint DrmFormatModifierCount;
	public ulong* DrmFormatModifiers;

	/// <summary>Creates a new ImageDrmFormatModifierListCreateInfo value with the correct type field.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void New(out ImageDrmFormatModifierListCreateInfo value) => value = new() { sType = TYPE };
	/// <summary>Initializes the sType and pNext fields to the correct default values.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void Init(ref ImageDrmFormatModifierListCreateInfo value) { value.sType = TYPE; value.pNext = null; }
}

[StructLayout(LayoutKind.Sequential)]
public unsafe partial struct ImageDrmFormatModifierExplicitCreateInfo
{
	public const Vk.StructureType TYPE = Vk.StructureType.ImageDrmFormatModifierExplicitCreateInfoEXT;

	public Vk.StructureType sType;
	public void* pNext;
	public ulong DrmFormatModifier;
	public uint DrmFormatModifierPlaneCount;
	public Vk.SubresourceLayout* PlaneLayouts;

	/// <summary>Creates a new ImageDrmFormatModifierExplicitCreateInfo value with the correct type field.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void New(out ImageDrmFormatModifierExplicitCreateInfo value) => value = new() { sType = TYPE };
	/// <summary>Initializes the sType and pNext fields to the correct default values.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void Init(ref ImageDrmFormatModifierExplicitCreateInfo value) { value.sType = TYPE; value.pNext = null; }
}

[StructLayout(LayoutKind.Sequential)]
public unsafe partial struct ImageDrmFormatModifierProperties
{
	public const Vk.StructureType TYPE = Vk.StructureType.ImageDrmFormatModifierPropertiesEXT;

	public Vk.StructureType sType;
	public void* pNext;
	public ulong DrmFormatModifier;

	/// <summary>Creates a new ImageDrmFormatModifierProperties value with the correct type field.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void New(out ImageDrmFormatModifierProperties value) => value = new() { sType = TYPE };
	/// <summary>Initializes the sType and pNext fields to the correct default values.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void Init(ref ImageDrmFormatModifierProperties value) { value.sType = TYPE; value.pNext = null; }
}

[StructLayout(LayoutKind.Sequential)]
public unsafe partial struct ImageStencilUsageCreateInfo
{
	public const Vk.StructureType TYPE = Vk.StructureType.ImageStencilUsageCreateInfo;

	public Vk.StructureType sType;
	public void* pNext;
	public Vk.ImageUsageFlags StencilUsage;

	/// <summary>Creates a new ImageStencilUsageCreateInfo value with the correct type field.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void New(out ImageStencilUsageCreateInfo value) => value = new() { sType = TYPE };
	/// <summary>Initializes the sType and pNext fields to the correct default values.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void Init(ref ImageStencilUsageCreateInfo value) { value.sType = TYPE; value.pNext = null; }
}

[StructLayout(LayoutKind.Sequential)]
public unsafe partial struct PhysicalDeviceFragmentDensityMapFeatures
{
	public const Vk.StructureType TYPE = Vk.StructureType.PhysicalDeviceFragmentDensityMapFeaturesEXT;

	public Vk.StructureType sType;
	public void* pNext;
	public Vk.Bool32 FragmentDensityMap;
	public Vk.Bool32 FragmentDensityMapDynamic;
	public Vk.Bool32 FragmentDensityMapNonSubsampledImages;

	/// <summary>Creates a new PhysicalDeviceFragmentDensityMapFeatures value with the correct type field.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void New(out PhysicalDeviceFragmentDensityMapFeatures value) => value = new() { sType = TYPE };
	/// <summary>Initializes the sType and pNext fields to the correct default values.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void Init(ref PhysicalDeviceFragmentDensityMapFeatures value) { value.sType = TYPE; value.pNext = null; }
}

[StructLayout(LayoutKind.Sequential)]
public unsafe partial struct PhysicalDeviceFragmentDensityMap2Features
{
	public const Vk.StructureType TYPE = Vk.StructureType.PhysicalDeviceFragmentDensityMap2FeaturesEXT;

	public Vk.StructureType sType;
	public void* pNext;
	public Vk.Bool32 FragmentDensityMapDeferred;

	/// <summary>Creates a new PhysicalDeviceFragmentDensityMap2Features value with the correct type field.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void New(out PhysicalDeviceFragmentDensityMap2Features value) => value = new() { sType = TYPE };
	/// <summary>Initializes the sType and pNext fields to the correct default values.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void Init(ref PhysicalDeviceFragmentDensityMap2Features value) { value.sType = TYPE; value.pNext = null; }
}

[StructLayout(LayoutKind.Sequential)]
public unsafe partial struct PhysicalDeviceFragmentDensityMapProperties
{
	public const Vk.StructureType TYPE = Vk.StructureType.PhysicalDeviceFragmentDensityMapPropertiesEXT;

	public Vk.StructureType sType;
	public void* pNext;
	public Vk.Extent2D MinFragmentDensityTexelSize;
	public Vk.Extent2D MaxFragmentDensityTexelSize;
	public Vk.Bool32 FragmentDensityInvocations;

	/// <summary>Creates a new PhysicalDeviceFragmentDensityMapProperties value with the correct type field.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void New(out PhysicalDeviceFragmentDensityMapProperties value) => value = new() { sType = TYPE };
	/// <summary>Initializes the sType and pNext fields to the correct default values.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void Init(ref PhysicalDeviceFragmentDensityMapProperties value) { value.sType = TYPE; value.pNext = null; }
}

[StructLayout(LayoutKind.Sequential)]
public unsafe partial struct PhysicalDeviceFragmentDensityMap2Properties
{
	public const Vk.StructureType TYPE = Vk.StructureType.PhysicalDeviceFragmentDensityMap2PropertiesEXT;

	public Vk.StructureType sType;
	public void* pNext;
	public Vk.Bool32 SubsampledLoads;
	public Vk.Bool32 SubsampledCoarseReconstructionEarlyAccess;
	public uint MaxSubsampledArrayLayers;
	public uint MaxDescriptorSetSubsampledSamplers;

	/// <summary>Creates a new PhysicalDeviceFragmentDensityMap2Properties value with the correct type field.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void New(out PhysicalDeviceFragmentDensityMap2Properties value) => value = new() { sType = TYPE };
	/// <summary>Initializes the sType and pNext fields to the correct default values.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void Init(ref PhysicalDeviceFragmentDensityMap2Properties value) { value.sType = TYPE; value.pNext = null; }
}

[StructLayout(LayoutKind.Sequential)]
public unsafe partial struct RenderPassFragmentDensityMapCreateInfo
{
	public const Vk.StructureType TYPE = Vk.StructureType.RenderPassFragmentDensityMapCreateInfoEXT;

	public Vk.StructureType sType;
	public void* pNext;
	public Vk.AttachmentReference FragmentDensityMapAttachment;

	/// <summary>Creates a new RenderPassFragmentDensityMapCreateInfo value with the correct type field.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void New(out RenderPassFragmentDensityMapCreateInfo value) => value = new() { sType = TYPE };
	/// <summary>Initializes the sType and pNext fields to the correct default values.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void Init(ref RenderPassFragmentDensityMapCreateInfo value) { value.sType = TYPE; value.pNext = null; }
}

[StructLayout(LayoutKind.Sequential)]
public unsafe partial struct PhysicalDeviceScalarBlockLayoutFeatures
{
	public const Vk.StructureType TYPE = Vk.StructureType.PhysicalDeviceScalarBlockLayoutFeatures;

	public Vk.StructureType sType;
	public void* pNext;
	public Vk.Bool32 ScalarBlockLayout;

	/// <summary>Creates a new PhysicalDeviceScalarBlockLayoutFeatures value with the correct type field.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void New(out PhysicalDeviceScalarBlockLayoutFeatures value) => value = new() { sType = TYPE };
	/// <summary>Initializes the sType and pNext fields to the correct default values.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void Init(ref PhysicalDeviceScalarBlockLayoutFeatures value) { value.sType = TYPE; value.pNext = null; }
}

[StructLayout(LayoutKind.Sequential)]
public unsafe partial struct PhysicalDeviceDepthClipEnableFeatures
{
	public const Vk.StructureType TYPE = Vk.StructureType.PhysicalDeviceDepthClipEnableFeaturesEXT;

	public Vk.StructureType sType;
	public void* pNext;
	public Vk.Bool32 DepthClipEnable;

	/// <summary>Creates a new PhysicalDeviceDepthClipEnableFeatures value with the correct type field.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void New(out PhysicalDeviceDepthClipEnableFeatures value) => value = new() { sType = TYPE };
	/// <summary>Initializes the sType and pNext fields to the correct default values.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void Init(ref PhysicalDeviceDepthClipEnableFeatures value) { value.sType = TYPE; value.pNext = null; }
}

[StructLayout(LayoutKind.Sequential)]
public unsafe partial struct PipelineRasterizationDepthClipStateCreateInfo
{
	public const Vk.StructureType TYPE = Vk.StructureType.PipelineRasterizationDepthClipStateCreateInfoEXT;

	public Vk.StructureType sType;
	public void* pNext;
	public Vk.EXT.PipelineRasterizationDepthClipStateCreateFlags Flags;
	public Vk.Bool32 DepthClipEnable;

	/// <summary>Creates a new PipelineRasterizationDepthClipStateCreateInfo value with the correct type field.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void New(out PipelineRasterizationDepthClipStateCreateInfo value) => value = new() { sType = TYPE };
	/// <summary>Initializes the sType and pNext fields to the correct default values.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void Init(ref PipelineRasterizationDepthClipStateCreateInfo value) { value.sType = TYPE; value.pNext = null; }
}

[StructLayout(LayoutKind.Sequential)]
public unsafe partial struct PhysicalDeviceMemoryBudgetProperties
{
	public const Vk.StructureType TYPE = Vk.StructureType.PhysicalDeviceMemoryBudgetPropertiesEXT;

	public Vk.StructureType sType;
	public void* pNext;
	public Vk.DeviceSize HeapBudget_0;
	public Vk.DeviceSize HeapBudget_1;
	public Vk.DeviceSize HeapBudget_2;
	public Vk.DeviceSize HeapBudget_3;
	public Vk.DeviceSize HeapBudget_4;
	public Vk.DeviceSize HeapBudget_5;
	public Vk.DeviceSize HeapBudget_6;
	public Vk.DeviceSize HeapBudget_7;
	public Vk.DeviceSize HeapBudget_8;
	public Vk.DeviceSize HeapBudget_9;
	public Vk.DeviceSize HeapBudget_10;
	public Vk.DeviceSize HeapBudget_11;
	public Vk.DeviceSize HeapBudget_12;
	public Vk.DeviceSize HeapBudget_13;
	public Vk.DeviceSize HeapBudget_14;
	public Vk.DeviceSize HeapBudget_15;
	public Vk.DeviceSize HeapUsage_0;
	public Vk.DeviceSize HeapUsage_1;
	public Vk.DeviceSize HeapUsage_2;
	public Vk.DeviceSize HeapUsage_3;
	public Vk.DeviceSize HeapUsage_4;
	public Vk.DeviceSize HeapUsage_5;
	public Vk.DeviceSize HeapUsage_6;
	public Vk.DeviceSize HeapUsage_7;
	public Vk.DeviceSize HeapUsage_8;
	public Vk.DeviceSize HeapUsage_9;
	public Vk.DeviceSize HeapUsage_10;
	public Vk.DeviceSize HeapUsage_11;
	public Vk.DeviceSize HeapUsage_12;
	public Vk.DeviceSize HeapUsage_13;
	public Vk.DeviceSize HeapUsage_14;
	public Vk.DeviceSize HeapUsage_15;

	/// <summary>Creates a new PhysicalDeviceMemoryBudgetProperties value with the correct type field.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void New(out PhysicalDeviceMemoryBudgetProperties value) => value = new() { sType = TYPE };
	/// <summary>Initializes the sType and pNext fields to the correct default values.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void Init(ref PhysicalDeviceMemoryBudgetProperties value) { value.sType = TYPE; value.pNext = null; }
}

[StructLayout(LayoutKind.Sequential)]
public unsafe partial struct PhysicalDeviceMemoryPriorityFeatures
{
	public const Vk.StructureType TYPE = Vk.StructureType.PhysicalDeviceMemoryPriorityFeaturesEXT;

	public Vk.StructureType sType;
	public void* pNext;
	public Vk.Bool32 MemoryPriority;

	/// <summary>Creates a new PhysicalDeviceMemoryPriorityFeatures value with the correct type field.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void New(out PhysicalDeviceMemoryPriorityFeatures value) => value = new() { sType = TYPE };
	/// <summary>Initializes the sType and pNext fields to the correct default values.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void Init(ref PhysicalDeviceMemoryPriorityFeatures value) { value.sType = TYPE; value.pNext = null; }
}

[StructLayout(LayoutKind.Sequential)]
public unsafe partial struct MemoryPriorityAllocateInfo
{
	public const Vk.StructureType TYPE = Vk.StructureType.MemoryPriorityAllocateInfoEXT;

	public Vk.StructureType sType;
	public void* pNext;
	public float Priority;

	/// <summary>Creates a new MemoryPriorityAllocateInfo value with the correct type field.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void New(out MemoryPriorityAllocateInfo value) => value = new() { sType = TYPE };
	/// <summary>Initializes the sType and pNext fields to the correct default values.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void Init(ref MemoryPriorityAllocateInfo value) { value.sType = TYPE; value.pNext = null; }
}

[StructLayout(LayoutKind.Sequential)]
public unsafe partial struct PhysicalDeviceBufferDeviceAddressFeatures
{
	public const Vk.StructureType TYPE = Vk.StructureType.PhysicalDeviceBufferDeviceAddressFeaturesEXT;

	public Vk.StructureType sType;
	public void* pNext;
	public Vk.Bool32 BufferDeviceAddress;
	public Vk.Bool32 BufferDeviceAddressCaptureReplay;
	public Vk.Bool32 BufferDeviceAddressMultiDevice;

	/// <summary>Creates a new PhysicalDeviceBufferDeviceAddressFeatures value with the correct type field.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void New(out PhysicalDeviceBufferDeviceAddressFeatures value) => value = new() { sType = TYPE };
	/// <summary>Initializes the sType and pNext fields to the correct default values.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void Init(ref PhysicalDeviceBufferDeviceAddressFeatures value) { value.sType = TYPE; value.pNext = null; }
}

[StructLayout(LayoutKind.Sequential)]
public unsafe partial struct PhysicalDeviceBufferAddressFeatures
{
	public const Vk.StructureType TYPE = Vk.StructureType.PhysicalDeviceBufferDeviceAddressFeaturesEXT;

	public Vk.StructureType sType;
	public void* pNext;
	public Vk.Bool32 BufferDeviceAddress;
	public Vk.Bool32 BufferDeviceAddressCaptureReplay;
	public Vk.Bool32 BufferDeviceAddressMultiDevice;

	/// <summary>Creates a new PhysicalDeviceBufferAddressFeatures value with the correct type field.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void New(out PhysicalDeviceBufferAddressFeatures value) => value = new() { sType = TYPE };
	/// <summary>Initializes the sType and pNext fields to the correct default values.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void Init(ref PhysicalDeviceBufferAddressFeatures value) { value.sType = TYPE; value.pNext = null; }
}

[StructLayout(LayoutKind.Sequential)]
public unsafe partial struct BufferDeviceAddressInfo
{
	public const Vk.StructureType TYPE = Vk.StructureType.BufferDeviceAddressInfo;

	public Vk.StructureType sType;
	public void* pNext;
	public Vk.Buffer Buffer;

	/// <summary>Creates a new BufferDeviceAddressInfo value with the correct type field.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void New(out BufferDeviceAddressInfo value) => value = new() { sType = TYPE };
	/// <summary>Initializes the sType and pNext fields to the correct default values.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void Init(ref BufferDeviceAddressInfo value) { value.sType = TYPE; value.pNext = null; }
}

[StructLayout(LayoutKind.Sequential)]
public unsafe partial struct BufferDeviceAddressCreateInfo
{
	public const Vk.StructureType TYPE = Vk.StructureType.BufferDeviceAddressCreateInfoEXT;

	public Vk.StructureType sType;
	public void* pNext;
	public ulong DeviceAddress;

	/// <summary>Creates a new BufferDeviceAddressCreateInfo value with the correct type field.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void New(out BufferDeviceAddressCreateInfo value) => value = new() { sType = TYPE };
	/// <summary>Initializes the sType and pNext fields to the correct default values.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void Init(ref BufferDeviceAddressCreateInfo value) { value.sType = TYPE; value.pNext = null; }
}

[StructLayout(LayoutKind.Sequential)]
public unsafe partial struct PhysicalDeviceImageViewImageFormatInfo
{
	public const Vk.StructureType TYPE = Vk.StructureType.PhysicalDeviceImageViewImageFormatInfoEXT;

	public Vk.StructureType sType;
	public void* pNext;
	public Vk.ImageViewType ImageViewType;

	/// <summary>Creates a new PhysicalDeviceImageViewImageFormatInfo value with the correct type field.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void New(out PhysicalDeviceImageViewImageFormatInfo value) => value = new() { sType = TYPE };
	/// <summary>Initializes the sType and pNext fields to the correct default values.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void Init(ref PhysicalDeviceImageViewImageFormatInfo value) { value.sType = TYPE; value.pNext = null; }
}

[StructLayout(LayoutKind.Sequential)]
public unsafe partial struct FilterCubicImageViewImageFormatProperties
{
	public const Vk.StructureType TYPE = Vk.StructureType.FilterCubicImageViewImageFormatPropertiesEXT;

	public Vk.StructureType sType;
	public void* pNext;
	public Vk.Bool32 FilterCubic;
	public Vk.Bool32 FilterCubicMinmax;

	/// <summary>Creates a new FilterCubicImageViewImageFormatProperties value with the correct type field.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void New(out FilterCubicImageViewImageFormatProperties value) => value = new() { sType = TYPE };
	/// <summary>Initializes the sType and pNext fields to the correct default values.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void Init(ref FilterCubicImageViewImageFormatProperties value) { value.sType = TYPE; value.pNext = null; }
}

[StructLayout(LayoutKind.Sequential)]
public unsafe partial struct PhysicalDeviceTextureCompressionASTCHDRFeatures
{
	public const Vk.StructureType TYPE = Vk.StructureType.PhysicalDeviceTextureCompressionAstcHdrFeaturesEXT;

	public Vk.StructureType sType;
	public void* pNext;
	public Vk.Bool32 TextureCompressionASTC_HDR;

	/// <summary>Creates a new PhysicalDeviceTextureCompressionASTCHDRFeatures value with the correct type field.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void New(out PhysicalDeviceTextureCompressionASTCHDRFeatures value) => value = new() { sType = TYPE };
	/// <summary>Initializes the sType and pNext fields to the correct default values.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void Init(ref PhysicalDeviceTextureCompressionASTCHDRFeatures value) { value.sType = TYPE; value.pNext = null; }
}

[StructLayout(LayoutKind.Sequential)]
public unsafe partial struct PhysicalDeviceYcbcrImageArraysFeatures
{
	public const Vk.StructureType TYPE = Vk.StructureType.PhysicalDeviceYcbcrImageArraysFeaturesEXT;

	public Vk.StructureType sType;
	public void* pNext;
	public Vk.Bool32 YcbcrImageArrays;

	/// <summary>Creates a new PhysicalDeviceYcbcrImageArraysFeatures value with the correct type field.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void New(out PhysicalDeviceYcbcrImageArraysFeatures value) => value = new() { sType = TYPE };
	/// <summary>Initializes the sType and pNext fields to the correct default values.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void Init(ref PhysicalDeviceYcbcrImageArraysFeatures value) { value.sType = TYPE; value.pNext = null; }
}

[StructLayout(LayoutKind.Sequential)]
public unsafe partial struct PipelineCreationFeedback
{
	public Vk.EXT.PipelineCreationFeedbackFlags Flags;
	public ulong Duration;
}

[StructLayout(LayoutKind.Sequential)]
public unsafe partial struct PipelineCreationFeedbackCreateInfo
{
	public const Vk.StructureType TYPE = Vk.StructureType.PipelineCreationFeedbackCreateInfoEXT;

	public Vk.StructureType sType;
	public void* pNext;
	public Vk.EXT.PipelineCreationFeedback* PipelineCreationFeedback;
	public uint PipelineStageCreationFeedbackCount;
	public Vk.EXT.PipelineCreationFeedback** PipelineStageCreationFeedbacks;

	/// <summary>Creates a new PipelineCreationFeedbackCreateInfo value with the correct type field.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void New(out PipelineCreationFeedbackCreateInfo value) => value = new() { sType = TYPE };
	/// <summary>Initializes the sType and pNext fields to the correct default values.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void Init(ref PipelineCreationFeedbackCreateInfo value) { value.sType = TYPE; value.pNext = null; }
}

[StructLayout(LayoutKind.Sequential)]
public unsafe partial struct SurfaceFullScreenExclusiveInfo
{
	public const Vk.StructureType TYPE = Vk.StructureType.SurfaceFullScreenExclusiveInfoEXT;

	public Vk.StructureType sType;
	public void* pNext;
	public Vk.EXT.FullScreenExclusive FullScreenExclusive;

	/// <summary>Creates a new SurfaceFullScreenExclusiveInfo value with the correct type field.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void New(out SurfaceFullScreenExclusiveInfo value) => value = new() { sType = TYPE };
	/// <summary>Initializes the sType and pNext fields to the correct default values.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void Init(ref SurfaceFullScreenExclusiveInfo value) { value.sType = TYPE; value.pNext = null; }
}

[StructLayout(LayoutKind.Sequential)]
public unsafe partial struct SurfaceFullScreenExclusiveWin32Info
{
	public const Vk.StructureType TYPE = Vk.StructureType.SurfaceFullScreenExclusiveWin32InfoEXT;

	public Vk.StructureType sType;
	public void* pNext;
	public void* Hmonitor;

	/// <summary>Creates a new SurfaceFullScreenExclusiveWin32Info value with the correct type field.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void New(out SurfaceFullScreenExclusiveWin32Info value) => value = new() { sType = TYPE };
	/// <summary>Initializes the sType and pNext fields to the correct default values.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void Init(ref SurfaceFullScreenExclusiveWin32Info value) { value.sType = TYPE; value.pNext = null; }
}

[StructLayout(LayoutKind.Sequential)]
public unsafe partial struct SurfaceCapabilitiesFullScreenExclusive
{
	public const Vk.StructureType TYPE = Vk.StructureType.SurfaceCapabilitiesFullScreenExclusiveEXT;

	public Vk.StructureType sType;
	public void* pNext;
	public Vk.Bool32 FullScreenExclusiveSupported;

	/// <summary>Creates a new SurfaceCapabilitiesFullScreenExclusive value with the correct type field.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void New(out SurfaceCapabilitiesFullScreenExclusive value) => value = new() { sType = TYPE };
	/// <summary>Initializes the sType and pNext fields to the correct default values.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void Init(ref SurfaceCapabilitiesFullScreenExclusive value) { value.sType = TYPE; value.pNext = null; }
}

[StructLayout(LayoutKind.Sequential)]
public unsafe partial struct HeadlessSurfaceCreateInfo
{
	public const Vk.StructureType TYPE = Vk.StructureType.HeadlessSurfaceCreateInfoEXT;

	public Vk.StructureType sType;
	public void* pNext;
	public Vk.EXT.HeadlessSurfaceCreateFlags Flags;

	/// <summary>Creates a new HeadlessSurfaceCreateInfo value with the correct type field.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void New(out HeadlessSurfaceCreateInfo value) => value = new() { sType = TYPE };
	/// <summary>Initializes the sType and pNext fields to the correct default values.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void Init(ref HeadlessSurfaceCreateInfo value) { value.sType = TYPE; value.pNext = null; }
}

[StructLayout(LayoutKind.Sequential)]
public unsafe partial struct PhysicalDeviceIndexTypeUint8Features
{
	public const Vk.StructureType TYPE = Vk.StructureType.PhysicalDeviceIndexTypeUint8FeaturesEXT;

	public Vk.StructureType sType;
	public void* pNext;
	public Vk.Bool32 IndexTypeUint8;

	/// <summary>Creates a new PhysicalDeviceIndexTypeUint8Features value with the correct type field.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void New(out PhysicalDeviceIndexTypeUint8Features value) => value = new() { sType = TYPE };
	/// <summary>Initializes the sType and pNext fields to the correct default values.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void Init(ref PhysicalDeviceIndexTypeUint8Features value) { value.sType = TYPE; value.pNext = null; }
}

[StructLayout(LayoutKind.Sequential)]
public unsafe partial struct PhysicalDeviceFragmentShaderInterlockFeatures
{
	public const Vk.StructureType TYPE = Vk.StructureType.PhysicalDeviceFragmentShaderInterlockFeaturesEXT;

	public Vk.StructureType sType;
	public void* pNext;
	public Vk.Bool32 FragmentShaderSampleInterlock;
	public Vk.Bool32 FragmentShaderPixelInterlock;
	public Vk.Bool32 FragmentShaderShadingRateInterlock;

	/// <summary>Creates a new PhysicalDeviceFragmentShaderInterlockFeatures value with the correct type field.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void New(out PhysicalDeviceFragmentShaderInterlockFeatures value) => value = new() { sType = TYPE };
	/// <summary>Initializes the sType and pNext fields to the correct default values.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void Init(ref PhysicalDeviceFragmentShaderInterlockFeatures value) { value.sType = TYPE; value.pNext = null; }
}

[StructLayout(LayoutKind.Sequential)]
public unsafe partial struct PhysicalDeviceShaderDemoteToHelperInvocationFeatures
{
	public const Vk.StructureType TYPE = Vk.StructureType.PhysicalDeviceShaderDemoteToHelperInvocationFeaturesEXT;

	public Vk.StructureType sType;
	public void* pNext;
	public Vk.Bool32 ShaderDemoteToHelperInvocation;

	/// <summary>Creates a new PhysicalDeviceShaderDemoteToHelperInvocationFeatures value with the correct type field.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void New(out PhysicalDeviceShaderDemoteToHelperInvocationFeatures value) => value = new() { sType = TYPE };
	/// <summary>Initializes the sType and pNext fields to the correct default values.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void Init(ref PhysicalDeviceShaderDemoteToHelperInvocationFeatures value) { value.sType = TYPE; value.pNext = null; }
}

[StructLayout(LayoutKind.Sequential)]
public unsafe partial struct PhysicalDeviceTexelBufferAlignmentFeatures
{
	public const Vk.StructureType TYPE = Vk.StructureType.PhysicalDeviceTexelBufferAlignmentFeaturesEXT;

	public Vk.StructureType sType;
	public void* pNext;
	public Vk.Bool32 TexelBufferAlignment;

	/// <summary>Creates a new PhysicalDeviceTexelBufferAlignmentFeatures value with the correct type field.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void New(out PhysicalDeviceTexelBufferAlignmentFeatures value) => value = new() { sType = TYPE };
	/// <summary>Initializes the sType and pNext fields to the correct default values.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void Init(ref PhysicalDeviceTexelBufferAlignmentFeatures value) { value.sType = TYPE; value.pNext = null; }
}

[StructLayout(LayoutKind.Sequential)]
public unsafe partial struct PhysicalDeviceTexelBufferAlignmentProperties
{
	public const Vk.StructureType TYPE = Vk.StructureType.PhysicalDeviceTexelBufferAlignmentPropertiesEXT;

	public Vk.StructureType sType;
	public void* pNext;
	public Vk.DeviceSize StorageTexelBufferOffsetAlignmentBytes;
	public Vk.Bool32 StorageTexelBufferOffsetSingleTexelAlignment;
	public Vk.DeviceSize UniformTexelBufferOffsetAlignmentBytes;
	public Vk.Bool32 UniformTexelBufferOffsetSingleTexelAlignment;

	/// <summary>Creates a new PhysicalDeviceTexelBufferAlignmentProperties value with the correct type field.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void New(out PhysicalDeviceTexelBufferAlignmentProperties value) => value = new() { sType = TYPE };
	/// <summary>Initializes the sType and pNext fields to the correct default values.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void Init(ref PhysicalDeviceTexelBufferAlignmentProperties value) { value.sType = TYPE; value.pNext = null; }
}

[StructLayout(LayoutKind.Sequential)]
public unsafe partial struct PhysicalDeviceSubgroupSizeControlFeatures
{
	public const Vk.StructureType TYPE = Vk.StructureType.PhysicalDeviceSubgroupSizeControlFeaturesEXT;

	public Vk.StructureType sType;
	public void* pNext;
	public Vk.Bool32 SubgroupSizeControl;
	public Vk.Bool32 ComputeFullSubgroups;

	/// <summary>Creates a new PhysicalDeviceSubgroupSizeControlFeatures value with the correct type field.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void New(out PhysicalDeviceSubgroupSizeControlFeatures value) => value = new() { sType = TYPE };
	/// <summary>Initializes the sType and pNext fields to the correct default values.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void Init(ref PhysicalDeviceSubgroupSizeControlFeatures value) { value.sType = TYPE; value.pNext = null; }
}

[StructLayout(LayoutKind.Sequential)]
public unsafe partial struct PhysicalDeviceSubgroupSizeControlProperties
{
	public const Vk.StructureType TYPE = Vk.StructureType.PhysicalDeviceSubgroupSizeControlPropertiesEXT;

	public Vk.StructureType sType;
	public void* pNext;
	public uint MinSubgroupSize;
	public uint MaxSubgroupSize;
	public uint MaxComputeWorkgroupSubgroups;
	public Vk.ShaderStageFlags RequiredSubgroupSizeStages;

	/// <summary>Creates a new PhysicalDeviceSubgroupSizeControlProperties value with the correct type field.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void New(out PhysicalDeviceSubgroupSizeControlProperties value) => value = new() { sType = TYPE };
	/// <summary>Initializes the sType and pNext fields to the correct default values.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void Init(ref PhysicalDeviceSubgroupSizeControlProperties value) { value.sType = TYPE; value.pNext = null; }
}

[StructLayout(LayoutKind.Sequential)]
public unsafe partial struct PipelineShaderStageRequiredSubgroupSizeCreateInfo
{
	public const Vk.StructureType TYPE = Vk.StructureType.PipelineShaderStageRequiredSubgroupSizeCreateInfoEXT;

	public Vk.StructureType sType;
	public void* pNext;
	public uint RequiredSubgroupSize;

	/// <summary>Creates a new PipelineShaderStageRequiredSubgroupSizeCreateInfo value with the correct type field.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void New(out PipelineShaderStageRequiredSubgroupSizeCreateInfo value) => value = new() { sType = TYPE };
	/// <summary>Initializes the sType and pNext fields to the correct default values.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void Init(ref PipelineShaderStageRequiredSubgroupSizeCreateInfo value) { value.sType = TYPE; value.pNext = null; }
}

[StructLayout(LayoutKind.Sequential)]
public unsafe partial struct PhysicalDeviceLineRasterizationFeatures
{
	public const Vk.StructureType TYPE = Vk.StructureType.PhysicalDeviceLineRasterizationFeaturesEXT;

	public Vk.StructureType sType;
	public void* pNext;
	public Vk.Bool32 RectangularLines;
	public Vk.Bool32 BresenhamLines;
	public Vk.Bool32 SmoothLines;
	public Vk.Bool32 StippledRectangularLines;
	public Vk.Bool32 StippledBresenhamLines;
	public Vk.Bool32 StippledSmoothLines;

	/// <summary>Creates a new PhysicalDeviceLineRasterizationFeatures value with the correct type field.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void New(out PhysicalDeviceLineRasterizationFeatures value) => value = new() { sType = TYPE };
	/// <summary>Initializes the sType and pNext fields to the correct default values.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void Init(ref PhysicalDeviceLineRasterizationFeatures value) { value.sType = TYPE; value.pNext = null; }
}

[StructLayout(LayoutKind.Sequential)]
public unsafe partial struct PhysicalDeviceLineRasterizationProperties
{
	public const Vk.StructureType TYPE = Vk.StructureType.PhysicalDeviceLineRasterizationPropertiesEXT;

	public Vk.StructureType sType;
	public void* pNext;
	public uint LineSubPixelPrecisionBits;

	/// <summary>Creates a new PhysicalDeviceLineRasterizationProperties value with the correct type field.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void New(out PhysicalDeviceLineRasterizationProperties value) => value = new() { sType = TYPE };
	/// <summary>Initializes the sType and pNext fields to the correct default values.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void Init(ref PhysicalDeviceLineRasterizationProperties value) { value.sType = TYPE; value.pNext = null; }
}

[StructLayout(LayoutKind.Sequential)]
public unsafe partial struct PipelineRasterizationLineStateCreateInfo
{
	public const Vk.StructureType TYPE = Vk.StructureType.PipelineRasterizationLineStateCreateInfoEXT;

	public Vk.StructureType sType;
	public void* pNext;
	public Vk.EXT.LineRasterizationMode LineRasterizationMode;
	public Vk.Bool32 StippledLineEnable;
	public uint LineStippleFactor;
	public ushort LineStipplePattern;

	/// <summary>Creates a new PipelineRasterizationLineStateCreateInfo value with the correct type field.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void New(out PipelineRasterizationLineStateCreateInfo value) => value = new() { sType = TYPE };
	/// <summary>Initializes the sType and pNext fields to the correct default values.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void Init(ref PipelineRasterizationLineStateCreateInfo value) { value.sType = TYPE; value.pNext = null; }
}

[StructLayout(LayoutKind.Sequential)]
public unsafe partial struct PhysicalDevicePipelineCreationCacheControlFeatures
{
	public const Vk.StructureType TYPE = Vk.StructureType.PhysicalDevicePipelineCreationCacheControlFeaturesEXT;

	public Vk.StructureType sType;
	public void* pNext;
	public Vk.Bool32 PipelineCreationCacheControl;

	/// <summary>Creates a new PhysicalDevicePipelineCreationCacheControlFeatures value with the correct type field.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void New(out PhysicalDevicePipelineCreationCacheControlFeatures value) => value = new() { sType = TYPE };
	/// <summary>Initializes the sType and pNext fields to the correct default values.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void Init(ref PhysicalDevicePipelineCreationCacheControlFeatures value) { value.sType = TYPE; value.pNext = null; }
}

[StructLayout(LayoutKind.Sequential)]
public unsafe partial struct PhysicalDeviceToolProperties
{
	public const Vk.StructureType TYPE = Vk.StructureType.PhysicalDeviceToolPropertiesEXT;

	public Vk.StructureType sType;
	public void* pNext;
	public Vk.FixedString Name;
	public Vk.FixedString Version;
	public Vk.EXT.ToolPurposeFlags Purposes;
	public Vk.FixedString Description;
	public Vk.FixedString Layer;

	/// <summary>Creates a new PhysicalDeviceToolProperties value with the correct type field.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void New(out PhysicalDeviceToolProperties value) => value = new() { sType = TYPE };
	/// <summary>Initializes the sType and pNext fields to the correct default values.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void Init(ref PhysicalDeviceToolProperties value) { value.sType = TYPE; value.pNext = null; }
}

[StructLayout(LayoutKind.Sequential)]
public unsafe partial struct SamplerCustomBorderColorCreateInfo
{
	public const Vk.StructureType TYPE = Vk.StructureType.SamplerCustomBorderColorCreateInfoEXT;

	public Vk.StructureType sType;
	public void* pNext;
	public Vk.ClearColorValue CustomBorderColor;
	public Vk.Format Format;

	/// <summary>Creates a new SamplerCustomBorderColorCreateInfo value with the correct type field.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void New(out SamplerCustomBorderColorCreateInfo value) => value = new() { sType = TYPE };
	/// <summary>Initializes the sType and pNext fields to the correct default values.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void Init(ref SamplerCustomBorderColorCreateInfo value) { value.sType = TYPE; value.pNext = null; }
}

[StructLayout(LayoutKind.Sequential)]
public unsafe partial struct PhysicalDeviceCustomBorderColorProperties
{
	public const Vk.StructureType TYPE = Vk.StructureType.PhysicalDeviceCustomBorderColorPropertiesEXT;

	public Vk.StructureType sType;
	public void* pNext;
	public uint MaxCustomBorderColorSamplers;

	/// <summary>Creates a new PhysicalDeviceCustomBorderColorProperties value with the correct type field.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void New(out PhysicalDeviceCustomBorderColorProperties value) => value = new() { sType = TYPE };
	/// <summary>Initializes the sType and pNext fields to the correct default values.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void Init(ref PhysicalDeviceCustomBorderColorProperties value) { value.sType = TYPE; value.pNext = null; }
}

[StructLayout(LayoutKind.Sequential)]
public unsafe partial struct PhysicalDeviceCustomBorderColorFeatures
{
	public const Vk.StructureType TYPE = Vk.StructureType.PhysicalDeviceCustomBorderColorFeaturesEXT;

	public Vk.StructureType sType;
	public void* pNext;
	public Vk.Bool32 CustomBorderColors;
	public Vk.Bool32 CustomBorderColorWithoutFormat;

	/// <summary>Creates a new PhysicalDeviceCustomBorderColorFeatures value with the correct type field.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void New(out PhysicalDeviceCustomBorderColorFeatures value) => value = new() { sType = TYPE };
	/// <summary>Initializes the sType and pNext fields to the correct default values.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void Init(ref PhysicalDeviceCustomBorderColorFeatures value) { value.sType = TYPE; value.pNext = null; }
}

[StructLayout(LayoutKind.Sequential)]
public unsafe partial struct PhysicalDeviceExtendedDynamicStateFeatures
{
	public const Vk.StructureType TYPE = Vk.StructureType.PhysicalDeviceExtendedDynamicStateFeaturesEXT;

	public Vk.StructureType sType;
	public void* pNext;
	public Vk.Bool32 ExtendedDynamicState;

	/// <summary>Creates a new PhysicalDeviceExtendedDynamicStateFeatures value with the correct type field.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void New(out PhysicalDeviceExtendedDynamicStateFeatures value) => value = new() { sType = TYPE };
	/// <summary>Initializes the sType and pNext fields to the correct default values.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void Init(ref PhysicalDeviceExtendedDynamicStateFeatures value) { value.sType = TYPE; value.pNext = null; }
}

[StructLayout(LayoutKind.Sequential)]
public unsafe partial struct PhysicalDeviceRobustness2Features
{
	public const Vk.StructureType TYPE = Vk.StructureType.PhysicalDeviceRobustness2FeaturesEXT;

	public Vk.StructureType sType;
	public void* pNext;
	public Vk.Bool32 RobustBufferAccess2;
	public Vk.Bool32 RobustImageAccess2;
	public Vk.Bool32 NullDescriptor;

	/// <summary>Creates a new PhysicalDeviceRobustness2Features value with the correct type field.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void New(out PhysicalDeviceRobustness2Features value) => value = new() { sType = TYPE };
	/// <summary>Initializes the sType and pNext fields to the correct default values.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void Init(ref PhysicalDeviceRobustness2Features value) { value.sType = TYPE; value.pNext = null; }
}

[StructLayout(LayoutKind.Sequential)]
public unsafe partial struct PhysicalDeviceRobustness2Properties
{
	public const Vk.StructureType TYPE = Vk.StructureType.PhysicalDeviceRobustness2PropertiesEXT;

	public Vk.StructureType sType;
	public void* pNext;
	public Vk.DeviceSize RobustStorageBufferAccessSizeAlignment;
	public Vk.DeviceSize RobustUniformBufferAccessSizeAlignment;

	/// <summary>Creates a new PhysicalDeviceRobustness2Properties value with the correct type field.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void New(out PhysicalDeviceRobustness2Properties value) => value = new() { sType = TYPE };
	/// <summary>Initializes the sType and pNext fields to the correct default values.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void Init(ref PhysicalDeviceRobustness2Properties value) { value.sType = TYPE; value.pNext = null; }
}

[StructLayout(LayoutKind.Sequential)]
public unsafe partial struct PhysicalDeviceImageRobustnessFeatures
{
	public const Vk.StructureType TYPE = Vk.StructureType.PhysicalDeviceImageRobustnessFeaturesEXT;

	public Vk.StructureType sType;
	public void* pNext;
	public Vk.Bool32 RobustImageAccess;

	/// <summary>Creates a new PhysicalDeviceImageRobustnessFeatures value with the correct type field.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void New(out PhysicalDeviceImageRobustnessFeatures value) => value = new() { sType = TYPE };
	/// <summary>Initializes the sType and pNext fields to the correct default values.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void Init(ref PhysicalDeviceImageRobustnessFeatures value) { value.sType = TYPE; value.pNext = null; }
}

[StructLayout(LayoutKind.Sequential)]
public unsafe partial struct PhysicalDevice4444FormatsFeatures
{
	public const Vk.StructureType TYPE = Vk.StructureType.PhysicalDevice4444FormatsFeaturesEXT;

	public Vk.StructureType sType;
	public void* pNext;
	public Vk.Bool32 FormatA4R4G4B4;
	public Vk.Bool32 FormatA4B4G4R4;

	/// <summary>Creates a new PhysicalDevice4444FormatsFeatures value with the correct type field.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void New(out PhysicalDevice4444FormatsFeatures value) => value = new() { sType = TYPE };
	/// <summary>Initializes the sType and pNext fields to the correct default values.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void Init(ref PhysicalDevice4444FormatsFeatures value) { value.sType = TYPE; value.pNext = null; }
}

} // namespace VVK.Vk.EXT
