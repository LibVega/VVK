/*
 * MIT License - Copyright(c) 2020 Sean Moss
 * This file is subject to the terms and conditions of the MIT License, the text of which can be found in the 'LICENSE'
 * file at the root of this repository, or online at <https://opensource.org/licenses/MIT>.
 */

/// This file was generated by VVKGen. Edits to this file will be lost on next generation.

using System;
using System.Runtime.InteropServices;
using System.Runtime.CompilerServices;

namespace Vulkan
{

[StructLayout(LayoutKind.Sequential)]
public unsafe partial struct VkViSurfaceCreateInfoNN : IEquatable<VkViSurfaceCreateInfoNN>
{
	public const VkStructureType TYPE = VkStructureType.ViSurfaceCreateInfoNn;

	public VkStructureType sType;
	public void* pNext;
	public VkViSurfaceCreateFlagsNN Flags;
	public void* Window;

	public VkViSurfaceCreateInfoNN(
		VkViSurfaceCreateFlagsNN flags = default,
		void* window = default
	) {
		sType = TYPE;
		pNext = null;
		Flags = flags;
		Window = window;
	}

	public readonly override bool Equals(object? o) => (o is VkViSurfaceCreateInfoNN s) && (this == s);
	readonly bool IEquatable<VkViSurfaceCreateInfoNN>.Equals(VkViSurfaceCreateInfoNN o) => o == this;

	[MethodImpl(MethodImplOptions.AggressiveOptimization)]
	public readonly override int GetHashCode()
	{
		return
			sType.GetHashCode() ^ ((ulong)pNext).GetHashCode() ^ Flags.GetHashCode() ^ ((ulong)Window).GetHashCode()
			;
	}

	[MethodImpl(MethodImplOptions.AggressiveOptimization)]
	public static bool operator == (in VkViSurfaceCreateInfoNN l, in VkViSurfaceCreateInfoNN r)
	{
		return
			(l.sType == r.sType) && (l.pNext == r.pNext) && (l.Flags == r.Flags) && (l.Window == r.Window)
			;
	}

	[MethodImpl(MethodImplOptions.AggressiveOptimization)]
	public static bool operator != (in VkViSurfaceCreateInfoNN l, in VkViSurfaceCreateInfoNN r)
	{
		return
			(l.sType != r.sType) || (l.pNext != r.pNext) || (l.Flags != r.Flags) || (l.Window != r.Window)
			;
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void New(out VkViSurfaceCreateInfoNN s) => s = new() { sType = TYPE };
}


} // namespace Vulkan

