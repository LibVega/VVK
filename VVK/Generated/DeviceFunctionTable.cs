/*
 * MIT License - Copyright(c) 2020 Sean Moss
 * This file is subject to the terms and conditions of the MIT License, the text of which can be found in the 'LICENSE'
 * file at the root of this repository, or online at <https://opensource.org/licenses/MIT>.
 */

/// This file was generated by VVKGen. Edits to this file will be lost on next generation.

using System;
using System.Runtime.InteropServices;
using System.Runtime.CompilerServices;

namespace Vulkan
{

public unsafe sealed partial class DeviceFunctionTable
{
	/* Device Functions */
	public readonly delegate* unmanaged<VulkanHandle<VkDevice>, VkAllocationCallbacks*, void> vkDestroyDevice = null;
	public readonly delegate* unmanaged<VulkanHandle<VkDevice>, uint, uint, VulkanHandle<VkQueue>*, void> vkGetDeviceQueue = null;
	public readonly delegate* unmanaged<VulkanHandle<VkQueue>, uint, VkSubmitInfo*, VulkanHandle<VkFence>, VkResult> vkQueueSubmit = null;
	public readonly delegate* unmanaged<VulkanHandle<VkQueue>, VkResult> vkQueueWaitIdle = null;
	public readonly delegate* unmanaged<VulkanHandle<VkDevice>, VkResult> vkDeviceWaitIdle = null;
	public readonly delegate* unmanaged<VulkanHandle<VkDevice>, VkMemoryAllocateInfo*, VkAllocationCallbacks*, VulkanHandle<VkDeviceMemory>*, VkResult> vkAllocateMemory = null;
	public readonly delegate* unmanaged<VulkanHandle<VkDevice>, VulkanHandle<VkDeviceMemory>, VkAllocationCallbacks*, void> vkFreeMemory = null;
	public readonly delegate* unmanaged<VulkanHandle<VkDevice>, VulkanHandle<VkDeviceMemory>, ulong, ulong, VkMemoryMapFlags, void**, VkResult> vkMapMemory = null;
	public readonly delegate* unmanaged<VulkanHandle<VkDevice>, VulkanHandle<VkDeviceMemory>, void> vkUnmapMemory = null;
	public readonly delegate* unmanaged<VulkanHandle<VkDevice>, uint, VkMappedMemoryRange*, VkResult> vkFlushMappedMemoryRanges = null;
	public readonly delegate* unmanaged<VulkanHandle<VkDevice>, uint, VkMappedMemoryRange*, VkResult> vkInvalidateMappedMemoryRanges = null;
	public readonly delegate* unmanaged<VulkanHandle<VkDevice>, VulkanHandle<VkDeviceMemory>, ulong*, void> vkGetDeviceMemoryCommitment = null;
	public readonly delegate* unmanaged<VulkanHandle<VkDevice>, VulkanHandle<VkBuffer>, VkMemoryRequirements*, void> vkGetBufferMemoryRequirements = null;
	public readonly delegate* unmanaged<VulkanHandle<VkDevice>, VulkanHandle<VkBuffer>, VulkanHandle<VkDeviceMemory>, ulong, VkResult> vkBindBufferMemory = null;
	public readonly delegate* unmanaged<VulkanHandle<VkDevice>, VulkanHandle<VkImage>, VkMemoryRequirements*, void> vkGetImageMemoryRequirements = null;
	public readonly delegate* unmanaged<VulkanHandle<VkDevice>, VulkanHandle<VkImage>, VulkanHandle<VkDeviceMemory>, ulong, VkResult> vkBindImageMemory = null;
	public readonly delegate* unmanaged<VulkanHandle<VkDevice>, VulkanHandle<VkImage>, uint*, VkSparseImageMemoryRequirements*, void> vkGetImageSparseMemoryRequirements = null;
	public readonly delegate* unmanaged<VulkanHandle<VkQueue>, uint, VkBindSparseInfo*, VulkanHandle<VkFence>, VkResult> vkQueueBindSparse = null;
	public readonly delegate* unmanaged<VulkanHandle<VkDevice>, VkFenceCreateInfo*, VkAllocationCallbacks*, VulkanHandle<VkFence>*, VkResult> vkCreateFence = null;
	public readonly delegate* unmanaged<VulkanHandle<VkDevice>, VulkanHandle<VkFence>, VkAllocationCallbacks*, void> vkDestroyFence = null;
	public readonly delegate* unmanaged<VulkanHandle<VkDevice>, uint, VulkanHandle<VkFence>*, VkResult> vkResetFences = null;
	public readonly delegate* unmanaged<VulkanHandle<VkDevice>, VulkanHandle<VkFence>, VkResult> vkGetFenceStatus = null;
	public readonly delegate* unmanaged<VulkanHandle<VkDevice>, uint, VulkanHandle<VkFence>*, VkBool32, ulong, VkResult> vkWaitForFences = null;
	public readonly delegate* unmanaged<VulkanHandle<VkDevice>, VkSemaphoreCreateInfo*, VkAllocationCallbacks*, VulkanHandle<VkSemaphore>*, VkResult> vkCreateSemaphore = null;
	public readonly delegate* unmanaged<VulkanHandle<VkDevice>, VulkanHandle<VkSemaphore>, VkAllocationCallbacks*, void> vkDestroySemaphore = null;
	public readonly delegate* unmanaged<VulkanHandle<VkDevice>, VkEventCreateInfo*, VkAllocationCallbacks*, VulkanHandle<VkEvent>*, VkResult> vkCreateEvent = null;
	public readonly delegate* unmanaged<VulkanHandle<VkDevice>, VulkanHandle<VkEvent>, VkAllocationCallbacks*, void> vkDestroyEvent = null;
	public readonly delegate* unmanaged<VulkanHandle<VkDevice>, VulkanHandle<VkEvent>, VkResult> vkGetEventStatus = null;
	public readonly delegate* unmanaged<VulkanHandle<VkDevice>, VulkanHandle<VkEvent>, VkResult> vkSetEvent = null;
	public readonly delegate* unmanaged<VulkanHandle<VkDevice>, VulkanHandle<VkEvent>, VkResult> vkResetEvent = null;
	public readonly delegate* unmanaged<VulkanHandle<VkDevice>, VkQueryPoolCreateInfo*, VkAllocationCallbacks*, VulkanHandle<VkQueryPool>*, VkResult> vkCreateQueryPool = null;
	public readonly delegate* unmanaged<VulkanHandle<VkDevice>, VulkanHandle<VkQueryPool>, VkAllocationCallbacks*, void> vkDestroyQueryPool = null;
	public readonly delegate* unmanaged<VulkanHandle<VkDevice>, VulkanHandle<VkQueryPool>, uint, uint, ulong, void*, ulong, VkQueryResultFlags, VkResult> vkGetQueryPoolResults = null;
	public readonly delegate* unmanaged<VulkanHandle<VkDevice>, VulkanHandle<VkQueryPool>, uint, uint, void> vkResetQueryPool = null;
	public readonly delegate* unmanaged<VulkanHandle<VkDevice>, VulkanHandle<VkQueryPool>, uint, uint, void> vkResetQueryPoolEXT = null;
	public readonly delegate* unmanaged<VulkanHandle<VkDevice>, VkBufferCreateInfo*, VkAllocationCallbacks*, VulkanHandle<VkBuffer>*, VkResult> vkCreateBuffer = null;
	public readonly delegate* unmanaged<VulkanHandle<VkDevice>, VulkanHandle<VkBuffer>, VkAllocationCallbacks*, void> vkDestroyBuffer = null;
	public readonly delegate* unmanaged<VulkanHandle<VkDevice>, VkBufferViewCreateInfo*, VkAllocationCallbacks*, VulkanHandle<VkBufferView>*, VkResult> vkCreateBufferView = null;
	public readonly delegate* unmanaged<VulkanHandle<VkDevice>, VulkanHandle<VkBufferView>, VkAllocationCallbacks*, void> vkDestroyBufferView = null;
	public readonly delegate* unmanaged<VulkanHandle<VkDevice>, VkImageCreateInfo*, VkAllocationCallbacks*, VulkanHandle<VkImage>*, VkResult> vkCreateImage = null;
	public readonly delegate* unmanaged<VulkanHandle<VkDevice>, VulkanHandle<VkImage>, VkAllocationCallbacks*, void> vkDestroyImage = null;
	public readonly delegate* unmanaged<VulkanHandle<VkDevice>, VulkanHandle<VkImage>, VkImageSubresource*, VkSubresourceLayout*, void> vkGetImageSubresourceLayout = null;
	public readonly delegate* unmanaged<VulkanHandle<VkDevice>, VkImageViewCreateInfo*, VkAllocationCallbacks*, VulkanHandle<VkImageView>*, VkResult> vkCreateImageView = null;
	public readonly delegate* unmanaged<VulkanHandle<VkDevice>, VulkanHandle<VkImageView>, VkAllocationCallbacks*, void> vkDestroyImageView = null;
	public readonly delegate* unmanaged<VulkanHandle<VkDevice>, VkShaderModuleCreateInfo*, VkAllocationCallbacks*, VulkanHandle<VkShaderModule>*, VkResult> vkCreateShaderModule = null;
	public readonly delegate* unmanaged<VulkanHandle<VkDevice>, VulkanHandle<VkShaderModule>, VkAllocationCallbacks*, void> vkDestroyShaderModule = null;
	public readonly delegate* unmanaged<VulkanHandle<VkDevice>, VkPipelineCacheCreateInfo*, VkAllocationCallbacks*, VulkanHandle<VkPipelineCache>*, VkResult> vkCreatePipelineCache = null;
	public readonly delegate* unmanaged<VulkanHandle<VkDevice>, VulkanHandle<VkPipelineCache>, VkAllocationCallbacks*, void> vkDestroyPipelineCache = null;
	public readonly delegate* unmanaged<VulkanHandle<VkDevice>, VulkanHandle<VkPipelineCache>, ulong*, void*, VkResult> vkGetPipelineCacheData = null;
	public readonly delegate* unmanaged<VulkanHandle<VkDevice>, VulkanHandle<VkPipelineCache>, uint, VulkanHandle<VkPipelineCache>*, VkResult> vkMergePipelineCaches = null;
	public readonly delegate* unmanaged<VulkanHandle<VkDevice>, VulkanHandle<VkPipelineCache>, uint, VkGraphicsPipelineCreateInfo*, VkAllocationCallbacks*, VulkanHandle<VkPipeline>*, VkResult> vkCreateGraphicsPipelines = null;
	public readonly delegate* unmanaged<VulkanHandle<VkDevice>, VulkanHandle<VkPipelineCache>, uint, VkComputePipelineCreateInfo*, VkAllocationCallbacks*, VulkanHandle<VkPipeline>*, VkResult> vkCreateComputePipelines = null;
	public readonly delegate* unmanaged<VulkanHandle<VkDevice>, VulkanHandle<VkPipeline>, VkAllocationCallbacks*, void> vkDestroyPipeline = null;
	public readonly delegate* unmanaged<VulkanHandle<VkDevice>, VkPipelineLayoutCreateInfo*, VkAllocationCallbacks*, VulkanHandle<VkPipelineLayout>*, VkResult> vkCreatePipelineLayout = null;
	public readonly delegate* unmanaged<VulkanHandle<VkDevice>, VulkanHandle<VkPipelineLayout>, VkAllocationCallbacks*, void> vkDestroyPipelineLayout = null;
	public readonly delegate* unmanaged<VulkanHandle<VkDevice>, VkSamplerCreateInfo*, VkAllocationCallbacks*, VulkanHandle<VkSampler>*, VkResult> vkCreateSampler = null;
	public readonly delegate* unmanaged<VulkanHandle<VkDevice>, VulkanHandle<VkSampler>, VkAllocationCallbacks*, void> vkDestroySampler = null;
	public readonly delegate* unmanaged<VulkanHandle<VkDevice>, VkDescriptorSetLayoutCreateInfo*, VkAllocationCallbacks*, VulkanHandle<VkDescriptorSetLayout>*, VkResult> vkCreateDescriptorSetLayout = null;
	public readonly delegate* unmanaged<VulkanHandle<VkDevice>, VulkanHandle<VkDescriptorSetLayout>, VkAllocationCallbacks*, void> vkDestroyDescriptorSetLayout = null;
	public readonly delegate* unmanaged<VulkanHandle<VkDevice>, VkDescriptorPoolCreateInfo*, VkAllocationCallbacks*, VulkanHandle<VkDescriptorPool>*, VkResult> vkCreateDescriptorPool = null;
	public readonly delegate* unmanaged<VulkanHandle<VkDevice>, VulkanHandle<VkDescriptorPool>, VkAllocationCallbacks*, void> vkDestroyDescriptorPool = null;
	public readonly delegate* unmanaged<VulkanHandle<VkDevice>, VulkanHandle<VkDescriptorPool>, VkDescriptorPoolResetFlags, VkResult> vkResetDescriptorPool = null;
	public readonly delegate* unmanaged<VulkanHandle<VkDevice>, VkDescriptorSetAllocateInfo*, VulkanHandle<VkDescriptorSet>*, VkResult> vkAllocateDescriptorSets = null;
	public readonly delegate* unmanaged<VulkanHandle<VkDevice>, VulkanHandle<VkDescriptorPool>, uint, VulkanHandle<VkDescriptorSet>*, VkResult> vkFreeDescriptorSets = null;
	public readonly delegate* unmanaged<VulkanHandle<VkDevice>, uint, VkWriteDescriptorSet*, uint, VkCopyDescriptorSet*, void> vkUpdateDescriptorSets = null;
	public readonly delegate* unmanaged<VulkanHandle<VkDevice>, VkFramebufferCreateInfo*, VkAllocationCallbacks*, VulkanHandle<VkFramebuffer>*, VkResult> vkCreateFramebuffer = null;
	public readonly delegate* unmanaged<VulkanHandle<VkDevice>, VulkanHandle<VkFramebuffer>, VkAllocationCallbacks*, void> vkDestroyFramebuffer = null;
	public readonly delegate* unmanaged<VulkanHandle<VkDevice>, VkRenderPassCreateInfo*, VkAllocationCallbacks*, VulkanHandle<VkRenderPass>*, VkResult> vkCreateRenderPass = null;
	public readonly delegate* unmanaged<VulkanHandle<VkDevice>, VulkanHandle<VkRenderPass>, VkAllocationCallbacks*, void> vkDestroyRenderPass = null;
	public readonly delegate* unmanaged<VulkanHandle<VkDevice>, VulkanHandle<VkRenderPass>, VkExtent2D*, void> vkGetRenderAreaGranularity = null;
	public readonly delegate* unmanaged<VulkanHandle<VkDevice>, VkCommandPoolCreateInfo*, VkAllocationCallbacks*, VulkanHandle<VkCommandPool>*, VkResult> vkCreateCommandPool = null;
	public readonly delegate* unmanaged<VulkanHandle<VkDevice>, VulkanHandle<VkCommandPool>, VkAllocationCallbacks*, void> vkDestroyCommandPool = null;
	public readonly delegate* unmanaged<VulkanHandle<VkDevice>, VulkanHandle<VkCommandPool>, VkCommandPoolResetFlags, VkResult> vkResetCommandPool = null;
	public readonly delegate* unmanaged<VulkanHandle<VkDevice>, VkCommandBufferAllocateInfo*, VulkanHandle<VkCommandBuffer>*, VkResult> vkAllocateCommandBuffers = null;
	public readonly delegate* unmanaged<VulkanHandle<VkDevice>, VulkanHandle<VkCommandPool>, uint, VulkanHandle<VkCommandBuffer>*, void> vkFreeCommandBuffers = null;
	public readonly delegate* unmanaged<VulkanHandle<VkCommandBuffer>, VkCommandBufferBeginInfo*, VkResult> vkBeginCommandBuffer = null;
	public readonly delegate* unmanaged<VulkanHandle<VkCommandBuffer>, VkResult> vkEndCommandBuffer = null;
	public readonly delegate* unmanaged<VulkanHandle<VkCommandBuffer>, VkCommandBufferResetFlags, VkResult> vkResetCommandBuffer = null;
	public readonly delegate* unmanaged<VulkanHandle<VkCommandBuffer>, VkPipelineBindPoint, VulkanHandle<VkPipeline>, void> vkCmdBindPipeline = null;
	public readonly delegate* unmanaged<VulkanHandle<VkCommandBuffer>, uint, uint, VkViewport*, void> vkCmdSetViewport = null;
	public readonly delegate* unmanaged<VulkanHandle<VkCommandBuffer>, uint, uint, VkRect2D*, void> vkCmdSetScissor = null;
	public readonly delegate* unmanaged<VulkanHandle<VkCommandBuffer>, float, void> vkCmdSetLineWidth = null;
	public readonly delegate* unmanaged<VulkanHandle<VkCommandBuffer>, float, float, float, void> vkCmdSetDepthBias = null;
	public readonly delegate* unmanaged<VulkanHandle<VkCommandBuffer>, float*, void> vkCmdSetBlendConstants = null;
	public readonly delegate* unmanaged<VulkanHandle<VkCommandBuffer>, float, float, void> vkCmdSetDepthBounds = null;
	public readonly delegate* unmanaged<VulkanHandle<VkCommandBuffer>, VkStencilFaceFlags, uint, void> vkCmdSetStencilCompareMask = null;
	public readonly delegate* unmanaged<VulkanHandle<VkCommandBuffer>, VkStencilFaceFlags, uint, void> vkCmdSetStencilWriteMask = null;
	public readonly delegate* unmanaged<VulkanHandle<VkCommandBuffer>, VkStencilFaceFlags, uint, void> vkCmdSetStencilReference = null;
	public readonly delegate* unmanaged<VulkanHandle<VkCommandBuffer>, VkPipelineBindPoint, VulkanHandle<VkPipelineLayout>, uint, uint, VulkanHandle<VkDescriptorSet>*, uint, uint*, void> vkCmdBindDescriptorSets = null;
	public readonly delegate* unmanaged<VulkanHandle<VkCommandBuffer>, VulkanHandle<VkBuffer>, ulong, VkIndexType, void> vkCmdBindIndexBuffer = null;
	public readonly delegate* unmanaged<VulkanHandle<VkCommandBuffer>, uint, uint, VulkanHandle<VkBuffer>*, ulong*, void> vkCmdBindVertexBuffers = null;
	public readonly delegate* unmanaged<VulkanHandle<VkCommandBuffer>, uint, uint, uint, uint, void> vkCmdDraw = null;
	public readonly delegate* unmanaged<VulkanHandle<VkCommandBuffer>, uint, uint, uint, int, uint, void> vkCmdDrawIndexed = null;
	public readonly delegate* unmanaged<VulkanHandle<VkCommandBuffer>, VulkanHandle<VkBuffer>, ulong, uint, uint, void> vkCmdDrawIndirect = null;
	public readonly delegate* unmanaged<VulkanHandle<VkCommandBuffer>, VulkanHandle<VkBuffer>, ulong, uint, uint, void> vkCmdDrawIndexedIndirect = null;
	public readonly delegate* unmanaged<VulkanHandle<VkCommandBuffer>, uint, uint, uint, void> vkCmdDispatch = null;
	public readonly delegate* unmanaged<VulkanHandle<VkCommandBuffer>, VulkanHandle<VkBuffer>, ulong, void> vkCmdDispatchIndirect = null;
	public readonly delegate* unmanaged<VulkanHandle<VkCommandBuffer>, VulkanHandle<VkBuffer>, VulkanHandle<VkBuffer>, uint, VkBufferCopy*, void> vkCmdCopyBuffer = null;
	public readonly delegate* unmanaged<VulkanHandle<VkCommandBuffer>, VulkanHandle<VkImage>, VkImageLayout, VulkanHandle<VkImage>, VkImageLayout, uint, VkImageCopy*, void> vkCmdCopyImage = null;
	public readonly delegate* unmanaged<VulkanHandle<VkCommandBuffer>, VulkanHandle<VkImage>, VkImageLayout, VulkanHandle<VkImage>, VkImageLayout, uint, VkImageBlit*, VkFilter, void> vkCmdBlitImage = null;
	public readonly delegate* unmanaged<VulkanHandle<VkCommandBuffer>, VulkanHandle<VkBuffer>, VulkanHandle<VkImage>, VkImageLayout, uint, VkBufferImageCopy*, void> vkCmdCopyBufferToImage = null;
	public readonly delegate* unmanaged<VulkanHandle<VkCommandBuffer>, VulkanHandle<VkImage>, VkImageLayout, VulkanHandle<VkBuffer>, uint, VkBufferImageCopy*, void> vkCmdCopyImageToBuffer = null;
	public readonly delegate* unmanaged<VulkanHandle<VkCommandBuffer>, VulkanHandle<VkBuffer>, ulong, ulong, void*, void> vkCmdUpdateBuffer = null;
	public readonly delegate* unmanaged<VulkanHandle<VkCommandBuffer>, VulkanHandle<VkBuffer>, ulong, ulong, uint, void> vkCmdFillBuffer = null;
	public readonly delegate* unmanaged<VulkanHandle<VkCommandBuffer>, VulkanHandle<VkImage>, VkImageLayout, VkClearColorValue*, uint, VkImageSubresourceRange*, void> vkCmdClearColorImage = null;
	public readonly delegate* unmanaged<VulkanHandle<VkCommandBuffer>, VulkanHandle<VkImage>, VkImageLayout, VkClearDepthStencilValue*, uint, VkImageSubresourceRange*, void> vkCmdClearDepthStencilImage = null;
	public readonly delegate* unmanaged<VulkanHandle<VkCommandBuffer>, uint, VkClearAttachment*, uint, VkClearRect*, void> vkCmdClearAttachments = null;
	public readonly delegate* unmanaged<VulkanHandle<VkCommandBuffer>, VulkanHandle<VkImage>, VkImageLayout, VulkanHandle<VkImage>, VkImageLayout, uint, VkImageResolve*, void> vkCmdResolveImage = null;
	public readonly delegate* unmanaged<VulkanHandle<VkCommandBuffer>, VulkanHandle<VkEvent>, VkPipelineStageFlags, void> vkCmdSetEvent = null;
	public readonly delegate* unmanaged<VulkanHandle<VkCommandBuffer>, VulkanHandle<VkEvent>, VkPipelineStageFlags, void> vkCmdResetEvent = null;
	public readonly delegate* unmanaged<VulkanHandle<VkCommandBuffer>, uint, VulkanHandle<VkEvent>*, VkPipelineStageFlags, VkPipelineStageFlags, uint, VkMemoryBarrier*, uint, VkBufferMemoryBarrier*, uint, VkImageMemoryBarrier*, void> vkCmdWaitEvents = null;
	public readonly delegate* unmanaged<VulkanHandle<VkCommandBuffer>, VkPipelineStageFlags, VkPipelineStageFlags, VkDependencyFlags, uint, VkMemoryBarrier*, uint, VkBufferMemoryBarrier*, uint, VkImageMemoryBarrier*, void> vkCmdPipelineBarrier = null;
	public readonly delegate* unmanaged<VulkanHandle<VkCommandBuffer>, VulkanHandle<VkQueryPool>, uint, VkQueryControlFlags, void> vkCmdBeginQuery = null;
	public readonly delegate* unmanaged<VulkanHandle<VkCommandBuffer>, VulkanHandle<VkQueryPool>, uint, void> vkCmdEndQuery = null;
	public readonly delegate* unmanaged<VulkanHandle<VkCommandBuffer>, VkConditionalRenderingBeginInfoEXT*, void> vkCmdBeginConditionalRenderingEXT = null;
	public readonly delegate* unmanaged<VulkanHandle<VkCommandBuffer>, void> vkCmdEndConditionalRenderingEXT = null;
	public readonly delegate* unmanaged<VulkanHandle<VkCommandBuffer>, VulkanHandle<VkQueryPool>, uint, uint, void> vkCmdResetQueryPool = null;
	public readonly delegate* unmanaged<VulkanHandle<VkCommandBuffer>, VkPipelineStageFlags, VulkanHandle<VkQueryPool>, uint, void> vkCmdWriteTimestamp = null;
	public readonly delegate* unmanaged<VulkanHandle<VkCommandBuffer>, VulkanHandle<VkQueryPool>, uint, uint, VulkanHandle<VkBuffer>, ulong, ulong, VkQueryResultFlags, void> vkCmdCopyQueryPoolResults = null;
	public readonly delegate* unmanaged<VulkanHandle<VkCommandBuffer>, VulkanHandle<VkPipelineLayout>, VkShaderStageFlags, uint, uint, void*, void> vkCmdPushConstants = null;
	public readonly delegate* unmanaged<VulkanHandle<VkCommandBuffer>, VkRenderPassBeginInfo*, VkSubpassContents, void> vkCmdBeginRenderPass = null;
	public readonly delegate* unmanaged<VulkanHandle<VkCommandBuffer>, VkSubpassContents, void> vkCmdNextSubpass = null;
	public readonly delegate* unmanaged<VulkanHandle<VkCommandBuffer>, void> vkCmdEndRenderPass = null;
	public readonly delegate* unmanaged<VulkanHandle<VkCommandBuffer>, uint, VulkanHandle<VkCommandBuffer>*, void> vkCmdExecuteCommands = null;
	public readonly delegate* unmanaged<VulkanHandle<VkDevice>, uint, VkSwapchainCreateInfoKHR*, VkAllocationCallbacks*, VulkanHandle<VkSwapchainKHR>*, VkResult> vkCreateSharedSwapchainsKHR = null;
	public readonly delegate* unmanaged<VulkanHandle<VkDevice>, VkSwapchainCreateInfoKHR*, VkAllocationCallbacks*, VulkanHandle<VkSwapchainKHR>*, VkResult> vkCreateSwapchainKHR = null;
	public readonly delegate* unmanaged<VulkanHandle<VkDevice>, VulkanHandle<VkSwapchainKHR>, VkAllocationCallbacks*, void> vkDestroySwapchainKHR = null;
	public readonly delegate* unmanaged<VulkanHandle<VkDevice>, VulkanHandle<VkSwapchainKHR>, uint*, VulkanHandle<VkImage>*, VkResult> vkGetSwapchainImagesKHR = null;
	public readonly delegate* unmanaged<VulkanHandle<VkDevice>, VulkanHandle<VkSwapchainKHR>, ulong, VulkanHandle<VkSemaphore>, VulkanHandle<VkFence>, uint*, VkResult> vkAcquireNextImageKHR = null;
	public readonly delegate* unmanaged<VulkanHandle<VkQueue>, VkPresentInfoKHR*, VkResult> vkQueuePresentKHR = null;
	public readonly delegate* unmanaged<VulkanHandle<VkDevice>, VkDebugMarkerObjectNameInfoEXT*, VkResult> vkDebugMarkerSetObjectNameEXT = null;
	public readonly delegate* unmanaged<VulkanHandle<VkDevice>, VkDebugMarkerObjectTagInfoEXT*, VkResult> vkDebugMarkerSetObjectTagEXT = null;
	public readonly delegate* unmanaged<VulkanHandle<VkCommandBuffer>, VkDebugMarkerMarkerInfoEXT*, void> vkCmdDebugMarkerBeginEXT = null;
	public readonly delegate* unmanaged<VulkanHandle<VkCommandBuffer>, void> vkCmdDebugMarkerEndEXT = null;
	public readonly delegate* unmanaged<VulkanHandle<VkCommandBuffer>, VkDebugMarkerMarkerInfoEXT*, void> vkCmdDebugMarkerInsertEXT = null;
	public readonly delegate* unmanaged<VulkanHandle<VkDevice>, VulkanHandle<VkDeviceMemory>, VkExternalMemoryHandleTypeFlagsNV, void**, VkResult> vkGetMemoryWin32HandleNV = null;
	public readonly delegate* unmanaged<VulkanHandle<VkCommandBuffer>, VkBool32, VkGeneratedCommandsInfoNV*, void> vkCmdExecuteGeneratedCommandsNV = null;
	public readonly delegate* unmanaged<VulkanHandle<VkCommandBuffer>, VkGeneratedCommandsInfoNV*, void> vkCmdPreprocessGeneratedCommandsNV = null;
	public readonly delegate* unmanaged<VulkanHandle<VkCommandBuffer>, VkPipelineBindPoint, VulkanHandle<VkPipeline>, uint, void> vkCmdBindPipelineShaderGroupNV = null;
	public readonly delegate* unmanaged<VulkanHandle<VkDevice>, VkGeneratedCommandsMemoryRequirementsInfoNV*, VkMemoryRequirements2*, void> vkGetGeneratedCommandsMemoryRequirementsNV = null;
	public readonly delegate* unmanaged<VulkanHandle<VkDevice>, VkIndirectCommandsLayoutCreateInfoNV*, VkAllocationCallbacks*, VulkanHandle<VkIndirectCommandsLayoutNV>*, VkResult> vkCreateIndirectCommandsLayoutNV = null;
	public readonly delegate* unmanaged<VulkanHandle<VkDevice>, VulkanHandle<VkIndirectCommandsLayoutNV>, VkAllocationCallbacks*, void> vkDestroyIndirectCommandsLayoutNV = null;
	public readonly delegate* unmanaged<VulkanHandle<VkCommandBuffer>, VkPipelineBindPoint, VulkanHandle<VkPipelineLayout>, uint, uint, VkWriteDescriptorSet*, void> vkCmdPushDescriptorSetKHR = null;
	public readonly delegate* unmanaged<VulkanHandle<VkDevice>, VulkanHandle<VkCommandPool>, VkCommandPoolTrimFlags, void> vkTrimCommandPool = null;
	public readonly delegate* unmanaged<VulkanHandle<VkDevice>, VulkanHandle<VkCommandPool>, VkCommandPoolTrimFlags, void> vkTrimCommandPoolKHR = null;
	public readonly delegate* unmanaged<VulkanHandle<VkDevice>, VkMemoryGetWin32HandleInfoKHR*, void**, VkResult> vkGetMemoryWin32HandleKHR = null;
	public readonly delegate* unmanaged<VulkanHandle<VkDevice>, VkExternalMemoryHandleTypeFlags, void*, VkMemoryWin32HandlePropertiesKHR*, VkResult> vkGetMemoryWin32HandlePropertiesKHR = null;
	public readonly delegate* unmanaged<VulkanHandle<VkDevice>, VkMemoryGetFdInfoKHR*, int*, VkResult> vkGetMemoryFdKHR = null;
	public readonly delegate* unmanaged<VulkanHandle<VkDevice>, VkExternalMemoryHandleTypeFlags, int, VkMemoryFdPropertiesKHR*, VkResult> vkGetMemoryFdPropertiesKHR = null;
	public readonly delegate* unmanaged<VulkanHandle<VkDevice>, VkSemaphoreGetWin32HandleInfoKHR*, void**, VkResult> vkGetSemaphoreWin32HandleKHR = null;
	public readonly delegate* unmanaged<VulkanHandle<VkDevice>, VkImportSemaphoreWin32HandleInfoKHR*, VkResult> vkImportSemaphoreWin32HandleKHR = null;
	public readonly delegate* unmanaged<VulkanHandle<VkDevice>, VkSemaphoreGetFdInfoKHR*, int*, VkResult> vkGetSemaphoreFdKHR = null;
	public readonly delegate* unmanaged<VulkanHandle<VkDevice>, VkImportSemaphoreFdInfoKHR*, VkResult> vkImportSemaphoreFdKHR = null;
	public readonly delegate* unmanaged<VulkanHandle<VkDevice>, VkFenceGetWin32HandleInfoKHR*, void**, VkResult> vkGetFenceWin32HandleKHR = null;
	public readonly delegate* unmanaged<VulkanHandle<VkDevice>, VkImportFenceWin32HandleInfoKHR*, VkResult> vkImportFenceWin32HandleKHR = null;
	public readonly delegate* unmanaged<VulkanHandle<VkDevice>, VkFenceGetFdInfoKHR*, int*, VkResult> vkGetFenceFdKHR = null;
	public readonly delegate* unmanaged<VulkanHandle<VkDevice>, VkImportFenceFdInfoKHR*, VkResult> vkImportFenceFdKHR = null;
	public readonly delegate* unmanaged<VulkanHandle<VkDevice>, VulkanHandle<VkDisplayKHR>, VkDisplayPowerInfoEXT*, VkResult> vkDisplayPowerControlEXT = null;
	public readonly delegate* unmanaged<VulkanHandle<VkDevice>, VkDeviceEventInfoEXT*, VkAllocationCallbacks*, VulkanHandle<VkFence>*, VkResult> vkRegisterDeviceEventEXT = null;
	public readonly delegate* unmanaged<VulkanHandle<VkDevice>, VulkanHandle<VkDisplayKHR>, VkDisplayEventInfoEXT*, VkAllocationCallbacks*, VulkanHandle<VkFence>*, VkResult> vkRegisterDisplayEventEXT = null;
	public readonly delegate* unmanaged<VulkanHandle<VkDevice>, VulkanHandle<VkSwapchainKHR>, VkSurfaceCounterFlagsEXT, ulong*, VkResult> vkGetSwapchainCounterEXT = null;
	public readonly delegate* unmanaged<VulkanHandle<VkDevice>, uint, uint, uint, VkPeerMemoryFeatureFlags*, void> vkGetDeviceGroupPeerMemoryFeatures = null;
	public readonly delegate* unmanaged<VulkanHandle<VkDevice>, uint, uint, uint, VkPeerMemoryFeatureFlags*, void> vkGetDeviceGroupPeerMemoryFeaturesKHR = null;
	public readonly delegate* unmanaged<VulkanHandle<VkDevice>, uint, VkBindBufferMemoryInfo*, VkResult> vkBindBufferMemory2 = null;
	public readonly delegate* unmanaged<VulkanHandle<VkDevice>, uint, VkBindBufferMemoryInfo*, VkResult> vkBindBufferMemory2KHR = null;
	public readonly delegate* unmanaged<VulkanHandle<VkDevice>, uint, VkBindImageMemoryInfo*, VkResult> vkBindImageMemory2 = null;
	public readonly delegate* unmanaged<VulkanHandle<VkDevice>, uint, VkBindImageMemoryInfo*, VkResult> vkBindImageMemory2KHR = null;
	public readonly delegate* unmanaged<VulkanHandle<VkCommandBuffer>, uint, void> vkCmdSetDeviceMask = null;
	public readonly delegate* unmanaged<VulkanHandle<VkCommandBuffer>, uint, void> vkCmdSetDeviceMaskKHR = null;
	public readonly delegate* unmanaged<VulkanHandle<VkDevice>, VkDeviceGroupPresentCapabilitiesKHR*, VkResult> vkGetDeviceGroupPresentCapabilitiesKHR = null;
	public readonly delegate* unmanaged<VulkanHandle<VkDevice>, VulkanHandle<VkSurfaceKHR>, VkDeviceGroupPresentModeFlagsKHR*, VkResult> vkGetDeviceGroupSurfacePresentModesKHR = null;
	public readonly delegate* unmanaged<VulkanHandle<VkDevice>, VkAcquireNextImageInfoKHR*, uint*, VkResult> vkAcquireNextImage2KHR = null;
	public readonly delegate* unmanaged<VulkanHandle<VkCommandBuffer>, uint, uint, uint, uint, uint, uint, void> vkCmdDispatchBase = null;
	public readonly delegate* unmanaged<VulkanHandle<VkCommandBuffer>, uint, uint, uint, uint, uint, uint, void> vkCmdDispatchBaseKHR = null;
	public readonly delegate* unmanaged<VulkanHandle<VkDevice>, VkDescriptorUpdateTemplateCreateInfo*, VkAllocationCallbacks*, VulkanHandle<VkDescriptorUpdateTemplate>*, VkResult> vkCreateDescriptorUpdateTemplate = null;
	public readonly delegate* unmanaged<VulkanHandle<VkDevice>, VkDescriptorUpdateTemplateCreateInfo*, VkAllocationCallbacks*, VulkanHandle<VkDescriptorUpdateTemplate>*, VkResult> vkCreateDescriptorUpdateTemplateKHR = null;
	public readonly delegate* unmanaged<VulkanHandle<VkDevice>, VulkanHandle<VkDescriptorUpdateTemplate>, VkAllocationCallbacks*, void> vkDestroyDescriptorUpdateTemplate = null;
	public readonly delegate* unmanaged<VulkanHandle<VkDevice>, VulkanHandle<VkDescriptorUpdateTemplate>, VkAllocationCallbacks*, void> vkDestroyDescriptorUpdateTemplateKHR = null;
	public readonly delegate* unmanaged<VulkanHandle<VkDevice>, VulkanHandle<VkDescriptorSet>, VulkanHandle<VkDescriptorUpdateTemplate>, void*, void> vkUpdateDescriptorSetWithTemplate = null;
	public readonly delegate* unmanaged<VulkanHandle<VkDevice>, VulkanHandle<VkDescriptorSet>, VulkanHandle<VkDescriptorUpdateTemplate>, void*, void> vkUpdateDescriptorSetWithTemplateKHR = null;
	public readonly delegate* unmanaged<VulkanHandle<VkCommandBuffer>, VulkanHandle<VkDescriptorUpdateTemplate>, VulkanHandle<VkPipelineLayout>, uint, void*, void> vkCmdPushDescriptorSetWithTemplateKHR = null;
	public readonly delegate* unmanaged<VulkanHandle<VkDevice>, uint, VulkanHandle<VkSwapchainKHR>*, VkHdrMetadataEXT*, void> vkSetHdrMetadataEXT = null;
	public readonly delegate* unmanaged<VulkanHandle<VkDevice>, VulkanHandle<VkSwapchainKHR>, VkResult> vkGetSwapchainStatusKHR = null;
	public readonly delegate* unmanaged<VulkanHandle<VkDevice>, VulkanHandle<VkSwapchainKHR>, VkRefreshCycleDurationGOOGLE*, VkResult> vkGetRefreshCycleDurationGOOGLE = null;
	public readonly delegate* unmanaged<VulkanHandle<VkDevice>, VulkanHandle<VkSwapchainKHR>, uint*, VkPastPresentationTimingGOOGLE*, VkResult> vkGetPastPresentationTimingGOOGLE = null;
	public readonly delegate* unmanaged<VulkanHandle<VkCommandBuffer>, uint, uint, VkViewportWScalingNV*, void> vkCmdSetViewportWScalingNV = null;
	public readonly delegate* unmanaged<VulkanHandle<VkCommandBuffer>, uint, uint, VkRect2D*, void> vkCmdSetDiscardRectangleEXT = null;
	public readonly delegate* unmanaged<VulkanHandle<VkCommandBuffer>, VkSampleLocationsInfoEXT*, void> vkCmdSetSampleLocationsEXT = null;
	public readonly delegate* unmanaged<VulkanHandle<VkDevice>, VkBufferMemoryRequirementsInfo2*, VkMemoryRequirements2*, void> vkGetBufferMemoryRequirements2 = null;
	public readonly delegate* unmanaged<VulkanHandle<VkDevice>, VkBufferMemoryRequirementsInfo2*, VkMemoryRequirements2*, void> vkGetBufferMemoryRequirements2KHR = null;
	public readonly delegate* unmanaged<VulkanHandle<VkDevice>, VkImageMemoryRequirementsInfo2*, VkMemoryRequirements2*, void> vkGetImageMemoryRequirements2 = null;
	public readonly delegate* unmanaged<VulkanHandle<VkDevice>, VkImageMemoryRequirementsInfo2*, VkMemoryRequirements2*, void> vkGetImageMemoryRequirements2KHR = null;
	public readonly delegate* unmanaged<VulkanHandle<VkDevice>, VkImageSparseMemoryRequirementsInfo2*, uint*, VkSparseImageMemoryRequirements2*, void> vkGetImageSparseMemoryRequirements2 = null;
	public readonly delegate* unmanaged<VulkanHandle<VkDevice>, VkImageSparseMemoryRequirementsInfo2*, uint*, VkSparseImageMemoryRequirements2*, void> vkGetImageSparseMemoryRequirements2KHR = null;
	public readonly delegate* unmanaged<VulkanHandle<VkDevice>, VkSamplerYcbcrConversionCreateInfo*, VkAllocationCallbacks*, VulkanHandle<VkSamplerYcbcrConversion>*, VkResult> vkCreateSamplerYcbcrConversion = null;
	public readonly delegate* unmanaged<VulkanHandle<VkDevice>, VkSamplerYcbcrConversionCreateInfo*, VkAllocationCallbacks*, VulkanHandle<VkSamplerYcbcrConversion>*, VkResult> vkCreateSamplerYcbcrConversionKHR = null;
	public readonly delegate* unmanaged<VulkanHandle<VkDevice>, VulkanHandle<VkSamplerYcbcrConversion>, VkAllocationCallbacks*, void> vkDestroySamplerYcbcrConversion = null;
	public readonly delegate* unmanaged<VulkanHandle<VkDevice>, VulkanHandle<VkSamplerYcbcrConversion>, VkAllocationCallbacks*, void> vkDestroySamplerYcbcrConversionKHR = null;
	public readonly delegate* unmanaged<VulkanHandle<VkDevice>, VkDeviceQueueInfo2*, VulkanHandle<VkQueue>*, void> vkGetDeviceQueue2 = null;
	public readonly delegate* unmanaged<VulkanHandle<VkDevice>, VkValidationCacheCreateInfoEXT*, VkAllocationCallbacks*, VulkanHandle<VkValidationCacheEXT>*, VkResult> vkCreateValidationCacheEXT = null;
	public readonly delegate* unmanaged<VulkanHandle<VkDevice>, VulkanHandle<VkValidationCacheEXT>, VkAllocationCallbacks*, void> vkDestroyValidationCacheEXT = null;
	public readonly delegate* unmanaged<VulkanHandle<VkDevice>, VulkanHandle<VkValidationCacheEXT>, ulong*, void*, VkResult> vkGetValidationCacheDataEXT = null;
	public readonly delegate* unmanaged<VulkanHandle<VkDevice>, VulkanHandle<VkValidationCacheEXT>, uint, VulkanHandle<VkValidationCacheEXT>*, VkResult> vkMergeValidationCachesEXT = null;
	public readonly delegate* unmanaged<VulkanHandle<VkDevice>, VkDescriptorSetLayoutCreateInfo*, VkDescriptorSetLayoutSupport*, void> vkGetDescriptorSetLayoutSupport = null;
	public readonly delegate* unmanaged<VulkanHandle<VkDevice>, VkDescriptorSetLayoutCreateInfo*, VkDescriptorSetLayoutSupport*, void> vkGetDescriptorSetLayoutSupportKHR = null;
	public readonly delegate* unmanaged<VulkanHandle<VkDevice>, VkFormat, VkImageUsageFlags, int*, VkResult> vkGetSwapchainGrallocUsageANDROID = null;
	public readonly delegate* unmanaged<VulkanHandle<VkDevice>, VkFormat, VkImageUsageFlags, VkSwapchainImageUsageFlagsANDROID, ulong*, ulong*, VkResult> vkGetSwapchainGrallocUsage2ANDROID = null;
	public readonly delegate* unmanaged<VulkanHandle<VkDevice>, VulkanHandle<VkImage>, int, VulkanHandle<VkSemaphore>, VulkanHandle<VkFence>, VkResult> vkAcquireImageANDROID = null;
	public readonly delegate* unmanaged<VulkanHandle<VkQueue>, uint, VulkanHandle<VkSemaphore>*, VulkanHandle<VkImage>, int*, VkResult> vkQueueSignalReleaseImageANDROID = null;
	public readonly delegate* unmanaged<VulkanHandle<VkDevice>, VulkanHandle<VkPipeline>, VkShaderStageFlags, VkShaderInfoTypeAMD, ulong*, void*, VkResult> vkGetShaderInfoAMD = null;
	public readonly delegate* unmanaged<VulkanHandle<VkDevice>, VulkanHandle<VkSwapchainKHR>, VkBool32, void> vkSetLocalDimmingAMD = null;
	public readonly delegate* unmanaged<VulkanHandle<VkDevice>, uint, VkCalibratedTimestampInfoEXT*, ulong*, ulong*, VkResult> vkGetCalibratedTimestampsEXT = null;
	public readonly delegate* unmanaged<VulkanHandle<VkDevice>, VkDebugUtilsObjectNameInfoEXT*, VkResult> vkSetDebugUtilsObjectNameEXT = null;
	public readonly delegate* unmanaged<VulkanHandle<VkDevice>, VkDebugUtilsObjectTagInfoEXT*, VkResult> vkSetDebugUtilsObjectTagEXT = null;
	public readonly delegate* unmanaged<VulkanHandle<VkQueue>, VkDebugUtilsLabelEXT*, void> vkQueueBeginDebugUtilsLabelEXT = null;
	public readonly delegate* unmanaged<VulkanHandle<VkQueue>, void> vkQueueEndDebugUtilsLabelEXT = null;
	public readonly delegate* unmanaged<VulkanHandle<VkQueue>, VkDebugUtilsLabelEXT*, void> vkQueueInsertDebugUtilsLabelEXT = null;
	public readonly delegate* unmanaged<VulkanHandle<VkCommandBuffer>, VkDebugUtilsLabelEXT*, void> vkCmdBeginDebugUtilsLabelEXT = null;
	public readonly delegate* unmanaged<VulkanHandle<VkCommandBuffer>, void> vkCmdEndDebugUtilsLabelEXT = null;
	public readonly delegate* unmanaged<VulkanHandle<VkCommandBuffer>, VkDebugUtilsLabelEXT*, void> vkCmdInsertDebugUtilsLabelEXT = null;
	public readonly delegate* unmanaged<VulkanHandle<VkDevice>, VkExternalMemoryHandleTypeFlags, void*, VkMemoryHostPointerPropertiesEXT*, VkResult> vkGetMemoryHostPointerPropertiesEXT = null;
	public readonly delegate* unmanaged<VulkanHandle<VkCommandBuffer>, VkPipelineStageFlags, VulkanHandle<VkBuffer>, ulong, uint, void> vkCmdWriteBufferMarkerAMD = null;
	public readonly delegate* unmanaged<VulkanHandle<VkDevice>, VkRenderPassCreateInfo2*, VkAllocationCallbacks*, VulkanHandle<VkRenderPass>*, VkResult> vkCreateRenderPass2 = null;
	public readonly delegate* unmanaged<VulkanHandle<VkDevice>, VkRenderPassCreateInfo2*, VkAllocationCallbacks*, VulkanHandle<VkRenderPass>*, VkResult> vkCreateRenderPass2KHR = null;
	public readonly delegate* unmanaged<VulkanHandle<VkCommandBuffer>, VkRenderPassBeginInfo*, VkSubpassBeginInfo*, void> vkCmdBeginRenderPass2 = null;
	public readonly delegate* unmanaged<VulkanHandle<VkCommandBuffer>, VkRenderPassBeginInfo*, VkSubpassBeginInfo*, void> vkCmdBeginRenderPass2KHR = null;
	public readonly delegate* unmanaged<VulkanHandle<VkCommandBuffer>, VkSubpassBeginInfo*, VkSubpassEndInfo*, void> vkCmdNextSubpass2 = null;
	public readonly delegate* unmanaged<VulkanHandle<VkCommandBuffer>, VkSubpassBeginInfo*, VkSubpassEndInfo*, void> vkCmdNextSubpass2KHR = null;
	public readonly delegate* unmanaged<VulkanHandle<VkCommandBuffer>, VkSubpassEndInfo*, void> vkCmdEndRenderPass2 = null;
	public readonly delegate* unmanaged<VulkanHandle<VkCommandBuffer>, VkSubpassEndInfo*, void> vkCmdEndRenderPass2KHR = null;
	public readonly delegate* unmanaged<VulkanHandle<VkDevice>, VulkanHandle<VkSemaphore>, ulong*, VkResult> vkGetSemaphoreCounterValue = null;
	public readonly delegate* unmanaged<VulkanHandle<VkDevice>, VulkanHandle<VkSemaphore>, ulong*, VkResult> vkGetSemaphoreCounterValueKHR = null;
	public readonly delegate* unmanaged<VulkanHandle<VkDevice>, VkSemaphoreWaitInfo*, ulong, VkResult> vkWaitSemaphores = null;
	public readonly delegate* unmanaged<VulkanHandle<VkDevice>, VkSemaphoreWaitInfo*, ulong, VkResult> vkWaitSemaphoresKHR = null;
	public readonly delegate* unmanaged<VulkanHandle<VkDevice>, VkSemaphoreSignalInfo*, VkResult> vkSignalSemaphore = null;
	public readonly delegate* unmanaged<VulkanHandle<VkDevice>, VkSemaphoreSignalInfo*, VkResult> vkSignalSemaphoreKHR = null;
	public readonly delegate* unmanaged<VulkanHandle<VkDevice>, void*, VkAndroidHardwareBufferPropertiesANDROID*, VkResult> vkGetAndroidHardwareBufferPropertiesANDROID = null;
	public readonly delegate* unmanaged<VulkanHandle<VkDevice>, VkMemoryGetAndroidHardwareBufferInfoANDROID*, void**, VkResult> vkGetMemoryAndroidHardwareBufferANDROID = null;
	public readonly delegate* unmanaged<VulkanHandle<VkCommandBuffer>, VulkanHandle<VkBuffer>, ulong, VulkanHandle<VkBuffer>, ulong, uint, uint, void> vkCmdDrawIndirectCount = null;
	public readonly delegate* unmanaged<VulkanHandle<VkCommandBuffer>, VulkanHandle<VkBuffer>, ulong, VulkanHandle<VkBuffer>, ulong, uint, uint, void> vkCmdDrawIndirectCountKHR = null;
	public readonly delegate* unmanaged<VulkanHandle<VkCommandBuffer>, VulkanHandle<VkBuffer>, ulong, VulkanHandle<VkBuffer>, ulong, uint, uint, void> vkCmdDrawIndirectCountAMD = null;
	public readonly delegate* unmanaged<VulkanHandle<VkCommandBuffer>, VulkanHandle<VkBuffer>, ulong, VulkanHandle<VkBuffer>, ulong, uint, uint, void> vkCmdDrawIndexedIndirectCount = null;
	public readonly delegate* unmanaged<VulkanHandle<VkCommandBuffer>, VulkanHandle<VkBuffer>, ulong, VulkanHandle<VkBuffer>, ulong, uint, uint, void> vkCmdDrawIndexedIndirectCountKHR = null;
	public readonly delegate* unmanaged<VulkanHandle<VkCommandBuffer>, VulkanHandle<VkBuffer>, ulong, VulkanHandle<VkBuffer>, ulong, uint, uint, void> vkCmdDrawIndexedIndirectCountAMD = null;
	public readonly delegate* unmanaged<VulkanHandle<VkCommandBuffer>, void*, void> vkCmdSetCheckpointNV = null;
	public readonly delegate* unmanaged<VulkanHandle<VkQueue>, uint*, VkCheckpointDataNV*, void> vkGetQueueCheckpointDataNV = null;
	public readonly delegate* unmanaged<VulkanHandle<VkCommandBuffer>, uint, uint, VulkanHandle<VkBuffer>*, ulong*, ulong*, void> vkCmdBindTransformFeedbackBuffersEXT = null;
	public readonly delegate* unmanaged<VulkanHandle<VkCommandBuffer>, uint, uint, VulkanHandle<VkBuffer>*, ulong*, void> vkCmdBeginTransformFeedbackEXT = null;
	public readonly delegate* unmanaged<VulkanHandle<VkCommandBuffer>, uint, uint, VulkanHandle<VkBuffer>*, ulong*, void> vkCmdEndTransformFeedbackEXT = null;
	public readonly delegate* unmanaged<VulkanHandle<VkCommandBuffer>, VulkanHandle<VkQueryPool>, uint, VkQueryControlFlags, uint, void> vkCmdBeginQueryIndexedEXT = null;
	public readonly delegate* unmanaged<VulkanHandle<VkCommandBuffer>, VulkanHandle<VkQueryPool>, uint, uint, void> vkCmdEndQueryIndexedEXT = null;
	public readonly delegate* unmanaged<VulkanHandle<VkCommandBuffer>, uint, uint, VulkanHandle<VkBuffer>, ulong, uint, uint, void> vkCmdDrawIndirectByteCountEXT = null;
	public readonly delegate* unmanaged<VulkanHandle<VkCommandBuffer>, uint, uint, VkRect2D*, void> vkCmdSetExclusiveScissorNV = null;
	public readonly delegate* unmanaged<VulkanHandle<VkCommandBuffer>, VulkanHandle<VkImageView>, VkImageLayout, void> vkCmdBindShadingRateImageNV = null;
	public readonly delegate* unmanaged<VulkanHandle<VkCommandBuffer>, uint, uint, VkShadingRatePaletteNV*, void> vkCmdSetViewportShadingRatePaletteNV = null;
	public readonly delegate* unmanaged<VulkanHandle<VkCommandBuffer>, VkCoarseSampleOrderTypeNV, uint, VkCoarseSampleOrderCustomNV*, void> vkCmdSetCoarseSampleOrderNV = null;
	public readonly delegate* unmanaged<VulkanHandle<VkCommandBuffer>, uint, uint, void> vkCmdDrawMeshTasksNV = null;
	public readonly delegate* unmanaged<VulkanHandle<VkCommandBuffer>, VulkanHandle<VkBuffer>, ulong, uint, uint, void> vkCmdDrawMeshTasksIndirectNV = null;
	public readonly delegate* unmanaged<VulkanHandle<VkCommandBuffer>, VulkanHandle<VkBuffer>, ulong, VulkanHandle<VkBuffer>, ulong, uint, uint, void> vkCmdDrawMeshTasksIndirectCountNV = null;
	public readonly delegate* unmanaged<VulkanHandle<VkDevice>, VulkanHandle<VkPipeline>, uint, VkResult> vkCompileDeferredNV = null;
	public readonly delegate* unmanaged<VulkanHandle<VkDevice>, VkAccelerationStructureCreateInfoNV*, VkAllocationCallbacks*, VulkanHandle<VkAccelerationStructureNV>*, VkResult> vkCreateAccelerationStructureNV = null;
	public readonly delegate* unmanaged<VulkanHandle<VkDevice>, VulkanHandle<VkAccelerationStructureKHR>, VkAllocationCallbacks*, void> vkDestroyAccelerationStructureKHR = null;
	public readonly delegate* unmanaged<VulkanHandle<VkDevice>, VulkanHandle<VkAccelerationStructureKHR>, VkAllocationCallbacks*, void> vkDestroyAccelerationStructureNV = null;
	public readonly delegate* unmanaged<VulkanHandle<VkDevice>, VkAccelerationStructureMemoryRequirementsInfoKHR*, VkMemoryRequirements2*, void> vkGetAccelerationStructureMemoryRequirementsKHR = null;
	public readonly delegate* unmanaged<VulkanHandle<VkDevice>, VkAccelerationStructureMemoryRequirementsInfoNV*, VkMemoryRequirements2KHR*, void> vkGetAccelerationStructureMemoryRequirementsNV = null;
	public readonly delegate* unmanaged<VulkanHandle<VkDevice>, uint, VkBindAccelerationStructureMemoryInfoKHR*, VkResult> vkBindAccelerationStructureMemoryKHR = null;
	public readonly delegate* unmanaged<VulkanHandle<VkDevice>, uint, VkBindAccelerationStructureMemoryInfoKHR*, VkResult> vkBindAccelerationStructureMemoryNV = null;
	public readonly delegate* unmanaged<VulkanHandle<VkCommandBuffer>, VulkanHandle<VkAccelerationStructureKHR>, VulkanHandle<VkAccelerationStructureKHR>, VkCopyAccelerationStructureModeKHR, void> vkCmdCopyAccelerationStructureNV = null;
	public readonly delegate* unmanaged<VulkanHandle<VkCommandBuffer>, VkCopyAccelerationStructureInfoKHR*, void> vkCmdCopyAccelerationStructureKHR = null;
	public readonly delegate* unmanaged<VulkanHandle<VkDevice>, VkCopyAccelerationStructureInfoKHR*, VkResult> vkCopyAccelerationStructureKHR = null;
	public readonly delegate* unmanaged<VulkanHandle<VkCommandBuffer>, VkCopyAccelerationStructureToMemoryInfoKHR*, void> vkCmdCopyAccelerationStructureToMemoryKHR = null;
	public readonly delegate* unmanaged<VulkanHandle<VkDevice>, VkCopyAccelerationStructureToMemoryInfoKHR*, VkResult> vkCopyAccelerationStructureToMemoryKHR = null;
	public readonly delegate* unmanaged<VulkanHandle<VkCommandBuffer>, VkCopyMemoryToAccelerationStructureInfoKHR*, void> vkCmdCopyMemoryToAccelerationStructureKHR = null;
	public readonly delegate* unmanaged<VulkanHandle<VkDevice>, VkCopyMemoryToAccelerationStructureInfoKHR*, VkResult> vkCopyMemoryToAccelerationStructureKHR = null;
	public readonly delegate* unmanaged<VulkanHandle<VkCommandBuffer>, uint, VulkanHandle<VkAccelerationStructureKHR>*, VkQueryType, VulkanHandle<VkQueryPool>, uint, void> vkCmdWriteAccelerationStructuresPropertiesKHR = null;
	public readonly delegate* unmanaged<VulkanHandle<VkCommandBuffer>, uint, VulkanHandle<VkAccelerationStructureKHR>*, VkQueryType, VulkanHandle<VkQueryPool>, uint, void> vkCmdWriteAccelerationStructuresPropertiesNV = null;
	public readonly delegate* unmanaged<VulkanHandle<VkCommandBuffer>, VkAccelerationStructureInfoNV*, VulkanHandle<VkBuffer>, ulong, VkBool32, VulkanHandle<VkAccelerationStructureKHR>, VulkanHandle<VkAccelerationStructureKHR>, VulkanHandle<VkBuffer>, ulong, void> vkCmdBuildAccelerationStructureNV = null;
	public readonly delegate* unmanaged<VulkanHandle<VkDevice>, uint, VulkanHandle<VkAccelerationStructureKHR>*, VkQueryType, ulong, void*, ulong, VkResult> vkWriteAccelerationStructuresPropertiesKHR = null;
	public readonly delegate* unmanaged<VulkanHandle<VkCommandBuffer>, VkStridedBufferRegionKHR*, VkStridedBufferRegionKHR*, VkStridedBufferRegionKHR*, VkStridedBufferRegionKHR*, uint, uint, uint, void> vkCmdTraceRaysKHR = null;
	public readonly delegate* unmanaged<VulkanHandle<VkCommandBuffer>, VulkanHandle<VkBuffer>, ulong, VulkanHandle<VkBuffer>, ulong, ulong, VulkanHandle<VkBuffer>, ulong, ulong, VulkanHandle<VkBuffer>, ulong, ulong, uint, uint, uint, void> vkCmdTraceRaysNV = null;
	public readonly delegate* unmanaged<VulkanHandle<VkDevice>, VulkanHandle<VkPipeline>, uint, uint, ulong, void*, VkResult> vkGetRayTracingShaderGroupHandlesKHR = null;
	public readonly delegate* unmanaged<VulkanHandle<VkDevice>, VulkanHandle<VkPipeline>, uint, uint, ulong, void*, VkResult> vkGetRayTracingShaderGroupHandlesNV = null;
	public readonly delegate* unmanaged<VulkanHandle<VkDevice>, VulkanHandle<VkPipeline>, uint, uint, ulong, void*, VkResult> vkGetRayTracingCaptureReplayShaderGroupHandlesKHR = null;
	public readonly delegate* unmanaged<VulkanHandle<VkDevice>, VulkanHandle<VkAccelerationStructureKHR>, ulong, void*, VkResult> vkGetAccelerationStructureHandleNV = null;
	public readonly delegate* unmanaged<VulkanHandle<VkDevice>, VulkanHandle<VkPipelineCache>, uint, VkRayTracingPipelineCreateInfoNV*, VkAllocationCallbacks*, VulkanHandle<VkPipeline>*, VkResult> vkCreateRayTracingPipelinesNV = null;
	public readonly delegate* unmanaged<VulkanHandle<VkDevice>, VulkanHandle<VkPipelineCache>, uint, VkRayTracingPipelineCreateInfoKHR*, VkAllocationCallbacks*, VulkanHandle<VkPipeline>*, VkResult> vkCreateRayTracingPipelinesKHR = null;
	public readonly delegate* unmanaged<VulkanHandle<VkCommandBuffer>, VkStridedBufferRegionKHR*, VkStridedBufferRegionKHR*, VkStridedBufferRegionKHR*, VkStridedBufferRegionKHR*, VulkanHandle<VkBuffer>, ulong, void> vkCmdTraceRaysIndirectKHR = null;
	public readonly delegate* unmanaged<VulkanHandle<VkDevice>, VkAccelerationStructureVersionKHR*, VkResult> vkGetDeviceAccelerationStructureCompatibilityKHR = null;
	public readonly delegate* unmanaged<VulkanHandle<VkDevice>, VkImageViewHandleInfoNVX*, uint> vkGetImageViewHandleNVX = null;
	public readonly delegate* unmanaged<VulkanHandle<VkDevice>, VulkanHandle<VkImageView>, VkImageViewAddressPropertiesNVX*, VkResult> vkGetImageViewAddressNVX = null;
	public readonly delegate* unmanaged<VulkanHandle<VkDevice>, VkPhysicalDeviceSurfaceInfo2KHR*, VkDeviceGroupPresentModeFlagsKHR*, VkResult> vkGetDeviceGroupSurfacePresentModes2EXT = null;
	public readonly delegate* unmanaged<VulkanHandle<VkDevice>, VulkanHandle<VkSwapchainKHR>, VkResult> vkAcquireFullScreenExclusiveModeEXT = null;
	public readonly delegate* unmanaged<VulkanHandle<VkDevice>, VulkanHandle<VkSwapchainKHR>, VkResult> vkReleaseFullScreenExclusiveModeEXT = null;
	public readonly delegate* unmanaged<VulkanHandle<VkDevice>, VkAcquireProfilingLockInfoKHR*, VkResult> vkAcquireProfilingLockKHR = null;
	public readonly delegate* unmanaged<VulkanHandle<VkDevice>, void> vkReleaseProfilingLockKHR = null;
	public readonly delegate* unmanaged<VulkanHandle<VkDevice>, VulkanHandle<VkImage>, VkImageDrmFormatModifierPropertiesEXT*, VkResult> vkGetImageDrmFormatModifierPropertiesEXT = null;
	public readonly delegate* unmanaged<VulkanHandle<VkDevice>, VkBufferDeviceAddressInfo*, ulong> vkGetBufferOpaqueCaptureAddress = null;
	public readonly delegate* unmanaged<VulkanHandle<VkDevice>, VkBufferDeviceAddressInfo*, ulong> vkGetBufferOpaqueCaptureAddressKHR = null;
	public readonly delegate* unmanaged<VulkanHandle<VkDevice>, VkBufferDeviceAddressInfo*, ulong> vkGetBufferDeviceAddress = null;
	public readonly delegate* unmanaged<VulkanHandle<VkDevice>, VkBufferDeviceAddressInfo*, ulong> vkGetBufferDeviceAddressKHR = null;
	public readonly delegate* unmanaged<VulkanHandle<VkDevice>, VkBufferDeviceAddressInfo*, ulong> vkGetBufferDeviceAddressEXT = null;
	public readonly delegate* unmanaged<VulkanHandle<VkDevice>, VkInitializePerformanceApiInfoINTEL*, VkResult> vkInitializePerformanceApiINTEL = null;
	public readonly delegate* unmanaged<VulkanHandle<VkDevice>, void> vkUninitializePerformanceApiINTEL = null;
	public readonly delegate* unmanaged<VulkanHandle<VkCommandBuffer>, VkPerformanceMarkerInfoINTEL*, VkResult> vkCmdSetPerformanceMarkerINTEL = null;
	public readonly delegate* unmanaged<VulkanHandle<VkCommandBuffer>, VkPerformanceStreamMarkerInfoINTEL*, VkResult> vkCmdSetPerformanceStreamMarkerINTEL = null;
	public readonly delegate* unmanaged<VulkanHandle<VkCommandBuffer>, VkPerformanceOverrideInfoINTEL*, VkResult> vkCmdSetPerformanceOverrideINTEL = null;
	public readonly delegate* unmanaged<VulkanHandle<VkDevice>, VkPerformanceConfigurationAcquireInfoINTEL*, VulkanHandle<VkPerformanceConfigurationINTEL>*, VkResult> vkAcquirePerformanceConfigurationINTEL = null;
	public readonly delegate* unmanaged<VulkanHandle<VkDevice>, VulkanHandle<VkPerformanceConfigurationINTEL>, VkResult> vkReleasePerformanceConfigurationINTEL = null;
	public readonly delegate* unmanaged<VulkanHandle<VkQueue>, VulkanHandle<VkPerformanceConfigurationINTEL>, VkResult> vkQueueSetPerformanceConfigurationINTEL = null;
	public readonly delegate* unmanaged<VulkanHandle<VkDevice>, VkPerformanceParameterTypeINTEL, VkPerformanceValueINTEL*, VkResult> vkGetPerformanceParameterINTEL = null;
	public readonly delegate* unmanaged<VulkanHandle<VkDevice>, VkDeviceMemoryOpaqueCaptureAddressInfo*, ulong> vkGetDeviceMemoryOpaqueCaptureAddress = null;
	public readonly delegate* unmanaged<VulkanHandle<VkDevice>, VkDeviceMemoryOpaqueCaptureAddressInfo*, ulong> vkGetDeviceMemoryOpaqueCaptureAddressKHR = null;
	public readonly delegate* unmanaged<VulkanHandle<VkDevice>, VkPipelineInfoKHR*, uint*, VkPipelineExecutablePropertiesKHR*, VkResult> vkGetPipelineExecutablePropertiesKHR = null;
	public readonly delegate* unmanaged<VulkanHandle<VkDevice>, VkPipelineExecutableInfoKHR*, uint*, VkPipelineExecutableStatisticKHR*, VkResult> vkGetPipelineExecutableStatisticsKHR = null;
	public readonly delegate* unmanaged<VulkanHandle<VkDevice>, VkPipelineExecutableInfoKHR*, uint*, VkPipelineExecutableInternalRepresentationKHR*, VkResult> vkGetPipelineExecutableInternalRepresentationsKHR = null;
	public readonly delegate* unmanaged<VulkanHandle<VkCommandBuffer>, uint, ushort, void> vkCmdSetLineStippleEXT = null;
	public readonly delegate* unmanaged<VulkanHandle<VkDevice>, VkAccelerationStructureCreateInfoKHR*, VkAllocationCallbacks*, VulkanHandle<VkAccelerationStructureKHR>*, VkResult> vkCreateAccelerationStructureKHR = null;
	public readonly delegate* unmanaged<VulkanHandle<VkCommandBuffer>, uint, VkAccelerationStructureBuildGeometryInfoKHR*, VkAccelerationStructureBuildOffsetInfoKHR**, void> vkCmdBuildAccelerationStructureKHR = null;
	public readonly delegate* unmanaged<VulkanHandle<VkCommandBuffer>, VkAccelerationStructureBuildGeometryInfoKHR*, VulkanHandle<VkBuffer>, ulong, uint, void> vkCmdBuildAccelerationStructureIndirectKHR = null;
	public readonly delegate* unmanaged<VulkanHandle<VkDevice>, uint, VkAccelerationStructureBuildGeometryInfoKHR*, VkAccelerationStructureBuildOffsetInfoKHR**, VkResult> vkBuildAccelerationStructureKHR = null;
	public readonly delegate* unmanaged<VulkanHandle<VkDevice>, VkAccelerationStructureDeviceAddressInfoKHR*, ulong> vkGetAccelerationStructureDeviceAddressKHR = null;
	public readonly delegate* unmanaged<VulkanHandle<VkDevice>, VkAllocationCallbacks*, VulkanHandle<VkDeferredOperationKHR>*, VkResult> vkCreateDeferredOperationKHR = null;
	public readonly delegate* unmanaged<VulkanHandle<VkDevice>, VulkanHandle<VkDeferredOperationKHR>, VkAllocationCallbacks*, void> vkDestroyDeferredOperationKHR = null;
	public readonly delegate* unmanaged<VulkanHandle<VkDevice>, VulkanHandle<VkDeferredOperationKHR>, uint> vkGetDeferredOperationMaxConcurrencyKHR = null;
	public readonly delegate* unmanaged<VulkanHandle<VkDevice>, VulkanHandle<VkDeferredOperationKHR>, VkResult> vkGetDeferredOperationResultKHR = null;
	public readonly delegate* unmanaged<VulkanHandle<VkDevice>, VulkanHandle<VkDeferredOperationKHR>, VkResult> vkDeferredOperationJoinKHR = null;
	public readonly delegate* unmanaged<VulkanHandle<VkCommandBuffer>, VkCullModeFlags, void> vkCmdSetCullModeEXT = null;
	public readonly delegate* unmanaged<VulkanHandle<VkCommandBuffer>, VkFrontFace, void> vkCmdSetFrontFaceEXT = null;
	public readonly delegate* unmanaged<VulkanHandle<VkCommandBuffer>, VkPrimitiveTopology, void> vkCmdSetPrimitiveTopologyEXT = null;
	public readonly delegate* unmanaged<VulkanHandle<VkCommandBuffer>, uint, VkViewport*, void> vkCmdSetViewportWithCountEXT = null;
	public readonly delegate* unmanaged<VulkanHandle<VkCommandBuffer>, uint, VkRect2D*, void> vkCmdSetScissorWithCountEXT = null;
	public readonly delegate* unmanaged<VulkanHandle<VkCommandBuffer>, uint, uint, VulkanHandle<VkBuffer>*, ulong*, ulong*, ulong*, void> vkCmdBindVertexBuffers2EXT = null;
	public readonly delegate* unmanaged<VulkanHandle<VkCommandBuffer>, VkBool32, void> vkCmdSetDepthTestEnableEXT = null;
	public readonly delegate* unmanaged<VulkanHandle<VkCommandBuffer>, VkBool32, void> vkCmdSetDepthWriteEnableEXT = null;
	public readonly delegate* unmanaged<VulkanHandle<VkCommandBuffer>, VkCompareOp, void> vkCmdSetDepthCompareOpEXT = null;
	public readonly delegate* unmanaged<VulkanHandle<VkCommandBuffer>, VkBool32, void> vkCmdSetDepthBoundsTestEnableEXT = null;
	public readonly delegate* unmanaged<VulkanHandle<VkCommandBuffer>, VkBool32, void> vkCmdSetStencilTestEnableEXT = null;
	public readonly delegate* unmanaged<VulkanHandle<VkCommandBuffer>, VkStencilFaceFlags, VkStencilOp, VkStencilOp, VkStencilOp, VkCompareOp, void> vkCmdSetStencilOpEXT = null;
	public readonly delegate* unmanaged<VulkanHandle<VkDevice>, VkPrivateDataSlotCreateInfoEXT*, VkAllocationCallbacks*, VulkanHandle<VkPrivateDataSlotEXT>*, VkResult> vkCreatePrivateDataSlotEXT = null;
	public readonly delegate* unmanaged<VulkanHandle<VkDevice>, VulkanHandle<VkPrivateDataSlotEXT>, VkAllocationCallbacks*, void> vkDestroyPrivateDataSlotEXT = null;
	public readonly delegate* unmanaged<VulkanHandle<VkDevice>, VkObjectType, ulong, VulkanHandle<VkPrivateDataSlotEXT>, ulong, VkResult> vkSetPrivateDataEXT = null;
	public readonly delegate* unmanaged<VulkanHandle<VkDevice>, VkObjectType, ulong, VulkanHandle<VkPrivateDataSlotEXT>, ulong*, void> vkGetPrivateDataEXT = null;
	public readonly delegate* unmanaged<VulkanHandle<VkCommandBuffer>, VkCopyBufferInfo2KHR*, void> vkCmdCopyBuffer2KHR = null;
	public readonly delegate* unmanaged<VulkanHandle<VkCommandBuffer>, VkCopyImageInfo2KHR*, void> vkCmdCopyImage2KHR = null;
	public readonly delegate* unmanaged<VulkanHandle<VkCommandBuffer>, VkBlitImageInfo2KHR*, void> vkCmdBlitImage2KHR = null;
	public readonly delegate* unmanaged<VulkanHandle<VkCommandBuffer>, VkCopyBufferToImageInfo2KHR*, void> vkCmdCopyBufferToImage2KHR = null;
	public readonly delegate* unmanaged<VulkanHandle<VkCommandBuffer>, VkCopyImageToBufferInfo2KHR*, void> vkCmdCopyImageToBuffer2KHR = null;
	public readonly delegate* unmanaged<VulkanHandle<VkCommandBuffer>, VkResolveImageInfo2KHR*, void> vkCmdResolveImage2KHR = null;
	public readonly delegate* unmanaged<VulkanHandle<VkCommandBuffer>, VkExtent2D*, VkFragmentShadingRateCombinerOpKHR*, void> vkCmdSetFragmentShadingRateKHR = null;
	public readonly delegate* unmanaged<VulkanHandle<VkCommandBuffer>, VkFragmentShadingRateNV, VkFragmentShadingRateCombinerOpKHR*, void> vkCmdSetFragmentShadingRateEnumNV = null;

	/// <summary>Creates a new function table with all null pointers.</summary>
	public DeviceFunctionTable() { }

	/// <summary>Creates a new function table and loads the functions.</summary>
	/// <param name="device">The device to load the functions for.</param>
	/// <param name="version">The core API version that the device was created with.</param>
	public DeviceFunctionTable(VulkanHandle<VkDevice> dev, VkVersion version)
	{
		void* addr = null;
		CoreVersion = version;

		vkDestroyDevice = (delegate* unmanaged<VulkanHandle<VkDevice>, VkAllocationCallbacks*, void>)LoadFunc(dev, "vkDestroyDevice");
		vkGetDeviceQueue = (delegate* unmanaged<VulkanHandle<VkDevice>, uint, uint, VulkanHandle<VkQueue>*, void>)LoadFunc(dev, "vkGetDeviceQueue");
		vkQueueSubmit = (delegate* unmanaged<VulkanHandle<VkQueue>, uint, VkSubmitInfo*, VulkanHandle<VkFence>, VkResult>)LoadFunc(dev, "vkQueueSubmit");
		vkQueueWaitIdle = (delegate* unmanaged<VulkanHandle<VkQueue>, VkResult>)LoadFunc(dev, "vkQueueWaitIdle");
		vkDeviceWaitIdle = (delegate* unmanaged<VulkanHandle<VkDevice>, VkResult>)LoadFunc(dev, "vkDeviceWaitIdle");
		vkAllocateMemory = (delegate* unmanaged<VulkanHandle<VkDevice>, VkMemoryAllocateInfo*, VkAllocationCallbacks*, VulkanHandle<VkDeviceMemory>*, VkResult>)LoadFunc(dev, "vkAllocateMemory");
		vkFreeMemory = (delegate* unmanaged<VulkanHandle<VkDevice>, VulkanHandle<VkDeviceMemory>, VkAllocationCallbacks*, void>)LoadFunc(dev, "vkFreeMemory");
		vkMapMemory = (delegate* unmanaged<VulkanHandle<VkDevice>, VulkanHandle<VkDeviceMemory>, ulong, ulong, VkMemoryMapFlags, void**, VkResult>)LoadFunc(dev, "vkMapMemory");
		vkUnmapMemory = (delegate* unmanaged<VulkanHandle<VkDevice>, VulkanHandle<VkDeviceMemory>, void>)LoadFunc(dev, "vkUnmapMemory");
		vkFlushMappedMemoryRanges = (delegate* unmanaged<VulkanHandle<VkDevice>, uint, VkMappedMemoryRange*, VkResult>)LoadFunc(dev, "vkFlushMappedMemoryRanges");
		vkInvalidateMappedMemoryRanges = (delegate* unmanaged<VulkanHandle<VkDevice>, uint, VkMappedMemoryRange*, VkResult>)LoadFunc(dev, "vkInvalidateMappedMemoryRanges");
		vkGetDeviceMemoryCommitment = (delegate* unmanaged<VulkanHandle<VkDevice>, VulkanHandle<VkDeviceMemory>, ulong*, void>)LoadFunc(dev, "vkGetDeviceMemoryCommitment");
		vkGetBufferMemoryRequirements = (delegate* unmanaged<VulkanHandle<VkDevice>, VulkanHandle<VkBuffer>, VkMemoryRequirements*, void>)LoadFunc(dev, "vkGetBufferMemoryRequirements");
		vkBindBufferMemory = (delegate* unmanaged<VulkanHandle<VkDevice>, VulkanHandle<VkBuffer>, VulkanHandle<VkDeviceMemory>, ulong, VkResult>)LoadFunc(dev, "vkBindBufferMemory");
		vkGetImageMemoryRequirements = (delegate* unmanaged<VulkanHandle<VkDevice>, VulkanHandle<VkImage>, VkMemoryRequirements*, void>)LoadFunc(dev, "vkGetImageMemoryRequirements");
		vkBindImageMemory = (delegate* unmanaged<VulkanHandle<VkDevice>, VulkanHandle<VkImage>, VulkanHandle<VkDeviceMemory>, ulong, VkResult>)LoadFunc(dev, "vkBindImageMemory");
		vkGetImageSparseMemoryRequirements = (delegate* unmanaged<VulkanHandle<VkDevice>, VulkanHandle<VkImage>, uint*, VkSparseImageMemoryRequirements*, void>)LoadFunc(dev, "vkGetImageSparseMemoryRequirements");
		vkQueueBindSparse = (delegate* unmanaged<VulkanHandle<VkQueue>, uint, VkBindSparseInfo*, VulkanHandle<VkFence>, VkResult>)LoadFunc(dev, "vkQueueBindSparse");
		vkCreateFence = (delegate* unmanaged<VulkanHandle<VkDevice>, VkFenceCreateInfo*, VkAllocationCallbacks*, VulkanHandle<VkFence>*, VkResult>)LoadFunc(dev, "vkCreateFence");
		vkDestroyFence = (delegate* unmanaged<VulkanHandle<VkDevice>, VulkanHandle<VkFence>, VkAllocationCallbacks*, void>)LoadFunc(dev, "vkDestroyFence");
		vkResetFences = (delegate* unmanaged<VulkanHandle<VkDevice>, uint, VulkanHandle<VkFence>*, VkResult>)LoadFunc(dev, "vkResetFences");
		vkGetFenceStatus = (delegate* unmanaged<VulkanHandle<VkDevice>, VulkanHandle<VkFence>, VkResult>)LoadFunc(dev, "vkGetFenceStatus");
		vkWaitForFences = (delegate* unmanaged<VulkanHandle<VkDevice>, uint, VulkanHandle<VkFence>*, VkBool32, ulong, VkResult>)LoadFunc(dev, "vkWaitForFences");
		vkCreateSemaphore = (delegate* unmanaged<VulkanHandle<VkDevice>, VkSemaphoreCreateInfo*, VkAllocationCallbacks*, VulkanHandle<VkSemaphore>*, VkResult>)LoadFunc(dev, "vkCreateSemaphore");
		vkDestroySemaphore = (delegate* unmanaged<VulkanHandle<VkDevice>, VulkanHandle<VkSemaphore>, VkAllocationCallbacks*, void>)LoadFunc(dev, "vkDestroySemaphore");
		vkCreateEvent = (delegate* unmanaged<VulkanHandle<VkDevice>, VkEventCreateInfo*, VkAllocationCallbacks*, VulkanHandle<VkEvent>*, VkResult>)LoadFunc(dev, "vkCreateEvent");
		vkDestroyEvent = (delegate* unmanaged<VulkanHandle<VkDevice>, VulkanHandle<VkEvent>, VkAllocationCallbacks*, void>)LoadFunc(dev, "vkDestroyEvent");
		vkGetEventStatus = (delegate* unmanaged<VulkanHandle<VkDevice>, VulkanHandle<VkEvent>, VkResult>)LoadFunc(dev, "vkGetEventStatus");
		vkSetEvent = (delegate* unmanaged<VulkanHandle<VkDevice>, VulkanHandle<VkEvent>, VkResult>)LoadFunc(dev, "vkSetEvent");
		vkResetEvent = (delegate* unmanaged<VulkanHandle<VkDevice>, VulkanHandle<VkEvent>, VkResult>)LoadFunc(dev, "vkResetEvent");
		vkCreateQueryPool = (delegate* unmanaged<VulkanHandle<VkDevice>, VkQueryPoolCreateInfo*, VkAllocationCallbacks*, VulkanHandle<VkQueryPool>*, VkResult>)LoadFunc(dev, "vkCreateQueryPool");
		vkDestroyQueryPool = (delegate* unmanaged<VulkanHandle<VkDevice>, VulkanHandle<VkQueryPool>, VkAllocationCallbacks*, void>)LoadFunc(dev, "vkDestroyQueryPool");
		vkGetQueryPoolResults = (delegate* unmanaged<VulkanHandle<VkDevice>, VulkanHandle<VkQueryPool>, uint, uint, ulong, void*, ulong, VkQueryResultFlags, VkResult>)LoadFunc(dev, "vkGetQueryPoolResults");
		if (version >= VkVersion.VK_VERSION_1_2) {
			vkResetQueryPool = (delegate* unmanaged<VulkanHandle<VkDevice>, VulkanHandle<VkQueryPool>, uint, uint, void>)LoadFunc(dev, "vkResetQueryPool");
		}
		vkResetQueryPoolEXT = vkResetQueryPool;
		if ((vkResetQueryPoolEXT == null) && TryLoadFunc(dev, "vkResetQueryPoolEXT", out addr)) {
			vkResetQueryPoolEXT = (delegate* unmanaged<VulkanHandle<VkDevice>, VulkanHandle<VkQueryPool>, uint, uint, void>)addr;
		}
		vkCreateBuffer = (delegate* unmanaged<VulkanHandle<VkDevice>, VkBufferCreateInfo*, VkAllocationCallbacks*, VulkanHandle<VkBuffer>*, VkResult>)LoadFunc(dev, "vkCreateBuffer");
		vkDestroyBuffer = (delegate* unmanaged<VulkanHandle<VkDevice>, VulkanHandle<VkBuffer>, VkAllocationCallbacks*, void>)LoadFunc(dev, "vkDestroyBuffer");
		vkCreateBufferView = (delegate* unmanaged<VulkanHandle<VkDevice>, VkBufferViewCreateInfo*, VkAllocationCallbacks*, VulkanHandle<VkBufferView>*, VkResult>)LoadFunc(dev, "vkCreateBufferView");
		vkDestroyBufferView = (delegate* unmanaged<VulkanHandle<VkDevice>, VulkanHandle<VkBufferView>, VkAllocationCallbacks*, void>)LoadFunc(dev, "vkDestroyBufferView");
		vkCreateImage = (delegate* unmanaged<VulkanHandle<VkDevice>, VkImageCreateInfo*, VkAllocationCallbacks*, VulkanHandle<VkImage>*, VkResult>)LoadFunc(dev, "vkCreateImage");
		vkDestroyImage = (delegate* unmanaged<VulkanHandle<VkDevice>, VulkanHandle<VkImage>, VkAllocationCallbacks*, void>)LoadFunc(dev, "vkDestroyImage");
		vkGetImageSubresourceLayout = (delegate* unmanaged<VulkanHandle<VkDevice>, VulkanHandle<VkImage>, VkImageSubresource*, VkSubresourceLayout*, void>)LoadFunc(dev, "vkGetImageSubresourceLayout");
		vkCreateImageView = (delegate* unmanaged<VulkanHandle<VkDevice>, VkImageViewCreateInfo*, VkAllocationCallbacks*, VulkanHandle<VkImageView>*, VkResult>)LoadFunc(dev, "vkCreateImageView");
		vkDestroyImageView = (delegate* unmanaged<VulkanHandle<VkDevice>, VulkanHandle<VkImageView>, VkAllocationCallbacks*, void>)LoadFunc(dev, "vkDestroyImageView");
		vkCreateShaderModule = (delegate* unmanaged<VulkanHandle<VkDevice>, VkShaderModuleCreateInfo*, VkAllocationCallbacks*, VulkanHandle<VkShaderModule>*, VkResult>)LoadFunc(dev, "vkCreateShaderModule");
		vkDestroyShaderModule = (delegate* unmanaged<VulkanHandle<VkDevice>, VulkanHandle<VkShaderModule>, VkAllocationCallbacks*, void>)LoadFunc(dev, "vkDestroyShaderModule");
		vkCreatePipelineCache = (delegate* unmanaged<VulkanHandle<VkDevice>, VkPipelineCacheCreateInfo*, VkAllocationCallbacks*, VulkanHandle<VkPipelineCache>*, VkResult>)LoadFunc(dev, "vkCreatePipelineCache");
		vkDestroyPipelineCache = (delegate* unmanaged<VulkanHandle<VkDevice>, VulkanHandle<VkPipelineCache>, VkAllocationCallbacks*, void>)LoadFunc(dev, "vkDestroyPipelineCache");
		vkGetPipelineCacheData = (delegate* unmanaged<VulkanHandle<VkDevice>, VulkanHandle<VkPipelineCache>, ulong*, void*, VkResult>)LoadFunc(dev, "vkGetPipelineCacheData");
		vkMergePipelineCaches = (delegate* unmanaged<VulkanHandle<VkDevice>, VulkanHandle<VkPipelineCache>, uint, VulkanHandle<VkPipelineCache>*, VkResult>)LoadFunc(dev, "vkMergePipelineCaches");
		vkCreateGraphicsPipelines = (delegate* unmanaged<VulkanHandle<VkDevice>, VulkanHandle<VkPipelineCache>, uint, VkGraphicsPipelineCreateInfo*, VkAllocationCallbacks*, VulkanHandle<VkPipeline>*, VkResult>)LoadFunc(dev, "vkCreateGraphicsPipelines");
		vkCreateComputePipelines = (delegate* unmanaged<VulkanHandle<VkDevice>, VulkanHandle<VkPipelineCache>, uint, VkComputePipelineCreateInfo*, VkAllocationCallbacks*, VulkanHandle<VkPipeline>*, VkResult>)LoadFunc(dev, "vkCreateComputePipelines");
		vkDestroyPipeline = (delegate* unmanaged<VulkanHandle<VkDevice>, VulkanHandle<VkPipeline>, VkAllocationCallbacks*, void>)LoadFunc(dev, "vkDestroyPipeline");
		vkCreatePipelineLayout = (delegate* unmanaged<VulkanHandle<VkDevice>, VkPipelineLayoutCreateInfo*, VkAllocationCallbacks*, VulkanHandle<VkPipelineLayout>*, VkResult>)LoadFunc(dev, "vkCreatePipelineLayout");
		vkDestroyPipelineLayout = (delegate* unmanaged<VulkanHandle<VkDevice>, VulkanHandle<VkPipelineLayout>, VkAllocationCallbacks*, void>)LoadFunc(dev, "vkDestroyPipelineLayout");
		vkCreateSampler = (delegate* unmanaged<VulkanHandle<VkDevice>, VkSamplerCreateInfo*, VkAllocationCallbacks*, VulkanHandle<VkSampler>*, VkResult>)LoadFunc(dev, "vkCreateSampler");
		vkDestroySampler = (delegate* unmanaged<VulkanHandle<VkDevice>, VulkanHandle<VkSampler>, VkAllocationCallbacks*, void>)LoadFunc(dev, "vkDestroySampler");
		vkCreateDescriptorSetLayout = (delegate* unmanaged<VulkanHandle<VkDevice>, VkDescriptorSetLayoutCreateInfo*, VkAllocationCallbacks*, VulkanHandle<VkDescriptorSetLayout>*, VkResult>)LoadFunc(dev, "vkCreateDescriptorSetLayout");
		vkDestroyDescriptorSetLayout = (delegate* unmanaged<VulkanHandle<VkDevice>, VulkanHandle<VkDescriptorSetLayout>, VkAllocationCallbacks*, void>)LoadFunc(dev, "vkDestroyDescriptorSetLayout");
		vkCreateDescriptorPool = (delegate* unmanaged<VulkanHandle<VkDevice>, VkDescriptorPoolCreateInfo*, VkAllocationCallbacks*, VulkanHandle<VkDescriptorPool>*, VkResult>)LoadFunc(dev, "vkCreateDescriptorPool");
		vkDestroyDescriptorPool = (delegate* unmanaged<VulkanHandle<VkDevice>, VulkanHandle<VkDescriptorPool>, VkAllocationCallbacks*, void>)LoadFunc(dev, "vkDestroyDescriptorPool");
		vkResetDescriptorPool = (delegate* unmanaged<VulkanHandle<VkDevice>, VulkanHandle<VkDescriptorPool>, VkDescriptorPoolResetFlags, VkResult>)LoadFunc(dev, "vkResetDescriptorPool");
		vkAllocateDescriptorSets = (delegate* unmanaged<VulkanHandle<VkDevice>, VkDescriptorSetAllocateInfo*, VulkanHandle<VkDescriptorSet>*, VkResult>)LoadFunc(dev, "vkAllocateDescriptorSets");
		vkFreeDescriptorSets = (delegate* unmanaged<VulkanHandle<VkDevice>, VulkanHandle<VkDescriptorPool>, uint, VulkanHandle<VkDescriptorSet>*, VkResult>)LoadFunc(dev, "vkFreeDescriptorSets");
		vkUpdateDescriptorSets = (delegate* unmanaged<VulkanHandle<VkDevice>, uint, VkWriteDescriptorSet*, uint, VkCopyDescriptorSet*, void>)LoadFunc(dev, "vkUpdateDescriptorSets");
		vkCreateFramebuffer = (delegate* unmanaged<VulkanHandle<VkDevice>, VkFramebufferCreateInfo*, VkAllocationCallbacks*, VulkanHandle<VkFramebuffer>*, VkResult>)LoadFunc(dev, "vkCreateFramebuffer");
		vkDestroyFramebuffer = (delegate* unmanaged<VulkanHandle<VkDevice>, VulkanHandle<VkFramebuffer>, VkAllocationCallbacks*, void>)LoadFunc(dev, "vkDestroyFramebuffer");
		vkCreateRenderPass = (delegate* unmanaged<VulkanHandle<VkDevice>, VkRenderPassCreateInfo*, VkAllocationCallbacks*, VulkanHandle<VkRenderPass>*, VkResult>)LoadFunc(dev, "vkCreateRenderPass");
		vkDestroyRenderPass = (delegate* unmanaged<VulkanHandle<VkDevice>, VulkanHandle<VkRenderPass>, VkAllocationCallbacks*, void>)LoadFunc(dev, "vkDestroyRenderPass");
		vkGetRenderAreaGranularity = (delegate* unmanaged<VulkanHandle<VkDevice>, VulkanHandle<VkRenderPass>, VkExtent2D*, void>)LoadFunc(dev, "vkGetRenderAreaGranularity");
		vkCreateCommandPool = (delegate* unmanaged<VulkanHandle<VkDevice>, VkCommandPoolCreateInfo*, VkAllocationCallbacks*, VulkanHandle<VkCommandPool>*, VkResult>)LoadFunc(dev, "vkCreateCommandPool");
		vkDestroyCommandPool = (delegate* unmanaged<VulkanHandle<VkDevice>, VulkanHandle<VkCommandPool>, VkAllocationCallbacks*, void>)LoadFunc(dev, "vkDestroyCommandPool");
		vkResetCommandPool = (delegate* unmanaged<VulkanHandle<VkDevice>, VulkanHandle<VkCommandPool>, VkCommandPoolResetFlags, VkResult>)LoadFunc(dev, "vkResetCommandPool");
		vkAllocateCommandBuffers = (delegate* unmanaged<VulkanHandle<VkDevice>, VkCommandBufferAllocateInfo*, VulkanHandle<VkCommandBuffer>*, VkResult>)LoadFunc(dev, "vkAllocateCommandBuffers");
		vkFreeCommandBuffers = (delegate* unmanaged<VulkanHandle<VkDevice>, VulkanHandle<VkCommandPool>, uint, VulkanHandle<VkCommandBuffer>*, void>)LoadFunc(dev, "vkFreeCommandBuffers");
		vkBeginCommandBuffer = (delegate* unmanaged<VulkanHandle<VkCommandBuffer>, VkCommandBufferBeginInfo*, VkResult>)LoadFunc(dev, "vkBeginCommandBuffer");
		vkEndCommandBuffer = (delegate* unmanaged<VulkanHandle<VkCommandBuffer>, VkResult>)LoadFunc(dev, "vkEndCommandBuffer");
		vkResetCommandBuffer = (delegate* unmanaged<VulkanHandle<VkCommandBuffer>, VkCommandBufferResetFlags, VkResult>)LoadFunc(dev, "vkResetCommandBuffer");
		vkCmdBindPipeline = (delegate* unmanaged<VulkanHandle<VkCommandBuffer>, VkPipelineBindPoint, VulkanHandle<VkPipeline>, void>)LoadFunc(dev, "vkCmdBindPipeline");
		vkCmdSetViewport = (delegate* unmanaged<VulkanHandle<VkCommandBuffer>, uint, uint, VkViewport*, void>)LoadFunc(dev, "vkCmdSetViewport");
		vkCmdSetScissor = (delegate* unmanaged<VulkanHandle<VkCommandBuffer>, uint, uint, VkRect2D*, void>)LoadFunc(dev, "vkCmdSetScissor");
		vkCmdSetLineWidth = (delegate* unmanaged<VulkanHandle<VkCommandBuffer>, float, void>)LoadFunc(dev, "vkCmdSetLineWidth");
		vkCmdSetDepthBias = (delegate* unmanaged<VulkanHandle<VkCommandBuffer>, float, float, float, void>)LoadFunc(dev, "vkCmdSetDepthBias");
		vkCmdSetBlendConstants = (delegate* unmanaged<VulkanHandle<VkCommandBuffer>, float*, void>)LoadFunc(dev, "vkCmdSetBlendConstants");
		vkCmdSetDepthBounds = (delegate* unmanaged<VulkanHandle<VkCommandBuffer>, float, float, void>)LoadFunc(dev, "vkCmdSetDepthBounds");
		vkCmdSetStencilCompareMask = (delegate* unmanaged<VulkanHandle<VkCommandBuffer>, VkStencilFaceFlags, uint, void>)LoadFunc(dev, "vkCmdSetStencilCompareMask");
		vkCmdSetStencilWriteMask = (delegate* unmanaged<VulkanHandle<VkCommandBuffer>, VkStencilFaceFlags, uint, void>)LoadFunc(dev, "vkCmdSetStencilWriteMask");
		vkCmdSetStencilReference = (delegate* unmanaged<VulkanHandle<VkCommandBuffer>, VkStencilFaceFlags, uint, void>)LoadFunc(dev, "vkCmdSetStencilReference");
		vkCmdBindDescriptorSets = (delegate* unmanaged<VulkanHandle<VkCommandBuffer>, VkPipelineBindPoint, VulkanHandle<VkPipelineLayout>, uint, uint, VulkanHandle<VkDescriptorSet>*, uint, uint*, void>)LoadFunc(dev, "vkCmdBindDescriptorSets");
		vkCmdBindIndexBuffer = (delegate* unmanaged<VulkanHandle<VkCommandBuffer>, VulkanHandle<VkBuffer>, ulong, VkIndexType, void>)LoadFunc(dev, "vkCmdBindIndexBuffer");
		vkCmdBindVertexBuffers = (delegate* unmanaged<VulkanHandle<VkCommandBuffer>, uint, uint, VulkanHandle<VkBuffer>*, ulong*, void>)LoadFunc(dev, "vkCmdBindVertexBuffers");
		vkCmdDraw = (delegate* unmanaged<VulkanHandle<VkCommandBuffer>, uint, uint, uint, uint, void>)LoadFunc(dev, "vkCmdDraw");
		vkCmdDrawIndexed = (delegate* unmanaged<VulkanHandle<VkCommandBuffer>, uint, uint, uint, int, uint, void>)LoadFunc(dev, "vkCmdDrawIndexed");
		vkCmdDrawIndirect = (delegate* unmanaged<VulkanHandle<VkCommandBuffer>, VulkanHandle<VkBuffer>, ulong, uint, uint, void>)LoadFunc(dev, "vkCmdDrawIndirect");
		vkCmdDrawIndexedIndirect = (delegate* unmanaged<VulkanHandle<VkCommandBuffer>, VulkanHandle<VkBuffer>, ulong, uint, uint, void>)LoadFunc(dev, "vkCmdDrawIndexedIndirect");
		vkCmdDispatch = (delegate* unmanaged<VulkanHandle<VkCommandBuffer>, uint, uint, uint, void>)LoadFunc(dev, "vkCmdDispatch");
		vkCmdDispatchIndirect = (delegate* unmanaged<VulkanHandle<VkCommandBuffer>, VulkanHandle<VkBuffer>, ulong, void>)LoadFunc(dev, "vkCmdDispatchIndirect");
		vkCmdCopyBuffer = (delegate* unmanaged<VulkanHandle<VkCommandBuffer>, VulkanHandle<VkBuffer>, VulkanHandle<VkBuffer>, uint, VkBufferCopy*, void>)LoadFunc(dev, "vkCmdCopyBuffer");
		vkCmdCopyImage = (delegate* unmanaged<VulkanHandle<VkCommandBuffer>, VulkanHandle<VkImage>, VkImageLayout, VulkanHandle<VkImage>, VkImageLayout, uint, VkImageCopy*, void>)LoadFunc(dev, "vkCmdCopyImage");
		vkCmdBlitImage = (delegate* unmanaged<VulkanHandle<VkCommandBuffer>, VulkanHandle<VkImage>, VkImageLayout, VulkanHandle<VkImage>, VkImageLayout, uint, VkImageBlit*, VkFilter, void>)LoadFunc(dev, "vkCmdBlitImage");
		vkCmdCopyBufferToImage = (delegate* unmanaged<VulkanHandle<VkCommandBuffer>, VulkanHandle<VkBuffer>, VulkanHandle<VkImage>, VkImageLayout, uint, VkBufferImageCopy*, void>)LoadFunc(dev, "vkCmdCopyBufferToImage");
		vkCmdCopyImageToBuffer = (delegate* unmanaged<VulkanHandle<VkCommandBuffer>, VulkanHandle<VkImage>, VkImageLayout, VulkanHandle<VkBuffer>, uint, VkBufferImageCopy*, void>)LoadFunc(dev, "vkCmdCopyImageToBuffer");
		vkCmdUpdateBuffer = (delegate* unmanaged<VulkanHandle<VkCommandBuffer>, VulkanHandle<VkBuffer>, ulong, ulong, void*, void>)LoadFunc(dev, "vkCmdUpdateBuffer");
		vkCmdFillBuffer = (delegate* unmanaged<VulkanHandle<VkCommandBuffer>, VulkanHandle<VkBuffer>, ulong, ulong, uint, void>)LoadFunc(dev, "vkCmdFillBuffer");
		vkCmdClearColorImage = (delegate* unmanaged<VulkanHandle<VkCommandBuffer>, VulkanHandle<VkImage>, VkImageLayout, VkClearColorValue*, uint, VkImageSubresourceRange*, void>)LoadFunc(dev, "vkCmdClearColorImage");
		vkCmdClearDepthStencilImage = (delegate* unmanaged<VulkanHandle<VkCommandBuffer>, VulkanHandle<VkImage>, VkImageLayout, VkClearDepthStencilValue*, uint, VkImageSubresourceRange*, void>)LoadFunc(dev, "vkCmdClearDepthStencilImage");
		vkCmdClearAttachments = (delegate* unmanaged<VulkanHandle<VkCommandBuffer>, uint, VkClearAttachment*, uint, VkClearRect*, void>)LoadFunc(dev, "vkCmdClearAttachments");
		vkCmdResolveImage = (delegate* unmanaged<VulkanHandle<VkCommandBuffer>, VulkanHandle<VkImage>, VkImageLayout, VulkanHandle<VkImage>, VkImageLayout, uint, VkImageResolve*, void>)LoadFunc(dev, "vkCmdResolveImage");
		vkCmdSetEvent = (delegate* unmanaged<VulkanHandle<VkCommandBuffer>, VulkanHandle<VkEvent>, VkPipelineStageFlags, void>)LoadFunc(dev, "vkCmdSetEvent");
		vkCmdResetEvent = (delegate* unmanaged<VulkanHandle<VkCommandBuffer>, VulkanHandle<VkEvent>, VkPipelineStageFlags, void>)LoadFunc(dev, "vkCmdResetEvent");
		vkCmdWaitEvents = (delegate* unmanaged<VulkanHandle<VkCommandBuffer>, uint, VulkanHandle<VkEvent>*, VkPipelineStageFlags, VkPipelineStageFlags, uint, VkMemoryBarrier*, uint, VkBufferMemoryBarrier*, uint, VkImageMemoryBarrier*, void>)LoadFunc(dev, "vkCmdWaitEvents");
		vkCmdPipelineBarrier = (delegate* unmanaged<VulkanHandle<VkCommandBuffer>, VkPipelineStageFlags, VkPipelineStageFlags, VkDependencyFlags, uint, VkMemoryBarrier*, uint, VkBufferMemoryBarrier*, uint, VkImageMemoryBarrier*, void>)LoadFunc(dev, "vkCmdPipelineBarrier");
		vkCmdBeginQuery = (delegate* unmanaged<VulkanHandle<VkCommandBuffer>, VulkanHandle<VkQueryPool>, uint, VkQueryControlFlags, void>)LoadFunc(dev, "vkCmdBeginQuery");
		vkCmdEndQuery = (delegate* unmanaged<VulkanHandle<VkCommandBuffer>, VulkanHandle<VkQueryPool>, uint, void>)LoadFunc(dev, "vkCmdEndQuery");
		if (TryLoadFunc(dev, "vkCmdBeginConditionalRenderingEXT", out addr)) {
			vkCmdBeginConditionalRenderingEXT = (delegate* unmanaged<VulkanHandle<VkCommandBuffer>, VkConditionalRenderingBeginInfoEXT*, void>)addr;
		}
		if (TryLoadFunc(dev, "vkCmdEndConditionalRenderingEXT", out addr)) {
			vkCmdEndConditionalRenderingEXT = (delegate* unmanaged<VulkanHandle<VkCommandBuffer>, void>)addr;
		}
		vkCmdResetQueryPool = (delegate* unmanaged<VulkanHandle<VkCommandBuffer>, VulkanHandle<VkQueryPool>, uint, uint, void>)LoadFunc(dev, "vkCmdResetQueryPool");
		vkCmdWriteTimestamp = (delegate* unmanaged<VulkanHandle<VkCommandBuffer>, VkPipelineStageFlags, VulkanHandle<VkQueryPool>, uint, void>)LoadFunc(dev, "vkCmdWriteTimestamp");
		vkCmdCopyQueryPoolResults = (delegate* unmanaged<VulkanHandle<VkCommandBuffer>, VulkanHandle<VkQueryPool>, uint, uint, VulkanHandle<VkBuffer>, ulong, ulong, VkQueryResultFlags, void>)LoadFunc(dev, "vkCmdCopyQueryPoolResults");
		vkCmdPushConstants = (delegate* unmanaged<VulkanHandle<VkCommandBuffer>, VulkanHandle<VkPipelineLayout>, VkShaderStageFlags, uint, uint, void*, void>)LoadFunc(dev, "vkCmdPushConstants");
		vkCmdBeginRenderPass = (delegate* unmanaged<VulkanHandle<VkCommandBuffer>, VkRenderPassBeginInfo*, VkSubpassContents, void>)LoadFunc(dev, "vkCmdBeginRenderPass");
		vkCmdNextSubpass = (delegate* unmanaged<VulkanHandle<VkCommandBuffer>, VkSubpassContents, void>)LoadFunc(dev, "vkCmdNextSubpass");
		vkCmdEndRenderPass = (delegate* unmanaged<VulkanHandle<VkCommandBuffer>, void>)LoadFunc(dev, "vkCmdEndRenderPass");
		vkCmdExecuteCommands = (delegate* unmanaged<VulkanHandle<VkCommandBuffer>, uint, VulkanHandle<VkCommandBuffer>*, void>)LoadFunc(dev, "vkCmdExecuteCommands");
		if (TryLoadFunc(dev, "vkCreateSharedSwapchainsKHR", out addr)) {
			vkCreateSharedSwapchainsKHR = (delegate* unmanaged<VulkanHandle<VkDevice>, uint, VkSwapchainCreateInfoKHR*, VkAllocationCallbacks*, VulkanHandle<VkSwapchainKHR>*, VkResult>)addr;
		}
		if (TryLoadFunc(dev, "vkCreateSwapchainKHR", out addr)) {
			vkCreateSwapchainKHR = (delegate* unmanaged<VulkanHandle<VkDevice>, VkSwapchainCreateInfoKHR*, VkAllocationCallbacks*, VulkanHandle<VkSwapchainKHR>*, VkResult>)addr;
		}
		if (TryLoadFunc(dev, "vkDestroySwapchainKHR", out addr)) {
			vkDestroySwapchainKHR = (delegate* unmanaged<VulkanHandle<VkDevice>, VulkanHandle<VkSwapchainKHR>, VkAllocationCallbacks*, void>)addr;
		}
		if (TryLoadFunc(dev, "vkGetSwapchainImagesKHR", out addr)) {
			vkGetSwapchainImagesKHR = (delegate* unmanaged<VulkanHandle<VkDevice>, VulkanHandle<VkSwapchainKHR>, uint*, VulkanHandle<VkImage>*, VkResult>)addr;
		}
		if (TryLoadFunc(dev, "vkAcquireNextImageKHR", out addr)) {
			vkAcquireNextImageKHR = (delegate* unmanaged<VulkanHandle<VkDevice>, VulkanHandle<VkSwapchainKHR>, ulong, VulkanHandle<VkSemaphore>, VulkanHandle<VkFence>, uint*, VkResult>)addr;
		}
		if (TryLoadFunc(dev, "vkQueuePresentKHR", out addr)) {
			vkQueuePresentKHR = (delegate* unmanaged<VulkanHandle<VkQueue>, VkPresentInfoKHR*, VkResult>)addr;
		}
		if (TryLoadFunc(dev, "vkDebugMarkerSetObjectNameEXT", out addr)) {
			vkDebugMarkerSetObjectNameEXT = (delegate* unmanaged<VulkanHandle<VkDevice>, VkDebugMarkerObjectNameInfoEXT*, VkResult>)addr;
		}
		if (TryLoadFunc(dev, "vkDebugMarkerSetObjectTagEXT", out addr)) {
			vkDebugMarkerSetObjectTagEXT = (delegate* unmanaged<VulkanHandle<VkDevice>, VkDebugMarkerObjectTagInfoEXT*, VkResult>)addr;
		}
		if (TryLoadFunc(dev, "vkCmdDebugMarkerBeginEXT", out addr)) {
			vkCmdDebugMarkerBeginEXT = (delegate* unmanaged<VulkanHandle<VkCommandBuffer>, VkDebugMarkerMarkerInfoEXT*, void>)addr;
		}
		if (TryLoadFunc(dev, "vkCmdDebugMarkerEndEXT", out addr)) {
			vkCmdDebugMarkerEndEXT = (delegate* unmanaged<VulkanHandle<VkCommandBuffer>, void>)addr;
		}
		if (TryLoadFunc(dev, "vkCmdDebugMarkerInsertEXT", out addr)) {
			vkCmdDebugMarkerInsertEXT = (delegate* unmanaged<VulkanHandle<VkCommandBuffer>, VkDebugMarkerMarkerInfoEXT*, void>)addr;
		}
		if (TryLoadFunc(dev, "vkGetMemoryWin32HandleNV", out addr)) {
			vkGetMemoryWin32HandleNV = (delegate* unmanaged<VulkanHandle<VkDevice>, VulkanHandle<VkDeviceMemory>, VkExternalMemoryHandleTypeFlagsNV, void**, VkResult>)addr;
		}
		if (TryLoadFunc(dev, "vkCmdExecuteGeneratedCommandsNV", out addr)) {
			vkCmdExecuteGeneratedCommandsNV = (delegate* unmanaged<VulkanHandle<VkCommandBuffer>, VkBool32, VkGeneratedCommandsInfoNV*, void>)addr;
		}
		if (TryLoadFunc(dev, "vkCmdPreprocessGeneratedCommandsNV", out addr)) {
			vkCmdPreprocessGeneratedCommandsNV = (delegate* unmanaged<VulkanHandle<VkCommandBuffer>, VkGeneratedCommandsInfoNV*, void>)addr;
		}
		if (TryLoadFunc(dev, "vkCmdBindPipelineShaderGroupNV", out addr)) {
			vkCmdBindPipelineShaderGroupNV = (delegate* unmanaged<VulkanHandle<VkCommandBuffer>, VkPipelineBindPoint, VulkanHandle<VkPipeline>, uint, void>)addr;
		}
		if (TryLoadFunc(dev, "vkGetGeneratedCommandsMemoryRequirementsNV", out addr)) {
			vkGetGeneratedCommandsMemoryRequirementsNV = (delegate* unmanaged<VulkanHandle<VkDevice>, VkGeneratedCommandsMemoryRequirementsInfoNV*, VkMemoryRequirements2*, void>)addr;
		}
		if (TryLoadFunc(dev, "vkCreateIndirectCommandsLayoutNV", out addr)) {
			vkCreateIndirectCommandsLayoutNV = (delegate* unmanaged<VulkanHandle<VkDevice>, VkIndirectCommandsLayoutCreateInfoNV*, VkAllocationCallbacks*, VulkanHandle<VkIndirectCommandsLayoutNV>*, VkResult>)addr;
		}
		if (TryLoadFunc(dev, "vkDestroyIndirectCommandsLayoutNV", out addr)) {
			vkDestroyIndirectCommandsLayoutNV = (delegate* unmanaged<VulkanHandle<VkDevice>, VulkanHandle<VkIndirectCommandsLayoutNV>, VkAllocationCallbacks*, void>)addr;
		}
		if (TryLoadFunc(dev, "vkCmdPushDescriptorSetKHR", out addr)) {
			vkCmdPushDescriptorSetKHR = (delegate* unmanaged<VulkanHandle<VkCommandBuffer>, VkPipelineBindPoint, VulkanHandle<VkPipelineLayout>, uint, uint, VkWriteDescriptorSet*, void>)addr;
		}
		if (version >= VkVersion.VK_VERSION_1_1) {
			vkTrimCommandPool = (delegate* unmanaged<VulkanHandle<VkDevice>, VulkanHandle<VkCommandPool>, VkCommandPoolTrimFlags, void>)LoadFunc(dev, "vkTrimCommandPool");
		}
		vkTrimCommandPoolKHR = vkTrimCommandPool;
		if ((vkTrimCommandPoolKHR == null) && TryLoadFunc(dev, "vkTrimCommandPoolKHR", out addr)) {
			vkTrimCommandPoolKHR = (delegate* unmanaged<VulkanHandle<VkDevice>, VulkanHandle<VkCommandPool>, VkCommandPoolTrimFlags, void>)addr;
		}
		if (TryLoadFunc(dev, "vkGetMemoryWin32HandleKHR", out addr)) {
			vkGetMemoryWin32HandleKHR = (delegate* unmanaged<VulkanHandle<VkDevice>, VkMemoryGetWin32HandleInfoKHR*, void**, VkResult>)addr;
		}
		if (TryLoadFunc(dev, "vkGetMemoryWin32HandlePropertiesKHR", out addr)) {
			vkGetMemoryWin32HandlePropertiesKHR = (delegate* unmanaged<VulkanHandle<VkDevice>, VkExternalMemoryHandleTypeFlags, void*, VkMemoryWin32HandlePropertiesKHR*, VkResult>)addr;
		}
		if (TryLoadFunc(dev, "vkGetMemoryFdKHR", out addr)) {
			vkGetMemoryFdKHR = (delegate* unmanaged<VulkanHandle<VkDevice>, VkMemoryGetFdInfoKHR*, int*, VkResult>)addr;
		}
		if (TryLoadFunc(dev, "vkGetMemoryFdPropertiesKHR", out addr)) {
			vkGetMemoryFdPropertiesKHR = (delegate* unmanaged<VulkanHandle<VkDevice>, VkExternalMemoryHandleTypeFlags, int, VkMemoryFdPropertiesKHR*, VkResult>)addr;
		}
		if (TryLoadFunc(dev, "vkGetSemaphoreWin32HandleKHR", out addr)) {
			vkGetSemaphoreWin32HandleKHR = (delegate* unmanaged<VulkanHandle<VkDevice>, VkSemaphoreGetWin32HandleInfoKHR*, void**, VkResult>)addr;
		}
		if (TryLoadFunc(dev, "vkImportSemaphoreWin32HandleKHR", out addr)) {
			vkImportSemaphoreWin32HandleKHR = (delegate* unmanaged<VulkanHandle<VkDevice>, VkImportSemaphoreWin32HandleInfoKHR*, VkResult>)addr;
		}
		if (TryLoadFunc(dev, "vkGetSemaphoreFdKHR", out addr)) {
			vkGetSemaphoreFdKHR = (delegate* unmanaged<VulkanHandle<VkDevice>, VkSemaphoreGetFdInfoKHR*, int*, VkResult>)addr;
		}
		if (TryLoadFunc(dev, "vkImportSemaphoreFdKHR", out addr)) {
			vkImportSemaphoreFdKHR = (delegate* unmanaged<VulkanHandle<VkDevice>, VkImportSemaphoreFdInfoKHR*, VkResult>)addr;
		}
		if (TryLoadFunc(dev, "vkGetFenceWin32HandleKHR", out addr)) {
			vkGetFenceWin32HandleKHR = (delegate* unmanaged<VulkanHandle<VkDevice>, VkFenceGetWin32HandleInfoKHR*, void**, VkResult>)addr;
		}
		if (TryLoadFunc(dev, "vkImportFenceWin32HandleKHR", out addr)) {
			vkImportFenceWin32HandleKHR = (delegate* unmanaged<VulkanHandle<VkDevice>, VkImportFenceWin32HandleInfoKHR*, VkResult>)addr;
		}
		if (TryLoadFunc(dev, "vkGetFenceFdKHR", out addr)) {
			vkGetFenceFdKHR = (delegate* unmanaged<VulkanHandle<VkDevice>, VkFenceGetFdInfoKHR*, int*, VkResult>)addr;
		}
		if (TryLoadFunc(dev, "vkImportFenceFdKHR", out addr)) {
			vkImportFenceFdKHR = (delegate* unmanaged<VulkanHandle<VkDevice>, VkImportFenceFdInfoKHR*, VkResult>)addr;
		}
		if (TryLoadFunc(dev, "vkDisplayPowerControlEXT", out addr)) {
			vkDisplayPowerControlEXT = (delegate* unmanaged<VulkanHandle<VkDevice>, VulkanHandle<VkDisplayKHR>, VkDisplayPowerInfoEXT*, VkResult>)addr;
		}
		if (TryLoadFunc(dev, "vkRegisterDeviceEventEXT", out addr)) {
			vkRegisterDeviceEventEXT = (delegate* unmanaged<VulkanHandle<VkDevice>, VkDeviceEventInfoEXT*, VkAllocationCallbacks*, VulkanHandle<VkFence>*, VkResult>)addr;
		}
		if (TryLoadFunc(dev, "vkRegisterDisplayEventEXT", out addr)) {
			vkRegisterDisplayEventEXT = (delegate* unmanaged<VulkanHandle<VkDevice>, VulkanHandle<VkDisplayKHR>, VkDisplayEventInfoEXT*, VkAllocationCallbacks*, VulkanHandle<VkFence>*, VkResult>)addr;
		}
		if (TryLoadFunc(dev, "vkGetSwapchainCounterEXT", out addr)) {
			vkGetSwapchainCounterEXT = (delegate* unmanaged<VulkanHandle<VkDevice>, VulkanHandle<VkSwapchainKHR>, VkSurfaceCounterFlagsEXT, ulong*, VkResult>)addr;
		}
		if (version >= VkVersion.VK_VERSION_1_1) {
			vkGetDeviceGroupPeerMemoryFeatures = (delegate* unmanaged<VulkanHandle<VkDevice>, uint, uint, uint, VkPeerMemoryFeatureFlags*, void>)LoadFunc(dev, "vkGetDeviceGroupPeerMemoryFeatures");
		}
		vkGetDeviceGroupPeerMemoryFeaturesKHR = vkGetDeviceGroupPeerMemoryFeatures;
		if ((vkGetDeviceGroupPeerMemoryFeaturesKHR == null) && TryLoadFunc(dev, "vkGetDeviceGroupPeerMemoryFeaturesKHR", out addr)) {
			vkGetDeviceGroupPeerMemoryFeaturesKHR = (delegate* unmanaged<VulkanHandle<VkDevice>, uint, uint, uint, VkPeerMemoryFeatureFlags*, void>)addr;
		}
		if (version >= VkVersion.VK_VERSION_1_1) {
			vkBindBufferMemory2 = (delegate* unmanaged<VulkanHandle<VkDevice>, uint, VkBindBufferMemoryInfo*, VkResult>)LoadFunc(dev, "vkBindBufferMemory2");
		}
		vkBindBufferMemory2KHR = vkBindBufferMemory2;
		if ((vkBindBufferMemory2KHR == null) && TryLoadFunc(dev, "vkBindBufferMemory2KHR", out addr)) {
			vkBindBufferMemory2KHR = (delegate* unmanaged<VulkanHandle<VkDevice>, uint, VkBindBufferMemoryInfo*, VkResult>)addr;
		}
		if (version >= VkVersion.VK_VERSION_1_1) {
			vkBindImageMemory2 = (delegate* unmanaged<VulkanHandle<VkDevice>, uint, VkBindImageMemoryInfo*, VkResult>)LoadFunc(dev, "vkBindImageMemory2");
		}
		vkBindImageMemory2KHR = vkBindImageMemory2;
		if ((vkBindImageMemory2KHR == null) && TryLoadFunc(dev, "vkBindImageMemory2KHR", out addr)) {
			vkBindImageMemory2KHR = (delegate* unmanaged<VulkanHandle<VkDevice>, uint, VkBindImageMemoryInfo*, VkResult>)addr;
		}
		if (version >= VkVersion.VK_VERSION_1_1) {
			vkCmdSetDeviceMask = (delegate* unmanaged<VulkanHandle<VkCommandBuffer>, uint, void>)LoadFunc(dev, "vkCmdSetDeviceMask");
		}
		vkCmdSetDeviceMaskKHR = vkCmdSetDeviceMask;
		if ((vkCmdSetDeviceMaskKHR == null) && TryLoadFunc(dev, "vkCmdSetDeviceMaskKHR", out addr)) {
			vkCmdSetDeviceMaskKHR = (delegate* unmanaged<VulkanHandle<VkCommandBuffer>, uint, void>)addr;
		}
		if (TryLoadFunc(dev, "vkGetDeviceGroupPresentCapabilitiesKHR", out addr)) {
			vkGetDeviceGroupPresentCapabilitiesKHR = (delegate* unmanaged<VulkanHandle<VkDevice>, VkDeviceGroupPresentCapabilitiesKHR*, VkResult>)addr;
		}
		if (TryLoadFunc(dev, "vkGetDeviceGroupSurfacePresentModesKHR", out addr)) {
			vkGetDeviceGroupSurfacePresentModesKHR = (delegate* unmanaged<VulkanHandle<VkDevice>, VulkanHandle<VkSurfaceKHR>, VkDeviceGroupPresentModeFlagsKHR*, VkResult>)addr;
		}
		if (TryLoadFunc(dev, "vkAcquireNextImage2KHR", out addr)) {
			vkAcquireNextImage2KHR = (delegate* unmanaged<VulkanHandle<VkDevice>, VkAcquireNextImageInfoKHR*, uint*, VkResult>)addr;
		}
		if (version >= VkVersion.VK_VERSION_1_1) {
			vkCmdDispatchBase = (delegate* unmanaged<VulkanHandle<VkCommandBuffer>, uint, uint, uint, uint, uint, uint, void>)LoadFunc(dev, "vkCmdDispatchBase");
		}
		vkCmdDispatchBaseKHR = vkCmdDispatchBase;
		if ((vkCmdDispatchBaseKHR == null) && TryLoadFunc(dev, "vkCmdDispatchBaseKHR", out addr)) {
			vkCmdDispatchBaseKHR = (delegate* unmanaged<VulkanHandle<VkCommandBuffer>, uint, uint, uint, uint, uint, uint, void>)addr;
		}
		if (version >= VkVersion.VK_VERSION_1_1) {
			vkCreateDescriptorUpdateTemplate = (delegate* unmanaged<VulkanHandle<VkDevice>, VkDescriptorUpdateTemplateCreateInfo*, VkAllocationCallbacks*, VulkanHandle<VkDescriptorUpdateTemplate>*, VkResult>)LoadFunc(dev, "vkCreateDescriptorUpdateTemplate");
		}
		vkCreateDescriptorUpdateTemplateKHR = vkCreateDescriptorUpdateTemplate;
		if ((vkCreateDescriptorUpdateTemplateKHR == null) && TryLoadFunc(dev, "vkCreateDescriptorUpdateTemplateKHR", out addr)) {
			vkCreateDescriptorUpdateTemplateKHR = (delegate* unmanaged<VulkanHandle<VkDevice>, VkDescriptorUpdateTemplateCreateInfo*, VkAllocationCallbacks*, VulkanHandle<VkDescriptorUpdateTemplate>*, VkResult>)addr;
		}
		if (version >= VkVersion.VK_VERSION_1_1) {
			vkDestroyDescriptorUpdateTemplate = (delegate* unmanaged<VulkanHandle<VkDevice>, VulkanHandle<VkDescriptorUpdateTemplate>, VkAllocationCallbacks*, void>)LoadFunc(dev, "vkDestroyDescriptorUpdateTemplate");
		}
		vkDestroyDescriptorUpdateTemplateKHR = vkDestroyDescriptorUpdateTemplate;
		if ((vkDestroyDescriptorUpdateTemplateKHR == null) && TryLoadFunc(dev, "vkDestroyDescriptorUpdateTemplateKHR", out addr)) {
			vkDestroyDescriptorUpdateTemplateKHR = (delegate* unmanaged<VulkanHandle<VkDevice>, VulkanHandle<VkDescriptorUpdateTemplate>, VkAllocationCallbacks*, void>)addr;
		}
		if (version >= VkVersion.VK_VERSION_1_1) {
			vkUpdateDescriptorSetWithTemplate = (delegate* unmanaged<VulkanHandle<VkDevice>, VulkanHandle<VkDescriptorSet>, VulkanHandle<VkDescriptorUpdateTemplate>, void*, void>)LoadFunc(dev, "vkUpdateDescriptorSetWithTemplate");
		}
		vkUpdateDescriptorSetWithTemplateKHR = vkUpdateDescriptorSetWithTemplate;
		if ((vkUpdateDescriptorSetWithTemplateKHR == null) && TryLoadFunc(dev, "vkUpdateDescriptorSetWithTemplateKHR", out addr)) {
			vkUpdateDescriptorSetWithTemplateKHR = (delegate* unmanaged<VulkanHandle<VkDevice>, VulkanHandle<VkDescriptorSet>, VulkanHandle<VkDescriptorUpdateTemplate>, void*, void>)addr;
		}
		if (TryLoadFunc(dev, "vkCmdPushDescriptorSetWithTemplateKHR", out addr)) {
			vkCmdPushDescriptorSetWithTemplateKHR = (delegate* unmanaged<VulkanHandle<VkCommandBuffer>, VulkanHandle<VkDescriptorUpdateTemplate>, VulkanHandle<VkPipelineLayout>, uint, void*, void>)addr;
		}
		if (TryLoadFunc(dev, "vkSetHdrMetadataEXT", out addr)) {
			vkSetHdrMetadataEXT = (delegate* unmanaged<VulkanHandle<VkDevice>, uint, VulkanHandle<VkSwapchainKHR>*, VkHdrMetadataEXT*, void>)addr;
		}
		if (TryLoadFunc(dev, "vkGetSwapchainStatusKHR", out addr)) {
			vkGetSwapchainStatusKHR = (delegate* unmanaged<VulkanHandle<VkDevice>, VulkanHandle<VkSwapchainKHR>, VkResult>)addr;
		}
		if (TryLoadFunc(dev, "vkGetRefreshCycleDurationGOOGLE", out addr)) {
			vkGetRefreshCycleDurationGOOGLE = (delegate* unmanaged<VulkanHandle<VkDevice>, VulkanHandle<VkSwapchainKHR>, VkRefreshCycleDurationGOOGLE*, VkResult>)addr;
		}
		if (TryLoadFunc(dev, "vkGetPastPresentationTimingGOOGLE", out addr)) {
			vkGetPastPresentationTimingGOOGLE = (delegate* unmanaged<VulkanHandle<VkDevice>, VulkanHandle<VkSwapchainKHR>, uint*, VkPastPresentationTimingGOOGLE*, VkResult>)addr;
		}
		if (TryLoadFunc(dev, "vkCmdSetViewportWScalingNV", out addr)) {
			vkCmdSetViewportWScalingNV = (delegate* unmanaged<VulkanHandle<VkCommandBuffer>, uint, uint, VkViewportWScalingNV*, void>)addr;
		}
		if (TryLoadFunc(dev, "vkCmdSetDiscardRectangleEXT", out addr)) {
			vkCmdSetDiscardRectangleEXT = (delegate* unmanaged<VulkanHandle<VkCommandBuffer>, uint, uint, VkRect2D*, void>)addr;
		}
		if (TryLoadFunc(dev, "vkCmdSetSampleLocationsEXT", out addr)) {
			vkCmdSetSampleLocationsEXT = (delegate* unmanaged<VulkanHandle<VkCommandBuffer>, VkSampleLocationsInfoEXT*, void>)addr;
		}
		if (version >= VkVersion.VK_VERSION_1_1) {
			vkGetBufferMemoryRequirements2 = (delegate* unmanaged<VulkanHandle<VkDevice>, VkBufferMemoryRequirementsInfo2*, VkMemoryRequirements2*, void>)LoadFunc(dev, "vkGetBufferMemoryRequirements2");
		}
		vkGetBufferMemoryRequirements2KHR = vkGetBufferMemoryRequirements2;
		if ((vkGetBufferMemoryRequirements2KHR == null) && TryLoadFunc(dev, "vkGetBufferMemoryRequirements2KHR", out addr)) {
			vkGetBufferMemoryRequirements2KHR = (delegate* unmanaged<VulkanHandle<VkDevice>, VkBufferMemoryRequirementsInfo2*, VkMemoryRequirements2*, void>)addr;
		}
		if (version >= VkVersion.VK_VERSION_1_1) {
			vkGetImageMemoryRequirements2 = (delegate* unmanaged<VulkanHandle<VkDevice>, VkImageMemoryRequirementsInfo2*, VkMemoryRequirements2*, void>)LoadFunc(dev, "vkGetImageMemoryRequirements2");
		}
		vkGetImageMemoryRequirements2KHR = vkGetImageMemoryRequirements2;
		if ((vkGetImageMemoryRequirements2KHR == null) && TryLoadFunc(dev, "vkGetImageMemoryRequirements2KHR", out addr)) {
			vkGetImageMemoryRequirements2KHR = (delegate* unmanaged<VulkanHandle<VkDevice>, VkImageMemoryRequirementsInfo2*, VkMemoryRequirements2*, void>)addr;
		}
		if (version >= VkVersion.VK_VERSION_1_1) {
			vkGetImageSparseMemoryRequirements2 = (delegate* unmanaged<VulkanHandle<VkDevice>, VkImageSparseMemoryRequirementsInfo2*, uint*, VkSparseImageMemoryRequirements2*, void>)LoadFunc(dev, "vkGetImageSparseMemoryRequirements2");
		}
		vkGetImageSparseMemoryRequirements2KHR = vkGetImageSparseMemoryRequirements2;
		if ((vkGetImageSparseMemoryRequirements2KHR == null) && TryLoadFunc(dev, "vkGetImageSparseMemoryRequirements2KHR", out addr)) {
			vkGetImageSparseMemoryRequirements2KHR = (delegate* unmanaged<VulkanHandle<VkDevice>, VkImageSparseMemoryRequirementsInfo2*, uint*, VkSparseImageMemoryRequirements2*, void>)addr;
		}
		if (version >= VkVersion.VK_VERSION_1_1) {
			vkCreateSamplerYcbcrConversion = (delegate* unmanaged<VulkanHandle<VkDevice>, VkSamplerYcbcrConversionCreateInfo*, VkAllocationCallbacks*, VulkanHandle<VkSamplerYcbcrConversion>*, VkResult>)LoadFunc(dev, "vkCreateSamplerYcbcrConversion");
		}
		vkCreateSamplerYcbcrConversionKHR = vkCreateSamplerYcbcrConversion;
		if ((vkCreateSamplerYcbcrConversionKHR == null) && TryLoadFunc(dev, "vkCreateSamplerYcbcrConversionKHR", out addr)) {
			vkCreateSamplerYcbcrConversionKHR = (delegate* unmanaged<VulkanHandle<VkDevice>, VkSamplerYcbcrConversionCreateInfo*, VkAllocationCallbacks*, VulkanHandle<VkSamplerYcbcrConversion>*, VkResult>)addr;
		}
		if (version >= VkVersion.VK_VERSION_1_1) {
			vkDestroySamplerYcbcrConversion = (delegate* unmanaged<VulkanHandle<VkDevice>, VulkanHandle<VkSamplerYcbcrConversion>, VkAllocationCallbacks*, void>)LoadFunc(dev, "vkDestroySamplerYcbcrConversion");
		}
		vkDestroySamplerYcbcrConversionKHR = vkDestroySamplerYcbcrConversion;
		if ((vkDestroySamplerYcbcrConversionKHR == null) && TryLoadFunc(dev, "vkDestroySamplerYcbcrConversionKHR", out addr)) {
			vkDestroySamplerYcbcrConversionKHR = (delegate* unmanaged<VulkanHandle<VkDevice>, VulkanHandle<VkSamplerYcbcrConversion>, VkAllocationCallbacks*, void>)addr;
		}
		if (version >= VkVersion.VK_VERSION_1_1) {
			vkGetDeviceQueue2 = (delegate* unmanaged<VulkanHandle<VkDevice>, VkDeviceQueueInfo2*, VulkanHandle<VkQueue>*, void>)LoadFunc(dev, "vkGetDeviceQueue2");
		}
		if (TryLoadFunc(dev, "vkCreateValidationCacheEXT", out addr)) {
			vkCreateValidationCacheEXT = (delegate* unmanaged<VulkanHandle<VkDevice>, VkValidationCacheCreateInfoEXT*, VkAllocationCallbacks*, VulkanHandle<VkValidationCacheEXT>*, VkResult>)addr;
		}
		if (TryLoadFunc(dev, "vkDestroyValidationCacheEXT", out addr)) {
			vkDestroyValidationCacheEXT = (delegate* unmanaged<VulkanHandle<VkDevice>, VulkanHandle<VkValidationCacheEXT>, VkAllocationCallbacks*, void>)addr;
		}
		if (TryLoadFunc(dev, "vkGetValidationCacheDataEXT", out addr)) {
			vkGetValidationCacheDataEXT = (delegate* unmanaged<VulkanHandle<VkDevice>, VulkanHandle<VkValidationCacheEXT>, ulong*, void*, VkResult>)addr;
		}
		if (TryLoadFunc(dev, "vkMergeValidationCachesEXT", out addr)) {
			vkMergeValidationCachesEXT = (delegate* unmanaged<VulkanHandle<VkDevice>, VulkanHandle<VkValidationCacheEXT>, uint, VulkanHandle<VkValidationCacheEXT>*, VkResult>)addr;
		}
		if (version >= VkVersion.VK_VERSION_1_1) {
			vkGetDescriptorSetLayoutSupport = (delegate* unmanaged<VulkanHandle<VkDevice>, VkDescriptorSetLayoutCreateInfo*, VkDescriptorSetLayoutSupport*, void>)LoadFunc(dev, "vkGetDescriptorSetLayoutSupport");
		}
		vkGetDescriptorSetLayoutSupportKHR = vkGetDescriptorSetLayoutSupport;
		if ((vkGetDescriptorSetLayoutSupportKHR == null) && TryLoadFunc(dev, "vkGetDescriptorSetLayoutSupportKHR", out addr)) {
			vkGetDescriptorSetLayoutSupportKHR = (delegate* unmanaged<VulkanHandle<VkDevice>, VkDescriptorSetLayoutCreateInfo*, VkDescriptorSetLayoutSupport*, void>)addr;
		}
		if (TryLoadFunc(dev, "vkGetSwapchainGrallocUsageANDROID", out addr)) {
			vkGetSwapchainGrallocUsageANDROID = (delegate* unmanaged<VulkanHandle<VkDevice>, VkFormat, VkImageUsageFlags, int*, VkResult>)addr;
		}
		if (TryLoadFunc(dev, "vkGetSwapchainGrallocUsage2ANDROID", out addr)) {
			vkGetSwapchainGrallocUsage2ANDROID = (delegate* unmanaged<VulkanHandle<VkDevice>, VkFormat, VkImageUsageFlags, VkSwapchainImageUsageFlagsANDROID, ulong*, ulong*, VkResult>)addr;
		}
		if (TryLoadFunc(dev, "vkAcquireImageANDROID", out addr)) {
			vkAcquireImageANDROID = (delegate* unmanaged<VulkanHandle<VkDevice>, VulkanHandle<VkImage>, int, VulkanHandle<VkSemaphore>, VulkanHandle<VkFence>, VkResult>)addr;
		}
		if (TryLoadFunc(dev, "vkQueueSignalReleaseImageANDROID", out addr)) {
			vkQueueSignalReleaseImageANDROID = (delegate* unmanaged<VulkanHandle<VkQueue>, uint, VulkanHandle<VkSemaphore>*, VulkanHandle<VkImage>, int*, VkResult>)addr;
		}
		if (TryLoadFunc(dev, "vkGetShaderInfoAMD", out addr)) {
			vkGetShaderInfoAMD = (delegate* unmanaged<VulkanHandle<VkDevice>, VulkanHandle<VkPipeline>, VkShaderStageFlags, VkShaderInfoTypeAMD, ulong*, void*, VkResult>)addr;
		}
		if (TryLoadFunc(dev, "vkSetLocalDimmingAMD", out addr)) {
			vkSetLocalDimmingAMD = (delegate* unmanaged<VulkanHandle<VkDevice>, VulkanHandle<VkSwapchainKHR>, VkBool32, void>)addr;
		}
		if (TryLoadFunc(dev, "vkGetCalibratedTimestampsEXT", out addr)) {
			vkGetCalibratedTimestampsEXT = (delegate* unmanaged<VulkanHandle<VkDevice>, uint, VkCalibratedTimestampInfoEXT*, ulong*, ulong*, VkResult>)addr;
		}
		if (TryLoadFunc(dev, "vkSetDebugUtilsObjectNameEXT", out addr)) {
			vkSetDebugUtilsObjectNameEXT = (delegate* unmanaged<VulkanHandle<VkDevice>, VkDebugUtilsObjectNameInfoEXT*, VkResult>)addr;
		}
		if (TryLoadFunc(dev, "vkSetDebugUtilsObjectTagEXT", out addr)) {
			vkSetDebugUtilsObjectTagEXT = (delegate* unmanaged<VulkanHandle<VkDevice>, VkDebugUtilsObjectTagInfoEXT*, VkResult>)addr;
		}
		if (TryLoadFunc(dev, "vkQueueBeginDebugUtilsLabelEXT", out addr)) {
			vkQueueBeginDebugUtilsLabelEXT = (delegate* unmanaged<VulkanHandle<VkQueue>, VkDebugUtilsLabelEXT*, void>)addr;
		}
		if (TryLoadFunc(dev, "vkQueueEndDebugUtilsLabelEXT", out addr)) {
			vkQueueEndDebugUtilsLabelEXT = (delegate* unmanaged<VulkanHandle<VkQueue>, void>)addr;
		}
		if (TryLoadFunc(dev, "vkQueueInsertDebugUtilsLabelEXT", out addr)) {
			vkQueueInsertDebugUtilsLabelEXT = (delegate* unmanaged<VulkanHandle<VkQueue>, VkDebugUtilsLabelEXT*, void>)addr;
		}
		if (TryLoadFunc(dev, "vkCmdBeginDebugUtilsLabelEXT", out addr)) {
			vkCmdBeginDebugUtilsLabelEXT = (delegate* unmanaged<VulkanHandle<VkCommandBuffer>, VkDebugUtilsLabelEXT*, void>)addr;
		}
		if (TryLoadFunc(dev, "vkCmdEndDebugUtilsLabelEXT", out addr)) {
			vkCmdEndDebugUtilsLabelEXT = (delegate* unmanaged<VulkanHandle<VkCommandBuffer>, void>)addr;
		}
		if (TryLoadFunc(dev, "vkCmdInsertDebugUtilsLabelEXT", out addr)) {
			vkCmdInsertDebugUtilsLabelEXT = (delegate* unmanaged<VulkanHandle<VkCommandBuffer>, VkDebugUtilsLabelEXT*, void>)addr;
		}
		if (TryLoadFunc(dev, "vkGetMemoryHostPointerPropertiesEXT", out addr)) {
			vkGetMemoryHostPointerPropertiesEXT = (delegate* unmanaged<VulkanHandle<VkDevice>, VkExternalMemoryHandleTypeFlags, void*, VkMemoryHostPointerPropertiesEXT*, VkResult>)addr;
		}
		if (TryLoadFunc(dev, "vkCmdWriteBufferMarkerAMD", out addr)) {
			vkCmdWriteBufferMarkerAMD = (delegate* unmanaged<VulkanHandle<VkCommandBuffer>, VkPipelineStageFlags, VulkanHandle<VkBuffer>, ulong, uint, void>)addr;
		}
		if (version >= VkVersion.VK_VERSION_1_2) {
			vkCreateRenderPass2 = (delegate* unmanaged<VulkanHandle<VkDevice>, VkRenderPassCreateInfo2*, VkAllocationCallbacks*, VulkanHandle<VkRenderPass>*, VkResult>)LoadFunc(dev, "vkCreateRenderPass2");
		}
		vkCreateRenderPass2KHR = vkCreateRenderPass2;
		if ((vkCreateRenderPass2KHR == null) && TryLoadFunc(dev, "vkCreateRenderPass2KHR", out addr)) {
			vkCreateRenderPass2KHR = (delegate* unmanaged<VulkanHandle<VkDevice>, VkRenderPassCreateInfo2*, VkAllocationCallbacks*, VulkanHandle<VkRenderPass>*, VkResult>)addr;
		}
		if (version >= VkVersion.VK_VERSION_1_2) {
			vkCmdBeginRenderPass2 = (delegate* unmanaged<VulkanHandle<VkCommandBuffer>, VkRenderPassBeginInfo*, VkSubpassBeginInfo*, void>)LoadFunc(dev, "vkCmdBeginRenderPass2");
		}
		vkCmdBeginRenderPass2KHR = vkCmdBeginRenderPass2;
		if ((vkCmdBeginRenderPass2KHR == null) && TryLoadFunc(dev, "vkCmdBeginRenderPass2KHR", out addr)) {
			vkCmdBeginRenderPass2KHR = (delegate* unmanaged<VulkanHandle<VkCommandBuffer>, VkRenderPassBeginInfo*, VkSubpassBeginInfo*, void>)addr;
		}
		if (version >= VkVersion.VK_VERSION_1_2) {
			vkCmdNextSubpass2 = (delegate* unmanaged<VulkanHandle<VkCommandBuffer>, VkSubpassBeginInfo*, VkSubpassEndInfo*, void>)LoadFunc(dev, "vkCmdNextSubpass2");
		}
		vkCmdNextSubpass2KHR = vkCmdNextSubpass2;
		if ((vkCmdNextSubpass2KHR == null) && TryLoadFunc(dev, "vkCmdNextSubpass2KHR", out addr)) {
			vkCmdNextSubpass2KHR = (delegate* unmanaged<VulkanHandle<VkCommandBuffer>, VkSubpassBeginInfo*, VkSubpassEndInfo*, void>)addr;
		}
		if (version >= VkVersion.VK_VERSION_1_2) {
			vkCmdEndRenderPass2 = (delegate* unmanaged<VulkanHandle<VkCommandBuffer>, VkSubpassEndInfo*, void>)LoadFunc(dev, "vkCmdEndRenderPass2");
		}
		vkCmdEndRenderPass2KHR = vkCmdEndRenderPass2;
		if ((vkCmdEndRenderPass2KHR == null) && TryLoadFunc(dev, "vkCmdEndRenderPass2KHR", out addr)) {
			vkCmdEndRenderPass2KHR = (delegate* unmanaged<VulkanHandle<VkCommandBuffer>, VkSubpassEndInfo*, void>)addr;
		}
		if (version >= VkVersion.VK_VERSION_1_2) {
			vkGetSemaphoreCounterValue = (delegate* unmanaged<VulkanHandle<VkDevice>, VulkanHandle<VkSemaphore>, ulong*, VkResult>)LoadFunc(dev, "vkGetSemaphoreCounterValue");
		}
		vkGetSemaphoreCounterValueKHR = vkGetSemaphoreCounterValue;
		if ((vkGetSemaphoreCounterValueKHR == null) && TryLoadFunc(dev, "vkGetSemaphoreCounterValueKHR", out addr)) {
			vkGetSemaphoreCounterValueKHR = (delegate* unmanaged<VulkanHandle<VkDevice>, VulkanHandle<VkSemaphore>, ulong*, VkResult>)addr;
		}
		if (version >= VkVersion.VK_VERSION_1_2) {
			vkWaitSemaphores = (delegate* unmanaged<VulkanHandle<VkDevice>, VkSemaphoreWaitInfo*, ulong, VkResult>)LoadFunc(dev, "vkWaitSemaphores");
		}
		vkWaitSemaphoresKHR = vkWaitSemaphores;
		if ((vkWaitSemaphoresKHR == null) && TryLoadFunc(dev, "vkWaitSemaphoresKHR", out addr)) {
			vkWaitSemaphoresKHR = (delegate* unmanaged<VulkanHandle<VkDevice>, VkSemaphoreWaitInfo*, ulong, VkResult>)addr;
		}
		if (version >= VkVersion.VK_VERSION_1_2) {
			vkSignalSemaphore = (delegate* unmanaged<VulkanHandle<VkDevice>, VkSemaphoreSignalInfo*, VkResult>)LoadFunc(dev, "vkSignalSemaphore");
		}
		vkSignalSemaphoreKHR = vkSignalSemaphore;
		if ((vkSignalSemaphoreKHR == null) && TryLoadFunc(dev, "vkSignalSemaphoreKHR", out addr)) {
			vkSignalSemaphoreKHR = (delegate* unmanaged<VulkanHandle<VkDevice>, VkSemaphoreSignalInfo*, VkResult>)addr;
		}
		if (TryLoadFunc(dev, "vkGetAndroidHardwareBufferPropertiesANDROID", out addr)) {
			vkGetAndroidHardwareBufferPropertiesANDROID = (delegate* unmanaged<VulkanHandle<VkDevice>, void*, VkAndroidHardwareBufferPropertiesANDROID*, VkResult>)addr;
		}
		if (TryLoadFunc(dev, "vkGetMemoryAndroidHardwareBufferANDROID", out addr)) {
			vkGetMemoryAndroidHardwareBufferANDROID = (delegate* unmanaged<VulkanHandle<VkDevice>, VkMemoryGetAndroidHardwareBufferInfoANDROID*, void**, VkResult>)addr;
		}
		if (version >= VkVersion.VK_VERSION_1_2) {
			vkCmdDrawIndirectCount = (delegate* unmanaged<VulkanHandle<VkCommandBuffer>, VulkanHandle<VkBuffer>, ulong, VulkanHandle<VkBuffer>, ulong, uint, uint, void>)LoadFunc(dev, "vkCmdDrawIndirectCount");
		}
		vkCmdDrawIndirectCountKHR = vkCmdDrawIndirectCount;
		if ((vkCmdDrawIndirectCountKHR == null) && TryLoadFunc(dev, "vkCmdDrawIndirectCountKHR", out addr)) {
			vkCmdDrawIndirectCountKHR = (delegate* unmanaged<VulkanHandle<VkCommandBuffer>, VulkanHandle<VkBuffer>, ulong, VulkanHandle<VkBuffer>, ulong, uint, uint, void>)addr;
		}
		vkCmdDrawIndirectCountAMD = vkCmdDrawIndirectCount;
		if ((vkCmdDrawIndirectCountAMD == null) && TryLoadFunc(dev, "vkCmdDrawIndirectCountAMD", out addr)) {
			vkCmdDrawIndirectCountAMD = (delegate* unmanaged<VulkanHandle<VkCommandBuffer>, VulkanHandle<VkBuffer>, ulong, VulkanHandle<VkBuffer>, ulong, uint, uint, void>)addr;
		}
		if (version >= VkVersion.VK_VERSION_1_2) {
			vkCmdDrawIndexedIndirectCount = (delegate* unmanaged<VulkanHandle<VkCommandBuffer>, VulkanHandle<VkBuffer>, ulong, VulkanHandle<VkBuffer>, ulong, uint, uint, void>)LoadFunc(dev, "vkCmdDrawIndexedIndirectCount");
		}
		vkCmdDrawIndexedIndirectCountKHR = vkCmdDrawIndexedIndirectCount;
		if ((vkCmdDrawIndexedIndirectCountKHR == null) && TryLoadFunc(dev, "vkCmdDrawIndexedIndirectCountKHR", out addr)) {
			vkCmdDrawIndexedIndirectCountKHR = (delegate* unmanaged<VulkanHandle<VkCommandBuffer>, VulkanHandle<VkBuffer>, ulong, VulkanHandle<VkBuffer>, ulong, uint, uint, void>)addr;
		}
		vkCmdDrawIndexedIndirectCountAMD = vkCmdDrawIndexedIndirectCount;
		if ((vkCmdDrawIndexedIndirectCountAMD == null) && TryLoadFunc(dev, "vkCmdDrawIndexedIndirectCountAMD", out addr)) {
			vkCmdDrawIndexedIndirectCountAMD = (delegate* unmanaged<VulkanHandle<VkCommandBuffer>, VulkanHandle<VkBuffer>, ulong, VulkanHandle<VkBuffer>, ulong, uint, uint, void>)addr;
		}
		if (TryLoadFunc(dev, "vkCmdSetCheckpointNV", out addr)) {
			vkCmdSetCheckpointNV = (delegate* unmanaged<VulkanHandle<VkCommandBuffer>, void*, void>)addr;
		}
		if (TryLoadFunc(dev, "vkGetQueueCheckpointDataNV", out addr)) {
			vkGetQueueCheckpointDataNV = (delegate* unmanaged<VulkanHandle<VkQueue>, uint*, VkCheckpointDataNV*, void>)addr;
		}
		if (TryLoadFunc(dev, "vkCmdBindTransformFeedbackBuffersEXT", out addr)) {
			vkCmdBindTransformFeedbackBuffersEXT = (delegate* unmanaged<VulkanHandle<VkCommandBuffer>, uint, uint, VulkanHandle<VkBuffer>*, ulong*, ulong*, void>)addr;
		}
		if (TryLoadFunc(dev, "vkCmdBeginTransformFeedbackEXT", out addr)) {
			vkCmdBeginTransformFeedbackEXT = (delegate* unmanaged<VulkanHandle<VkCommandBuffer>, uint, uint, VulkanHandle<VkBuffer>*, ulong*, void>)addr;
		}
		if (TryLoadFunc(dev, "vkCmdEndTransformFeedbackEXT", out addr)) {
			vkCmdEndTransformFeedbackEXT = (delegate* unmanaged<VulkanHandle<VkCommandBuffer>, uint, uint, VulkanHandle<VkBuffer>*, ulong*, void>)addr;
		}
		if (TryLoadFunc(dev, "vkCmdBeginQueryIndexedEXT", out addr)) {
			vkCmdBeginQueryIndexedEXT = (delegate* unmanaged<VulkanHandle<VkCommandBuffer>, VulkanHandle<VkQueryPool>, uint, VkQueryControlFlags, uint, void>)addr;
		}
		if (TryLoadFunc(dev, "vkCmdEndQueryIndexedEXT", out addr)) {
			vkCmdEndQueryIndexedEXT = (delegate* unmanaged<VulkanHandle<VkCommandBuffer>, VulkanHandle<VkQueryPool>, uint, uint, void>)addr;
		}
		if (TryLoadFunc(dev, "vkCmdDrawIndirectByteCountEXT", out addr)) {
			vkCmdDrawIndirectByteCountEXT = (delegate* unmanaged<VulkanHandle<VkCommandBuffer>, uint, uint, VulkanHandle<VkBuffer>, ulong, uint, uint, void>)addr;
		}
		if (TryLoadFunc(dev, "vkCmdSetExclusiveScissorNV", out addr)) {
			vkCmdSetExclusiveScissorNV = (delegate* unmanaged<VulkanHandle<VkCommandBuffer>, uint, uint, VkRect2D*, void>)addr;
		}
		if (TryLoadFunc(dev, "vkCmdBindShadingRateImageNV", out addr)) {
			vkCmdBindShadingRateImageNV = (delegate* unmanaged<VulkanHandle<VkCommandBuffer>, VulkanHandle<VkImageView>, VkImageLayout, void>)addr;
		}
		if (TryLoadFunc(dev, "vkCmdSetViewportShadingRatePaletteNV", out addr)) {
			vkCmdSetViewportShadingRatePaletteNV = (delegate* unmanaged<VulkanHandle<VkCommandBuffer>, uint, uint, VkShadingRatePaletteNV*, void>)addr;
		}
		if (TryLoadFunc(dev, "vkCmdSetCoarseSampleOrderNV", out addr)) {
			vkCmdSetCoarseSampleOrderNV = (delegate* unmanaged<VulkanHandle<VkCommandBuffer>, VkCoarseSampleOrderTypeNV, uint, VkCoarseSampleOrderCustomNV*, void>)addr;
		}
		if (TryLoadFunc(dev, "vkCmdDrawMeshTasksNV", out addr)) {
			vkCmdDrawMeshTasksNV = (delegate* unmanaged<VulkanHandle<VkCommandBuffer>, uint, uint, void>)addr;
		}
		if (TryLoadFunc(dev, "vkCmdDrawMeshTasksIndirectNV", out addr)) {
			vkCmdDrawMeshTasksIndirectNV = (delegate* unmanaged<VulkanHandle<VkCommandBuffer>, VulkanHandle<VkBuffer>, ulong, uint, uint, void>)addr;
		}
		if (TryLoadFunc(dev, "vkCmdDrawMeshTasksIndirectCountNV", out addr)) {
			vkCmdDrawMeshTasksIndirectCountNV = (delegate* unmanaged<VulkanHandle<VkCommandBuffer>, VulkanHandle<VkBuffer>, ulong, VulkanHandle<VkBuffer>, ulong, uint, uint, void>)addr;
		}
		if (TryLoadFunc(dev, "vkCompileDeferredNV", out addr)) {
			vkCompileDeferredNV = (delegate* unmanaged<VulkanHandle<VkDevice>, VulkanHandle<VkPipeline>, uint, VkResult>)addr;
		}
		if (TryLoadFunc(dev, "vkCreateAccelerationStructureNV", out addr)) {
			vkCreateAccelerationStructureNV = (delegate* unmanaged<VulkanHandle<VkDevice>, VkAccelerationStructureCreateInfoNV*, VkAllocationCallbacks*, VulkanHandle<VkAccelerationStructureNV>*, VkResult>)addr;
		}
		if (TryLoadFunc(dev, "vkDestroyAccelerationStructureKHR", out addr)) {
			vkDestroyAccelerationStructureKHR = (delegate* unmanaged<VulkanHandle<VkDevice>, VulkanHandle<VkAccelerationStructureKHR>, VkAllocationCallbacks*, void>)addr;
		}
		vkDestroyAccelerationStructureNV = vkDestroyAccelerationStructureKHR;
		if ((vkDestroyAccelerationStructureNV == null) && TryLoadFunc(dev, "vkDestroyAccelerationStructureNV", out addr)) {
			vkDestroyAccelerationStructureNV = (delegate* unmanaged<VulkanHandle<VkDevice>, VulkanHandle<VkAccelerationStructureKHR>, VkAllocationCallbacks*, void>)addr;
		}
		if (TryLoadFunc(dev, "vkGetAccelerationStructureMemoryRequirementsKHR", out addr)) {
			vkGetAccelerationStructureMemoryRequirementsKHR = (delegate* unmanaged<VulkanHandle<VkDevice>, VkAccelerationStructureMemoryRequirementsInfoKHR*, VkMemoryRequirements2*, void>)addr;
		}
		if (TryLoadFunc(dev, "vkGetAccelerationStructureMemoryRequirementsNV", out addr)) {
			vkGetAccelerationStructureMemoryRequirementsNV = (delegate* unmanaged<VulkanHandle<VkDevice>, VkAccelerationStructureMemoryRequirementsInfoNV*, VkMemoryRequirements2KHR*, void>)addr;
		}
		if (TryLoadFunc(dev, "vkBindAccelerationStructureMemoryKHR", out addr)) {
			vkBindAccelerationStructureMemoryKHR = (delegate* unmanaged<VulkanHandle<VkDevice>, uint, VkBindAccelerationStructureMemoryInfoKHR*, VkResult>)addr;
		}
		vkBindAccelerationStructureMemoryNV = vkBindAccelerationStructureMemoryKHR;
		if ((vkBindAccelerationStructureMemoryNV == null) && TryLoadFunc(dev, "vkBindAccelerationStructureMemoryNV", out addr)) {
			vkBindAccelerationStructureMemoryNV = (delegate* unmanaged<VulkanHandle<VkDevice>, uint, VkBindAccelerationStructureMemoryInfoKHR*, VkResult>)addr;
		}
		if (TryLoadFunc(dev, "vkCmdCopyAccelerationStructureNV", out addr)) {
			vkCmdCopyAccelerationStructureNV = (delegate* unmanaged<VulkanHandle<VkCommandBuffer>, VulkanHandle<VkAccelerationStructureKHR>, VulkanHandle<VkAccelerationStructureKHR>, VkCopyAccelerationStructureModeKHR, void>)addr;
		}
		if (TryLoadFunc(dev, "vkCmdCopyAccelerationStructureKHR", out addr)) {
			vkCmdCopyAccelerationStructureKHR = (delegate* unmanaged<VulkanHandle<VkCommandBuffer>, VkCopyAccelerationStructureInfoKHR*, void>)addr;
		}
		if (TryLoadFunc(dev, "vkCopyAccelerationStructureKHR", out addr)) {
			vkCopyAccelerationStructureKHR = (delegate* unmanaged<VulkanHandle<VkDevice>, VkCopyAccelerationStructureInfoKHR*, VkResult>)addr;
		}
		if (TryLoadFunc(dev, "vkCmdCopyAccelerationStructureToMemoryKHR", out addr)) {
			vkCmdCopyAccelerationStructureToMemoryKHR = (delegate* unmanaged<VulkanHandle<VkCommandBuffer>, VkCopyAccelerationStructureToMemoryInfoKHR*, void>)addr;
		}
		if (TryLoadFunc(dev, "vkCopyAccelerationStructureToMemoryKHR", out addr)) {
			vkCopyAccelerationStructureToMemoryKHR = (delegate* unmanaged<VulkanHandle<VkDevice>, VkCopyAccelerationStructureToMemoryInfoKHR*, VkResult>)addr;
		}
		if (TryLoadFunc(dev, "vkCmdCopyMemoryToAccelerationStructureKHR", out addr)) {
			vkCmdCopyMemoryToAccelerationStructureKHR = (delegate* unmanaged<VulkanHandle<VkCommandBuffer>, VkCopyMemoryToAccelerationStructureInfoKHR*, void>)addr;
		}
		if (TryLoadFunc(dev, "vkCopyMemoryToAccelerationStructureKHR", out addr)) {
			vkCopyMemoryToAccelerationStructureKHR = (delegate* unmanaged<VulkanHandle<VkDevice>, VkCopyMemoryToAccelerationStructureInfoKHR*, VkResult>)addr;
		}
		if (TryLoadFunc(dev, "vkCmdWriteAccelerationStructuresPropertiesKHR", out addr)) {
			vkCmdWriteAccelerationStructuresPropertiesKHR = (delegate* unmanaged<VulkanHandle<VkCommandBuffer>, uint, VulkanHandle<VkAccelerationStructureKHR>*, VkQueryType, VulkanHandle<VkQueryPool>, uint, void>)addr;
		}
		vkCmdWriteAccelerationStructuresPropertiesNV = vkCmdWriteAccelerationStructuresPropertiesKHR;
		if ((vkCmdWriteAccelerationStructuresPropertiesNV == null) && TryLoadFunc(dev, "vkCmdWriteAccelerationStructuresPropertiesNV", out addr)) {
			vkCmdWriteAccelerationStructuresPropertiesNV = (delegate* unmanaged<VulkanHandle<VkCommandBuffer>, uint, VulkanHandle<VkAccelerationStructureKHR>*, VkQueryType, VulkanHandle<VkQueryPool>, uint, void>)addr;
		}
		if (TryLoadFunc(dev, "vkCmdBuildAccelerationStructureNV", out addr)) {
			vkCmdBuildAccelerationStructureNV = (delegate* unmanaged<VulkanHandle<VkCommandBuffer>, VkAccelerationStructureInfoNV*, VulkanHandle<VkBuffer>, ulong, VkBool32, VulkanHandle<VkAccelerationStructureKHR>, VulkanHandle<VkAccelerationStructureKHR>, VulkanHandle<VkBuffer>, ulong, void>)addr;
		}
		if (TryLoadFunc(dev, "vkWriteAccelerationStructuresPropertiesKHR", out addr)) {
			vkWriteAccelerationStructuresPropertiesKHR = (delegate* unmanaged<VulkanHandle<VkDevice>, uint, VulkanHandle<VkAccelerationStructureKHR>*, VkQueryType, ulong, void*, ulong, VkResult>)addr;
		}
		if (TryLoadFunc(dev, "vkCmdTraceRaysKHR", out addr)) {
			vkCmdTraceRaysKHR = (delegate* unmanaged<VulkanHandle<VkCommandBuffer>, VkStridedBufferRegionKHR*, VkStridedBufferRegionKHR*, VkStridedBufferRegionKHR*, VkStridedBufferRegionKHR*, uint, uint, uint, void>)addr;
		}
		if (TryLoadFunc(dev, "vkCmdTraceRaysNV", out addr)) {
			vkCmdTraceRaysNV = (delegate* unmanaged<VulkanHandle<VkCommandBuffer>, VulkanHandle<VkBuffer>, ulong, VulkanHandle<VkBuffer>, ulong, ulong, VulkanHandle<VkBuffer>, ulong, ulong, VulkanHandle<VkBuffer>, ulong, ulong, uint, uint, uint, void>)addr;
		}
		if (TryLoadFunc(dev, "vkGetRayTracingShaderGroupHandlesKHR", out addr)) {
			vkGetRayTracingShaderGroupHandlesKHR = (delegate* unmanaged<VulkanHandle<VkDevice>, VulkanHandle<VkPipeline>, uint, uint, ulong, void*, VkResult>)addr;
		}
		vkGetRayTracingShaderGroupHandlesNV = vkGetRayTracingShaderGroupHandlesKHR;
		if ((vkGetRayTracingShaderGroupHandlesNV == null) && TryLoadFunc(dev, "vkGetRayTracingShaderGroupHandlesNV", out addr)) {
			vkGetRayTracingShaderGroupHandlesNV = (delegate* unmanaged<VulkanHandle<VkDevice>, VulkanHandle<VkPipeline>, uint, uint, ulong, void*, VkResult>)addr;
		}
		if (TryLoadFunc(dev, "vkGetRayTracingCaptureReplayShaderGroupHandlesKHR", out addr)) {
			vkGetRayTracingCaptureReplayShaderGroupHandlesKHR = (delegate* unmanaged<VulkanHandle<VkDevice>, VulkanHandle<VkPipeline>, uint, uint, ulong, void*, VkResult>)addr;
		}
		if (TryLoadFunc(dev, "vkGetAccelerationStructureHandleNV", out addr)) {
			vkGetAccelerationStructureHandleNV = (delegate* unmanaged<VulkanHandle<VkDevice>, VulkanHandle<VkAccelerationStructureKHR>, ulong, void*, VkResult>)addr;
		}
		if (TryLoadFunc(dev, "vkCreateRayTracingPipelinesNV", out addr)) {
			vkCreateRayTracingPipelinesNV = (delegate* unmanaged<VulkanHandle<VkDevice>, VulkanHandle<VkPipelineCache>, uint, VkRayTracingPipelineCreateInfoNV*, VkAllocationCallbacks*, VulkanHandle<VkPipeline>*, VkResult>)addr;
		}
		if (TryLoadFunc(dev, "vkCreateRayTracingPipelinesKHR", out addr)) {
			vkCreateRayTracingPipelinesKHR = (delegate* unmanaged<VulkanHandle<VkDevice>, VulkanHandle<VkPipelineCache>, uint, VkRayTracingPipelineCreateInfoKHR*, VkAllocationCallbacks*, VulkanHandle<VkPipeline>*, VkResult>)addr;
		}
		if (TryLoadFunc(dev, "vkCmdTraceRaysIndirectKHR", out addr)) {
			vkCmdTraceRaysIndirectKHR = (delegate* unmanaged<VulkanHandle<VkCommandBuffer>, VkStridedBufferRegionKHR*, VkStridedBufferRegionKHR*, VkStridedBufferRegionKHR*, VkStridedBufferRegionKHR*, VulkanHandle<VkBuffer>, ulong, void>)addr;
		}
		if (TryLoadFunc(dev, "vkGetDeviceAccelerationStructureCompatibilityKHR", out addr)) {
			vkGetDeviceAccelerationStructureCompatibilityKHR = (delegate* unmanaged<VulkanHandle<VkDevice>, VkAccelerationStructureVersionKHR*, VkResult>)addr;
		}
		if (TryLoadFunc(dev, "vkGetImageViewHandleNVX", out addr)) {
			vkGetImageViewHandleNVX = (delegate* unmanaged<VulkanHandle<VkDevice>, VkImageViewHandleInfoNVX*, uint>)addr;
		}
		if (TryLoadFunc(dev, "vkGetImageViewAddressNVX", out addr)) {
			vkGetImageViewAddressNVX = (delegate* unmanaged<VulkanHandle<VkDevice>, VulkanHandle<VkImageView>, VkImageViewAddressPropertiesNVX*, VkResult>)addr;
		}
		if (TryLoadFunc(dev, "vkGetDeviceGroupSurfacePresentModes2EXT", out addr)) {
			vkGetDeviceGroupSurfacePresentModes2EXT = (delegate* unmanaged<VulkanHandle<VkDevice>, VkPhysicalDeviceSurfaceInfo2KHR*, VkDeviceGroupPresentModeFlagsKHR*, VkResult>)addr;
		}
		if (TryLoadFunc(dev, "vkAcquireFullScreenExclusiveModeEXT", out addr)) {
			vkAcquireFullScreenExclusiveModeEXT = (delegate* unmanaged<VulkanHandle<VkDevice>, VulkanHandle<VkSwapchainKHR>, VkResult>)addr;
		}
		if (TryLoadFunc(dev, "vkReleaseFullScreenExclusiveModeEXT", out addr)) {
			vkReleaseFullScreenExclusiveModeEXT = (delegate* unmanaged<VulkanHandle<VkDevice>, VulkanHandle<VkSwapchainKHR>, VkResult>)addr;
		}
		if (TryLoadFunc(dev, "vkAcquireProfilingLockKHR", out addr)) {
			vkAcquireProfilingLockKHR = (delegate* unmanaged<VulkanHandle<VkDevice>, VkAcquireProfilingLockInfoKHR*, VkResult>)addr;
		}
		if (TryLoadFunc(dev, "vkReleaseProfilingLockKHR", out addr)) {
			vkReleaseProfilingLockKHR = (delegate* unmanaged<VulkanHandle<VkDevice>, void>)addr;
		}
		if (TryLoadFunc(dev, "vkGetImageDrmFormatModifierPropertiesEXT", out addr)) {
			vkGetImageDrmFormatModifierPropertiesEXT = (delegate* unmanaged<VulkanHandle<VkDevice>, VulkanHandle<VkImage>, VkImageDrmFormatModifierPropertiesEXT*, VkResult>)addr;
		}
		if (version >= VkVersion.VK_VERSION_1_2) {
			vkGetBufferOpaqueCaptureAddress = (delegate* unmanaged<VulkanHandle<VkDevice>, VkBufferDeviceAddressInfo*, ulong>)LoadFunc(dev, "vkGetBufferOpaqueCaptureAddress");
		}
		vkGetBufferOpaqueCaptureAddressKHR = vkGetBufferOpaqueCaptureAddress;
		if ((vkGetBufferOpaqueCaptureAddressKHR == null) && TryLoadFunc(dev, "vkGetBufferOpaqueCaptureAddressKHR", out addr)) {
			vkGetBufferOpaqueCaptureAddressKHR = (delegate* unmanaged<VulkanHandle<VkDevice>, VkBufferDeviceAddressInfo*, ulong>)addr;
		}
		if (version >= VkVersion.VK_VERSION_1_2) {
			vkGetBufferDeviceAddress = (delegate* unmanaged<VulkanHandle<VkDevice>, VkBufferDeviceAddressInfo*, ulong>)LoadFunc(dev, "vkGetBufferDeviceAddress");
		}
		vkGetBufferDeviceAddressKHR = vkGetBufferDeviceAddress;
		if ((vkGetBufferDeviceAddressKHR == null) && TryLoadFunc(dev, "vkGetBufferDeviceAddressKHR", out addr)) {
			vkGetBufferDeviceAddressKHR = (delegate* unmanaged<VulkanHandle<VkDevice>, VkBufferDeviceAddressInfo*, ulong>)addr;
		}
		vkGetBufferDeviceAddressEXT = vkGetBufferDeviceAddress;
		if ((vkGetBufferDeviceAddressEXT == null) && TryLoadFunc(dev, "vkGetBufferDeviceAddressEXT", out addr)) {
			vkGetBufferDeviceAddressEXT = (delegate* unmanaged<VulkanHandle<VkDevice>, VkBufferDeviceAddressInfo*, ulong>)addr;
		}
		if (TryLoadFunc(dev, "vkInitializePerformanceApiINTEL", out addr)) {
			vkInitializePerformanceApiINTEL = (delegate* unmanaged<VulkanHandle<VkDevice>, VkInitializePerformanceApiInfoINTEL*, VkResult>)addr;
		}
		if (TryLoadFunc(dev, "vkUninitializePerformanceApiINTEL", out addr)) {
			vkUninitializePerformanceApiINTEL = (delegate* unmanaged<VulkanHandle<VkDevice>, void>)addr;
		}
		if (TryLoadFunc(dev, "vkCmdSetPerformanceMarkerINTEL", out addr)) {
			vkCmdSetPerformanceMarkerINTEL = (delegate* unmanaged<VulkanHandle<VkCommandBuffer>, VkPerformanceMarkerInfoINTEL*, VkResult>)addr;
		}
		if (TryLoadFunc(dev, "vkCmdSetPerformanceStreamMarkerINTEL", out addr)) {
			vkCmdSetPerformanceStreamMarkerINTEL = (delegate* unmanaged<VulkanHandle<VkCommandBuffer>, VkPerformanceStreamMarkerInfoINTEL*, VkResult>)addr;
		}
		if (TryLoadFunc(dev, "vkCmdSetPerformanceOverrideINTEL", out addr)) {
			vkCmdSetPerformanceOverrideINTEL = (delegate* unmanaged<VulkanHandle<VkCommandBuffer>, VkPerformanceOverrideInfoINTEL*, VkResult>)addr;
		}
		if (TryLoadFunc(dev, "vkAcquirePerformanceConfigurationINTEL", out addr)) {
			vkAcquirePerformanceConfigurationINTEL = (delegate* unmanaged<VulkanHandle<VkDevice>, VkPerformanceConfigurationAcquireInfoINTEL*, VulkanHandle<VkPerformanceConfigurationINTEL>*, VkResult>)addr;
		}
		if (TryLoadFunc(dev, "vkReleasePerformanceConfigurationINTEL", out addr)) {
			vkReleasePerformanceConfigurationINTEL = (delegate* unmanaged<VulkanHandle<VkDevice>, VulkanHandle<VkPerformanceConfigurationINTEL>, VkResult>)addr;
		}
		if (TryLoadFunc(dev, "vkQueueSetPerformanceConfigurationINTEL", out addr)) {
			vkQueueSetPerformanceConfigurationINTEL = (delegate* unmanaged<VulkanHandle<VkQueue>, VulkanHandle<VkPerformanceConfigurationINTEL>, VkResult>)addr;
		}
		if (TryLoadFunc(dev, "vkGetPerformanceParameterINTEL", out addr)) {
			vkGetPerformanceParameterINTEL = (delegate* unmanaged<VulkanHandle<VkDevice>, VkPerformanceParameterTypeINTEL, VkPerformanceValueINTEL*, VkResult>)addr;
		}
		if (version >= VkVersion.VK_VERSION_1_2) {
			vkGetDeviceMemoryOpaqueCaptureAddress = (delegate* unmanaged<VulkanHandle<VkDevice>, VkDeviceMemoryOpaqueCaptureAddressInfo*, ulong>)LoadFunc(dev, "vkGetDeviceMemoryOpaqueCaptureAddress");
		}
		vkGetDeviceMemoryOpaqueCaptureAddressKHR = vkGetDeviceMemoryOpaqueCaptureAddress;
		if ((vkGetDeviceMemoryOpaqueCaptureAddressKHR == null) && TryLoadFunc(dev, "vkGetDeviceMemoryOpaqueCaptureAddressKHR", out addr)) {
			vkGetDeviceMemoryOpaqueCaptureAddressKHR = (delegate* unmanaged<VulkanHandle<VkDevice>, VkDeviceMemoryOpaqueCaptureAddressInfo*, ulong>)addr;
		}
		if (TryLoadFunc(dev, "vkGetPipelineExecutablePropertiesKHR", out addr)) {
			vkGetPipelineExecutablePropertiesKHR = (delegate* unmanaged<VulkanHandle<VkDevice>, VkPipelineInfoKHR*, uint*, VkPipelineExecutablePropertiesKHR*, VkResult>)addr;
		}
		if (TryLoadFunc(dev, "vkGetPipelineExecutableStatisticsKHR", out addr)) {
			vkGetPipelineExecutableStatisticsKHR = (delegate* unmanaged<VulkanHandle<VkDevice>, VkPipelineExecutableInfoKHR*, uint*, VkPipelineExecutableStatisticKHR*, VkResult>)addr;
		}
		if (TryLoadFunc(dev, "vkGetPipelineExecutableInternalRepresentationsKHR", out addr)) {
			vkGetPipelineExecutableInternalRepresentationsKHR = (delegate* unmanaged<VulkanHandle<VkDevice>, VkPipelineExecutableInfoKHR*, uint*, VkPipelineExecutableInternalRepresentationKHR*, VkResult>)addr;
		}
		if (TryLoadFunc(dev, "vkCmdSetLineStippleEXT", out addr)) {
			vkCmdSetLineStippleEXT = (delegate* unmanaged<VulkanHandle<VkCommandBuffer>, uint, ushort, void>)addr;
		}
		if (TryLoadFunc(dev, "vkCreateAccelerationStructureKHR", out addr)) {
			vkCreateAccelerationStructureKHR = (delegate* unmanaged<VulkanHandle<VkDevice>, VkAccelerationStructureCreateInfoKHR*, VkAllocationCallbacks*, VulkanHandle<VkAccelerationStructureKHR>*, VkResult>)addr;
		}
		if (TryLoadFunc(dev, "vkCmdBuildAccelerationStructureKHR", out addr)) {
			vkCmdBuildAccelerationStructureKHR = (delegate* unmanaged<VulkanHandle<VkCommandBuffer>, uint, VkAccelerationStructureBuildGeometryInfoKHR*, VkAccelerationStructureBuildOffsetInfoKHR**, void>)addr;
		}
		if (TryLoadFunc(dev, "vkCmdBuildAccelerationStructureIndirectKHR", out addr)) {
			vkCmdBuildAccelerationStructureIndirectKHR = (delegate* unmanaged<VulkanHandle<VkCommandBuffer>, VkAccelerationStructureBuildGeometryInfoKHR*, VulkanHandle<VkBuffer>, ulong, uint, void>)addr;
		}
		if (TryLoadFunc(dev, "vkBuildAccelerationStructureKHR", out addr)) {
			vkBuildAccelerationStructureKHR = (delegate* unmanaged<VulkanHandle<VkDevice>, uint, VkAccelerationStructureBuildGeometryInfoKHR*, VkAccelerationStructureBuildOffsetInfoKHR**, VkResult>)addr;
		}
		if (TryLoadFunc(dev, "vkGetAccelerationStructureDeviceAddressKHR", out addr)) {
			vkGetAccelerationStructureDeviceAddressKHR = (delegate* unmanaged<VulkanHandle<VkDevice>, VkAccelerationStructureDeviceAddressInfoKHR*, ulong>)addr;
		}
		if (TryLoadFunc(dev, "vkCreateDeferredOperationKHR", out addr)) {
			vkCreateDeferredOperationKHR = (delegate* unmanaged<VulkanHandle<VkDevice>, VkAllocationCallbacks*, VulkanHandle<VkDeferredOperationKHR>*, VkResult>)addr;
		}
		if (TryLoadFunc(dev, "vkDestroyDeferredOperationKHR", out addr)) {
			vkDestroyDeferredOperationKHR = (delegate* unmanaged<VulkanHandle<VkDevice>, VulkanHandle<VkDeferredOperationKHR>, VkAllocationCallbacks*, void>)addr;
		}
		if (TryLoadFunc(dev, "vkGetDeferredOperationMaxConcurrencyKHR", out addr)) {
			vkGetDeferredOperationMaxConcurrencyKHR = (delegate* unmanaged<VulkanHandle<VkDevice>, VulkanHandle<VkDeferredOperationKHR>, uint>)addr;
		}
		if (TryLoadFunc(dev, "vkGetDeferredOperationResultKHR", out addr)) {
			vkGetDeferredOperationResultKHR = (delegate* unmanaged<VulkanHandle<VkDevice>, VulkanHandle<VkDeferredOperationKHR>, VkResult>)addr;
		}
		if (TryLoadFunc(dev, "vkDeferredOperationJoinKHR", out addr)) {
			vkDeferredOperationJoinKHR = (delegate* unmanaged<VulkanHandle<VkDevice>, VulkanHandle<VkDeferredOperationKHR>, VkResult>)addr;
		}
		if (TryLoadFunc(dev, "vkCmdSetCullModeEXT", out addr)) {
			vkCmdSetCullModeEXT = (delegate* unmanaged<VulkanHandle<VkCommandBuffer>, VkCullModeFlags, void>)addr;
		}
		if (TryLoadFunc(dev, "vkCmdSetFrontFaceEXT", out addr)) {
			vkCmdSetFrontFaceEXT = (delegate* unmanaged<VulkanHandle<VkCommandBuffer>, VkFrontFace, void>)addr;
		}
		if (TryLoadFunc(dev, "vkCmdSetPrimitiveTopologyEXT", out addr)) {
			vkCmdSetPrimitiveTopologyEXT = (delegate* unmanaged<VulkanHandle<VkCommandBuffer>, VkPrimitiveTopology, void>)addr;
		}
		if (TryLoadFunc(dev, "vkCmdSetViewportWithCountEXT", out addr)) {
			vkCmdSetViewportWithCountEXT = (delegate* unmanaged<VulkanHandle<VkCommandBuffer>, uint, VkViewport*, void>)addr;
		}
		if (TryLoadFunc(dev, "vkCmdSetScissorWithCountEXT", out addr)) {
			vkCmdSetScissorWithCountEXT = (delegate* unmanaged<VulkanHandle<VkCommandBuffer>, uint, VkRect2D*, void>)addr;
		}
		if (TryLoadFunc(dev, "vkCmdBindVertexBuffers2EXT", out addr)) {
			vkCmdBindVertexBuffers2EXT = (delegate* unmanaged<VulkanHandle<VkCommandBuffer>, uint, uint, VulkanHandle<VkBuffer>*, ulong*, ulong*, ulong*, void>)addr;
		}
		if (TryLoadFunc(dev, "vkCmdSetDepthTestEnableEXT", out addr)) {
			vkCmdSetDepthTestEnableEXT = (delegate* unmanaged<VulkanHandle<VkCommandBuffer>, VkBool32, void>)addr;
		}
		if (TryLoadFunc(dev, "vkCmdSetDepthWriteEnableEXT", out addr)) {
			vkCmdSetDepthWriteEnableEXT = (delegate* unmanaged<VulkanHandle<VkCommandBuffer>, VkBool32, void>)addr;
		}
		if (TryLoadFunc(dev, "vkCmdSetDepthCompareOpEXT", out addr)) {
			vkCmdSetDepthCompareOpEXT = (delegate* unmanaged<VulkanHandle<VkCommandBuffer>, VkCompareOp, void>)addr;
		}
		if (TryLoadFunc(dev, "vkCmdSetDepthBoundsTestEnableEXT", out addr)) {
			vkCmdSetDepthBoundsTestEnableEXT = (delegate* unmanaged<VulkanHandle<VkCommandBuffer>, VkBool32, void>)addr;
		}
		if (TryLoadFunc(dev, "vkCmdSetStencilTestEnableEXT", out addr)) {
			vkCmdSetStencilTestEnableEXT = (delegate* unmanaged<VulkanHandle<VkCommandBuffer>, VkBool32, void>)addr;
		}
		if (TryLoadFunc(dev, "vkCmdSetStencilOpEXT", out addr)) {
			vkCmdSetStencilOpEXT = (delegate* unmanaged<VulkanHandle<VkCommandBuffer>, VkStencilFaceFlags, VkStencilOp, VkStencilOp, VkStencilOp, VkCompareOp, void>)addr;
		}
		if (TryLoadFunc(dev, "vkCreatePrivateDataSlotEXT", out addr)) {
			vkCreatePrivateDataSlotEXT = (delegate* unmanaged<VulkanHandle<VkDevice>, VkPrivateDataSlotCreateInfoEXT*, VkAllocationCallbacks*, VulkanHandle<VkPrivateDataSlotEXT>*, VkResult>)addr;
		}
		if (TryLoadFunc(dev, "vkDestroyPrivateDataSlotEXT", out addr)) {
			vkDestroyPrivateDataSlotEXT = (delegate* unmanaged<VulkanHandle<VkDevice>, VulkanHandle<VkPrivateDataSlotEXT>, VkAllocationCallbacks*, void>)addr;
		}
		if (TryLoadFunc(dev, "vkSetPrivateDataEXT", out addr)) {
			vkSetPrivateDataEXT = (delegate* unmanaged<VulkanHandle<VkDevice>, VkObjectType, ulong, VulkanHandle<VkPrivateDataSlotEXT>, ulong, VkResult>)addr;
		}
		if (TryLoadFunc(dev, "vkGetPrivateDataEXT", out addr)) {
			vkGetPrivateDataEXT = (delegate* unmanaged<VulkanHandle<VkDevice>, VkObjectType, ulong, VulkanHandle<VkPrivateDataSlotEXT>, ulong*, void>)addr;
		}
		if (TryLoadFunc(dev, "vkCmdCopyBuffer2KHR", out addr)) {
			vkCmdCopyBuffer2KHR = (delegate* unmanaged<VulkanHandle<VkCommandBuffer>, VkCopyBufferInfo2KHR*, void>)addr;
		}
		if (TryLoadFunc(dev, "vkCmdCopyImage2KHR", out addr)) {
			vkCmdCopyImage2KHR = (delegate* unmanaged<VulkanHandle<VkCommandBuffer>, VkCopyImageInfo2KHR*, void>)addr;
		}
		if (TryLoadFunc(dev, "vkCmdBlitImage2KHR", out addr)) {
			vkCmdBlitImage2KHR = (delegate* unmanaged<VulkanHandle<VkCommandBuffer>, VkBlitImageInfo2KHR*, void>)addr;
		}
		if (TryLoadFunc(dev, "vkCmdCopyBufferToImage2KHR", out addr)) {
			vkCmdCopyBufferToImage2KHR = (delegate* unmanaged<VulkanHandle<VkCommandBuffer>, VkCopyBufferToImageInfo2KHR*, void>)addr;
		}
		if (TryLoadFunc(dev, "vkCmdCopyImageToBuffer2KHR", out addr)) {
			vkCmdCopyImageToBuffer2KHR = (delegate* unmanaged<VulkanHandle<VkCommandBuffer>, VkCopyImageToBufferInfo2KHR*, void>)addr;
		}
		if (TryLoadFunc(dev, "vkCmdResolveImage2KHR", out addr)) {
			vkCmdResolveImage2KHR = (delegate* unmanaged<VulkanHandle<VkCommandBuffer>, VkResolveImageInfo2KHR*, void>)addr;
		}
		if (TryLoadFunc(dev, "vkCmdSetFragmentShadingRateKHR", out addr)) {
			vkCmdSetFragmentShadingRateKHR = (delegate* unmanaged<VulkanHandle<VkCommandBuffer>, VkExtent2D*, VkFragmentShadingRateCombinerOpKHR*, void>)addr;
		}
		if (TryLoadFunc(dev, "vkCmdSetFragmentShadingRateEnumNV", out addr)) {
			vkCmdSetFragmentShadingRateEnumNV = (delegate* unmanaged<VulkanHandle<VkCommandBuffer>, VkFragmentShadingRateNV, VkFragmentShadingRateCombinerOpKHR*, void>)addr;
		}
	}

}


} // namespace Vulkan

