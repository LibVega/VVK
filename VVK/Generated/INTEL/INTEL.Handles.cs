/*
 * MIT License - Copyright(c) 2020 Sean Moss
 * This file is subject to the terms and conditions of the MIT License, the text of which can be found in the 'LICENSE'
 * file at the root of this repository, or online at<https://opensource.org/licenses/MIT>.
 */

/// This file was generated by VVKGen. Edits to this file will be lost on next generation.

using System;
using System.Runtime.InteropServices;
using System.Runtime.CompilerServices;


namespace VVK.Vk.INTEL
{

[StructLayout(LayoutKind.Explicit, Size = 8)]
public unsafe partial struct PerformanceConfiguration : IEquatable<PerformanceConfiguration>
{
	public static readonly PerformanceConfiguration Null = new(0);

	[FieldOffset(0)] public readonly void* Handle;
	public readonly ulong LongHandle => (ulong)Handle;

	public PerformanceConfiguration(void* handle) => Handle = handle;
	public PerformanceConfiguration(ulong handle) => Handle = (void*)handle;
	public PerformanceConfiguration(IntPtr handle) => Handle = handle.ToPointer();

	readonly bool IEquatable<PerformanceConfiguration>.Equals(PerformanceConfiguration other) => other.Handle == Handle;
	public readonly override bool Equals(object? other) => (other is PerformanceConfiguration handle) && handle.Handle == Handle;
	public readonly override int GetHashCode() => (int)(LongHandle >> 32) ^ (int)(LongHandle & 0xFFFFFFFF);
	public readonly override string ToString() => $"[PerformanceConfiguration 0x{LongHandle:X16}]";

	public static bool operator == (PerformanceConfiguration l, PerformanceConfiguration r) => l.Handle == r.Handle;
	public static bool operator != (PerformanceConfiguration l, PerformanceConfiguration r) => l.Handle != r.Handle;
	public static implicit operator bool (PerformanceConfiguration handle) => handle.Handle != null;
}

} // namespace VVK.Vk.INTEL
