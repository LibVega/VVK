/*
 * MIT License - Copyright(c) 2020 Sean Moss
 * This file is subject to the terms and conditions of the MIT License, the text of which can be found in the 'LICENSE'
 * file at the root of this repository, or online at <https://opensource.org/licenses/MIT>.
 */

/// This file was generated by VVKGen. Edits to this file will be lost on next generation.

using System;
using System.Runtime.InteropServices;
using System.Runtime.CompilerServices;

namespace Vulkan
{

[StructLayout(LayoutKind.Sequential)]
public unsafe partial struct VkIOSSurfaceCreateInfoMVK : IEquatable<VkIOSSurfaceCreateInfoMVK>
{
	public const VkStructureType TYPE = VkStructureType.IosSurfaceCreateInfoMvk;

	public VkStructureType sType;
	public void* pNext;
	public VkIOSSurfaceCreateFlagsMVK Flags;
	public void* View;

	public VkIOSSurfaceCreateInfoMVK(
		VkIOSSurfaceCreateFlagsMVK flags = default,
		void* view = default
	) {
		sType = TYPE;
		pNext = null;
		Flags = flags;
		View = view;
	}

	public readonly override bool Equals(object? o) => (o is VkIOSSurfaceCreateInfoMVK s) && (this == s);
	readonly bool IEquatable<VkIOSSurfaceCreateInfoMVK>.Equals(VkIOSSurfaceCreateInfoMVK o) => o == this;

	[MethodImpl(MethodImplOptions.AggressiveOptimization)]
	public readonly override int GetHashCode()
	{
		return
			sType.GetHashCode() ^ ((ulong)pNext).GetHashCode() ^ Flags.GetHashCode() ^ ((ulong)View).GetHashCode()
			;
	}

	[MethodImpl(MethodImplOptions.AggressiveOptimization)]
	public static bool operator == (in VkIOSSurfaceCreateInfoMVK l, in VkIOSSurfaceCreateInfoMVK r)
	{
		return
			(l.sType == r.sType) && (l.pNext == r.pNext) && (l.Flags == r.Flags) && (l.View == r.View)
			;
	}

	[MethodImpl(MethodImplOptions.AggressiveOptimization)]
	public static bool operator != (in VkIOSSurfaceCreateInfoMVK l, in VkIOSSurfaceCreateInfoMVK r)
	{
		return
			(l.sType != r.sType) || (l.pNext != r.pNext) || (l.Flags != r.Flags) || (l.View != r.View)
			;
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void New(out VkIOSSurfaceCreateInfoMVK s) => s = new() { sType = TYPE };
}

[StructLayout(LayoutKind.Sequential)]
public unsafe partial struct VkMacOSSurfaceCreateInfoMVK : IEquatable<VkMacOSSurfaceCreateInfoMVK>
{
	public const VkStructureType TYPE = VkStructureType.MacosSurfaceCreateInfoMvk;

	public VkStructureType sType;
	public void* pNext;
	public VkMacOSSurfaceCreateFlagsMVK Flags;
	public void* View;

	public VkMacOSSurfaceCreateInfoMVK(
		VkMacOSSurfaceCreateFlagsMVK flags = default,
		void* view = default
	) {
		sType = TYPE;
		pNext = null;
		Flags = flags;
		View = view;
	}

	public readonly override bool Equals(object? o) => (o is VkMacOSSurfaceCreateInfoMVK s) && (this == s);
	readonly bool IEquatable<VkMacOSSurfaceCreateInfoMVK>.Equals(VkMacOSSurfaceCreateInfoMVK o) => o == this;

	[MethodImpl(MethodImplOptions.AggressiveOptimization)]
	public readonly override int GetHashCode()
	{
		return
			sType.GetHashCode() ^ ((ulong)pNext).GetHashCode() ^ Flags.GetHashCode() ^ ((ulong)View).GetHashCode()
			;
	}

	[MethodImpl(MethodImplOptions.AggressiveOptimization)]
	public static bool operator == (in VkMacOSSurfaceCreateInfoMVK l, in VkMacOSSurfaceCreateInfoMVK r)
	{
		return
			(l.sType == r.sType) && (l.pNext == r.pNext) && (l.Flags == r.Flags) && (l.View == r.View)
			;
	}

	[MethodImpl(MethodImplOptions.AggressiveOptimization)]
	public static bool operator != (in VkMacOSSurfaceCreateInfoMVK l, in VkMacOSSurfaceCreateInfoMVK r)
	{
		return
			(l.sType != r.sType) || (l.pNext != r.pNext) || (l.Flags != r.Flags) || (l.View != r.View)
			;
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void New(out VkMacOSSurfaceCreateInfoMVK s) => s = new() { sType = TYPE };
}


} // namespace Vulkan

