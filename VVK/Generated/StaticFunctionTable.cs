/*
 * MIT License - Copyright(c) 2020 Sean Moss
 * This file is subject to the terms and conditions of the MIT License, the text of which can be found in the 'LICENSE'
 * file at the root of this repository, or online at <https://opensource.org/licenses/MIT>.
 */

/// This file was generated by VVKGen. Edits to this file will be lost on next generation.

using System;
using System.Runtime.InteropServices;
using System.Runtime.CompilerServices;

namespace Vulkan
{

public unsafe static partial class StaticFunctionTable
{
	/* Global Functions */
	private static readonly delegate* unmanaged<VkInstanceCreateInfo*, VkAllocationCallbacks*, VulkanHandle<VkInstance>*, VkResult> _vkCreateInstance = null;
	private static readonly delegate* unmanaged<VulkanHandle<VkDevice>, byte*, delegate* unmanaged<void>> _vkGetDeviceProcAddr = null;
	private static readonly delegate* unmanaged<VulkanHandle<VkInstance>, byte*, delegate* unmanaged<void>> _vkGetInstanceProcAddr = null;
	private static readonly delegate* unmanaged<uint*, VkResult> _vkEnumerateInstanceVersion = null;
	private static readonly delegate* unmanaged<uint*, VkLayerProperties*, VkResult> _vkEnumerateInstanceLayerProperties = null;
	private static readonly delegate* unmanaged<byte*, uint*, VkExtensionProperties*, VkResult> _vkEnumerateInstanceExtensionProperties = null;

	/* Instance Functions */
	private static delegate* unmanaged<VulkanHandle<VkInstance>, VkAllocationCallbacks*, void> _vkDestroyInstance = null;
	private static delegate* unmanaged<VulkanHandle<VkInstance>, uint*, VulkanHandle<VkPhysicalDevice>*, VkResult> _vkEnumeratePhysicalDevices = null;
	private static delegate* unmanaged<VulkanHandle<VkPhysicalDevice>, VkPhysicalDeviceProperties*, void> _vkGetPhysicalDeviceProperties = null;
	private static delegate* unmanaged<VulkanHandle<VkPhysicalDevice>, uint*, VkQueueFamilyProperties*, void> _vkGetPhysicalDeviceQueueFamilyProperties = null;
	private static delegate* unmanaged<VulkanHandle<VkPhysicalDevice>, VkPhysicalDeviceMemoryProperties*, void> _vkGetPhysicalDeviceMemoryProperties = null;
	private static delegate* unmanaged<VulkanHandle<VkPhysicalDevice>, VkPhysicalDeviceFeatures*, void> _vkGetPhysicalDeviceFeatures = null;
	private static delegate* unmanaged<VulkanHandle<VkPhysicalDevice>, VkFormat, VkFormatProperties*, void> _vkGetPhysicalDeviceFormatProperties = null;
	private static delegate* unmanaged<VulkanHandle<VkPhysicalDevice>, VkFormat, VkImageType, VkImageTiling, VkImageUsageFlags, VkImageCreateFlags, VkImageFormatProperties*, VkResult> _vkGetPhysicalDeviceImageFormatProperties = null;
	private static delegate* unmanaged<VulkanHandle<VkPhysicalDevice>, VkDeviceCreateInfo*, VkAllocationCallbacks*, VulkanHandle<VkDevice>*, VkResult> _vkCreateDevice = null;
	private static delegate* unmanaged<VulkanHandle<VkPhysicalDevice>, uint*, VkLayerProperties*, VkResult> _vkEnumerateDeviceLayerProperties = null;
	private static delegate* unmanaged<VulkanHandle<VkPhysicalDevice>, byte*, uint*, VkExtensionProperties*, VkResult> _vkEnumerateDeviceExtensionProperties = null;
	private static delegate* unmanaged<VulkanHandle<VkPhysicalDevice>, VkFormat, VkImageType, VkSampleCountFlags, VkImageUsageFlags, VkImageTiling, uint*, VkSparseImageFormatProperties*, void> _vkGetPhysicalDeviceSparseImageFormatProperties = null;
	private static delegate* unmanaged<VulkanHandle<VkInstance>, VkAndroidSurfaceCreateInfoKHR*, VkAllocationCallbacks*, VulkanHandle<VkSurfaceKHR>*, VkResult> _vkCreateAndroidSurfaceKHR = null;
	private static delegate* unmanaged<VulkanHandle<VkPhysicalDevice>, uint*, VkDisplayPropertiesKHR*, VkResult> _vkGetPhysicalDeviceDisplayPropertiesKHR = null;
	private static delegate* unmanaged<VulkanHandle<VkPhysicalDevice>, uint*, VkDisplayPlanePropertiesKHR*, VkResult> _vkGetPhysicalDeviceDisplayPlanePropertiesKHR = null;
	private static delegate* unmanaged<VulkanHandle<VkPhysicalDevice>, uint, uint*, VulkanHandle<VkDisplayKHR>*, VkResult> _vkGetDisplayPlaneSupportedDisplaysKHR = null;
	private static delegate* unmanaged<VulkanHandle<VkPhysicalDevice>, VulkanHandle<VkDisplayKHR>, uint*, VkDisplayModePropertiesKHR*, VkResult> _vkGetDisplayModePropertiesKHR = null;
	private static delegate* unmanaged<VulkanHandle<VkPhysicalDevice>, VulkanHandle<VkDisplayKHR>, VkDisplayModeCreateInfoKHR*, VkAllocationCallbacks*, VulkanHandle<VkDisplayModeKHR>*, VkResult> _vkCreateDisplayModeKHR = null;
	private static delegate* unmanaged<VulkanHandle<VkPhysicalDevice>, VulkanHandle<VkDisplayModeKHR>, uint, VkDisplayPlaneCapabilitiesKHR*, VkResult> _vkGetDisplayPlaneCapabilitiesKHR = null;
	private static delegate* unmanaged<VulkanHandle<VkInstance>, VkDisplaySurfaceCreateInfoKHR*, VkAllocationCallbacks*, VulkanHandle<VkSurfaceKHR>*, VkResult> _vkCreateDisplayPlaneSurfaceKHR = null;
	private static delegate* unmanaged<VulkanHandle<VkInstance>, VulkanHandle<VkSurfaceKHR>, VkAllocationCallbacks*, void> _vkDestroySurfaceKHR = null;
	private static delegate* unmanaged<VulkanHandle<VkPhysicalDevice>, uint, VulkanHandle<VkSurfaceKHR>, VkBool32*, VkResult> _vkGetPhysicalDeviceSurfaceSupportKHR = null;
	private static delegate* unmanaged<VulkanHandle<VkPhysicalDevice>, VulkanHandle<VkSurfaceKHR>, VkSurfaceCapabilitiesKHR*, VkResult> _vkGetPhysicalDeviceSurfaceCapabilitiesKHR = null;
	private static delegate* unmanaged<VulkanHandle<VkPhysicalDevice>, VulkanHandle<VkSurfaceKHR>, uint*, VkSurfaceFormatKHR*, VkResult> _vkGetPhysicalDeviceSurfaceFormatsKHR = null;
	private static delegate* unmanaged<VulkanHandle<VkPhysicalDevice>, VulkanHandle<VkSurfaceKHR>, uint*, VkPresentModeKHR*, VkResult> _vkGetPhysicalDeviceSurfacePresentModesKHR = null;
	private static delegate* unmanaged<VulkanHandle<VkInstance>, VkViSurfaceCreateInfoNN*, VkAllocationCallbacks*, VulkanHandle<VkSurfaceKHR>*, VkResult> _vkCreateViSurfaceNN = null;
	private static delegate* unmanaged<VulkanHandle<VkInstance>, VkWaylandSurfaceCreateInfoKHR*, VkAllocationCallbacks*, VulkanHandle<VkSurfaceKHR>*, VkResult> _vkCreateWaylandSurfaceKHR = null;
	private static delegate* unmanaged<VulkanHandle<VkPhysicalDevice>, uint, void*, VkBool32> _vkGetPhysicalDeviceWaylandPresentationSupportKHR = null;
	private static delegate* unmanaged<VulkanHandle<VkInstance>, VkWin32SurfaceCreateInfoKHR*, VkAllocationCallbacks*, VulkanHandle<VkSurfaceKHR>*, VkResult> _vkCreateWin32SurfaceKHR = null;
	private static delegate* unmanaged<VulkanHandle<VkPhysicalDevice>, uint, VkBool32> _vkGetPhysicalDeviceWin32PresentationSupportKHR = null;
	private static delegate* unmanaged<VulkanHandle<VkInstance>, VkXlibSurfaceCreateInfoKHR*, VkAllocationCallbacks*, VulkanHandle<VkSurfaceKHR>*, VkResult> _vkCreateXlibSurfaceKHR = null;
	private static delegate* unmanaged<VulkanHandle<VkPhysicalDevice>, uint, void*, ulong, VkBool32> _vkGetPhysicalDeviceXlibPresentationSupportKHR = null;
	private static delegate* unmanaged<VulkanHandle<VkInstance>, VkXcbSurfaceCreateInfoKHR*, VkAllocationCallbacks*, VulkanHandle<VkSurfaceKHR>*, VkResult> _vkCreateXcbSurfaceKHR = null;
	private static delegate* unmanaged<VulkanHandle<VkPhysicalDevice>, uint, void*, uint, VkBool32> _vkGetPhysicalDeviceXcbPresentationSupportKHR = null;
	private static delegate* unmanaged<VulkanHandle<VkInstance>, VkDirectFBSurfaceCreateInfoEXT*, VkAllocationCallbacks*, VulkanHandle<VkSurfaceKHR>*, VkResult> _vkCreateDirectFBSurfaceEXT = null;
	private static delegate* unmanaged<VulkanHandle<VkPhysicalDevice>, uint, void*, VkBool32> _vkGetPhysicalDeviceDirectFBPresentationSupportEXT = null;
	private static delegate* unmanaged<VulkanHandle<VkInstance>, VkImagePipeSurfaceCreateInfoFUCHSIA*, VkAllocationCallbacks*, VulkanHandle<VkSurfaceKHR>*, VkResult> _vkCreateImagePipeSurfaceFUCHSIA = null;
	private static delegate* unmanaged<VulkanHandle<VkInstance>, VkStreamDescriptorSurfaceCreateInfoGGP*, VkAllocationCallbacks*, VulkanHandle<VkSurfaceKHR>*, VkResult> _vkCreateStreamDescriptorSurfaceGGP = null;
	private static delegate* unmanaged<VulkanHandle<VkInstance>, VkDebugReportCallbackCreateInfoEXT*, VkAllocationCallbacks*, VulkanHandle<VkDebugReportCallbackEXT>*, VkResult> _vkCreateDebugReportCallbackEXT = null;
	private static delegate* unmanaged<VulkanHandle<VkInstance>, VulkanHandle<VkDebugReportCallbackEXT>, VkAllocationCallbacks*, void> _vkDestroyDebugReportCallbackEXT = null;
	private static delegate* unmanaged<VulkanHandle<VkInstance>, VkDebugReportFlagsEXT, VkDebugReportObjectTypeEXT, ulong, ulong, int, byte*, byte*, void> _vkDebugReportMessageEXT = null;
	private static delegate* unmanaged<VulkanHandle<VkPhysicalDevice>, VkFormat, VkImageType, VkImageTiling, VkImageUsageFlags, VkImageCreateFlags, VkExternalMemoryHandleTypeFlagsNV, VkExternalImageFormatPropertiesNV*, VkResult> _vkGetPhysicalDeviceExternalImageFormatPropertiesNV = null;
	private static delegate* unmanaged<VulkanHandle<VkPhysicalDevice>, VkPhysicalDeviceFeatures2*, void> _vkGetPhysicalDeviceFeatures2 = null;
	private static delegate* unmanaged<VulkanHandle<VkPhysicalDevice>, VkPhysicalDeviceFeatures2*, void> _vkGetPhysicalDeviceFeatures2KHR = null;
	private static delegate* unmanaged<VulkanHandle<VkPhysicalDevice>, VkPhysicalDeviceProperties2*, void> _vkGetPhysicalDeviceProperties2 = null;
	private static delegate* unmanaged<VulkanHandle<VkPhysicalDevice>, VkPhysicalDeviceProperties2*, void> _vkGetPhysicalDeviceProperties2KHR = null;
	private static delegate* unmanaged<VulkanHandle<VkPhysicalDevice>, VkFormat, VkFormatProperties2*, void> _vkGetPhysicalDeviceFormatProperties2 = null;
	private static delegate* unmanaged<VulkanHandle<VkPhysicalDevice>, VkFormat, VkFormatProperties2*, void> _vkGetPhysicalDeviceFormatProperties2KHR = null;
	private static delegate* unmanaged<VulkanHandle<VkPhysicalDevice>, VkPhysicalDeviceImageFormatInfo2*, VkImageFormatProperties2*, VkResult> _vkGetPhysicalDeviceImageFormatProperties2 = null;
	private static delegate* unmanaged<VulkanHandle<VkPhysicalDevice>, VkPhysicalDeviceImageFormatInfo2*, VkImageFormatProperties2*, VkResult> _vkGetPhysicalDeviceImageFormatProperties2KHR = null;
	private static delegate* unmanaged<VulkanHandle<VkPhysicalDevice>, uint*, VkQueueFamilyProperties2*, void> _vkGetPhysicalDeviceQueueFamilyProperties2 = null;
	private static delegate* unmanaged<VulkanHandle<VkPhysicalDevice>, uint*, VkQueueFamilyProperties2*, void> _vkGetPhysicalDeviceQueueFamilyProperties2KHR = null;
	private static delegate* unmanaged<VulkanHandle<VkPhysicalDevice>, VkPhysicalDeviceMemoryProperties2*, void> _vkGetPhysicalDeviceMemoryProperties2 = null;
	private static delegate* unmanaged<VulkanHandle<VkPhysicalDevice>, VkPhysicalDeviceMemoryProperties2*, void> _vkGetPhysicalDeviceMemoryProperties2KHR = null;
	private static delegate* unmanaged<VulkanHandle<VkPhysicalDevice>, VkPhysicalDeviceSparseImageFormatInfo2*, uint*, VkSparseImageFormatProperties2*, void> _vkGetPhysicalDeviceSparseImageFormatProperties2 = null;
	private static delegate* unmanaged<VulkanHandle<VkPhysicalDevice>, VkPhysicalDeviceSparseImageFormatInfo2*, uint*, VkSparseImageFormatProperties2*, void> _vkGetPhysicalDeviceSparseImageFormatProperties2KHR = null;
	private static delegate* unmanaged<VulkanHandle<VkPhysicalDevice>, VkPhysicalDeviceExternalBufferInfo*, VkExternalBufferProperties*, void> _vkGetPhysicalDeviceExternalBufferProperties = null;
	private static delegate* unmanaged<VulkanHandle<VkPhysicalDevice>, VkPhysicalDeviceExternalBufferInfo*, VkExternalBufferProperties*, void> _vkGetPhysicalDeviceExternalBufferPropertiesKHR = null;
	private static delegate* unmanaged<VulkanHandle<VkPhysicalDevice>, VkPhysicalDeviceExternalSemaphoreInfo*, VkExternalSemaphoreProperties*, void> _vkGetPhysicalDeviceExternalSemaphoreProperties = null;
	private static delegate* unmanaged<VulkanHandle<VkPhysicalDevice>, VkPhysicalDeviceExternalSemaphoreInfo*, VkExternalSemaphoreProperties*, void> _vkGetPhysicalDeviceExternalSemaphorePropertiesKHR = null;
	private static delegate* unmanaged<VulkanHandle<VkPhysicalDevice>, VkPhysicalDeviceExternalFenceInfo*, VkExternalFenceProperties*, void> _vkGetPhysicalDeviceExternalFenceProperties = null;
	private static delegate* unmanaged<VulkanHandle<VkPhysicalDevice>, VkPhysicalDeviceExternalFenceInfo*, VkExternalFenceProperties*, void> _vkGetPhysicalDeviceExternalFencePropertiesKHR = null;
	private static delegate* unmanaged<VulkanHandle<VkPhysicalDevice>, VulkanHandle<VkDisplayKHR>, VkResult> _vkReleaseDisplayEXT = null;
	private static delegate* unmanaged<VulkanHandle<VkPhysicalDevice>, void*, VulkanHandle<VkDisplayKHR>, VkResult> _vkAcquireXlibDisplayEXT = null;
	private static delegate* unmanaged<VulkanHandle<VkPhysicalDevice>, void*, ulong, VulkanHandle<VkDisplayKHR>*, VkResult> _vkGetRandROutputDisplayEXT = null;
	private static delegate* unmanaged<VulkanHandle<VkPhysicalDevice>, VulkanHandle<VkSurfaceKHR>, VkSurfaceCapabilities2EXT*, VkResult> _vkGetPhysicalDeviceSurfaceCapabilities2EXT = null;
	private static delegate* unmanaged<VulkanHandle<VkInstance>, uint*, VkPhysicalDeviceGroupProperties*, VkResult> _vkEnumeratePhysicalDeviceGroups = null;
	private static delegate* unmanaged<VulkanHandle<VkInstance>, uint*, VkPhysicalDeviceGroupProperties*, VkResult> _vkEnumeratePhysicalDeviceGroupsKHR = null;
	private static delegate* unmanaged<VulkanHandle<VkPhysicalDevice>, VulkanHandle<VkSurfaceKHR>, uint*, VkRect2D*, VkResult> _vkGetPhysicalDevicePresentRectanglesKHR = null;
	private static delegate* unmanaged<VulkanHandle<VkInstance>, VkIOSSurfaceCreateInfoMVK*, VkAllocationCallbacks*, VulkanHandle<VkSurfaceKHR>*, VkResult> _vkCreateIOSSurfaceMVK = null;
	private static delegate* unmanaged<VulkanHandle<VkInstance>, VkMacOSSurfaceCreateInfoMVK*, VkAllocationCallbacks*, VulkanHandle<VkSurfaceKHR>*, VkResult> _vkCreateMacOSSurfaceMVK = null;
	private static delegate* unmanaged<VulkanHandle<VkInstance>, VkMetalSurfaceCreateInfoEXT*, VkAllocationCallbacks*, VulkanHandle<VkSurfaceKHR>*, VkResult> _vkCreateMetalSurfaceEXT = null;
	private static delegate* unmanaged<VulkanHandle<VkPhysicalDevice>, VkSampleCountFlags, VkMultisamplePropertiesEXT*, void> _vkGetPhysicalDeviceMultisamplePropertiesEXT = null;
	private static delegate* unmanaged<VulkanHandle<VkPhysicalDevice>, VkPhysicalDeviceSurfaceInfo2KHR*, VkSurfaceCapabilities2KHR*, VkResult> _vkGetPhysicalDeviceSurfaceCapabilities2KHR = null;
	private static delegate* unmanaged<VulkanHandle<VkPhysicalDevice>, VkPhysicalDeviceSurfaceInfo2KHR*, uint*, VkSurfaceFormat2KHR*, VkResult> _vkGetPhysicalDeviceSurfaceFormats2KHR = null;
	private static delegate* unmanaged<VulkanHandle<VkPhysicalDevice>, uint*, VkDisplayProperties2KHR*, VkResult> _vkGetPhysicalDeviceDisplayProperties2KHR = null;
	private static delegate* unmanaged<VulkanHandle<VkPhysicalDevice>, uint*, VkDisplayPlaneProperties2KHR*, VkResult> _vkGetPhysicalDeviceDisplayPlaneProperties2KHR = null;
	private static delegate* unmanaged<VulkanHandle<VkPhysicalDevice>, VulkanHandle<VkDisplayKHR>, uint*, VkDisplayModeProperties2KHR*, VkResult> _vkGetDisplayModeProperties2KHR = null;
	private static delegate* unmanaged<VulkanHandle<VkPhysicalDevice>, VkDisplayPlaneInfo2KHR*, VkDisplayPlaneCapabilities2KHR*, VkResult> _vkGetDisplayPlaneCapabilities2KHR = null;
	private static delegate* unmanaged<VulkanHandle<VkPhysicalDevice>, uint*, VkTimeDomainEXT*, VkResult> _vkGetPhysicalDeviceCalibrateableTimeDomainsEXT = null;
	private static delegate* unmanaged<VulkanHandle<VkInstance>, VkDebugUtilsMessengerCreateInfoEXT*, VkAllocationCallbacks*, VulkanHandle<VkDebugUtilsMessengerEXT>*, VkResult> _vkCreateDebugUtilsMessengerEXT = null;
	private static delegate* unmanaged<VulkanHandle<VkInstance>, VulkanHandle<VkDebugUtilsMessengerEXT>, VkAllocationCallbacks*, void> _vkDestroyDebugUtilsMessengerEXT = null;
	private static delegate* unmanaged<VulkanHandle<VkInstance>, VkDebugUtilsMessageSeverityFlagsEXT, VkDebugUtilsMessageTypeFlagsEXT, VkDebugUtilsMessengerCallbackDataEXT*, void> _vkSubmitDebugUtilsMessageEXT = null;
	private static delegate* unmanaged<VulkanHandle<VkPhysicalDevice>, uint*, VkCooperativeMatrixPropertiesNV*, VkResult> _vkGetPhysicalDeviceCooperativeMatrixPropertiesNV = null;
	private static delegate* unmanaged<VulkanHandle<VkPhysicalDevice>, VkPhysicalDeviceSurfaceInfo2KHR*, uint*, VkPresentModeKHR*, VkResult> _vkGetPhysicalDeviceSurfacePresentModes2EXT = null;
	private static delegate* unmanaged<VulkanHandle<VkPhysicalDevice>, uint, uint*, VkPerformanceCounterKHR*, VkPerformanceCounterDescriptionKHR*, VkResult> _vkEnumeratePhysicalDeviceQueueFamilyPerformanceQueryCountersKHR = null;
	private static delegate* unmanaged<VulkanHandle<VkPhysicalDevice>, VkQueryPoolPerformanceCreateInfoKHR*, uint*, void> _vkGetPhysicalDeviceQueueFamilyPerformanceQueryPassesKHR = null;
	private static delegate* unmanaged<VulkanHandle<VkInstance>, VkHeadlessSurfaceCreateInfoEXT*, VkAllocationCallbacks*, VulkanHandle<VkSurfaceKHR>*, VkResult> _vkCreateHeadlessSurfaceEXT = null;
	private static delegate* unmanaged<VulkanHandle<VkPhysicalDevice>, uint*, VkFramebufferMixedSamplesCombinationNV*, VkResult> _vkGetPhysicalDeviceSupportedFramebufferMixedSamplesCombinationsNV = null;
	private static delegate* unmanaged<VulkanHandle<VkPhysicalDevice>, uint*, VkPhysicalDeviceToolPropertiesEXT*, VkResult> _vkGetPhysicalDeviceToolPropertiesEXT = null;
	private static delegate* unmanaged<VulkanHandle<VkPhysicalDevice>, uint*, VkPhysicalDeviceFragmentShadingRateKHR*, VkResult> _vkGetPhysicalDeviceFragmentShadingRatesKHR = null;

	/* Device Functions */
	private static delegate* unmanaged<VulkanHandle<VkDevice>, VkAllocationCallbacks*, void> _vkDestroyDevice = null;
	private static delegate* unmanaged<VulkanHandle<VkDevice>, uint, uint, VulkanHandle<VkQueue>*, void> _vkGetDeviceQueue = null;
	private static delegate* unmanaged<VulkanHandle<VkQueue>, uint, VkSubmitInfo*, VulkanHandle<VkFence>, VkResult> _vkQueueSubmit = null;
	private static delegate* unmanaged<VulkanHandle<VkQueue>, VkResult> _vkQueueWaitIdle = null;
	private static delegate* unmanaged<VulkanHandle<VkDevice>, VkResult> _vkDeviceWaitIdle = null;
	private static delegate* unmanaged<VulkanHandle<VkDevice>, VkMemoryAllocateInfo*, VkAllocationCallbacks*, VulkanHandle<VkDeviceMemory>*, VkResult> _vkAllocateMemory = null;
	private static delegate* unmanaged<VulkanHandle<VkDevice>, VulkanHandle<VkDeviceMemory>, VkAllocationCallbacks*, void> _vkFreeMemory = null;
	private static delegate* unmanaged<VulkanHandle<VkDevice>, VulkanHandle<VkDeviceMemory>, ulong, ulong, VkMemoryMapFlags, void**, VkResult> _vkMapMemory = null;
	private static delegate* unmanaged<VulkanHandle<VkDevice>, VulkanHandle<VkDeviceMemory>, void> _vkUnmapMemory = null;
	private static delegate* unmanaged<VulkanHandle<VkDevice>, uint, VkMappedMemoryRange*, VkResult> _vkFlushMappedMemoryRanges = null;
	private static delegate* unmanaged<VulkanHandle<VkDevice>, uint, VkMappedMemoryRange*, VkResult> _vkInvalidateMappedMemoryRanges = null;
	private static delegate* unmanaged<VulkanHandle<VkDevice>, VulkanHandle<VkDeviceMemory>, ulong*, void> _vkGetDeviceMemoryCommitment = null;
	private static delegate* unmanaged<VulkanHandle<VkDevice>, VulkanHandle<VkBuffer>, VkMemoryRequirements*, void> _vkGetBufferMemoryRequirements = null;
	private static delegate* unmanaged<VulkanHandle<VkDevice>, VulkanHandle<VkBuffer>, VulkanHandle<VkDeviceMemory>, ulong, VkResult> _vkBindBufferMemory = null;
	private static delegate* unmanaged<VulkanHandle<VkDevice>, VulkanHandle<VkImage>, VkMemoryRequirements*, void> _vkGetImageMemoryRequirements = null;
	private static delegate* unmanaged<VulkanHandle<VkDevice>, VulkanHandle<VkImage>, VulkanHandle<VkDeviceMemory>, ulong, VkResult> _vkBindImageMemory = null;
	private static delegate* unmanaged<VulkanHandle<VkDevice>, VulkanHandle<VkImage>, uint*, VkSparseImageMemoryRequirements*, void> _vkGetImageSparseMemoryRequirements = null;
	private static delegate* unmanaged<VulkanHandle<VkQueue>, uint, VkBindSparseInfo*, VulkanHandle<VkFence>, VkResult> _vkQueueBindSparse = null;
	private static delegate* unmanaged<VulkanHandle<VkDevice>, VkFenceCreateInfo*, VkAllocationCallbacks*, VulkanHandle<VkFence>*, VkResult> _vkCreateFence = null;
	private static delegate* unmanaged<VulkanHandle<VkDevice>, VulkanHandle<VkFence>, VkAllocationCallbacks*, void> _vkDestroyFence = null;
	private static delegate* unmanaged<VulkanHandle<VkDevice>, uint, VulkanHandle<VkFence>*, VkResult> _vkResetFences = null;
	private static delegate* unmanaged<VulkanHandle<VkDevice>, VulkanHandle<VkFence>, VkResult> _vkGetFenceStatus = null;
	private static delegate* unmanaged<VulkanHandle<VkDevice>, uint, VulkanHandle<VkFence>*, VkBool32, ulong, VkResult> _vkWaitForFences = null;
	private static delegate* unmanaged<VulkanHandle<VkDevice>, VkSemaphoreCreateInfo*, VkAllocationCallbacks*, VulkanHandle<VkSemaphore>*, VkResult> _vkCreateSemaphore = null;
	private static delegate* unmanaged<VulkanHandle<VkDevice>, VulkanHandle<VkSemaphore>, VkAllocationCallbacks*, void> _vkDestroySemaphore = null;
	private static delegate* unmanaged<VulkanHandle<VkDevice>, VkEventCreateInfo*, VkAllocationCallbacks*, VulkanHandle<VkEvent>*, VkResult> _vkCreateEvent = null;
	private static delegate* unmanaged<VulkanHandle<VkDevice>, VulkanHandle<VkEvent>, VkAllocationCallbacks*, void> _vkDestroyEvent = null;
	private static delegate* unmanaged<VulkanHandle<VkDevice>, VulkanHandle<VkEvent>, VkResult> _vkGetEventStatus = null;
	private static delegate* unmanaged<VulkanHandle<VkDevice>, VulkanHandle<VkEvent>, VkResult> _vkSetEvent = null;
	private static delegate* unmanaged<VulkanHandle<VkDevice>, VulkanHandle<VkEvent>, VkResult> _vkResetEvent = null;
	private static delegate* unmanaged<VulkanHandle<VkDevice>, VkQueryPoolCreateInfo*, VkAllocationCallbacks*, VulkanHandle<VkQueryPool>*, VkResult> _vkCreateQueryPool = null;
	private static delegate* unmanaged<VulkanHandle<VkDevice>, VulkanHandle<VkQueryPool>, VkAllocationCallbacks*, void> _vkDestroyQueryPool = null;
	private static delegate* unmanaged<VulkanHandle<VkDevice>, VulkanHandle<VkQueryPool>, uint, uint, ulong, void*, ulong, VkQueryResultFlags, VkResult> _vkGetQueryPoolResults = null;
	private static delegate* unmanaged<VulkanHandle<VkDevice>, VulkanHandle<VkQueryPool>, uint, uint, void> _vkResetQueryPool = null;
	private static delegate* unmanaged<VulkanHandle<VkDevice>, VulkanHandle<VkQueryPool>, uint, uint, void> _vkResetQueryPoolEXT = null;
	private static delegate* unmanaged<VulkanHandle<VkDevice>, VkBufferCreateInfo*, VkAllocationCallbacks*, VulkanHandle<VkBuffer>*, VkResult> _vkCreateBuffer = null;
	private static delegate* unmanaged<VulkanHandle<VkDevice>, VulkanHandle<VkBuffer>, VkAllocationCallbacks*, void> _vkDestroyBuffer = null;
	private static delegate* unmanaged<VulkanHandle<VkDevice>, VkBufferViewCreateInfo*, VkAllocationCallbacks*, VulkanHandle<VkBufferView>*, VkResult> _vkCreateBufferView = null;
	private static delegate* unmanaged<VulkanHandle<VkDevice>, VulkanHandle<VkBufferView>, VkAllocationCallbacks*, void> _vkDestroyBufferView = null;
	private static delegate* unmanaged<VulkanHandle<VkDevice>, VkImageCreateInfo*, VkAllocationCallbacks*, VulkanHandle<VkImage>*, VkResult> _vkCreateImage = null;
	private static delegate* unmanaged<VulkanHandle<VkDevice>, VulkanHandle<VkImage>, VkAllocationCallbacks*, void> _vkDestroyImage = null;
	private static delegate* unmanaged<VulkanHandle<VkDevice>, VulkanHandle<VkImage>, VkImageSubresource*, VkSubresourceLayout*, void> _vkGetImageSubresourceLayout = null;
	private static delegate* unmanaged<VulkanHandle<VkDevice>, VkImageViewCreateInfo*, VkAllocationCallbacks*, VulkanHandle<VkImageView>*, VkResult> _vkCreateImageView = null;
	private static delegate* unmanaged<VulkanHandle<VkDevice>, VulkanHandle<VkImageView>, VkAllocationCallbacks*, void> _vkDestroyImageView = null;
	private static delegate* unmanaged<VulkanHandle<VkDevice>, VkShaderModuleCreateInfo*, VkAllocationCallbacks*, VulkanHandle<VkShaderModule>*, VkResult> _vkCreateShaderModule = null;
	private static delegate* unmanaged<VulkanHandle<VkDevice>, VulkanHandle<VkShaderModule>, VkAllocationCallbacks*, void> _vkDestroyShaderModule = null;
	private static delegate* unmanaged<VulkanHandle<VkDevice>, VkPipelineCacheCreateInfo*, VkAllocationCallbacks*, VulkanHandle<VkPipelineCache>*, VkResult> _vkCreatePipelineCache = null;
	private static delegate* unmanaged<VulkanHandle<VkDevice>, VulkanHandle<VkPipelineCache>, VkAllocationCallbacks*, void> _vkDestroyPipelineCache = null;
	private static delegate* unmanaged<VulkanHandle<VkDevice>, VulkanHandle<VkPipelineCache>, ulong*, void*, VkResult> _vkGetPipelineCacheData = null;
	private static delegate* unmanaged<VulkanHandle<VkDevice>, VulkanHandle<VkPipelineCache>, uint, VulkanHandle<VkPipelineCache>*, VkResult> _vkMergePipelineCaches = null;
	private static delegate* unmanaged<VulkanHandle<VkDevice>, VulkanHandle<VkPipelineCache>, uint, VkGraphicsPipelineCreateInfo*, VkAllocationCallbacks*, VulkanHandle<VkPipeline>*, VkResult> _vkCreateGraphicsPipelines = null;
	private static delegate* unmanaged<VulkanHandle<VkDevice>, VulkanHandle<VkPipelineCache>, uint, VkComputePipelineCreateInfo*, VkAllocationCallbacks*, VulkanHandle<VkPipeline>*, VkResult> _vkCreateComputePipelines = null;
	private static delegate* unmanaged<VulkanHandle<VkDevice>, VulkanHandle<VkPipeline>, VkAllocationCallbacks*, void> _vkDestroyPipeline = null;
	private static delegate* unmanaged<VulkanHandle<VkDevice>, VkPipelineLayoutCreateInfo*, VkAllocationCallbacks*, VulkanHandle<VkPipelineLayout>*, VkResult> _vkCreatePipelineLayout = null;
	private static delegate* unmanaged<VulkanHandle<VkDevice>, VulkanHandle<VkPipelineLayout>, VkAllocationCallbacks*, void> _vkDestroyPipelineLayout = null;
	private static delegate* unmanaged<VulkanHandle<VkDevice>, VkSamplerCreateInfo*, VkAllocationCallbacks*, VulkanHandle<VkSampler>*, VkResult> _vkCreateSampler = null;
	private static delegate* unmanaged<VulkanHandle<VkDevice>, VulkanHandle<VkSampler>, VkAllocationCallbacks*, void> _vkDestroySampler = null;
	private static delegate* unmanaged<VulkanHandle<VkDevice>, VkDescriptorSetLayoutCreateInfo*, VkAllocationCallbacks*, VulkanHandle<VkDescriptorSetLayout>*, VkResult> _vkCreateDescriptorSetLayout = null;
	private static delegate* unmanaged<VulkanHandle<VkDevice>, VulkanHandle<VkDescriptorSetLayout>, VkAllocationCallbacks*, void> _vkDestroyDescriptorSetLayout = null;
	private static delegate* unmanaged<VulkanHandle<VkDevice>, VkDescriptorPoolCreateInfo*, VkAllocationCallbacks*, VulkanHandle<VkDescriptorPool>*, VkResult> _vkCreateDescriptorPool = null;
	private static delegate* unmanaged<VulkanHandle<VkDevice>, VulkanHandle<VkDescriptorPool>, VkAllocationCallbacks*, void> _vkDestroyDescriptorPool = null;
	private static delegate* unmanaged<VulkanHandle<VkDevice>, VulkanHandle<VkDescriptorPool>, VkDescriptorPoolResetFlags, VkResult> _vkResetDescriptorPool = null;
	private static delegate* unmanaged<VulkanHandle<VkDevice>, VkDescriptorSetAllocateInfo*, VulkanHandle<VkDescriptorSet>*, VkResult> _vkAllocateDescriptorSets = null;
	private static delegate* unmanaged<VulkanHandle<VkDevice>, VulkanHandle<VkDescriptorPool>, uint, VulkanHandle<VkDescriptorSet>*, VkResult> _vkFreeDescriptorSets = null;
	private static delegate* unmanaged<VulkanHandle<VkDevice>, uint, VkWriteDescriptorSet*, uint, VkCopyDescriptorSet*, void> _vkUpdateDescriptorSets = null;
	private static delegate* unmanaged<VulkanHandle<VkDevice>, VkFramebufferCreateInfo*, VkAllocationCallbacks*, VulkanHandle<VkFramebuffer>*, VkResult> _vkCreateFramebuffer = null;
	private static delegate* unmanaged<VulkanHandle<VkDevice>, VulkanHandle<VkFramebuffer>, VkAllocationCallbacks*, void> _vkDestroyFramebuffer = null;
	private static delegate* unmanaged<VulkanHandle<VkDevice>, VkRenderPassCreateInfo*, VkAllocationCallbacks*, VulkanHandle<VkRenderPass>*, VkResult> _vkCreateRenderPass = null;
	private static delegate* unmanaged<VulkanHandle<VkDevice>, VulkanHandle<VkRenderPass>, VkAllocationCallbacks*, void> _vkDestroyRenderPass = null;
	private static delegate* unmanaged<VulkanHandle<VkDevice>, VulkanHandle<VkRenderPass>, VkExtent2D*, void> _vkGetRenderAreaGranularity = null;
	private static delegate* unmanaged<VulkanHandle<VkDevice>, VkCommandPoolCreateInfo*, VkAllocationCallbacks*, VulkanHandle<VkCommandPool>*, VkResult> _vkCreateCommandPool = null;
	private static delegate* unmanaged<VulkanHandle<VkDevice>, VulkanHandle<VkCommandPool>, VkAllocationCallbacks*, void> _vkDestroyCommandPool = null;
	private static delegate* unmanaged<VulkanHandle<VkDevice>, VulkanHandle<VkCommandPool>, VkCommandPoolResetFlags, VkResult> _vkResetCommandPool = null;
	private static delegate* unmanaged<VulkanHandle<VkDevice>, VkCommandBufferAllocateInfo*, VulkanHandle<VkCommandBuffer>*, VkResult> _vkAllocateCommandBuffers = null;
	private static delegate* unmanaged<VulkanHandle<VkDevice>, VulkanHandle<VkCommandPool>, uint, VulkanHandle<VkCommandBuffer>*, void> _vkFreeCommandBuffers = null;
	private static delegate* unmanaged<VulkanHandle<VkCommandBuffer>, VkCommandBufferBeginInfo*, VkResult> _vkBeginCommandBuffer = null;
	private static delegate* unmanaged<VulkanHandle<VkCommandBuffer>, VkResult> _vkEndCommandBuffer = null;
	private static delegate* unmanaged<VulkanHandle<VkCommandBuffer>, VkCommandBufferResetFlags, VkResult> _vkResetCommandBuffer = null;
	private static delegate* unmanaged<VulkanHandle<VkCommandBuffer>, VkPipelineBindPoint, VulkanHandle<VkPipeline>, void> _vkCmdBindPipeline = null;
	private static delegate* unmanaged<VulkanHandle<VkCommandBuffer>, uint, uint, VkViewport*, void> _vkCmdSetViewport = null;
	private static delegate* unmanaged<VulkanHandle<VkCommandBuffer>, uint, uint, VkRect2D*, void> _vkCmdSetScissor = null;
	private static delegate* unmanaged<VulkanHandle<VkCommandBuffer>, float, void> _vkCmdSetLineWidth = null;
	private static delegate* unmanaged<VulkanHandle<VkCommandBuffer>, float, float, float, void> _vkCmdSetDepthBias = null;
	private static delegate* unmanaged<VulkanHandle<VkCommandBuffer>, float*, void> _vkCmdSetBlendConstants = null;
	private static delegate* unmanaged<VulkanHandle<VkCommandBuffer>, float, float, void> _vkCmdSetDepthBounds = null;
	private static delegate* unmanaged<VulkanHandle<VkCommandBuffer>, VkStencilFaceFlags, uint, void> _vkCmdSetStencilCompareMask = null;
	private static delegate* unmanaged<VulkanHandle<VkCommandBuffer>, VkStencilFaceFlags, uint, void> _vkCmdSetStencilWriteMask = null;
	private static delegate* unmanaged<VulkanHandle<VkCommandBuffer>, VkStencilFaceFlags, uint, void> _vkCmdSetStencilReference = null;
	private static delegate* unmanaged<VulkanHandle<VkCommandBuffer>, VkPipelineBindPoint, VulkanHandle<VkPipelineLayout>, uint, uint, VulkanHandle<VkDescriptorSet>*, uint, uint*, void> _vkCmdBindDescriptorSets = null;
	private static delegate* unmanaged<VulkanHandle<VkCommandBuffer>, VulkanHandle<VkBuffer>, ulong, VkIndexType, void> _vkCmdBindIndexBuffer = null;
	private static delegate* unmanaged<VulkanHandle<VkCommandBuffer>, uint, uint, VulkanHandle<VkBuffer>*, ulong*, void> _vkCmdBindVertexBuffers = null;
	private static delegate* unmanaged<VulkanHandle<VkCommandBuffer>, uint, uint, uint, uint, void> _vkCmdDraw = null;
	private static delegate* unmanaged<VulkanHandle<VkCommandBuffer>, uint, uint, uint, int, uint, void> _vkCmdDrawIndexed = null;
	private static delegate* unmanaged<VulkanHandle<VkCommandBuffer>, VulkanHandle<VkBuffer>, ulong, uint, uint, void> _vkCmdDrawIndirect = null;
	private static delegate* unmanaged<VulkanHandle<VkCommandBuffer>, VulkanHandle<VkBuffer>, ulong, uint, uint, void> _vkCmdDrawIndexedIndirect = null;
	private static delegate* unmanaged<VulkanHandle<VkCommandBuffer>, uint, uint, uint, void> _vkCmdDispatch = null;
	private static delegate* unmanaged<VulkanHandle<VkCommandBuffer>, VulkanHandle<VkBuffer>, ulong, void> _vkCmdDispatchIndirect = null;
	private static delegate* unmanaged<VulkanHandle<VkCommandBuffer>, VulkanHandle<VkBuffer>, VulkanHandle<VkBuffer>, uint, VkBufferCopy*, void> _vkCmdCopyBuffer = null;
	private static delegate* unmanaged<VulkanHandle<VkCommandBuffer>, VulkanHandle<VkImage>, VkImageLayout, VulkanHandle<VkImage>, VkImageLayout, uint, VkImageCopy*, void> _vkCmdCopyImage = null;
	private static delegate* unmanaged<VulkanHandle<VkCommandBuffer>, VulkanHandle<VkImage>, VkImageLayout, VulkanHandle<VkImage>, VkImageLayout, uint, VkImageBlit*, VkFilter, void> _vkCmdBlitImage = null;
	private static delegate* unmanaged<VulkanHandle<VkCommandBuffer>, VulkanHandle<VkBuffer>, VulkanHandle<VkImage>, VkImageLayout, uint, VkBufferImageCopy*, void> _vkCmdCopyBufferToImage = null;
	private static delegate* unmanaged<VulkanHandle<VkCommandBuffer>, VulkanHandle<VkImage>, VkImageLayout, VulkanHandle<VkBuffer>, uint, VkBufferImageCopy*, void> _vkCmdCopyImageToBuffer = null;
	private static delegate* unmanaged<VulkanHandle<VkCommandBuffer>, VulkanHandle<VkBuffer>, ulong, ulong, void*, void> _vkCmdUpdateBuffer = null;
	private static delegate* unmanaged<VulkanHandle<VkCommandBuffer>, VulkanHandle<VkBuffer>, ulong, ulong, uint, void> _vkCmdFillBuffer = null;
	private static delegate* unmanaged<VulkanHandle<VkCommandBuffer>, VulkanHandle<VkImage>, VkImageLayout, VkClearColorValue*, uint, VkImageSubresourceRange*, void> _vkCmdClearColorImage = null;
	private static delegate* unmanaged<VulkanHandle<VkCommandBuffer>, VulkanHandle<VkImage>, VkImageLayout, VkClearDepthStencilValue*, uint, VkImageSubresourceRange*, void> _vkCmdClearDepthStencilImage = null;
	private static delegate* unmanaged<VulkanHandle<VkCommandBuffer>, uint, VkClearAttachment*, uint, VkClearRect*, void> _vkCmdClearAttachments = null;
	private static delegate* unmanaged<VulkanHandle<VkCommandBuffer>, VulkanHandle<VkImage>, VkImageLayout, VulkanHandle<VkImage>, VkImageLayout, uint, VkImageResolve*, void> _vkCmdResolveImage = null;
	private static delegate* unmanaged<VulkanHandle<VkCommandBuffer>, VulkanHandle<VkEvent>, VkPipelineStageFlags, void> _vkCmdSetEvent = null;
	private static delegate* unmanaged<VulkanHandle<VkCommandBuffer>, VulkanHandle<VkEvent>, VkPipelineStageFlags, void> _vkCmdResetEvent = null;
	private static delegate* unmanaged<VulkanHandle<VkCommandBuffer>, uint, VulkanHandle<VkEvent>*, VkPipelineStageFlags, VkPipelineStageFlags, uint, VkMemoryBarrier*, uint, VkBufferMemoryBarrier*, uint, VkImageMemoryBarrier*, void> _vkCmdWaitEvents = null;
	private static delegate* unmanaged<VulkanHandle<VkCommandBuffer>, VkPipelineStageFlags, VkPipelineStageFlags, VkDependencyFlags, uint, VkMemoryBarrier*, uint, VkBufferMemoryBarrier*, uint, VkImageMemoryBarrier*, void> _vkCmdPipelineBarrier = null;
	private static delegate* unmanaged<VulkanHandle<VkCommandBuffer>, VulkanHandle<VkQueryPool>, uint, VkQueryControlFlags, void> _vkCmdBeginQuery = null;
	private static delegate* unmanaged<VulkanHandle<VkCommandBuffer>, VulkanHandle<VkQueryPool>, uint, void> _vkCmdEndQuery = null;
	private static delegate* unmanaged<VulkanHandle<VkCommandBuffer>, VkConditionalRenderingBeginInfoEXT*, void> _vkCmdBeginConditionalRenderingEXT = null;
	private static delegate* unmanaged<VulkanHandle<VkCommandBuffer>, void> _vkCmdEndConditionalRenderingEXT = null;
	private static delegate* unmanaged<VulkanHandle<VkCommandBuffer>, VulkanHandle<VkQueryPool>, uint, uint, void> _vkCmdResetQueryPool = null;
	private static delegate* unmanaged<VulkanHandle<VkCommandBuffer>, VkPipelineStageFlags, VulkanHandle<VkQueryPool>, uint, void> _vkCmdWriteTimestamp = null;
	private static delegate* unmanaged<VulkanHandle<VkCommandBuffer>, VulkanHandle<VkQueryPool>, uint, uint, VulkanHandle<VkBuffer>, ulong, ulong, VkQueryResultFlags, void> _vkCmdCopyQueryPoolResults = null;
	private static delegate* unmanaged<VulkanHandle<VkCommandBuffer>, VulkanHandle<VkPipelineLayout>, VkShaderStageFlags, uint, uint, void*, void> _vkCmdPushConstants = null;
	private static delegate* unmanaged<VulkanHandle<VkCommandBuffer>, VkRenderPassBeginInfo*, VkSubpassContents, void> _vkCmdBeginRenderPass = null;
	private static delegate* unmanaged<VulkanHandle<VkCommandBuffer>, VkSubpassContents, void> _vkCmdNextSubpass = null;
	private static delegate* unmanaged<VulkanHandle<VkCommandBuffer>, void> _vkCmdEndRenderPass = null;
	private static delegate* unmanaged<VulkanHandle<VkCommandBuffer>, uint, VulkanHandle<VkCommandBuffer>*, void> _vkCmdExecuteCommands = null;
	private static delegate* unmanaged<VulkanHandle<VkDevice>, uint, VkSwapchainCreateInfoKHR*, VkAllocationCallbacks*, VulkanHandle<VkSwapchainKHR>*, VkResult> _vkCreateSharedSwapchainsKHR = null;
	private static delegate* unmanaged<VulkanHandle<VkDevice>, VkSwapchainCreateInfoKHR*, VkAllocationCallbacks*, VulkanHandle<VkSwapchainKHR>*, VkResult> _vkCreateSwapchainKHR = null;
	private static delegate* unmanaged<VulkanHandle<VkDevice>, VulkanHandle<VkSwapchainKHR>, VkAllocationCallbacks*, void> _vkDestroySwapchainKHR = null;
	private static delegate* unmanaged<VulkanHandle<VkDevice>, VulkanHandle<VkSwapchainKHR>, uint*, VulkanHandle<VkImage>*, VkResult> _vkGetSwapchainImagesKHR = null;
	private static delegate* unmanaged<VulkanHandle<VkDevice>, VulkanHandle<VkSwapchainKHR>, ulong, VulkanHandle<VkSemaphore>, VulkanHandle<VkFence>, uint*, VkResult> _vkAcquireNextImageKHR = null;
	private static delegate* unmanaged<VulkanHandle<VkQueue>, VkPresentInfoKHR*, VkResult> _vkQueuePresentKHR = null;
	private static delegate* unmanaged<VulkanHandle<VkDevice>, VkDebugMarkerObjectNameInfoEXT*, VkResult> _vkDebugMarkerSetObjectNameEXT = null;
	private static delegate* unmanaged<VulkanHandle<VkDevice>, VkDebugMarkerObjectTagInfoEXT*, VkResult> _vkDebugMarkerSetObjectTagEXT = null;
	private static delegate* unmanaged<VulkanHandle<VkCommandBuffer>, VkDebugMarkerMarkerInfoEXT*, void> _vkCmdDebugMarkerBeginEXT = null;
	private static delegate* unmanaged<VulkanHandle<VkCommandBuffer>, void> _vkCmdDebugMarkerEndEXT = null;
	private static delegate* unmanaged<VulkanHandle<VkCommandBuffer>, VkDebugMarkerMarkerInfoEXT*, void> _vkCmdDebugMarkerInsertEXT = null;
	private static delegate* unmanaged<VulkanHandle<VkDevice>, VulkanHandle<VkDeviceMemory>, VkExternalMemoryHandleTypeFlagsNV, void**, VkResult> _vkGetMemoryWin32HandleNV = null;
	private static delegate* unmanaged<VulkanHandle<VkCommandBuffer>, VkBool32, VkGeneratedCommandsInfoNV*, void> _vkCmdExecuteGeneratedCommandsNV = null;
	private static delegate* unmanaged<VulkanHandle<VkCommandBuffer>, VkGeneratedCommandsInfoNV*, void> _vkCmdPreprocessGeneratedCommandsNV = null;
	private static delegate* unmanaged<VulkanHandle<VkCommandBuffer>, VkPipelineBindPoint, VulkanHandle<VkPipeline>, uint, void> _vkCmdBindPipelineShaderGroupNV = null;
	private static delegate* unmanaged<VulkanHandle<VkDevice>, VkGeneratedCommandsMemoryRequirementsInfoNV*, VkMemoryRequirements2*, void> _vkGetGeneratedCommandsMemoryRequirementsNV = null;
	private static delegate* unmanaged<VulkanHandle<VkDevice>, VkIndirectCommandsLayoutCreateInfoNV*, VkAllocationCallbacks*, VulkanHandle<VkIndirectCommandsLayoutNV>*, VkResult> _vkCreateIndirectCommandsLayoutNV = null;
	private static delegate* unmanaged<VulkanHandle<VkDevice>, VulkanHandle<VkIndirectCommandsLayoutNV>, VkAllocationCallbacks*, void> _vkDestroyIndirectCommandsLayoutNV = null;
	private static delegate* unmanaged<VulkanHandle<VkCommandBuffer>, VkPipelineBindPoint, VulkanHandle<VkPipelineLayout>, uint, uint, VkWriteDescriptorSet*, void> _vkCmdPushDescriptorSetKHR = null;
	private static delegate* unmanaged<VulkanHandle<VkDevice>, VulkanHandle<VkCommandPool>, VkCommandPoolTrimFlags, void> _vkTrimCommandPool = null;
	private static delegate* unmanaged<VulkanHandle<VkDevice>, VulkanHandle<VkCommandPool>, VkCommandPoolTrimFlags, void> _vkTrimCommandPoolKHR = null;
	private static delegate* unmanaged<VulkanHandle<VkDevice>, VkMemoryGetWin32HandleInfoKHR*, void**, VkResult> _vkGetMemoryWin32HandleKHR = null;
	private static delegate* unmanaged<VulkanHandle<VkDevice>, VkExternalMemoryHandleTypeFlags, void*, VkMemoryWin32HandlePropertiesKHR*, VkResult> _vkGetMemoryWin32HandlePropertiesKHR = null;
	private static delegate* unmanaged<VulkanHandle<VkDevice>, VkMemoryGetFdInfoKHR*, int*, VkResult> _vkGetMemoryFdKHR = null;
	private static delegate* unmanaged<VulkanHandle<VkDevice>, VkExternalMemoryHandleTypeFlags, int, VkMemoryFdPropertiesKHR*, VkResult> _vkGetMemoryFdPropertiesKHR = null;
	private static delegate* unmanaged<VulkanHandle<VkDevice>, VkSemaphoreGetWin32HandleInfoKHR*, void**, VkResult> _vkGetSemaphoreWin32HandleKHR = null;
	private static delegate* unmanaged<VulkanHandle<VkDevice>, VkImportSemaphoreWin32HandleInfoKHR*, VkResult> _vkImportSemaphoreWin32HandleKHR = null;
	private static delegate* unmanaged<VulkanHandle<VkDevice>, VkSemaphoreGetFdInfoKHR*, int*, VkResult> _vkGetSemaphoreFdKHR = null;
	private static delegate* unmanaged<VulkanHandle<VkDevice>, VkImportSemaphoreFdInfoKHR*, VkResult> _vkImportSemaphoreFdKHR = null;
	private static delegate* unmanaged<VulkanHandle<VkDevice>, VkFenceGetWin32HandleInfoKHR*, void**, VkResult> _vkGetFenceWin32HandleKHR = null;
	private static delegate* unmanaged<VulkanHandle<VkDevice>, VkImportFenceWin32HandleInfoKHR*, VkResult> _vkImportFenceWin32HandleKHR = null;
	private static delegate* unmanaged<VulkanHandle<VkDevice>, VkFenceGetFdInfoKHR*, int*, VkResult> _vkGetFenceFdKHR = null;
	private static delegate* unmanaged<VulkanHandle<VkDevice>, VkImportFenceFdInfoKHR*, VkResult> _vkImportFenceFdKHR = null;
	private static delegate* unmanaged<VulkanHandle<VkDevice>, VulkanHandle<VkDisplayKHR>, VkDisplayPowerInfoEXT*, VkResult> _vkDisplayPowerControlEXT = null;
	private static delegate* unmanaged<VulkanHandle<VkDevice>, VkDeviceEventInfoEXT*, VkAllocationCallbacks*, VulkanHandle<VkFence>*, VkResult> _vkRegisterDeviceEventEXT = null;
	private static delegate* unmanaged<VulkanHandle<VkDevice>, VulkanHandle<VkDisplayKHR>, VkDisplayEventInfoEXT*, VkAllocationCallbacks*, VulkanHandle<VkFence>*, VkResult> _vkRegisterDisplayEventEXT = null;
	private static delegate* unmanaged<VulkanHandle<VkDevice>, VulkanHandle<VkSwapchainKHR>, VkSurfaceCounterFlagsEXT, ulong*, VkResult> _vkGetSwapchainCounterEXT = null;
	private static delegate* unmanaged<VulkanHandle<VkDevice>, uint, uint, uint, VkPeerMemoryFeatureFlags*, void> _vkGetDeviceGroupPeerMemoryFeatures = null;
	private static delegate* unmanaged<VulkanHandle<VkDevice>, uint, uint, uint, VkPeerMemoryFeatureFlags*, void> _vkGetDeviceGroupPeerMemoryFeaturesKHR = null;
	private static delegate* unmanaged<VulkanHandle<VkDevice>, uint, VkBindBufferMemoryInfo*, VkResult> _vkBindBufferMemory2 = null;
	private static delegate* unmanaged<VulkanHandle<VkDevice>, uint, VkBindBufferMemoryInfo*, VkResult> _vkBindBufferMemory2KHR = null;
	private static delegate* unmanaged<VulkanHandle<VkDevice>, uint, VkBindImageMemoryInfo*, VkResult> _vkBindImageMemory2 = null;
	private static delegate* unmanaged<VulkanHandle<VkDevice>, uint, VkBindImageMemoryInfo*, VkResult> _vkBindImageMemory2KHR = null;
	private static delegate* unmanaged<VulkanHandle<VkCommandBuffer>, uint, void> _vkCmdSetDeviceMask = null;
	private static delegate* unmanaged<VulkanHandle<VkCommandBuffer>, uint, void> _vkCmdSetDeviceMaskKHR = null;
	private static delegate* unmanaged<VulkanHandle<VkDevice>, VkDeviceGroupPresentCapabilitiesKHR*, VkResult> _vkGetDeviceGroupPresentCapabilitiesKHR = null;
	private static delegate* unmanaged<VulkanHandle<VkDevice>, VulkanHandle<VkSurfaceKHR>, VkDeviceGroupPresentModeFlagsKHR*, VkResult> _vkGetDeviceGroupSurfacePresentModesKHR = null;
	private static delegate* unmanaged<VulkanHandle<VkDevice>, VkAcquireNextImageInfoKHR*, uint*, VkResult> _vkAcquireNextImage2KHR = null;
	private static delegate* unmanaged<VulkanHandle<VkCommandBuffer>, uint, uint, uint, uint, uint, uint, void> _vkCmdDispatchBase = null;
	private static delegate* unmanaged<VulkanHandle<VkCommandBuffer>, uint, uint, uint, uint, uint, uint, void> _vkCmdDispatchBaseKHR = null;
	private static delegate* unmanaged<VulkanHandle<VkDevice>, VkDescriptorUpdateTemplateCreateInfo*, VkAllocationCallbacks*, VulkanHandle<VkDescriptorUpdateTemplate>*, VkResult> _vkCreateDescriptorUpdateTemplate = null;
	private static delegate* unmanaged<VulkanHandle<VkDevice>, VkDescriptorUpdateTemplateCreateInfo*, VkAllocationCallbacks*, VulkanHandle<VkDescriptorUpdateTemplate>*, VkResult> _vkCreateDescriptorUpdateTemplateKHR = null;
	private static delegate* unmanaged<VulkanHandle<VkDevice>, VulkanHandle<VkDescriptorUpdateTemplate>, VkAllocationCallbacks*, void> _vkDestroyDescriptorUpdateTemplate = null;
	private static delegate* unmanaged<VulkanHandle<VkDevice>, VulkanHandle<VkDescriptorUpdateTemplate>, VkAllocationCallbacks*, void> _vkDestroyDescriptorUpdateTemplateKHR = null;
	private static delegate* unmanaged<VulkanHandle<VkDevice>, VulkanHandle<VkDescriptorSet>, VulkanHandle<VkDescriptorUpdateTemplate>, void*, void> _vkUpdateDescriptorSetWithTemplate = null;
	private static delegate* unmanaged<VulkanHandle<VkDevice>, VulkanHandle<VkDescriptorSet>, VulkanHandle<VkDescriptorUpdateTemplate>, void*, void> _vkUpdateDescriptorSetWithTemplateKHR = null;
	private static delegate* unmanaged<VulkanHandle<VkCommandBuffer>, VulkanHandle<VkDescriptorUpdateTemplate>, VulkanHandle<VkPipelineLayout>, uint, void*, void> _vkCmdPushDescriptorSetWithTemplateKHR = null;
	private static delegate* unmanaged<VulkanHandle<VkDevice>, uint, VulkanHandle<VkSwapchainKHR>*, VkHdrMetadataEXT*, void> _vkSetHdrMetadataEXT = null;
	private static delegate* unmanaged<VulkanHandle<VkDevice>, VulkanHandle<VkSwapchainKHR>, VkResult> _vkGetSwapchainStatusKHR = null;
	private static delegate* unmanaged<VulkanHandle<VkDevice>, VulkanHandle<VkSwapchainKHR>, VkRefreshCycleDurationGOOGLE*, VkResult> _vkGetRefreshCycleDurationGOOGLE = null;
	private static delegate* unmanaged<VulkanHandle<VkDevice>, VulkanHandle<VkSwapchainKHR>, uint*, VkPastPresentationTimingGOOGLE*, VkResult> _vkGetPastPresentationTimingGOOGLE = null;
	private static delegate* unmanaged<VulkanHandle<VkCommandBuffer>, uint, uint, VkViewportWScalingNV*, void> _vkCmdSetViewportWScalingNV = null;
	private static delegate* unmanaged<VulkanHandle<VkCommandBuffer>, uint, uint, VkRect2D*, void> _vkCmdSetDiscardRectangleEXT = null;
	private static delegate* unmanaged<VulkanHandle<VkCommandBuffer>, VkSampleLocationsInfoEXT*, void> _vkCmdSetSampleLocationsEXT = null;
	private static delegate* unmanaged<VulkanHandle<VkDevice>, VkBufferMemoryRequirementsInfo2*, VkMemoryRequirements2*, void> _vkGetBufferMemoryRequirements2 = null;
	private static delegate* unmanaged<VulkanHandle<VkDevice>, VkBufferMemoryRequirementsInfo2*, VkMemoryRequirements2*, void> _vkGetBufferMemoryRequirements2KHR = null;
	private static delegate* unmanaged<VulkanHandle<VkDevice>, VkImageMemoryRequirementsInfo2*, VkMemoryRequirements2*, void> _vkGetImageMemoryRequirements2 = null;
	private static delegate* unmanaged<VulkanHandle<VkDevice>, VkImageMemoryRequirementsInfo2*, VkMemoryRequirements2*, void> _vkGetImageMemoryRequirements2KHR = null;
	private static delegate* unmanaged<VulkanHandle<VkDevice>, VkImageSparseMemoryRequirementsInfo2*, uint*, VkSparseImageMemoryRequirements2*, void> _vkGetImageSparseMemoryRequirements2 = null;
	private static delegate* unmanaged<VulkanHandle<VkDevice>, VkImageSparseMemoryRequirementsInfo2*, uint*, VkSparseImageMemoryRequirements2*, void> _vkGetImageSparseMemoryRequirements2KHR = null;
	private static delegate* unmanaged<VulkanHandle<VkDevice>, VkSamplerYcbcrConversionCreateInfo*, VkAllocationCallbacks*, VulkanHandle<VkSamplerYcbcrConversion>*, VkResult> _vkCreateSamplerYcbcrConversion = null;
	private static delegate* unmanaged<VulkanHandle<VkDevice>, VkSamplerYcbcrConversionCreateInfo*, VkAllocationCallbacks*, VulkanHandle<VkSamplerYcbcrConversion>*, VkResult> _vkCreateSamplerYcbcrConversionKHR = null;
	private static delegate* unmanaged<VulkanHandle<VkDevice>, VulkanHandle<VkSamplerYcbcrConversion>, VkAllocationCallbacks*, void> _vkDestroySamplerYcbcrConversion = null;
	private static delegate* unmanaged<VulkanHandle<VkDevice>, VulkanHandle<VkSamplerYcbcrConversion>, VkAllocationCallbacks*, void> _vkDestroySamplerYcbcrConversionKHR = null;
	private static delegate* unmanaged<VulkanHandle<VkDevice>, VkDeviceQueueInfo2*, VulkanHandle<VkQueue>*, void> _vkGetDeviceQueue2 = null;
	private static delegate* unmanaged<VulkanHandle<VkDevice>, VkValidationCacheCreateInfoEXT*, VkAllocationCallbacks*, VulkanHandle<VkValidationCacheEXT>*, VkResult> _vkCreateValidationCacheEXT = null;
	private static delegate* unmanaged<VulkanHandle<VkDevice>, VulkanHandle<VkValidationCacheEXT>, VkAllocationCallbacks*, void> _vkDestroyValidationCacheEXT = null;
	private static delegate* unmanaged<VulkanHandle<VkDevice>, VulkanHandle<VkValidationCacheEXT>, ulong*, void*, VkResult> _vkGetValidationCacheDataEXT = null;
	private static delegate* unmanaged<VulkanHandle<VkDevice>, VulkanHandle<VkValidationCacheEXT>, uint, VulkanHandle<VkValidationCacheEXT>*, VkResult> _vkMergeValidationCachesEXT = null;
	private static delegate* unmanaged<VulkanHandle<VkDevice>, VkDescriptorSetLayoutCreateInfo*, VkDescriptorSetLayoutSupport*, void> _vkGetDescriptorSetLayoutSupport = null;
	private static delegate* unmanaged<VulkanHandle<VkDevice>, VkDescriptorSetLayoutCreateInfo*, VkDescriptorSetLayoutSupport*, void> _vkGetDescriptorSetLayoutSupportKHR = null;
	private static delegate* unmanaged<VulkanHandle<VkDevice>, VkFormat, VkImageUsageFlags, int*, VkResult> _vkGetSwapchainGrallocUsageANDROID = null;
	private static delegate* unmanaged<VulkanHandle<VkDevice>, VkFormat, VkImageUsageFlags, VkSwapchainImageUsageFlagsANDROID, ulong*, ulong*, VkResult> _vkGetSwapchainGrallocUsage2ANDROID = null;
	private static delegate* unmanaged<VulkanHandle<VkDevice>, VulkanHandle<VkImage>, int, VulkanHandle<VkSemaphore>, VulkanHandle<VkFence>, VkResult> _vkAcquireImageANDROID = null;
	private static delegate* unmanaged<VulkanHandle<VkQueue>, uint, VulkanHandle<VkSemaphore>*, VulkanHandle<VkImage>, int*, VkResult> _vkQueueSignalReleaseImageANDROID = null;
	private static delegate* unmanaged<VulkanHandle<VkDevice>, VulkanHandle<VkPipeline>, VkShaderStageFlags, VkShaderInfoTypeAMD, ulong*, void*, VkResult> _vkGetShaderInfoAMD = null;
	private static delegate* unmanaged<VulkanHandle<VkDevice>, VulkanHandle<VkSwapchainKHR>, VkBool32, void> _vkSetLocalDimmingAMD = null;
	private static delegate* unmanaged<VulkanHandle<VkDevice>, uint, VkCalibratedTimestampInfoEXT*, ulong*, ulong*, VkResult> _vkGetCalibratedTimestampsEXT = null;
	private static delegate* unmanaged<VulkanHandle<VkDevice>, VkDebugUtilsObjectNameInfoEXT*, VkResult> _vkSetDebugUtilsObjectNameEXT = null;
	private static delegate* unmanaged<VulkanHandle<VkDevice>, VkDebugUtilsObjectTagInfoEXT*, VkResult> _vkSetDebugUtilsObjectTagEXT = null;
	private static delegate* unmanaged<VulkanHandle<VkQueue>, VkDebugUtilsLabelEXT*, void> _vkQueueBeginDebugUtilsLabelEXT = null;
	private static delegate* unmanaged<VulkanHandle<VkQueue>, void> _vkQueueEndDebugUtilsLabelEXT = null;
	private static delegate* unmanaged<VulkanHandle<VkQueue>, VkDebugUtilsLabelEXT*, void> _vkQueueInsertDebugUtilsLabelEXT = null;
	private static delegate* unmanaged<VulkanHandle<VkCommandBuffer>, VkDebugUtilsLabelEXT*, void> _vkCmdBeginDebugUtilsLabelEXT = null;
	private static delegate* unmanaged<VulkanHandle<VkCommandBuffer>, void> _vkCmdEndDebugUtilsLabelEXT = null;
	private static delegate* unmanaged<VulkanHandle<VkCommandBuffer>, VkDebugUtilsLabelEXT*, void> _vkCmdInsertDebugUtilsLabelEXT = null;
	private static delegate* unmanaged<VulkanHandle<VkDevice>, VkExternalMemoryHandleTypeFlags, void*, VkMemoryHostPointerPropertiesEXT*, VkResult> _vkGetMemoryHostPointerPropertiesEXT = null;
	private static delegate* unmanaged<VulkanHandle<VkCommandBuffer>, VkPipelineStageFlags, VulkanHandle<VkBuffer>, ulong, uint, void> _vkCmdWriteBufferMarkerAMD = null;
	private static delegate* unmanaged<VulkanHandle<VkDevice>, VkRenderPassCreateInfo2*, VkAllocationCallbacks*, VulkanHandle<VkRenderPass>*, VkResult> _vkCreateRenderPass2 = null;
	private static delegate* unmanaged<VulkanHandle<VkDevice>, VkRenderPassCreateInfo2*, VkAllocationCallbacks*, VulkanHandle<VkRenderPass>*, VkResult> _vkCreateRenderPass2KHR = null;
	private static delegate* unmanaged<VulkanHandle<VkCommandBuffer>, VkRenderPassBeginInfo*, VkSubpassBeginInfo*, void> _vkCmdBeginRenderPass2 = null;
	private static delegate* unmanaged<VulkanHandle<VkCommandBuffer>, VkRenderPassBeginInfo*, VkSubpassBeginInfo*, void> _vkCmdBeginRenderPass2KHR = null;
	private static delegate* unmanaged<VulkanHandle<VkCommandBuffer>, VkSubpassBeginInfo*, VkSubpassEndInfo*, void> _vkCmdNextSubpass2 = null;
	private static delegate* unmanaged<VulkanHandle<VkCommandBuffer>, VkSubpassBeginInfo*, VkSubpassEndInfo*, void> _vkCmdNextSubpass2KHR = null;
	private static delegate* unmanaged<VulkanHandle<VkCommandBuffer>, VkSubpassEndInfo*, void> _vkCmdEndRenderPass2 = null;
	private static delegate* unmanaged<VulkanHandle<VkCommandBuffer>, VkSubpassEndInfo*, void> _vkCmdEndRenderPass2KHR = null;
	private static delegate* unmanaged<VulkanHandle<VkDevice>, VulkanHandle<VkSemaphore>, ulong*, VkResult> _vkGetSemaphoreCounterValue = null;
	private static delegate* unmanaged<VulkanHandle<VkDevice>, VulkanHandle<VkSemaphore>, ulong*, VkResult> _vkGetSemaphoreCounterValueKHR = null;
	private static delegate* unmanaged<VulkanHandle<VkDevice>, VkSemaphoreWaitInfo*, ulong, VkResult> _vkWaitSemaphores = null;
	private static delegate* unmanaged<VulkanHandle<VkDevice>, VkSemaphoreWaitInfo*, ulong, VkResult> _vkWaitSemaphoresKHR = null;
	private static delegate* unmanaged<VulkanHandle<VkDevice>, VkSemaphoreSignalInfo*, VkResult> _vkSignalSemaphore = null;
	private static delegate* unmanaged<VulkanHandle<VkDevice>, VkSemaphoreSignalInfo*, VkResult> _vkSignalSemaphoreKHR = null;
	private static delegate* unmanaged<VulkanHandle<VkDevice>, void*, VkAndroidHardwareBufferPropertiesANDROID*, VkResult> _vkGetAndroidHardwareBufferPropertiesANDROID = null;
	private static delegate* unmanaged<VulkanHandle<VkDevice>, VkMemoryGetAndroidHardwareBufferInfoANDROID*, void**, VkResult> _vkGetMemoryAndroidHardwareBufferANDROID = null;
	private static delegate* unmanaged<VulkanHandle<VkCommandBuffer>, VulkanHandle<VkBuffer>, ulong, VulkanHandle<VkBuffer>, ulong, uint, uint, void> _vkCmdDrawIndirectCount = null;
	private static delegate* unmanaged<VulkanHandle<VkCommandBuffer>, VulkanHandle<VkBuffer>, ulong, VulkanHandle<VkBuffer>, ulong, uint, uint, void> _vkCmdDrawIndirectCountKHR = null;
	private static delegate* unmanaged<VulkanHandle<VkCommandBuffer>, VulkanHandle<VkBuffer>, ulong, VulkanHandle<VkBuffer>, ulong, uint, uint, void> _vkCmdDrawIndirectCountAMD = null;
	private static delegate* unmanaged<VulkanHandle<VkCommandBuffer>, VulkanHandle<VkBuffer>, ulong, VulkanHandle<VkBuffer>, ulong, uint, uint, void> _vkCmdDrawIndexedIndirectCount = null;
	private static delegate* unmanaged<VulkanHandle<VkCommandBuffer>, VulkanHandle<VkBuffer>, ulong, VulkanHandle<VkBuffer>, ulong, uint, uint, void> _vkCmdDrawIndexedIndirectCountKHR = null;
	private static delegate* unmanaged<VulkanHandle<VkCommandBuffer>, VulkanHandle<VkBuffer>, ulong, VulkanHandle<VkBuffer>, ulong, uint, uint, void> _vkCmdDrawIndexedIndirectCountAMD = null;
	private static delegate* unmanaged<VulkanHandle<VkCommandBuffer>, void*, void> _vkCmdSetCheckpointNV = null;
	private static delegate* unmanaged<VulkanHandle<VkQueue>, uint*, VkCheckpointDataNV*, void> _vkGetQueueCheckpointDataNV = null;
	private static delegate* unmanaged<VulkanHandle<VkCommandBuffer>, uint, uint, VulkanHandle<VkBuffer>*, ulong*, ulong*, void> _vkCmdBindTransformFeedbackBuffersEXT = null;
	private static delegate* unmanaged<VulkanHandle<VkCommandBuffer>, uint, uint, VulkanHandle<VkBuffer>*, ulong*, void> _vkCmdBeginTransformFeedbackEXT = null;
	private static delegate* unmanaged<VulkanHandle<VkCommandBuffer>, uint, uint, VulkanHandle<VkBuffer>*, ulong*, void> _vkCmdEndTransformFeedbackEXT = null;
	private static delegate* unmanaged<VulkanHandle<VkCommandBuffer>, VulkanHandle<VkQueryPool>, uint, VkQueryControlFlags, uint, void> _vkCmdBeginQueryIndexedEXT = null;
	private static delegate* unmanaged<VulkanHandle<VkCommandBuffer>, VulkanHandle<VkQueryPool>, uint, uint, void> _vkCmdEndQueryIndexedEXT = null;
	private static delegate* unmanaged<VulkanHandle<VkCommandBuffer>, uint, uint, VulkanHandle<VkBuffer>, ulong, uint, uint, void> _vkCmdDrawIndirectByteCountEXT = null;
	private static delegate* unmanaged<VulkanHandle<VkCommandBuffer>, uint, uint, VkRect2D*, void> _vkCmdSetExclusiveScissorNV = null;
	private static delegate* unmanaged<VulkanHandle<VkCommandBuffer>, VulkanHandle<VkImageView>, VkImageLayout, void> _vkCmdBindShadingRateImageNV = null;
	private static delegate* unmanaged<VulkanHandle<VkCommandBuffer>, uint, uint, VkShadingRatePaletteNV*, void> _vkCmdSetViewportShadingRatePaletteNV = null;
	private static delegate* unmanaged<VulkanHandle<VkCommandBuffer>, VkCoarseSampleOrderTypeNV, uint, VkCoarseSampleOrderCustomNV*, void> _vkCmdSetCoarseSampleOrderNV = null;
	private static delegate* unmanaged<VulkanHandle<VkCommandBuffer>, uint, uint, void> _vkCmdDrawMeshTasksNV = null;
	private static delegate* unmanaged<VulkanHandle<VkCommandBuffer>, VulkanHandle<VkBuffer>, ulong, uint, uint, void> _vkCmdDrawMeshTasksIndirectNV = null;
	private static delegate* unmanaged<VulkanHandle<VkCommandBuffer>, VulkanHandle<VkBuffer>, ulong, VulkanHandle<VkBuffer>, ulong, uint, uint, void> _vkCmdDrawMeshTasksIndirectCountNV = null;
	private static delegate* unmanaged<VulkanHandle<VkDevice>, VulkanHandle<VkPipeline>, uint, VkResult> _vkCompileDeferredNV = null;
	private static delegate* unmanaged<VulkanHandle<VkDevice>, VkAccelerationStructureCreateInfoNV*, VkAllocationCallbacks*, VulkanHandle<VkAccelerationStructureNV>*, VkResult> _vkCreateAccelerationStructureNV = null;
	private static delegate* unmanaged<VulkanHandle<VkDevice>, VulkanHandle<VkAccelerationStructureKHR>, VkAllocationCallbacks*, void> _vkDestroyAccelerationStructureKHR = null;
	private static delegate* unmanaged<VulkanHandle<VkDevice>, VulkanHandle<VkAccelerationStructureNV>, VkAllocationCallbacks*, void> _vkDestroyAccelerationStructureNV = null;
	private static delegate* unmanaged<VulkanHandle<VkDevice>, VkAccelerationStructureMemoryRequirementsInfoNV*, VkMemoryRequirements2KHR*, void> _vkGetAccelerationStructureMemoryRequirementsNV = null;
	private static delegate* unmanaged<VulkanHandle<VkDevice>, uint, VkBindAccelerationStructureMemoryInfoNV*, VkResult> _vkBindAccelerationStructureMemoryNV = null;
	private static delegate* unmanaged<VulkanHandle<VkCommandBuffer>, VulkanHandle<VkAccelerationStructureNV>, VulkanHandle<VkAccelerationStructureNV>, VkCopyAccelerationStructureModeKHR, void> _vkCmdCopyAccelerationStructureNV = null;
	private static delegate* unmanaged<VulkanHandle<VkCommandBuffer>, VkCopyAccelerationStructureInfoKHR*, void> _vkCmdCopyAccelerationStructureKHR = null;
	private static delegate* unmanaged<VulkanHandle<VkDevice>, VulkanHandle<VkDeferredOperationKHR>, VkCopyAccelerationStructureInfoKHR*, VkResult> _vkCopyAccelerationStructureKHR = null;
	private static delegate* unmanaged<VulkanHandle<VkCommandBuffer>, VkCopyAccelerationStructureToMemoryInfoKHR*, void> _vkCmdCopyAccelerationStructureToMemoryKHR = null;
	private static delegate* unmanaged<VulkanHandle<VkDevice>, VulkanHandle<VkDeferredOperationKHR>, VkCopyAccelerationStructureToMemoryInfoKHR*, VkResult> _vkCopyAccelerationStructureToMemoryKHR = null;
	private static delegate* unmanaged<VulkanHandle<VkCommandBuffer>, VkCopyMemoryToAccelerationStructureInfoKHR*, void> _vkCmdCopyMemoryToAccelerationStructureKHR = null;
	private static delegate* unmanaged<VulkanHandle<VkDevice>, VulkanHandle<VkDeferredOperationKHR>, VkCopyMemoryToAccelerationStructureInfoKHR*, VkResult> _vkCopyMemoryToAccelerationStructureKHR = null;
	private static delegate* unmanaged<VulkanHandle<VkCommandBuffer>, uint, VulkanHandle<VkAccelerationStructureKHR>*, VkQueryType, VulkanHandle<VkQueryPool>, uint, void> _vkCmdWriteAccelerationStructuresPropertiesKHR = null;
	private static delegate* unmanaged<VulkanHandle<VkCommandBuffer>, uint, VulkanHandle<VkAccelerationStructureNV>*, VkQueryType, VulkanHandle<VkQueryPool>, uint, void> _vkCmdWriteAccelerationStructuresPropertiesNV = null;
	private static delegate* unmanaged<VulkanHandle<VkCommandBuffer>, VkAccelerationStructureInfoNV*, VulkanHandle<VkBuffer>, ulong, VkBool32, VulkanHandle<VkAccelerationStructureNV>, VulkanHandle<VkAccelerationStructureNV>, VulkanHandle<VkBuffer>, ulong, void> _vkCmdBuildAccelerationStructureNV = null;
	private static delegate* unmanaged<VulkanHandle<VkDevice>, uint, VulkanHandle<VkAccelerationStructureKHR>*, VkQueryType, ulong, void*, ulong, VkResult> _vkWriteAccelerationStructuresPropertiesKHR = null;
	private static delegate* unmanaged<VulkanHandle<VkCommandBuffer>, VkStridedDeviceAddressRegionKHR*, VkStridedDeviceAddressRegionKHR*, VkStridedDeviceAddressRegionKHR*, VkStridedDeviceAddressRegionKHR*, uint, uint, uint, void> _vkCmdTraceRaysKHR = null;
	private static delegate* unmanaged<VulkanHandle<VkCommandBuffer>, VulkanHandle<VkBuffer>, ulong, VulkanHandle<VkBuffer>, ulong, ulong, VulkanHandle<VkBuffer>, ulong, ulong, VulkanHandle<VkBuffer>, ulong, ulong, uint, uint, uint, void> _vkCmdTraceRaysNV = null;
	private static delegate* unmanaged<VulkanHandle<VkDevice>, VulkanHandle<VkPipeline>, uint, uint, ulong, void*, VkResult> _vkGetRayTracingShaderGroupHandlesKHR = null;
	private static delegate* unmanaged<VulkanHandle<VkDevice>, VulkanHandle<VkPipeline>, uint, uint, ulong, void*, VkResult> _vkGetRayTracingShaderGroupHandlesNV = null;
	private static delegate* unmanaged<VulkanHandle<VkDevice>, VulkanHandle<VkPipeline>, uint, uint, ulong, void*, VkResult> _vkGetRayTracingCaptureReplayShaderGroupHandlesKHR = null;
	private static delegate* unmanaged<VulkanHandle<VkDevice>, VulkanHandle<VkAccelerationStructureNV>, ulong, void*, VkResult> _vkGetAccelerationStructureHandleNV = null;
	private static delegate* unmanaged<VulkanHandle<VkDevice>, VulkanHandle<VkPipelineCache>, uint, VkRayTracingPipelineCreateInfoNV*, VkAllocationCallbacks*, VulkanHandle<VkPipeline>*, VkResult> _vkCreateRayTracingPipelinesNV = null;
	private static delegate* unmanaged<VulkanHandle<VkDevice>, VulkanHandle<VkDeferredOperationKHR>, VulkanHandle<VkPipelineCache>, uint, VkRayTracingPipelineCreateInfoKHR*, VkAllocationCallbacks*, VulkanHandle<VkPipeline>*, VkResult> _vkCreateRayTracingPipelinesKHR = null;
	private static delegate* unmanaged<VulkanHandle<VkCommandBuffer>, VkStridedDeviceAddressRegionKHR*, VkStridedDeviceAddressRegionKHR*, VkStridedDeviceAddressRegionKHR*, VkStridedDeviceAddressRegionKHR*, ulong, void> _vkCmdTraceRaysIndirectKHR = null;
	private static delegate* unmanaged<VulkanHandle<VkDevice>, VkAccelerationStructureVersionInfoKHR*, VkAccelerationStructureCompatibilityKHR*, void> _vkGetDeviceAccelerationStructureCompatibilityKHR = null;
	private static delegate* unmanaged<VulkanHandle<VkDevice>, VulkanHandle<VkPipeline>, uint, VkShaderGroupShaderKHR, ulong> _vkGetRayTracingShaderGroupStackSizeKHR = null;
	private static delegate* unmanaged<VulkanHandle<VkCommandBuffer>, uint, void> _vkCmdSetRayTracingPipelineStackSizeKHR = null;
	private static delegate* unmanaged<VulkanHandle<VkDevice>, VkImageViewHandleInfoNVX*, uint> _vkGetImageViewHandleNVX = null;
	private static delegate* unmanaged<VulkanHandle<VkDevice>, VulkanHandle<VkImageView>, VkImageViewAddressPropertiesNVX*, VkResult> _vkGetImageViewAddressNVX = null;
	private static delegate* unmanaged<VulkanHandle<VkDevice>, VkPhysicalDeviceSurfaceInfo2KHR*, VkDeviceGroupPresentModeFlagsKHR*, VkResult> _vkGetDeviceGroupSurfacePresentModes2EXT = null;
	private static delegate* unmanaged<VulkanHandle<VkDevice>, VulkanHandle<VkSwapchainKHR>, VkResult> _vkAcquireFullScreenExclusiveModeEXT = null;
	private static delegate* unmanaged<VulkanHandle<VkDevice>, VulkanHandle<VkSwapchainKHR>, VkResult> _vkReleaseFullScreenExclusiveModeEXT = null;
	private static delegate* unmanaged<VulkanHandle<VkDevice>, VkAcquireProfilingLockInfoKHR*, VkResult> _vkAcquireProfilingLockKHR = null;
	private static delegate* unmanaged<VulkanHandle<VkDevice>, void> _vkReleaseProfilingLockKHR = null;
	private static delegate* unmanaged<VulkanHandle<VkDevice>, VulkanHandle<VkImage>, VkImageDrmFormatModifierPropertiesEXT*, VkResult> _vkGetImageDrmFormatModifierPropertiesEXT = null;
	private static delegate* unmanaged<VulkanHandle<VkDevice>, VkBufferDeviceAddressInfo*, ulong> _vkGetBufferOpaqueCaptureAddress = null;
	private static delegate* unmanaged<VulkanHandle<VkDevice>, VkBufferDeviceAddressInfo*, ulong> _vkGetBufferOpaqueCaptureAddressKHR = null;
	private static delegate* unmanaged<VulkanHandle<VkDevice>, VkBufferDeviceAddressInfo*, ulong> _vkGetBufferDeviceAddress = null;
	private static delegate* unmanaged<VulkanHandle<VkDevice>, VkBufferDeviceAddressInfo*, ulong> _vkGetBufferDeviceAddressKHR = null;
	private static delegate* unmanaged<VulkanHandle<VkDevice>, VkBufferDeviceAddressInfo*, ulong> _vkGetBufferDeviceAddressEXT = null;
	private static delegate* unmanaged<VulkanHandle<VkDevice>, VkInitializePerformanceApiInfoINTEL*, VkResult> _vkInitializePerformanceApiINTEL = null;
	private static delegate* unmanaged<VulkanHandle<VkDevice>, void> _vkUninitializePerformanceApiINTEL = null;
	private static delegate* unmanaged<VulkanHandle<VkCommandBuffer>, VkPerformanceMarkerInfoINTEL*, VkResult> _vkCmdSetPerformanceMarkerINTEL = null;
	private static delegate* unmanaged<VulkanHandle<VkCommandBuffer>, VkPerformanceStreamMarkerInfoINTEL*, VkResult> _vkCmdSetPerformanceStreamMarkerINTEL = null;
	private static delegate* unmanaged<VulkanHandle<VkCommandBuffer>, VkPerformanceOverrideInfoINTEL*, VkResult> _vkCmdSetPerformanceOverrideINTEL = null;
	private static delegate* unmanaged<VulkanHandle<VkDevice>, VkPerformanceConfigurationAcquireInfoINTEL*, VulkanHandle<VkPerformanceConfigurationINTEL>*, VkResult> _vkAcquirePerformanceConfigurationINTEL = null;
	private static delegate* unmanaged<VulkanHandle<VkDevice>, VulkanHandle<VkPerformanceConfigurationINTEL>, VkResult> _vkReleasePerformanceConfigurationINTEL = null;
	private static delegate* unmanaged<VulkanHandle<VkQueue>, VulkanHandle<VkPerformanceConfigurationINTEL>, VkResult> _vkQueueSetPerformanceConfigurationINTEL = null;
	private static delegate* unmanaged<VulkanHandle<VkDevice>, VkPerformanceParameterTypeINTEL, VkPerformanceValueINTEL*, VkResult> _vkGetPerformanceParameterINTEL = null;
	private static delegate* unmanaged<VulkanHandle<VkDevice>, VkDeviceMemoryOpaqueCaptureAddressInfo*, ulong> _vkGetDeviceMemoryOpaqueCaptureAddress = null;
	private static delegate* unmanaged<VulkanHandle<VkDevice>, VkDeviceMemoryOpaqueCaptureAddressInfo*, ulong> _vkGetDeviceMemoryOpaqueCaptureAddressKHR = null;
	private static delegate* unmanaged<VulkanHandle<VkDevice>, VkPipelineInfoKHR*, uint*, VkPipelineExecutablePropertiesKHR*, VkResult> _vkGetPipelineExecutablePropertiesKHR = null;
	private static delegate* unmanaged<VulkanHandle<VkDevice>, VkPipelineExecutableInfoKHR*, uint*, VkPipelineExecutableStatisticKHR*, VkResult> _vkGetPipelineExecutableStatisticsKHR = null;
	private static delegate* unmanaged<VulkanHandle<VkDevice>, VkPipelineExecutableInfoKHR*, uint*, VkPipelineExecutableInternalRepresentationKHR*, VkResult> _vkGetPipelineExecutableInternalRepresentationsKHR = null;
	private static delegate* unmanaged<VulkanHandle<VkCommandBuffer>, uint, ushort, void> _vkCmdSetLineStippleEXT = null;
	private static delegate* unmanaged<VulkanHandle<VkDevice>, VkAccelerationStructureCreateInfoKHR*, VkAllocationCallbacks*, VulkanHandle<VkAccelerationStructureKHR>*, VkResult> _vkCreateAccelerationStructureKHR = null;
	private static delegate* unmanaged<VulkanHandle<VkCommandBuffer>, uint, VkAccelerationStructureBuildGeometryInfoKHR*, VkAccelerationStructureBuildRangeInfoKHR**, void> _vkCmdBuildAccelerationStructuresKHR = null;
	private static delegate* unmanaged<VulkanHandle<VkCommandBuffer>, uint, VkAccelerationStructureBuildGeometryInfoKHR*, ulong*, uint*, uint**, void> _vkCmdBuildAccelerationStructuresIndirectKHR = null;
	private static delegate* unmanaged<VulkanHandle<VkDevice>, VulkanHandle<VkDeferredOperationKHR>, uint, VkAccelerationStructureBuildGeometryInfoKHR*, VkAccelerationStructureBuildRangeInfoKHR**, VkResult> _vkBuildAccelerationStructuresKHR = null;
	private static delegate* unmanaged<VulkanHandle<VkDevice>, VkAccelerationStructureDeviceAddressInfoKHR*, ulong> _vkGetAccelerationStructureDeviceAddressKHR = null;
	private static delegate* unmanaged<VulkanHandle<VkDevice>, VkAllocationCallbacks*, VulkanHandle<VkDeferredOperationKHR>*, VkResult> _vkCreateDeferredOperationKHR = null;
	private static delegate* unmanaged<VulkanHandle<VkDevice>, VulkanHandle<VkDeferredOperationKHR>, VkAllocationCallbacks*, void> _vkDestroyDeferredOperationKHR = null;
	private static delegate* unmanaged<VulkanHandle<VkDevice>, VulkanHandle<VkDeferredOperationKHR>, uint> _vkGetDeferredOperationMaxConcurrencyKHR = null;
	private static delegate* unmanaged<VulkanHandle<VkDevice>, VulkanHandle<VkDeferredOperationKHR>, VkResult> _vkGetDeferredOperationResultKHR = null;
	private static delegate* unmanaged<VulkanHandle<VkDevice>, VulkanHandle<VkDeferredOperationKHR>, VkResult> _vkDeferredOperationJoinKHR = null;
	private static delegate* unmanaged<VulkanHandle<VkCommandBuffer>, VkCullModeFlags, void> _vkCmdSetCullModeEXT = null;
	private static delegate* unmanaged<VulkanHandle<VkCommandBuffer>, VkFrontFace, void> _vkCmdSetFrontFaceEXT = null;
	private static delegate* unmanaged<VulkanHandle<VkCommandBuffer>, VkPrimitiveTopology, void> _vkCmdSetPrimitiveTopologyEXT = null;
	private static delegate* unmanaged<VulkanHandle<VkCommandBuffer>, uint, VkViewport*, void> _vkCmdSetViewportWithCountEXT = null;
	private static delegate* unmanaged<VulkanHandle<VkCommandBuffer>, uint, VkRect2D*, void> _vkCmdSetScissorWithCountEXT = null;
	private static delegate* unmanaged<VulkanHandle<VkCommandBuffer>, uint, uint, VulkanHandle<VkBuffer>*, ulong*, ulong*, ulong*, void> _vkCmdBindVertexBuffers2EXT = null;
	private static delegate* unmanaged<VulkanHandle<VkCommandBuffer>, VkBool32, void> _vkCmdSetDepthTestEnableEXT = null;
	private static delegate* unmanaged<VulkanHandle<VkCommandBuffer>, VkBool32, void> _vkCmdSetDepthWriteEnableEXT = null;
	private static delegate* unmanaged<VulkanHandle<VkCommandBuffer>, VkCompareOp, void> _vkCmdSetDepthCompareOpEXT = null;
	private static delegate* unmanaged<VulkanHandle<VkCommandBuffer>, VkBool32, void> _vkCmdSetDepthBoundsTestEnableEXT = null;
	private static delegate* unmanaged<VulkanHandle<VkCommandBuffer>, VkBool32, void> _vkCmdSetStencilTestEnableEXT = null;
	private static delegate* unmanaged<VulkanHandle<VkCommandBuffer>, VkStencilFaceFlags, VkStencilOp, VkStencilOp, VkStencilOp, VkCompareOp, void> _vkCmdSetStencilOpEXT = null;
	private static delegate* unmanaged<VulkanHandle<VkDevice>, VkPrivateDataSlotCreateInfoEXT*, VkAllocationCallbacks*, VulkanHandle<VkPrivateDataSlotEXT>*, VkResult> _vkCreatePrivateDataSlotEXT = null;
	private static delegate* unmanaged<VulkanHandle<VkDevice>, VulkanHandle<VkPrivateDataSlotEXT>, VkAllocationCallbacks*, void> _vkDestroyPrivateDataSlotEXT = null;
	private static delegate* unmanaged<VulkanHandle<VkDevice>, VkObjectType, ulong, VulkanHandle<VkPrivateDataSlotEXT>, ulong, VkResult> _vkSetPrivateDataEXT = null;
	private static delegate* unmanaged<VulkanHandle<VkDevice>, VkObjectType, ulong, VulkanHandle<VkPrivateDataSlotEXT>, ulong*, void> _vkGetPrivateDataEXT = null;
	private static delegate* unmanaged<VulkanHandle<VkCommandBuffer>, VkCopyBufferInfo2KHR*, void> _vkCmdCopyBuffer2KHR = null;
	private static delegate* unmanaged<VulkanHandle<VkCommandBuffer>, VkCopyImageInfo2KHR*, void> _vkCmdCopyImage2KHR = null;
	private static delegate* unmanaged<VulkanHandle<VkCommandBuffer>, VkBlitImageInfo2KHR*, void> _vkCmdBlitImage2KHR = null;
	private static delegate* unmanaged<VulkanHandle<VkCommandBuffer>, VkCopyBufferToImageInfo2KHR*, void> _vkCmdCopyBufferToImage2KHR = null;
	private static delegate* unmanaged<VulkanHandle<VkCommandBuffer>, VkCopyImageToBufferInfo2KHR*, void> _vkCmdCopyImageToBuffer2KHR = null;
	private static delegate* unmanaged<VulkanHandle<VkCommandBuffer>, VkResolveImageInfo2KHR*, void> _vkCmdResolveImage2KHR = null;
	private static delegate* unmanaged<VulkanHandle<VkCommandBuffer>, VkExtent2D*, VkFragmentShadingRateCombinerOpKHR*, void> _vkCmdSetFragmentShadingRateKHR = null;
	private static delegate* unmanaged<VulkanHandle<VkCommandBuffer>, VkFragmentShadingRateNV, VkFragmentShadingRateCombinerOpKHR*, void> _vkCmdSetFragmentShadingRateEnumNV = null;
	private static delegate* unmanaged<VulkanHandle<VkDevice>, VkAccelerationStructureBuildTypeKHR, VkAccelerationStructureBuildGeometryInfoKHR*, uint*, VkAccelerationStructureBuildSizesInfoKHR*, void> _vkGetAccelerationStructureBuildSizesKHR = null;

	/// <summary>Initializes the instance-level functions in the table.</summary>
	static void InitFunctionTable(VulkanHandle<VkInstance> inst, VkVersion version)
	{
		if (!inst) throw new ArgumentException("Cannot initialize function table with null instance");
		void* addr = null;
		InstanceVersion = version;

		_vkDestroyInstance = (delegate* unmanaged<VulkanHandle<VkInstance>, VkAllocationCallbacks*, void>)LoadFunc(inst, "vkDestroyInstance");
		_vkEnumeratePhysicalDevices = (delegate* unmanaged<VulkanHandle<VkInstance>, uint*, VulkanHandle<VkPhysicalDevice>*, VkResult>)LoadFunc(inst, "vkEnumeratePhysicalDevices");
		_vkGetPhysicalDeviceProperties = (delegate* unmanaged<VulkanHandle<VkPhysicalDevice>, VkPhysicalDeviceProperties*, void>)LoadFunc(inst, "vkGetPhysicalDeviceProperties");
		_vkGetPhysicalDeviceQueueFamilyProperties = (delegate* unmanaged<VulkanHandle<VkPhysicalDevice>, uint*, VkQueueFamilyProperties*, void>)LoadFunc(inst, "vkGetPhysicalDeviceQueueFamilyProperties");
		_vkGetPhysicalDeviceMemoryProperties = (delegate* unmanaged<VulkanHandle<VkPhysicalDevice>, VkPhysicalDeviceMemoryProperties*, void>)LoadFunc(inst, "vkGetPhysicalDeviceMemoryProperties");
		_vkGetPhysicalDeviceFeatures = (delegate* unmanaged<VulkanHandle<VkPhysicalDevice>, VkPhysicalDeviceFeatures*, void>)LoadFunc(inst, "vkGetPhysicalDeviceFeatures");
		_vkGetPhysicalDeviceFormatProperties = (delegate* unmanaged<VulkanHandle<VkPhysicalDevice>, VkFormat, VkFormatProperties*, void>)LoadFunc(inst, "vkGetPhysicalDeviceFormatProperties");
		_vkGetPhysicalDeviceImageFormatProperties = (delegate* unmanaged<VulkanHandle<VkPhysicalDevice>, VkFormat, VkImageType, VkImageTiling, VkImageUsageFlags, VkImageCreateFlags, VkImageFormatProperties*, VkResult>)LoadFunc(inst, "vkGetPhysicalDeviceImageFormatProperties");
		_vkCreateDevice = (delegate* unmanaged<VulkanHandle<VkPhysicalDevice>, VkDeviceCreateInfo*, VkAllocationCallbacks*, VulkanHandle<VkDevice>*, VkResult>)LoadFunc(inst, "vkCreateDevice");
		_vkEnumerateDeviceLayerProperties = (delegate* unmanaged<VulkanHandle<VkPhysicalDevice>, uint*, VkLayerProperties*, VkResult>)LoadFunc(inst, "vkEnumerateDeviceLayerProperties");
		_vkEnumerateDeviceExtensionProperties = (delegate* unmanaged<VulkanHandle<VkPhysicalDevice>, byte*, uint*, VkExtensionProperties*, VkResult>)LoadFunc(inst, "vkEnumerateDeviceExtensionProperties");
		_vkGetPhysicalDeviceSparseImageFormatProperties = (delegate* unmanaged<VulkanHandle<VkPhysicalDevice>, VkFormat, VkImageType, VkSampleCountFlags, VkImageUsageFlags, VkImageTiling, uint*, VkSparseImageFormatProperties*, void>)LoadFunc(inst, "vkGetPhysicalDeviceSparseImageFormatProperties");
		if (TryLoadFunc(inst, "vkCreateAndroidSurfaceKHR", out addr)) {
			_vkCreateAndroidSurfaceKHR = (delegate* unmanaged<VulkanHandle<VkInstance>, VkAndroidSurfaceCreateInfoKHR*, VkAllocationCallbacks*, VulkanHandle<VkSurfaceKHR>*, VkResult>)addr;
		}
		if (TryLoadFunc(inst, "vkGetPhysicalDeviceDisplayPropertiesKHR", out addr)) {
			_vkGetPhysicalDeviceDisplayPropertiesKHR = (delegate* unmanaged<VulkanHandle<VkPhysicalDevice>, uint*, VkDisplayPropertiesKHR*, VkResult>)addr;
		}
		if (TryLoadFunc(inst, "vkGetPhysicalDeviceDisplayPlanePropertiesKHR", out addr)) {
			_vkGetPhysicalDeviceDisplayPlanePropertiesKHR = (delegate* unmanaged<VulkanHandle<VkPhysicalDevice>, uint*, VkDisplayPlanePropertiesKHR*, VkResult>)addr;
		}
		if (TryLoadFunc(inst, "vkGetDisplayPlaneSupportedDisplaysKHR", out addr)) {
			_vkGetDisplayPlaneSupportedDisplaysKHR = (delegate* unmanaged<VulkanHandle<VkPhysicalDevice>, uint, uint*, VulkanHandle<VkDisplayKHR>*, VkResult>)addr;
		}
		if (TryLoadFunc(inst, "vkGetDisplayModePropertiesKHR", out addr)) {
			_vkGetDisplayModePropertiesKHR = (delegate* unmanaged<VulkanHandle<VkPhysicalDevice>, VulkanHandle<VkDisplayKHR>, uint*, VkDisplayModePropertiesKHR*, VkResult>)addr;
		}
		if (TryLoadFunc(inst, "vkCreateDisplayModeKHR", out addr)) {
			_vkCreateDisplayModeKHR = (delegate* unmanaged<VulkanHandle<VkPhysicalDevice>, VulkanHandle<VkDisplayKHR>, VkDisplayModeCreateInfoKHR*, VkAllocationCallbacks*, VulkanHandle<VkDisplayModeKHR>*, VkResult>)addr;
		}
		if (TryLoadFunc(inst, "vkGetDisplayPlaneCapabilitiesKHR", out addr)) {
			_vkGetDisplayPlaneCapabilitiesKHR = (delegate* unmanaged<VulkanHandle<VkPhysicalDevice>, VulkanHandle<VkDisplayModeKHR>, uint, VkDisplayPlaneCapabilitiesKHR*, VkResult>)addr;
		}
		if (TryLoadFunc(inst, "vkCreateDisplayPlaneSurfaceKHR", out addr)) {
			_vkCreateDisplayPlaneSurfaceKHR = (delegate* unmanaged<VulkanHandle<VkInstance>, VkDisplaySurfaceCreateInfoKHR*, VkAllocationCallbacks*, VulkanHandle<VkSurfaceKHR>*, VkResult>)addr;
		}
		if (TryLoadFunc(inst, "vkDestroySurfaceKHR", out addr)) {
			_vkDestroySurfaceKHR = (delegate* unmanaged<VulkanHandle<VkInstance>, VulkanHandle<VkSurfaceKHR>, VkAllocationCallbacks*, void>)addr;
		}
		if (TryLoadFunc(inst, "vkGetPhysicalDeviceSurfaceSupportKHR", out addr)) {
			_vkGetPhysicalDeviceSurfaceSupportKHR = (delegate* unmanaged<VulkanHandle<VkPhysicalDevice>, uint, VulkanHandle<VkSurfaceKHR>, VkBool32*, VkResult>)addr;
		}
		if (TryLoadFunc(inst, "vkGetPhysicalDeviceSurfaceCapabilitiesKHR", out addr)) {
			_vkGetPhysicalDeviceSurfaceCapabilitiesKHR = (delegate* unmanaged<VulkanHandle<VkPhysicalDevice>, VulkanHandle<VkSurfaceKHR>, VkSurfaceCapabilitiesKHR*, VkResult>)addr;
		}
		if (TryLoadFunc(inst, "vkGetPhysicalDeviceSurfaceFormatsKHR", out addr)) {
			_vkGetPhysicalDeviceSurfaceFormatsKHR = (delegate* unmanaged<VulkanHandle<VkPhysicalDevice>, VulkanHandle<VkSurfaceKHR>, uint*, VkSurfaceFormatKHR*, VkResult>)addr;
		}
		if (TryLoadFunc(inst, "vkGetPhysicalDeviceSurfacePresentModesKHR", out addr)) {
			_vkGetPhysicalDeviceSurfacePresentModesKHR = (delegate* unmanaged<VulkanHandle<VkPhysicalDevice>, VulkanHandle<VkSurfaceKHR>, uint*, VkPresentModeKHR*, VkResult>)addr;
		}
		if (TryLoadFunc(inst, "vkCreateViSurfaceNN", out addr)) {
			_vkCreateViSurfaceNN = (delegate* unmanaged<VulkanHandle<VkInstance>, VkViSurfaceCreateInfoNN*, VkAllocationCallbacks*, VulkanHandle<VkSurfaceKHR>*, VkResult>)addr;
		}
		if (TryLoadFunc(inst, "vkCreateWaylandSurfaceKHR", out addr)) {
			_vkCreateWaylandSurfaceKHR = (delegate* unmanaged<VulkanHandle<VkInstance>, VkWaylandSurfaceCreateInfoKHR*, VkAllocationCallbacks*, VulkanHandle<VkSurfaceKHR>*, VkResult>)addr;
		}
		if (TryLoadFunc(inst, "vkGetPhysicalDeviceWaylandPresentationSupportKHR", out addr)) {
			_vkGetPhysicalDeviceWaylandPresentationSupportKHR = (delegate* unmanaged<VulkanHandle<VkPhysicalDevice>, uint, void*, VkBool32>)addr;
		}
		if (TryLoadFunc(inst, "vkCreateWin32SurfaceKHR", out addr)) {
			_vkCreateWin32SurfaceKHR = (delegate* unmanaged<VulkanHandle<VkInstance>, VkWin32SurfaceCreateInfoKHR*, VkAllocationCallbacks*, VulkanHandle<VkSurfaceKHR>*, VkResult>)addr;
		}
		if (TryLoadFunc(inst, "vkGetPhysicalDeviceWin32PresentationSupportKHR", out addr)) {
			_vkGetPhysicalDeviceWin32PresentationSupportKHR = (delegate* unmanaged<VulkanHandle<VkPhysicalDevice>, uint, VkBool32>)addr;
		}
		if (TryLoadFunc(inst, "vkCreateXlibSurfaceKHR", out addr)) {
			_vkCreateXlibSurfaceKHR = (delegate* unmanaged<VulkanHandle<VkInstance>, VkXlibSurfaceCreateInfoKHR*, VkAllocationCallbacks*, VulkanHandle<VkSurfaceKHR>*, VkResult>)addr;
		}
		if (TryLoadFunc(inst, "vkGetPhysicalDeviceXlibPresentationSupportKHR", out addr)) {
			_vkGetPhysicalDeviceXlibPresentationSupportKHR = (delegate* unmanaged<VulkanHandle<VkPhysicalDevice>, uint, void*, ulong, VkBool32>)addr;
		}
		if (TryLoadFunc(inst, "vkCreateXcbSurfaceKHR", out addr)) {
			_vkCreateXcbSurfaceKHR = (delegate* unmanaged<VulkanHandle<VkInstance>, VkXcbSurfaceCreateInfoKHR*, VkAllocationCallbacks*, VulkanHandle<VkSurfaceKHR>*, VkResult>)addr;
		}
		if (TryLoadFunc(inst, "vkGetPhysicalDeviceXcbPresentationSupportKHR", out addr)) {
			_vkGetPhysicalDeviceXcbPresentationSupportKHR = (delegate* unmanaged<VulkanHandle<VkPhysicalDevice>, uint, void*, uint, VkBool32>)addr;
		}
		if (TryLoadFunc(inst, "vkCreateDirectFBSurfaceEXT", out addr)) {
			_vkCreateDirectFBSurfaceEXT = (delegate* unmanaged<VulkanHandle<VkInstance>, VkDirectFBSurfaceCreateInfoEXT*, VkAllocationCallbacks*, VulkanHandle<VkSurfaceKHR>*, VkResult>)addr;
		}
		if (TryLoadFunc(inst, "vkGetPhysicalDeviceDirectFBPresentationSupportEXT", out addr)) {
			_vkGetPhysicalDeviceDirectFBPresentationSupportEXT = (delegate* unmanaged<VulkanHandle<VkPhysicalDevice>, uint, void*, VkBool32>)addr;
		}
		if (TryLoadFunc(inst, "vkCreateImagePipeSurfaceFUCHSIA", out addr)) {
			_vkCreateImagePipeSurfaceFUCHSIA = (delegate* unmanaged<VulkanHandle<VkInstance>, VkImagePipeSurfaceCreateInfoFUCHSIA*, VkAllocationCallbacks*, VulkanHandle<VkSurfaceKHR>*, VkResult>)addr;
		}
		if (TryLoadFunc(inst, "vkCreateStreamDescriptorSurfaceGGP", out addr)) {
			_vkCreateStreamDescriptorSurfaceGGP = (delegate* unmanaged<VulkanHandle<VkInstance>, VkStreamDescriptorSurfaceCreateInfoGGP*, VkAllocationCallbacks*, VulkanHandle<VkSurfaceKHR>*, VkResult>)addr;
		}
		if (TryLoadFunc(inst, "vkCreateDebugReportCallbackEXT", out addr)) {
			_vkCreateDebugReportCallbackEXT = (delegate* unmanaged<VulkanHandle<VkInstance>, VkDebugReportCallbackCreateInfoEXT*, VkAllocationCallbacks*, VulkanHandle<VkDebugReportCallbackEXT>*, VkResult>)addr;
		}
		if (TryLoadFunc(inst, "vkDestroyDebugReportCallbackEXT", out addr)) {
			_vkDestroyDebugReportCallbackEXT = (delegate* unmanaged<VulkanHandle<VkInstance>, VulkanHandle<VkDebugReportCallbackEXT>, VkAllocationCallbacks*, void>)addr;
		}
		if (TryLoadFunc(inst, "vkDebugReportMessageEXT", out addr)) {
			_vkDebugReportMessageEXT = (delegate* unmanaged<VulkanHandle<VkInstance>, VkDebugReportFlagsEXT, VkDebugReportObjectTypeEXT, ulong, ulong, int, byte*, byte*, void>)addr;
		}
		if (TryLoadFunc(inst, "vkGetPhysicalDeviceExternalImageFormatPropertiesNV", out addr)) {
			_vkGetPhysicalDeviceExternalImageFormatPropertiesNV = (delegate* unmanaged<VulkanHandle<VkPhysicalDevice>, VkFormat, VkImageType, VkImageTiling, VkImageUsageFlags, VkImageCreateFlags, VkExternalMemoryHandleTypeFlagsNV, VkExternalImageFormatPropertiesNV*, VkResult>)addr;
		}
		if (version >= VkVersion.VK_VERSION_1_1) {
			_vkGetPhysicalDeviceFeatures2 = (delegate* unmanaged<VulkanHandle<VkPhysicalDevice>, VkPhysicalDeviceFeatures2*, void>)LoadFunc(inst, "vkGetPhysicalDeviceFeatures2");
		}
		_vkGetPhysicalDeviceFeatures2KHR = _vkGetPhysicalDeviceFeatures2;
		if ((_vkGetPhysicalDeviceFeatures2KHR == null) && TryLoadFunc(inst, "vkGetPhysicalDeviceFeatures2KHR", out addr)) {
			_vkGetPhysicalDeviceFeatures2KHR = (delegate* unmanaged<VulkanHandle<VkPhysicalDevice>, VkPhysicalDeviceFeatures2*, void>)addr;
		}
		if (version >= VkVersion.VK_VERSION_1_1) {
			_vkGetPhysicalDeviceProperties2 = (delegate* unmanaged<VulkanHandle<VkPhysicalDevice>, VkPhysicalDeviceProperties2*, void>)LoadFunc(inst, "vkGetPhysicalDeviceProperties2");
		}
		_vkGetPhysicalDeviceProperties2KHR = _vkGetPhysicalDeviceProperties2;
		if ((_vkGetPhysicalDeviceProperties2KHR == null) && TryLoadFunc(inst, "vkGetPhysicalDeviceProperties2KHR", out addr)) {
			_vkGetPhysicalDeviceProperties2KHR = (delegate* unmanaged<VulkanHandle<VkPhysicalDevice>, VkPhysicalDeviceProperties2*, void>)addr;
		}
		if (version >= VkVersion.VK_VERSION_1_1) {
			_vkGetPhysicalDeviceFormatProperties2 = (delegate* unmanaged<VulkanHandle<VkPhysicalDevice>, VkFormat, VkFormatProperties2*, void>)LoadFunc(inst, "vkGetPhysicalDeviceFormatProperties2");
		}
		_vkGetPhysicalDeviceFormatProperties2KHR = _vkGetPhysicalDeviceFormatProperties2;
		if ((_vkGetPhysicalDeviceFormatProperties2KHR == null) && TryLoadFunc(inst, "vkGetPhysicalDeviceFormatProperties2KHR", out addr)) {
			_vkGetPhysicalDeviceFormatProperties2KHR = (delegate* unmanaged<VulkanHandle<VkPhysicalDevice>, VkFormat, VkFormatProperties2*, void>)addr;
		}
		if (version >= VkVersion.VK_VERSION_1_1) {
			_vkGetPhysicalDeviceImageFormatProperties2 = (delegate* unmanaged<VulkanHandle<VkPhysicalDevice>, VkPhysicalDeviceImageFormatInfo2*, VkImageFormatProperties2*, VkResult>)LoadFunc(inst, "vkGetPhysicalDeviceImageFormatProperties2");
		}
		_vkGetPhysicalDeviceImageFormatProperties2KHR = _vkGetPhysicalDeviceImageFormatProperties2;
		if ((_vkGetPhysicalDeviceImageFormatProperties2KHR == null) && TryLoadFunc(inst, "vkGetPhysicalDeviceImageFormatProperties2KHR", out addr)) {
			_vkGetPhysicalDeviceImageFormatProperties2KHR = (delegate* unmanaged<VulkanHandle<VkPhysicalDevice>, VkPhysicalDeviceImageFormatInfo2*, VkImageFormatProperties2*, VkResult>)addr;
		}
		if (version >= VkVersion.VK_VERSION_1_1) {
			_vkGetPhysicalDeviceQueueFamilyProperties2 = (delegate* unmanaged<VulkanHandle<VkPhysicalDevice>, uint*, VkQueueFamilyProperties2*, void>)LoadFunc(inst, "vkGetPhysicalDeviceQueueFamilyProperties2");
		}
		_vkGetPhysicalDeviceQueueFamilyProperties2KHR = _vkGetPhysicalDeviceQueueFamilyProperties2;
		if ((_vkGetPhysicalDeviceQueueFamilyProperties2KHR == null) && TryLoadFunc(inst, "vkGetPhysicalDeviceQueueFamilyProperties2KHR", out addr)) {
			_vkGetPhysicalDeviceQueueFamilyProperties2KHR = (delegate* unmanaged<VulkanHandle<VkPhysicalDevice>, uint*, VkQueueFamilyProperties2*, void>)addr;
		}
		if (version >= VkVersion.VK_VERSION_1_1) {
			_vkGetPhysicalDeviceMemoryProperties2 = (delegate* unmanaged<VulkanHandle<VkPhysicalDevice>, VkPhysicalDeviceMemoryProperties2*, void>)LoadFunc(inst, "vkGetPhysicalDeviceMemoryProperties2");
		}
		_vkGetPhysicalDeviceMemoryProperties2KHR = _vkGetPhysicalDeviceMemoryProperties2;
		if ((_vkGetPhysicalDeviceMemoryProperties2KHR == null) && TryLoadFunc(inst, "vkGetPhysicalDeviceMemoryProperties2KHR", out addr)) {
			_vkGetPhysicalDeviceMemoryProperties2KHR = (delegate* unmanaged<VulkanHandle<VkPhysicalDevice>, VkPhysicalDeviceMemoryProperties2*, void>)addr;
		}
		if (version >= VkVersion.VK_VERSION_1_1) {
			_vkGetPhysicalDeviceSparseImageFormatProperties2 = (delegate* unmanaged<VulkanHandle<VkPhysicalDevice>, VkPhysicalDeviceSparseImageFormatInfo2*, uint*, VkSparseImageFormatProperties2*, void>)LoadFunc(inst, "vkGetPhysicalDeviceSparseImageFormatProperties2");
		}
		_vkGetPhysicalDeviceSparseImageFormatProperties2KHR = _vkGetPhysicalDeviceSparseImageFormatProperties2;
		if ((_vkGetPhysicalDeviceSparseImageFormatProperties2KHR == null) && TryLoadFunc(inst, "vkGetPhysicalDeviceSparseImageFormatProperties2KHR", out addr)) {
			_vkGetPhysicalDeviceSparseImageFormatProperties2KHR = (delegate* unmanaged<VulkanHandle<VkPhysicalDevice>, VkPhysicalDeviceSparseImageFormatInfo2*, uint*, VkSparseImageFormatProperties2*, void>)addr;
		}
		if (version >= VkVersion.VK_VERSION_1_1) {
			_vkGetPhysicalDeviceExternalBufferProperties = (delegate* unmanaged<VulkanHandle<VkPhysicalDevice>, VkPhysicalDeviceExternalBufferInfo*, VkExternalBufferProperties*, void>)LoadFunc(inst, "vkGetPhysicalDeviceExternalBufferProperties");
		}
		_vkGetPhysicalDeviceExternalBufferPropertiesKHR = _vkGetPhysicalDeviceExternalBufferProperties;
		if ((_vkGetPhysicalDeviceExternalBufferPropertiesKHR == null) && TryLoadFunc(inst, "vkGetPhysicalDeviceExternalBufferPropertiesKHR", out addr)) {
			_vkGetPhysicalDeviceExternalBufferPropertiesKHR = (delegate* unmanaged<VulkanHandle<VkPhysicalDevice>, VkPhysicalDeviceExternalBufferInfo*, VkExternalBufferProperties*, void>)addr;
		}
		if (version >= VkVersion.VK_VERSION_1_1) {
			_vkGetPhysicalDeviceExternalSemaphoreProperties = (delegate* unmanaged<VulkanHandle<VkPhysicalDevice>, VkPhysicalDeviceExternalSemaphoreInfo*, VkExternalSemaphoreProperties*, void>)LoadFunc(inst, "vkGetPhysicalDeviceExternalSemaphoreProperties");
		}
		_vkGetPhysicalDeviceExternalSemaphorePropertiesKHR = _vkGetPhysicalDeviceExternalSemaphoreProperties;
		if ((_vkGetPhysicalDeviceExternalSemaphorePropertiesKHR == null) && TryLoadFunc(inst, "vkGetPhysicalDeviceExternalSemaphorePropertiesKHR", out addr)) {
			_vkGetPhysicalDeviceExternalSemaphorePropertiesKHR = (delegate* unmanaged<VulkanHandle<VkPhysicalDevice>, VkPhysicalDeviceExternalSemaphoreInfo*, VkExternalSemaphoreProperties*, void>)addr;
		}
		if (version >= VkVersion.VK_VERSION_1_1) {
			_vkGetPhysicalDeviceExternalFenceProperties = (delegate* unmanaged<VulkanHandle<VkPhysicalDevice>, VkPhysicalDeviceExternalFenceInfo*, VkExternalFenceProperties*, void>)LoadFunc(inst, "vkGetPhysicalDeviceExternalFenceProperties");
		}
		_vkGetPhysicalDeviceExternalFencePropertiesKHR = _vkGetPhysicalDeviceExternalFenceProperties;
		if ((_vkGetPhysicalDeviceExternalFencePropertiesKHR == null) && TryLoadFunc(inst, "vkGetPhysicalDeviceExternalFencePropertiesKHR", out addr)) {
			_vkGetPhysicalDeviceExternalFencePropertiesKHR = (delegate* unmanaged<VulkanHandle<VkPhysicalDevice>, VkPhysicalDeviceExternalFenceInfo*, VkExternalFenceProperties*, void>)addr;
		}
		if (TryLoadFunc(inst, "vkReleaseDisplayEXT", out addr)) {
			_vkReleaseDisplayEXT = (delegate* unmanaged<VulkanHandle<VkPhysicalDevice>, VulkanHandle<VkDisplayKHR>, VkResult>)addr;
		}
		if (TryLoadFunc(inst, "vkAcquireXlibDisplayEXT", out addr)) {
			_vkAcquireXlibDisplayEXT = (delegate* unmanaged<VulkanHandle<VkPhysicalDevice>, void*, VulkanHandle<VkDisplayKHR>, VkResult>)addr;
		}
		if (TryLoadFunc(inst, "vkGetRandROutputDisplayEXT", out addr)) {
			_vkGetRandROutputDisplayEXT = (delegate* unmanaged<VulkanHandle<VkPhysicalDevice>, void*, ulong, VulkanHandle<VkDisplayKHR>*, VkResult>)addr;
		}
		if (TryLoadFunc(inst, "vkGetPhysicalDeviceSurfaceCapabilities2EXT", out addr)) {
			_vkGetPhysicalDeviceSurfaceCapabilities2EXT = (delegate* unmanaged<VulkanHandle<VkPhysicalDevice>, VulkanHandle<VkSurfaceKHR>, VkSurfaceCapabilities2EXT*, VkResult>)addr;
		}
		if (version >= VkVersion.VK_VERSION_1_1) {
			_vkEnumeratePhysicalDeviceGroups = (delegate* unmanaged<VulkanHandle<VkInstance>, uint*, VkPhysicalDeviceGroupProperties*, VkResult>)LoadFunc(inst, "vkEnumeratePhysicalDeviceGroups");
		}
		_vkEnumeratePhysicalDeviceGroupsKHR = _vkEnumeratePhysicalDeviceGroups;
		if ((_vkEnumeratePhysicalDeviceGroupsKHR == null) && TryLoadFunc(inst, "vkEnumeratePhysicalDeviceGroupsKHR", out addr)) {
			_vkEnumeratePhysicalDeviceGroupsKHR = (delegate* unmanaged<VulkanHandle<VkInstance>, uint*, VkPhysicalDeviceGroupProperties*, VkResult>)addr;
		}
		if (TryLoadFunc(inst, "vkGetPhysicalDevicePresentRectanglesKHR", out addr)) {
			_vkGetPhysicalDevicePresentRectanglesKHR = (delegate* unmanaged<VulkanHandle<VkPhysicalDevice>, VulkanHandle<VkSurfaceKHR>, uint*, VkRect2D*, VkResult>)addr;
		}
		if (TryLoadFunc(inst, "vkCreateIOSSurfaceMVK", out addr)) {
			_vkCreateIOSSurfaceMVK = (delegate* unmanaged<VulkanHandle<VkInstance>, VkIOSSurfaceCreateInfoMVK*, VkAllocationCallbacks*, VulkanHandle<VkSurfaceKHR>*, VkResult>)addr;
		}
		if (TryLoadFunc(inst, "vkCreateMacOSSurfaceMVK", out addr)) {
			_vkCreateMacOSSurfaceMVK = (delegate* unmanaged<VulkanHandle<VkInstance>, VkMacOSSurfaceCreateInfoMVK*, VkAllocationCallbacks*, VulkanHandle<VkSurfaceKHR>*, VkResult>)addr;
		}
		if (TryLoadFunc(inst, "vkCreateMetalSurfaceEXT", out addr)) {
			_vkCreateMetalSurfaceEXT = (delegate* unmanaged<VulkanHandle<VkInstance>, VkMetalSurfaceCreateInfoEXT*, VkAllocationCallbacks*, VulkanHandle<VkSurfaceKHR>*, VkResult>)addr;
		}
		if (TryLoadFunc(inst, "vkGetPhysicalDeviceMultisamplePropertiesEXT", out addr)) {
			_vkGetPhysicalDeviceMultisamplePropertiesEXT = (delegate* unmanaged<VulkanHandle<VkPhysicalDevice>, VkSampleCountFlags, VkMultisamplePropertiesEXT*, void>)addr;
		}
		if (TryLoadFunc(inst, "vkGetPhysicalDeviceSurfaceCapabilities2KHR", out addr)) {
			_vkGetPhysicalDeviceSurfaceCapabilities2KHR = (delegate* unmanaged<VulkanHandle<VkPhysicalDevice>, VkPhysicalDeviceSurfaceInfo2KHR*, VkSurfaceCapabilities2KHR*, VkResult>)addr;
		}
		if (TryLoadFunc(inst, "vkGetPhysicalDeviceSurfaceFormats2KHR", out addr)) {
			_vkGetPhysicalDeviceSurfaceFormats2KHR = (delegate* unmanaged<VulkanHandle<VkPhysicalDevice>, VkPhysicalDeviceSurfaceInfo2KHR*, uint*, VkSurfaceFormat2KHR*, VkResult>)addr;
		}
		if (TryLoadFunc(inst, "vkGetPhysicalDeviceDisplayProperties2KHR", out addr)) {
			_vkGetPhysicalDeviceDisplayProperties2KHR = (delegate* unmanaged<VulkanHandle<VkPhysicalDevice>, uint*, VkDisplayProperties2KHR*, VkResult>)addr;
		}
		if (TryLoadFunc(inst, "vkGetPhysicalDeviceDisplayPlaneProperties2KHR", out addr)) {
			_vkGetPhysicalDeviceDisplayPlaneProperties2KHR = (delegate* unmanaged<VulkanHandle<VkPhysicalDevice>, uint*, VkDisplayPlaneProperties2KHR*, VkResult>)addr;
		}
		if (TryLoadFunc(inst, "vkGetDisplayModeProperties2KHR", out addr)) {
			_vkGetDisplayModeProperties2KHR = (delegate* unmanaged<VulkanHandle<VkPhysicalDevice>, VulkanHandle<VkDisplayKHR>, uint*, VkDisplayModeProperties2KHR*, VkResult>)addr;
		}
		if (TryLoadFunc(inst, "vkGetDisplayPlaneCapabilities2KHR", out addr)) {
			_vkGetDisplayPlaneCapabilities2KHR = (delegate* unmanaged<VulkanHandle<VkPhysicalDevice>, VkDisplayPlaneInfo2KHR*, VkDisplayPlaneCapabilities2KHR*, VkResult>)addr;
		}
		if (TryLoadFunc(inst, "vkGetPhysicalDeviceCalibrateableTimeDomainsEXT", out addr)) {
			_vkGetPhysicalDeviceCalibrateableTimeDomainsEXT = (delegate* unmanaged<VulkanHandle<VkPhysicalDevice>, uint*, VkTimeDomainEXT*, VkResult>)addr;
		}
		if (TryLoadFunc(inst, "vkCreateDebugUtilsMessengerEXT", out addr)) {
			_vkCreateDebugUtilsMessengerEXT = (delegate* unmanaged<VulkanHandle<VkInstance>, VkDebugUtilsMessengerCreateInfoEXT*, VkAllocationCallbacks*, VulkanHandle<VkDebugUtilsMessengerEXT>*, VkResult>)addr;
		}
		if (TryLoadFunc(inst, "vkDestroyDebugUtilsMessengerEXT", out addr)) {
			_vkDestroyDebugUtilsMessengerEXT = (delegate* unmanaged<VulkanHandle<VkInstance>, VulkanHandle<VkDebugUtilsMessengerEXT>, VkAllocationCallbacks*, void>)addr;
		}
		if (TryLoadFunc(inst, "vkSubmitDebugUtilsMessageEXT", out addr)) {
			_vkSubmitDebugUtilsMessageEXT = (delegate* unmanaged<VulkanHandle<VkInstance>, VkDebugUtilsMessageSeverityFlagsEXT, VkDebugUtilsMessageTypeFlagsEXT, VkDebugUtilsMessengerCallbackDataEXT*, void>)addr;
		}
		if (TryLoadFunc(inst, "vkGetPhysicalDeviceCooperativeMatrixPropertiesNV", out addr)) {
			_vkGetPhysicalDeviceCooperativeMatrixPropertiesNV = (delegate* unmanaged<VulkanHandle<VkPhysicalDevice>, uint*, VkCooperativeMatrixPropertiesNV*, VkResult>)addr;
		}
		if (TryLoadFunc(inst, "vkGetPhysicalDeviceSurfacePresentModes2EXT", out addr)) {
			_vkGetPhysicalDeviceSurfacePresentModes2EXT = (delegate* unmanaged<VulkanHandle<VkPhysicalDevice>, VkPhysicalDeviceSurfaceInfo2KHR*, uint*, VkPresentModeKHR*, VkResult>)addr;
		}
		if (TryLoadFunc(inst, "vkEnumeratePhysicalDeviceQueueFamilyPerformanceQueryCountersKHR", out addr)) {
			_vkEnumeratePhysicalDeviceQueueFamilyPerformanceQueryCountersKHR = (delegate* unmanaged<VulkanHandle<VkPhysicalDevice>, uint, uint*, VkPerformanceCounterKHR*, VkPerformanceCounterDescriptionKHR*, VkResult>)addr;
		}
		if (TryLoadFunc(inst, "vkGetPhysicalDeviceQueueFamilyPerformanceQueryPassesKHR", out addr)) {
			_vkGetPhysicalDeviceQueueFamilyPerformanceQueryPassesKHR = (delegate* unmanaged<VulkanHandle<VkPhysicalDevice>, VkQueryPoolPerformanceCreateInfoKHR*, uint*, void>)addr;
		}
		if (TryLoadFunc(inst, "vkCreateHeadlessSurfaceEXT", out addr)) {
			_vkCreateHeadlessSurfaceEXT = (delegate* unmanaged<VulkanHandle<VkInstance>, VkHeadlessSurfaceCreateInfoEXT*, VkAllocationCallbacks*, VulkanHandle<VkSurfaceKHR>*, VkResult>)addr;
		}
		if (TryLoadFunc(inst, "vkGetPhysicalDeviceSupportedFramebufferMixedSamplesCombinationsNV", out addr)) {
			_vkGetPhysicalDeviceSupportedFramebufferMixedSamplesCombinationsNV = (delegate* unmanaged<VulkanHandle<VkPhysicalDevice>, uint*, VkFramebufferMixedSamplesCombinationNV*, VkResult>)addr;
		}
		if (TryLoadFunc(inst, "vkGetPhysicalDeviceToolPropertiesEXT", out addr)) {
			_vkGetPhysicalDeviceToolPropertiesEXT = (delegate* unmanaged<VulkanHandle<VkPhysicalDevice>, uint*, VkPhysicalDeviceToolPropertiesEXT*, VkResult>)addr;
		}
		if (TryLoadFunc(inst, "vkGetPhysicalDeviceFragmentShadingRatesKHR", out addr)) {
			_vkGetPhysicalDeviceFragmentShadingRatesKHR = (delegate* unmanaged<VulkanHandle<VkPhysicalDevice>, uint*, VkPhysicalDeviceFragmentShadingRateKHR*, VkResult>)addr;
		}
	}

	/// <summary>Initializes the device-level functions in the table.</summary>
	static void InitFunctionTable(VulkanHandle<VkDevice> dev, VkVersion version)
	{
		if (!dev) throw new ArgumentException("Cannot initialize function table with null device");
		void* addr = null;
		DeviceVersion = version;

		_vkDestroyInstance = (delegate* unmanaged<VulkanHandle<VkInstance>, VkAllocationCallbacks*, void>)LoadFunc(dev, "vkDestroyInstance");
		_vkEnumeratePhysicalDevices = (delegate* unmanaged<VulkanHandle<VkInstance>, uint*, VulkanHandle<VkPhysicalDevice>*, VkResult>)LoadFunc(dev, "vkEnumeratePhysicalDevices");
		_vkGetPhysicalDeviceProperties = (delegate* unmanaged<VulkanHandle<VkPhysicalDevice>, VkPhysicalDeviceProperties*, void>)LoadFunc(dev, "vkGetPhysicalDeviceProperties");
		_vkGetPhysicalDeviceQueueFamilyProperties = (delegate* unmanaged<VulkanHandle<VkPhysicalDevice>, uint*, VkQueueFamilyProperties*, void>)LoadFunc(dev, "vkGetPhysicalDeviceQueueFamilyProperties");
		_vkGetPhysicalDeviceMemoryProperties = (delegate* unmanaged<VulkanHandle<VkPhysicalDevice>, VkPhysicalDeviceMemoryProperties*, void>)LoadFunc(dev, "vkGetPhysicalDeviceMemoryProperties");
		_vkGetPhysicalDeviceFeatures = (delegate* unmanaged<VulkanHandle<VkPhysicalDevice>, VkPhysicalDeviceFeatures*, void>)LoadFunc(dev, "vkGetPhysicalDeviceFeatures");
		_vkGetPhysicalDeviceFormatProperties = (delegate* unmanaged<VulkanHandle<VkPhysicalDevice>, VkFormat, VkFormatProperties*, void>)LoadFunc(dev, "vkGetPhysicalDeviceFormatProperties");
		_vkGetPhysicalDeviceImageFormatProperties = (delegate* unmanaged<VulkanHandle<VkPhysicalDevice>, VkFormat, VkImageType, VkImageTiling, VkImageUsageFlags, VkImageCreateFlags, VkImageFormatProperties*, VkResult>)LoadFunc(dev, "vkGetPhysicalDeviceImageFormatProperties");
		_vkCreateDevice = (delegate* unmanaged<VulkanHandle<VkPhysicalDevice>, VkDeviceCreateInfo*, VkAllocationCallbacks*, VulkanHandle<VkDevice>*, VkResult>)LoadFunc(dev, "vkCreateDevice");
		_vkEnumerateDeviceLayerProperties = (delegate* unmanaged<VulkanHandle<VkPhysicalDevice>, uint*, VkLayerProperties*, VkResult>)LoadFunc(dev, "vkEnumerateDeviceLayerProperties");
		_vkEnumerateDeviceExtensionProperties = (delegate* unmanaged<VulkanHandle<VkPhysicalDevice>, byte*, uint*, VkExtensionProperties*, VkResult>)LoadFunc(dev, "vkEnumerateDeviceExtensionProperties");
		_vkGetPhysicalDeviceSparseImageFormatProperties = (delegate* unmanaged<VulkanHandle<VkPhysicalDevice>, VkFormat, VkImageType, VkSampleCountFlags, VkImageUsageFlags, VkImageTiling, uint*, VkSparseImageFormatProperties*, void>)LoadFunc(dev, "vkGetPhysicalDeviceSparseImageFormatProperties");
		if (TryLoadFunc(dev, "vkCreateAndroidSurfaceKHR", out addr)) {
			_vkCreateAndroidSurfaceKHR = (delegate* unmanaged<VulkanHandle<VkInstance>, VkAndroidSurfaceCreateInfoKHR*, VkAllocationCallbacks*, VulkanHandle<VkSurfaceKHR>*, VkResult>)addr;
		}
		if (TryLoadFunc(dev, "vkGetPhysicalDeviceDisplayPropertiesKHR", out addr)) {
			_vkGetPhysicalDeviceDisplayPropertiesKHR = (delegate* unmanaged<VulkanHandle<VkPhysicalDevice>, uint*, VkDisplayPropertiesKHR*, VkResult>)addr;
		}
		if (TryLoadFunc(dev, "vkGetPhysicalDeviceDisplayPlanePropertiesKHR", out addr)) {
			_vkGetPhysicalDeviceDisplayPlanePropertiesKHR = (delegate* unmanaged<VulkanHandle<VkPhysicalDevice>, uint*, VkDisplayPlanePropertiesKHR*, VkResult>)addr;
		}
		if (TryLoadFunc(dev, "vkGetDisplayPlaneSupportedDisplaysKHR", out addr)) {
			_vkGetDisplayPlaneSupportedDisplaysKHR = (delegate* unmanaged<VulkanHandle<VkPhysicalDevice>, uint, uint*, VulkanHandle<VkDisplayKHR>*, VkResult>)addr;
		}
		if (TryLoadFunc(dev, "vkGetDisplayModePropertiesKHR", out addr)) {
			_vkGetDisplayModePropertiesKHR = (delegate* unmanaged<VulkanHandle<VkPhysicalDevice>, VulkanHandle<VkDisplayKHR>, uint*, VkDisplayModePropertiesKHR*, VkResult>)addr;
		}
		if (TryLoadFunc(dev, "vkCreateDisplayModeKHR", out addr)) {
			_vkCreateDisplayModeKHR = (delegate* unmanaged<VulkanHandle<VkPhysicalDevice>, VulkanHandle<VkDisplayKHR>, VkDisplayModeCreateInfoKHR*, VkAllocationCallbacks*, VulkanHandle<VkDisplayModeKHR>*, VkResult>)addr;
		}
		if (TryLoadFunc(dev, "vkGetDisplayPlaneCapabilitiesKHR", out addr)) {
			_vkGetDisplayPlaneCapabilitiesKHR = (delegate* unmanaged<VulkanHandle<VkPhysicalDevice>, VulkanHandle<VkDisplayModeKHR>, uint, VkDisplayPlaneCapabilitiesKHR*, VkResult>)addr;
		}
		if (TryLoadFunc(dev, "vkCreateDisplayPlaneSurfaceKHR", out addr)) {
			_vkCreateDisplayPlaneSurfaceKHR = (delegate* unmanaged<VulkanHandle<VkInstance>, VkDisplaySurfaceCreateInfoKHR*, VkAllocationCallbacks*, VulkanHandle<VkSurfaceKHR>*, VkResult>)addr;
		}
		if (TryLoadFunc(dev, "vkDestroySurfaceKHR", out addr)) {
			_vkDestroySurfaceKHR = (delegate* unmanaged<VulkanHandle<VkInstance>, VulkanHandle<VkSurfaceKHR>, VkAllocationCallbacks*, void>)addr;
		}
		if (TryLoadFunc(dev, "vkGetPhysicalDeviceSurfaceSupportKHR", out addr)) {
			_vkGetPhysicalDeviceSurfaceSupportKHR = (delegate* unmanaged<VulkanHandle<VkPhysicalDevice>, uint, VulkanHandle<VkSurfaceKHR>, VkBool32*, VkResult>)addr;
		}
		if (TryLoadFunc(dev, "vkGetPhysicalDeviceSurfaceCapabilitiesKHR", out addr)) {
			_vkGetPhysicalDeviceSurfaceCapabilitiesKHR = (delegate* unmanaged<VulkanHandle<VkPhysicalDevice>, VulkanHandle<VkSurfaceKHR>, VkSurfaceCapabilitiesKHR*, VkResult>)addr;
		}
		if (TryLoadFunc(dev, "vkGetPhysicalDeviceSurfaceFormatsKHR", out addr)) {
			_vkGetPhysicalDeviceSurfaceFormatsKHR = (delegate* unmanaged<VulkanHandle<VkPhysicalDevice>, VulkanHandle<VkSurfaceKHR>, uint*, VkSurfaceFormatKHR*, VkResult>)addr;
		}
		if (TryLoadFunc(dev, "vkGetPhysicalDeviceSurfacePresentModesKHR", out addr)) {
			_vkGetPhysicalDeviceSurfacePresentModesKHR = (delegate* unmanaged<VulkanHandle<VkPhysicalDevice>, VulkanHandle<VkSurfaceKHR>, uint*, VkPresentModeKHR*, VkResult>)addr;
		}
		if (TryLoadFunc(dev, "vkCreateViSurfaceNN", out addr)) {
			_vkCreateViSurfaceNN = (delegate* unmanaged<VulkanHandle<VkInstance>, VkViSurfaceCreateInfoNN*, VkAllocationCallbacks*, VulkanHandle<VkSurfaceKHR>*, VkResult>)addr;
		}
		if (TryLoadFunc(dev, "vkCreateWaylandSurfaceKHR", out addr)) {
			_vkCreateWaylandSurfaceKHR = (delegate* unmanaged<VulkanHandle<VkInstance>, VkWaylandSurfaceCreateInfoKHR*, VkAllocationCallbacks*, VulkanHandle<VkSurfaceKHR>*, VkResult>)addr;
		}
		if (TryLoadFunc(dev, "vkGetPhysicalDeviceWaylandPresentationSupportKHR", out addr)) {
			_vkGetPhysicalDeviceWaylandPresentationSupportKHR = (delegate* unmanaged<VulkanHandle<VkPhysicalDevice>, uint, void*, VkBool32>)addr;
		}
		if (TryLoadFunc(dev, "vkCreateWin32SurfaceKHR", out addr)) {
			_vkCreateWin32SurfaceKHR = (delegate* unmanaged<VulkanHandle<VkInstance>, VkWin32SurfaceCreateInfoKHR*, VkAllocationCallbacks*, VulkanHandle<VkSurfaceKHR>*, VkResult>)addr;
		}
		if (TryLoadFunc(dev, "vkGetPhysicalDeviceWin32PresentationSupportKHR", out addr)) {
			_vkGetPhysicalDeviceWin32PresentationSupportKHR = (delegate* unmanaged<VulkanHandle<VkPhysicalDevice>, uint, VkBool32>)addr;
		}
		if (TryLoadFunc(dev, "vkCreateXlibSurfaceKHR", out addr)) {
			_vkCreateXlibSurfaceKHR = (delegate* unmanaged<VulkanHandle<VkInstance>, VkXlibSurfaceCreateInfoKHR*, VkAllocationCallbacks*, VulkanHandle<VkSurfaceKHR>*, VkResult>)addr;
		}
		if (TryLoadFunc(dev, "vkGetPhysicalDeviceXlibPresentationSupportKHR", out addr)) {
			_vkGetPhysicalDeviceXlibPresentationSupportKHR = (delegate* unmanaged<VulkanHandle<VkPhysicalDevice>, uint, void*, ulong, VkBool32>)addr;
		}
		if (TryLoadFunc(dev, "vkCreateXcbSurfaceKHR", out addr)) {
			_vkCreateXcbSurfaceKHR = (delegate* unmanaged<VulkanHandle<VkInstance>, VkXcbSurfaceCreateInfoKHR*, VkAllocationCallbacks*, VulkanHandle<VkSurfaceKHR>*, VkResult>)addr;
		}
		if (TryLoadFunc(dev, "vkGetPhysicalDeviceXcbPresentationSupportKHR", out addr)) {
			_vkGetPhysicalDeviceXcbPresentationSupportKHR = (delegate* unmanaged<VulkanHandle<VkPhysicalDevice>, uint, void*, uint, VkBool32>)addr;
		}
		if (TryLoadFunc(dev, "vkCreateDirectFBSurfaceEXT", out addr)) {
			_vkCreateDirectFBSurfaceEXT = (delegate* unmanaged<VulkanHandle<VkInstance>, VkDirectFBSurfaceCreateInfoEXT*, VkAllocationCallbacks*, VulkanHandle<VkSurfaceKHR>*, VkResult>)addr;
		}
		if (TryLoadFunc(dev, "vkGetPhysicalDeviceDirectFBPresentationSupportEXT", out addr)) {
			_vkGetPhysicalDeviceDirectFBPresentationSupportEXT = (delegate* unmanaged<VulkanHandle<VkPhysicalDevice>, uint, void*, VkBool32>)addr;
		}
		if (TryLoadFunc(dev, "vkCreateImagePipeSurfaceFUCHSIA", out addr)) {
			_vkCreateImagePipeSurfaceFUCHSIA = (delegate* unmanaged<VulkanHandle<VkInstance>, VkImagePipeSurfaceCreateInfoFUCHSIA*, VkAllocationCallbacks*, VulkanHandle<VkSurfaceKHR>*, VkResult>)addr;
		}
		if (TryLoadFunc(dev, "vkCreateStreamDescriptorSurfaceGGP", out addr)) {
			_vkCreateStreamDescriptorSurfaceGGP = (delegate* unmanaged<VulkanHandle<VkInstance>, VkStreamDescriptorSurfaceCreateInfoGGP*, VkAllocationCallbacks*, VulkanHandle<VkSurfaceKHR>*, VkResult>)addr;
		}
		if (TryLoadFunc(dev, "vkCreateDebugReportCallbackEXT", out addr)) {
			_vkCreateDebugReportCallbackEXT = (delegate* unmanaged<VulkanHandle<VkInstance>, VkDebugReportCallbackCreateInfoEXT*, VkAllocationCallbacks*, VulkanHandle<VkDebugReportCallbackEXT>*, VkResult>)addr;
		}
		if (TryLoadFunc(dev, "vkDestroyDebugReportCallbackEXT", out addr)) {
			_vkDestroyDebugReportCallbackEXT = (delegate* unmanaged<VulkanHandle<VkInstance>, VulkanHandle<VkDebugReportCallbackEXT>, VkAllocationCallbacks*, void>)addr;
		}
		if (TryLoadFunc(dev, "vkDebugReportMessageEXT", out addr)) {
			_vkDebugReportMessageEXT = (delegate* unmanaged<VulkanHandle<VkInstance>, VkDebugReportFlagsEXT, VkDebugReportObjectTypeEXT, ulong, ulong, int, byte*, byte*, void>)addr;
		}
		if (TryLoadFunc(dev, "vkGetPhysicalDeviceExternalImageFormatPropertiesNV", out addr)) {
			_vkGetPhysicalDeviceExternalImageFormatPropertiesNV = (delegate* unmanaged<VulkanHandle<VkPhysicalDevice>, VkFormat, VkImageType, VkImageTiling, VkImageUsageFlags, VkImageCreateFlags, VkExternalMemoryHandleTypeFlagsNV, VkExternalImageFormatPropertiesNV*, VkResult>)addr;
		}
		if (version >= VkVersion.VK_VERSION_1_1) {
			_vkGetPhysicalDeviceFeatures2 = (delegate* unmanaged<VulkanHandle<VkPhysicalDevice>, VkPhysicalDeviceFeatures2*, void>)LoadFunc(dev, "vkGetPhysicalDeviceFeatures2");
		}
		_vkGetPhysicalDeviceFeatures2KHR = _vkGetPhysicalDeviceFeatures2;
		if ((_vkGetPhysicalDeviceFeatures2KHR == null) && TryLoadFunc(dev, "vkGetPhysicalDeviceFeatures2KHR", out addr)) {
			_vkGetPhysicalDeviceFeatures2KHR = (delegate* unmanaged<VulkanHandle<VkPhysicalDevice>, VkPhysicalDeviceFeatures2*, void>)addr;
		}
		if (version >= VkVersion.VK_VERSION_1_1) {
			_vkGetPhysicalDeviceProperties2 = (delegate* unmanaged<VulkanHandle<VkPhysicalDevice>, VkPhysicalDeviceProperties2*, void>)LoadFunc(dev, "vkGetPhysicalDeviceProperties2");
		}
		_vkGetPhysicalDeviceProperties2KHR = _vkGetPhysicalDeviceProperties2;
		if ((_vkGetPhysicalDeviceProperties2KHR == null) && TryLoadFunc(dev, "vkGetPhysicalDeviceProperties2KHR", out addr)) {
			_vkGetPhysicalDeviceProperties2KHR = (delegate* unmanaged<VulkanHandle<VkPhysicalDevice>, VkPhysicalDeviceProperties2*, void>)addr;
		}
		if (version >= VkVersion.VK_VERSION_1_1) {
			_vkGetPhysicalDeviceFormatProperties2 = (delegate* unmanaged<VulkanHandle<VkPhysicalDevice>, VkFormat, VkFormatProperties2*, void>)LoadFunc(dev, "vkGetPhysicalDeviceFormatProperties2");
		}
		_vkGetPhysicalDeviceFormatProperties2KHR = _vkGetPhysicalDeviceFormatProperties2;
		if ((_vkGetPhysicalDeviceFormatProperties2KHR == null) && TryLoadFunc(dev, "vkGetPhysicalDeviceFormatProperties2KHR", out addr)) {
			_vkGetPhysicalDeviceFormatProperties2KHR = (delegate* unmanaged<VulkanHandle<VkPhysicalDevice>, VkFormat, VkFormatProperties2*, void>)addr;
		}
		if (version >= VkVersion.VK_VERSION_1_1) {
			_vkGetPhysicalDeviceImageFormatProperties2 = (delegate* unmanaged<VulkanHandle<VkPhysicalDevice>, VkPhysicalDeviceImageFormatInfo2*, VkImageFormatProperties2*, VkResult>)LoadFunc(dev, "vkGetPhysicalDeviceImageFormatProperties2");
		}
		_vkGetPhysicalDeviceImageFormatProperties2KHR = _vkGetPhysicalDeviceImageFormatProperties2;
		if ((_vkGetPhysicalDeviceImageFormatProperties2KHR == null) && TryLoadFunc(dev, "vkGetPhysicalDeviceImageFormatProperties2KHR", out addr)) {
			_vkGetPhysicalDeviceImageFormatProperties2KHR = (delegate* unmanaged<VulkanHandle<VkPhysicalDevice>, VkPhysicalDeviceImageFormatInfo2*, VkImageFormatProperties2*, VkResult>)addr;
		}
		if (version >= VkVersion.VK_VERSION_1_1) {
			_vkGetPhysicalDeviceQueueFamilyProperties2 = (delegate* unmanaged<VulkanHandle<VkPhysicalDevice>, uint*, VkQueueFamilyProperties2*, void>)LoadFunc(dev, "vkGetPhysicalDeviceQueueFamilyProperties2");
		}
		_vkGetPhysicalDeviceQueueFamilyProperties2KHR = _vkGetPhysicalDeviceQueueFamilyProperties2;
		if ((_vkGetPhysicalDeviceQueueFamilyProperties2KHR == null) && TryLoadFunc(dev, "vkGetPhysicalDeviceQueueFamilyProperties2KHR", out addr)) {
			_vkGetPhysicalDeviceQueueFamilyProperties2KHR = (delegate* unmanaged<VulkanHandle<VkPhysicalDevice>, uint*, VkQueueFamilyProperties2*, void>)addr;
		}
		if (version >= VkVersion.VK_VERSION_1_1) {
			_vkGetPhysicalDeviceMemoryProperties2 = (delegate* unmanaged<VulkanHandle<VkPhysicalDevice>, VkPhysicalDeviceMemoryProperties2*, void>)LoadFunc(dev, "vkGetPhysicalDeviceMemoryProperties2");
		}
		_vkGetPhysicalDeviceMemoryProperties2KHR = _vkGetPhysicalDeviceMemoryProperties2;
		if ((_vkGetPhysicalDeviceMemoryProperties2KHR == null) && TryLoadFunc(dev, "vkGetPhysicalDeviceMemoryProperties2KHR", out addr)) {
			_vkGetPhysicalDeviceMemoryProperties2KHR = (delegate* unmanaged<VulkanHandle<VkPhysicalDevice>, VkPhysicalDeviceMemoryProperties2*, void>)addr;
		}
		if (version >= VkVersion.VK_VERSION_1_1) {
			_vkGetPhysicalDeviceSparseImageFormatProperties2 = (delegate* unmanaged<VulkanHandle<VkPhysicalDevice>, VkPhysicalDeviceSparseImageFormatInfo2*, uint*, VkSparseImageFormatProperties2*, void>)LoadFunc(dev, "vkGetPhysicalDeviceSparseImageFormatProperties2");
		}
		_vkGetPhysicalDeviceSparseImageFormatProperties2KHR = _vkGetPhysicalDeviceSparseImageFormatProperties2;
		if ((_vkGetPhysicalDeviceSparseImageFormatProperties2KHR == null) && TryLoadFunc(dev, "vkGetPhysicalDeviceSparseImageFormatProperties2KHR", out addr)) {
			_vkGetPhysicalDeviceSparseImageFormatProperties2KHR = (delegate* unmanaged<VulkanHandle<VkPhysicalDevice>, VkPhysicalDeviceSparseImageFormatInfo2*, uint*, VkSparseImageFormatProperties2*, void>)addr;
		}
		if (version >= VkVersion.VK_VERSION_1_1) {
			_vkGetPhysicalDeviceExternalBufferProperties = (delegate* unmanaged<VulkanHandle<VkPhysicalDevice>, VkPhysicalDeviceExternalBufferInfo*, VkExternalBufferProperties*, void>)LoadFunc(dev, "vkGetPhysicalDeviceExternalBufferProperties");
		}
		_vkGetPhysicalDeviceExternalBufferPropertiesKHR = _vkGetPhysicalDeviceExternalBufferProperties;
		if ((_vkGetPhysicalDeviceExternalBufferPropertiesKHR == null) && TryLoadFunc(dev, "vkGetPhysicalDeviceExternalBufferPropertiesKHR", out addr)) {
			_vkGetPhysicalDeviceExternalBufferPropertiesKHR = (delegate* unmanaged<VulkanHandle<VkPhysicalDevice>, VkPhysicalDeviceExternalBufferInfo*, VkExternalBufferProperties*, void>)addr;
		}
		if (version >= VkVersion.VK_VERSION_1_1) {
			_vkGetPhysicalDeviceExternalSemaphoreProperties = (delegate* unmanaged<VulkanHandle<VkPhysicalDevice>, VkPhysicalDeviceExternalSemaphoreInfo*, VkExternalSemaphoreProperties*, void>)LoadFunc(dev, "vkGetPhysicalDeviceExternalSemaphoreProperties");
		}
		_vkGetPhysicalDeviceExternalSemaphorePropertiesKHR = _vkGetPhysicalDeviceExternalSemaphoreProperties;
		if ((_vkGetPhysicalDeviceExternalSemaphorePropertiesKHR == null) && TryLoadFunc(dev, "vkGetPhysicalDeviceExternalSemaphorePropertiesKHR", out addr)) {
			_vkGetPhysicalDeviceExternalSemaphorePropertiesKHR = (delegate* unmanaged<VulkanHandle<VkPhysicalDevice>, VkPhysicalDeviceExternalSemaphoreInfo*, VkExternalSemaphoreProperties*, void>)addr;
		}
		if (version >= VkVersion.VK_VERSION_1_1) {
			_vkGetPhysicalDeviceExternalFenceProperties = (delegate* unmanaged<VulkanHandle<VkPhysicalDevice>, VkPhysicalDeviceExternalFenceInfo*, VkExternalFenceProperties*, void>)LoadFunc(dev, "vkGetPhysicalDeviceExternalFenceProperties");
		}
		_vkGetPhysicalDeviceExternalFencePropertiesKHR = _vkGetPhysicalDeviceExternalFenceProperties;
		if ((_vkGetPhysicalDeviceExternalFencePropertiesKHR == null) && TryLoadFunc(dev, "vkGetPhysicalDeviceExternalFencePropertiesKHR", out addr)) {
			_vkGetPhysicalDeviceExternalFencePropertiesKHR = (delegate* unmanaged<VulkanHandle<VkPhysicalDevice>, VkPhysicalDeviceExternalFenceInfo*, VkExternalFenceProperties*, void>)addr;
		}
		if (TryLoadFunc(dev, "vkReleaseDisplayEXT", out addr)) {
			_vkReleaseDisplayEXT = (delegate* unmanaged<VulkanHandle<VkPhysicalDevice>, VulkanHandle<VkDisplayKHR>, VkResult>)addr;
		}
		if (TryLoadFunc(dev, "vkAcquireXlibDisplayEXT", out addr)) {
			_vkAcquireXlibDisplayEXT = (delegate* unmanaged<VulkanHandle<VkPhysicalDevice>, void*, VulkanHandle<VkDisplayKHR>, VkResult>)addr;
		}
		if (TryLoadFunc(dev, "vkGetRandROutputDisplayEXT", out addr)) {
			_vkGetRandROutputDisplayEXT = (delegate* unmanaged<VulkanHandle<VkPhysicalDevice>, void*, ulong, VulkanHandle<VkDisplayKHR>*, VkResult>)addr;
		}
		if (TryLoadFunc(dev, "vkGetPhysicalDeviceSurfaceCapabilities2EXT", out addr)) {
			_vkGetPhysicalDeviceSurfaceCapabilities2EXT = (delegate* unmanaged<VulkanHandle<VkPhysicalDevice>, VulkanHandle<VkSurfaceKHR>, VkSurfaceCapabilities2EXT*, VkResult>)addr;
		}
		if (version >= VkVersion.VK_VERSION_1_1) {
			_vkEnumeratePhysicalDeviceGroups = (delegate* unmanaged<VulkanHandle<VkInstance>, uint*, VkPhysicalDeviceGroupProperties*, VkResult>)LoadFunc(dev, "vkEnumeratePhysicalDeviceGroups");
		}
		_vkEnumeratePhysicalDeviceGroupsKHR = _vkEnumeratePhysicalDeviceGroups;
		if ((_vkEnumeratePhysicalDeviceGroupsKHR == null) && TryLoadFunc(dev, "vkEnumeratePhysicalDeviceGroupsKHR", out addr)) {
			_vkEnumeratePhysicalDeviceGroupsKHR = (delegate* unmanaged<VulkanHandle<VkInstance>, uint*, VkPhysicalDeviceGroupProperties*, VkResult>)addr;
		}
		if (TryLoadFunc(dev, "vkGetPhysicalDevicePresentRectanglesKHR", out addr)) {
			_vkGetPhysicalDevicePresentRectanglesKHR = (delegate* unmanaged<VulkanHandle<VkPhysicalDevice>, VulkanHandle<VkSurfaceKHR>, uint*, VkRect2D*, VkResult>)addr;
		}
		if (TryLoadFunc(dev, "vkCreateIOSSurfaceMVK", out addr)) {
			_vkCreateIOSSurfaceMVK = (delegate* unmanaged<VulkanHandle<VkInstance>, VkIOSSurfaceCreateInfoMVK*, VkAllocationCallbacks*, VulkanHandle<VkSurfaceKHR>*, VkResult>)addr;
		}
		if (TryLoadFunc(dev, "vkCreateMacOSSurfaceMVK", out addr)) {
			_vkCreateMacOSSurfaceMVK = (delegate* unmanaged<VulkanHandle<VkInstance>, VkMacOSSurfaceCreateInfoMVK*, VkAllocationCallbacks*, VulkanHandle<VkSurfaceKHR>*, VkResult>)addr;
		}
		if (TryLoadFunc(dev, "vkCreateMetalSurfaceEXT", out addr)) {
			_vkCreateMetalSurfaceEXT = (delegate* unmanaged<VulkanHandle<VkInstance>, VkMetalSurfaceCreateInfoEXT*, VkAllocationCallbacks*, VulkanHandle<VkSurfaceKHR>*, VkResult>)addr;
		}
		if (TryLoadFunc(dev, "vkGetPhysicalDeviceMultisamplePropertiesEXT", out addr)) {
			_vkGetPhysicalDeviceMultisamplePropertiesEXT = (delegate* unmanaged<VulkanHandle<VkPhysicalDevice>, VkSampleCountFlags, VkMultisamplePropertiesEXT*, void>)addr;
		}
		if (TryLoadFunc(dev, "vkGetPhysicalDeviceSurfaceCapabilities2KHR", out addr)) {
			_vkGetPhysicalDeviceSurfaceCapabilities2KHR = (delegate* unmanaged<VulkanHandle<VkPhysicalDevice>, VkPhysicalDeviceSurfaceInfo2KHR*, VkSurfaceCapabilities2KHR*, VkResult>)addr;
		}
		if (TryLoadFunc(dev, "vkGetPhysicalDeviceSurfaceFormats2KHR", out addr)) {
			_vkGetPhysicalDeviceSurfaceFormats2KHR = (delegate* unmanaged<VulkanHandle<VkPhysicalDevice>, VkPhysicalDeviceSurfaceInfo2KHR*, uint*, VkSurfaceFormat2KHR*, VkResult>)addr;
		}
		if (TryLoadFunc(dev, "vkGetPhysicalDeviceDisplayProperties2KHR", out addr)) {
			_vkGetPhysicalDeviceDisplayProperties2KHR = (delegate* unmanaged<VulkanHandle<VkPhysicalDevice>, uint*, VkDisplayProperties2KHR*, VkResult>)addr;
		}
		if (TryLoadFunc(dev, "vkGetPhysicalDeviceDisplayPlaneProperties2KHR", out addr)) {
			_vkGetPhysicalDeviceDisplayPlaneProperties2KHR = (delegate* unmanaged<VulkanHandle<VkPhysicalDevice>, uint*, VkDisplayPlaneProperties2KHR*, VkResult>)addr;
		}
		if (TryLoadFunc(dev, "vkGetDisplayModeProperties2KHR", out addr)) {
			_vkGetDisplayModeProperties2KHR = (delegate* unmanaged<VulkanHandle<VkPhysicalDevice>, VulkanHandle<VkDisplayKHR>, uint*, VkDisplayModeProperties2KHR*, VkResult>)addr;
		}
		if (TryLoadFunc(dev, "vkGetDisplayPlaneCapabilities2KHR", out addr)) {
			_vkGetDisplayPlaneCapabilities2KHR = (delegate* unmanaged<VulkanHandle<VkPhysicalDevice>, VkDisplayPlaneInfo2KHR*, VkDisplayPlaneCapabilities2KHR*, VkResult>)addr;
		}
		if (TryLoadFunc(dev, "vkGetPhysicalDeviceCalibrateableTimeDomainsEXT", out addr)) {
			_vkGetPhysicalDeviceCalibrateableTimeDomainsEXT = (delegate* unmanaged<VulkanHandle<VkPhysicalDevice>, uint*, VkTimeDomainEXT*, VkResult>)addr;
		}
		if (TryLoadFunc(dev, "vkCreateDebugUtilsMessengerEXT", out addr)) {
			_vkCreateDebugUtilsMessengerEXT = (delegate* unmanaged<VulkanHandle<VkInstance>, VkDebugUtilsMessengerCreateInfoEXT*, VkAllocationCallbacks*, VulkanHandle<VkDebugUtilsMessengerEXT>*, VkResult>)addr;
		}
		if (TryLoadFunc(dev, "vkDestroyDebugUtilsMessengerEXT", out addr)) {
			_vkDestroyDebugUtilsMessengerEXT = (delegate* unmanaged<VulkanHandle<VkInstance>, VulkanHandle<VkDebugUtilsMessengerEXT>, VkAllocationCallbacks*, void>)addr;
		}
		if (TryLoadFunc(dev, "vkSubmitDebugUtilsMessageEXT", out addr)) {
			_vkSubmitDebugUtilsMessageEXT = (delegate* unmanaged<VulkanHandle<VkInstance>, VkDebugUtilsMessageSeverityFlagsEXT, VkDebugUtilsMessageTypeFlagsEXT, VkDebugUtilsMessengerCallbackDataEXT*, void>)addr;
		}
		if (TryLoadFunc(dev, "vkGetPhysicalDeviceCooperativeMatrixPropertiesNV", out addr)) {
			_vkGetPhysicalDeviceCooperativeMatrixPropertiesNV = (delegate* unmanaged<VulkanHandle<VkPhysicalDevice>, uint*, VkCooperativeMatrixPropertiesNV*, VkResult>)addr;
		}
		if (TryLoadFunc(dev, "vkGetPhysicalDeviceSurfacePresentModes2EXT", out addr)) {
			_vkGetPhysicalDeviceSurfacePresentModes2EXT = (delegate* unmanaged<VulkanHandle<VkPhysicalDevice>, VkPhysicalDeviceSurfaceInfo2KHR*, uint*, VkPresentModeKHR*, VkResult>)addr;
		}
		if (TryLoadFunc(dev, "vkEnumeratePhysicalDeviceQueueFamilyPerformanceQueryCountersKHR", out addr)) {
			_vkEnumeratePhysicalDeviceQueueFamilyPerformanceQueryCountersKHR = (delegate* unmanaged<VulkanHandle<VkPhysicalDevice>, uint, uint*, VkPerformanceCounterKHR*, VkPerformanceCounterDescriptionKHR*, VkResult>)addr;
		}
		if (TryLoadFunc(dev, "vkGetPhysicalDeviceQueueFamilyPerformanceQueryPassesKHR", out addr)) {
			_vkGetPhysicalDeviceQueueFamilyPerformanceQueryPassesKHR = (delegate* unmanaged<VulkanHandle<VkPhysicalDevice>, VkQueryPoolPerformanceCreateInfoKHR*, uint*, void>)addr;
		}
		if (TryLoadFunc(dev, "vkCreateHeadlessSurfaceEXT", out addr)) {
			_vkCreateHeadlessSurfaceEXT = (delegate* unmanaged<VulkanHandle<VkInstance>, VkHeadlessSurfaceCreateInfoEXT*, VkAllocationCallbacks*, VulkanHandle<VkSurfaceKHR>*, VkResult>)addr;
		}
		if (TryLoadFunc(dev, "vkGetPhysicalDeviceSupportedFramebufferMixedSamplesCombinationsNV", out addr)) {
			_vkGetPhysicalDeviceSupportedFramebufferMixedSamplesCombinationsNV = (delegate* unmanaged<VulkanHandle<VkPhysicalDevice>, uint*, VkFramebufferMixedSamplesCombinationNV*, VkResult>)addr;
		}
		if (TryLoadFunc(dev, "vkGetPhysicalDeviceToolPropertiesEXT", out addr)) {
			_vkGetPhysicalDeviceToolPropertiesEXT = (delegate* unmanaged<VulkanHandle<VkPhysicalDevice>, uint*, VkPhysicalDeviceToolPropertiesEXT*, VkResult>)addr;
		}
		if (TryLoadFunc(dev, "vkGetPhysicalDeviceFragmentShadingRatesKHR", out addr)) {
			_vkGetPhysicalDeviceFragmentShadingRatesKHR = (delegate* unmanaged<VulkanHandle<VkPhysicalDevice>, uint*, VkPhysicalDeviceFragmentShadingRateKHR*, VkResult>)addr;
		}
	}

	static StaticFunctionTable()
	{
		_vkCreateInstance =
			(delegate* unmanaged<VkInstanceCreateInfo*, VkAllocationCallbacks*, VulkanHandle<VkInstance>*, VkResult>)VulkanLibrary.GetExport("vkCreateInstance").ToPointer();
		_vkGetDeviceProcAddr =
			(delegate* unmanaged<VulkanHandle<VkDevice>, byte*, delegate* unmanaged<void>>)VulkanLibrary.GetExport("vkGetDeviceProcAddr").ToPointer();
		_vkGetInstanceProcAddr =
			(delegate* unmanaged<VulkanHandle<VkInstance>, byte*, delegate* unmanaged<void>>)VulkanLibrary.GetExport("vkGetInstanceProcAddr").ToPointer();
		_vkEnumerateInstanceVersion =
			(delegate* unmanaged<uint*, VkResult>)VulkanLibrary.GetExport("vkEnumerateInstanceVersion").ToPointer();
		_vkEnumerateInstanceLayerProperties =
			(delegate* unmanaged<uint*, VkLayerProperties*, VkResult>)VulkanLibrary.GetExport("vkEnumerateInstanceLayerProperties").ToPointer();
		_vkEnumerateInstanceExtensionProperties =
			(delegate* unmanaged<byte*, uint*, VkExtensionProperties*, VkResult>)VulkanLibrary.GetExport("vkEnumerateInstanceExtensionProperties").ToPointer();
	}

}


} // namespace Vulkan

