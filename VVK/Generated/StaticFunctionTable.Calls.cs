/*
 * MIT License - Copyright(c) 2020 Sean Moss
 * This file is subject to the terms and conditions of the MIT License, the text of which can be found in the 'LICENSE'
 * file at the root of this repository, or online at <https://opensource.org/licenses/MIT>.
 */

/// This file was generated by VVKGen. Edits to this file will be lost on next generation.

using System;
using System.Runtime.InteropServices;
using System.Runtime.CompilerServices;

namespace Vulkan
{

public unsafe static partial class StaticFunctionTable
{
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static VkResult vkCreateInstance(VkInstanceCreateInfo* pCreateInfo, VkAllocationCallbacks* pAllocator, VulkanHandle<VkInstance>* pInstance)
	{
		return _vkCreateInstance(pCreateInfo, pAllocator, pInstance);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static delegate* unmanaged<void> vkGetDeviceProcAddr(VulkanHandle<VkDevice> device, byte* pName)
	{
		return _vkGetDeviceProcAddr(device, pName);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static delegate* unmanaged<void> vkGetInstanceProcAddr(VulkanHandle<VkInstance> instance, byte* pName)
	{
		return _vkGetInstanceProcAddr(instance, pName);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static VkResult vkEnumerateInstanceVersion(uint* pApiVersion)
	{
		if (_vkEnumerateInstanceVersion == null) throw new VVK.FunctionNotLoadedException("vkEnumerateInstanceVersion");
		return _vkEnumerateInstanceVersion(pApiVersion);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static VkResult vkEnumerateInstanceLayerProperties(uint* pPropertyCount, VkLayerProperties* pProperties)
	{
		return _vkEnumerateInstanceLayerProperties(pPropertyCount, pProperties);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static VkResult vkEnumerateInstanceExtensionProperties(byte* pLayerName, uint* pPropertyCount, VkExtensionProperties* pProperties)
	{
		return _vkEnumerateInstanceExtensionProperties(pLayerName, pPropertyCount, pProperties);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void vkDestroyInstance(VulkanHandle<VkInstance> instance, VkAllocationCallbacks* pAllocator)
	{
		if (_vkDestroyInstance == null) throw new VVK.FunctionNotLoadedException("vkDestroyInstance");
		_vkDestroyInstance(instance, pAllocator);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static VkResult vkEnumeratePhysicalDevices(VulkanHandle<VkInstance> instance, uint* pPhysicalDeviceCount, VulkanHandle<VkPhysicalDevice>* pPhysicalDevices)
	{
		if (_vkEnumeratePhysicalDevices == null) throw new VVK.FunctionNotLoadedException("vkEnumeratePhysicalDevices");
		return _vkEnumeratePhysicalDevices(instance, pPhysicalDeviceCount, pPhysicalDevices);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void vkGetPhysicalDeviceProperties(VulkanHandle<VkPhysicalDevice> physicalDevice, VkPhysicalDeviceProperties* pProperties)
	{
		if (_vkGetPhysicalDeviceProperties == null) throw new VVK.FunctionNotLoadedException("vkGetPhysicalDeviceProperties");
		_vkGetPhysicalDeviceProperties(physicalDevice, pProperties);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void vkGetPhysicalDeviceQueueFamilyProperties(VulkanHandle<VkPhysicalDevice> physicalDevice, uint* pQueueFamilyPropertyCount, VkQueueFamilyProperties* pQueueFamilyProperties)
	{
		if (_vkGetPhysicalDeviceQueueFamilyProperties == null) throw new VVK.FunctionNotLoadedException("vkGetPhysicalDeviceQueueFamilyProperties");
		_vkGetPhysicalDeviceQueueFamilyProperties(physicalDevice, pQueueFamilyPropertyCount, pQueueFamilyProperties);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void vkGetPhysicalDeviceMemoryProperties(VulkanHandle<VkPhysicalDevice> physicalDevice, VkPhysicalDeviceMemoryProperties* pMemoryProperties)
	{
		if (_vkGetPhysicalDeviceMemoryProperties == null) throw new VVK.FunctionNotLoadedException("vkGetPhysicalDeviceMemoryProperties");
		_vkGetPhysicalDeviceMemoryProperties(physicalDevice, pMemoryProperties);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void vkGetPhysicalDeviceFeatures(VulkanHandle<VkPhysicalDevice> physicalDevice, VkPhysicalDeviceFeatures* pFeatures)
	{
		if (_vkGetPhysicalDeviceFeatures == null) throw new VVK.FunctionNotLoadedException("vkGetPhysicalDeviceFeatures");
		_vkGetPhysicalDeviceFeatures(physicalDevice, pFeatures);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void vkGetPhysicalDeviceFormatProperties(VulkanHandle<VkPhysicalDevice> physicalDevice, VkFormat format, VkFormatProperties* pFormatProperties)
	{
		if (_vkGetPhysicalDeviceFormatProperties == null) throw new VVK.FunctionNotLoadedException("vkGetPhysicalDeviceFormatProperties");
		_vkGetPhysicalDeviceFormatProperties(physicalDevice, format, pFormatProperties);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static VkResult vkGetPhysicalDeviceImageFormatProperties(VulkanHandle<VkPhysicalDevice> physicalDevice, VkFormat format, VkImageType type, VkImageTiling tiling, VkImageUsageFlags usage, VkImageCreateFlags flags, VkImageFormatProperties* pImageFormatProperties)
	{
		if (_vkGetPhysicalDeviceImageFormatProperties == null) throw new VVK.FunctionNotLoadedException("vkGetPhysicalDeviceImageFormatProperties");
		return _vkGetPhysicalDeviceImageFormatProperties(physicalDevice, format, type, tiling, usage, flags, pImageFormatProperties);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static VkResult vkCreateDevice(VulkanHandle<VkPhysicalDevice> physicalDevice, VkDeviceCreateInfo* pCreateInfo, VkAllocationCallbacks* pAllocator, VulkanHandle<VkDevice>* pDevice)
	{
		if (_vkCreateDevice == null) throw new VVK.FunctionNotLoadedException("vkCreateDevice");
		return _vkCreateDevice(physicalDevice, pCreateInfo, pAllocator, pDevice);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static VkResult vkEnumerateDeviceLayerProperties(VulkanHandle<VkPhysicalDevice> physicalDevice, uint* pPropertyCount, VkLayerProperties* pProperties)
	{
		if (_vkEnumerateDeviceLayerProperties == null) throw new VVK.FunctionNotLoadedException("vkEnumerateDeviceLayerProperties");
		return _vkEnumerateDeviceLayerProperties(physicalDevice, pPropertyCount, pProperties);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static VkResult vkEnumerateDeviceExtensionProperties(VulkanHandle<VkPhysicalDevice> physicalDevice, byte* pLayerName, uint* pPropertyCount, VkExtensionProperties* pProperties)
	{
		if (_vkEnumerateDeviceExtensionProperties == null) throw new VVK.FunctionNotLoadedException("vkEnumerateDeviceExtensionProperties");
		return _vkEnumerateDeviceExtensionProperties(physicalDevice, pLayerName, pPropertyCount, pProperties);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void vkGetPhysicalDeviceSparseImageFormatProperties(VulkanHandle<VkPhysicalDevice> physicalDevice, VkFormat format, VkImageType type, VkSampleCountFlags samples, VkImageUsageFlags usage, VkImageTiling tiling, uint* pPropertyCount, VkSparseImageFormatProperties* pProperties)
	{
		if (_vkGetPhysicalDeviceSparseImageFormatProperties == null) throw new VVK.FunctionNotLoadedException("vkGetPhysicalDeviceSparseImageFormatProperties");
		_vkGetPhysicalDeviceSparseImageFormatProperties(physicalDevice, format, type, samples, usage, tiling, pPropertyCount, pProperties);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static VkResult vkCreateAndroidSurfaceKHR(VulkanHandle<VkInstance> instance, VkAndroidSurfaceCreateInfoKHR* pCreateInfo, VkAllocationCallbacks* pAllocator, VulkanHandle<VkSurfaceKHR>* pSurface)
	{
		if (_vkCreateAndroidSurfaceKHR == null) throw new VVK.FunctionNotLoadedException("vkCreateAndroidSurfaceKHR");
		return _vkCreateAndroidSurfaceKHR(instance, pCreateInfo, pAllocator, pSurface);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static VkResult vkGetPhysicalDeviceDisplayPropertiesKHR(VulkanHandle<VkPhysicalDevice> physicalDevice, uint* pPropertyCount, VkDisplayPropertiesKHR* pProperties)
	{
		if (_vkGetPhysicalDeviceDisplayPropertiesKHR == null) throw new VVK.FunctionNotLoadedException("vkGetPhysicalDeviceDisplayPropertiesKHR");
		return _vkGetPhysicalDeviceDisplayPropertiesKHR(physicalDevice, pPropertyCount, pProperties);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static VkResult vkGetPhysicalDeviceDisplayPlanePropertiesKHR(VulkanHandle<VkPhysicalDevice> physicalDevice, uint* pPropertyCount, VkDisplayPlanePropertiesKHR* pProperties)
	{
		if (_vkGetPhysicalDeviceDisplayPlanePropertiesKHR == null) throw new VVK.FunctionNotLoadedException("vkGetPhysicalDeviceDisplayPlanePropertiesKHR");
		return _vkGetPhysicalDeviceDisplayPlanePropertiesKHR(physicalDevice, pPropertyCount, pProperties);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static VkResult vkGetDisplayPlaneSupportedDisplaysKHR(VulkanHandle<VkPhysicalDevice> physicalDevice, uint planeIndex, uint* pDisplayCount, VulkanHandle<VkDisplayKHR>* pDisplays)
	{
		if (_vkGetDisplayPlaneSupportedDisplaysKHR == null) throw new VVK.FunctionNotLoadedException("vkGetDisplayPlaneSupportedDisplaysKHR");
		return _vkGetDisplayPlaneSupportedDisplaysKHR(physicalDevice, planeIndex, pDisplayCount, pDisplays);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static VkResult vkGetDisplayModePropertiesKHR(VulkanHandle<VkPhysicalDevice> physicalDevice, VulkanHandle<VkDisplayKHR> display, uint* pPropertyCount, VkDisplayModePropertiesKHR* pProperties)
	{
		if (_vkGetDisplayModePropertiesKHR == null) throw new VVK.FunctionNotLoadedException("vkGetDisplayModePropertiesKHR");
		return _vkGetDisplayModePropertiesKHR(physicalDevice, display, pPropertyCount, pProperties);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static VkResult vkCreateDisplayModeKHR(VulkanHandle<VkPhysicalDevice> physicalDevice, VulkanHandle<VkDisplayKHR> display, VkDisplayModeCreateInfoKHR* pCreateInfo, VkAllocationCallbacks* pAllocator, VulkanHandle<VkDisplayModeKHR>* pMode)
	{
		if (_vkCreateDisplayModeKHR == null) throw new VVK.FunctionNotLoadedException("vkCreateDisplayModeKHR");
		return _vkCreateDisplayModeKHR(physicalDevice, display, pCreateInfo, pAllocator, pMode);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static VkResult vkGetDisplayPlaneCapabilitiesKHR(VulkanHandle<VkPhysicalDevice> physicalDevice, VulkanHandle<VkDisplayModeKHR> mode, uint planeIndex, VkDisplayPlaneCapabilitiesKHR* pCapabilities)
	{
		if (_vkGetDisplayPlaneCapabilitiesKHR == null) throw new VVK.FunctionNotLoadedException("vkGetDisplayPlaneCapabilitiesKHR");
		return _vkGetDisplayPlaneCapabilitiesKHR(physicalDevice, mode, planeIndex, pCapabilities);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static VkResult vkCreateDisplayPlaneSurfaceKHR(VulkanHandle<VkInstance> instance, VkDisplaySurfaceCreateInfoKHR* pCreateInfo, VkAllocationCallbacks* pAllocator, VulkanHandle<VkSurfaceKHR>* pSurface)
	{
		if (_vkCreateDisplayPlaneSurfaceKHR == null) throw new VVK.FunctionNotLoadedException("vkCreateDisplayPlaneSurfaceKHR");
		return _vkCreateDisplayPlaneSurfaceKHR(instance, pCreateInfo, pAllocator, pSurface);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void vkDestroySurfaceKHR(VulkanHandle<VkInstance> instance, VulkanHandle<VkSurfaceKHR> surface, VkAllocationCallbacks* pAllocator)
	{
		if (_vkDestroySurfaceKHR == null) throw new VVK.FunctionNotLoadedException("vkDestroySurfaceKHR");
		_vkDestroySurfaceKHR(instance, surface, pAllocator);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static VkResult vkGetPhysicalDeviceSurfaceSupportKHR(VulkanHandle<VkPhysicalDevice> physicalDevice, uint queueFamilyIndex, VulkanHandle<VkSurfaceKHR> surface, VkBool32* pSupported)
	{
		if (_vkGetPhysicalDeviceSurfaceSupportKHR == null) throw new VVK.FunctionNotLoadedException("vkGetPhysicalDeviceSurfaceSupportKHR");
		return _vkGetPhysicalDeviceSurfaceSupportKHR(physicalDevice, queueFamilyIndex, surface, pSupported);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static VkResult vkGetPhysicalDeviceSurfaceCapabilitiesKHR(VulkanHandle<VkPhysicalDevice> physicalDevice, VulkanHandle<VkSurfaceKHR> surface, VkSurfaceCapabilitiesKHR* pSurfaceCapabilities)
	{
		if (_vkGetPhysicalDeviceSurfaceCapabilitiesKHR == null) throw new VVK.FunctionNotLoadedException("vkGetPhysicalDeviceSurfaceCapabilitiesKHR");
		return _vkGetPhysicalDeviceSurfaceCapabilitiesKHR(physicalDevice, surface, pSurfaceCapabilities);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static VkResult vkGetPhysicalDeviceSurfaceFormatsKHR(VulkanHandle<VkPhysicalDevice> physicalDevice, VulkanHandle<VkSurfaceKHR> surface, uint* pSurfaceFormatCount, VkSurfaceFormatKHR* pSurfaceFormats)
	{
		if (_vkGetPhysicalDeviceSurfaceFormatsKHR == null) throw new VVK.FunctionNotLoadedException("vkGetPhysicalDeviceSurfaceFormatsKHR");
		return _vkGetPhysicalDeviceSurfaceFormatsKHR(physicalDevice, surface, pSurfaceFormatCount, pSurfaceFormats);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static VkResult vkGetPhysicalDeviceSurfacePresentModesKHR(VulkanHandle<VkPhysicalDevice> physicalDevice, VulkanHandle<VkSurfaceKHR> surface, uint* pPresentModeCount, VkPresentModeKHR* pPresentModes)
	{
		if (_vkGetPhysicalDeviceSurfacePresentModesKHR == null) throw new VVK.FunctionNotLoadedException("vkGetPhysicalDeviceSurfacePresentModesKHR");
		return _vkGetPhysicalDeviceSurfacePresentModesKHR(physicalDevice, surface, pPresentModeCount, pPresentModes);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static VkResult vkCreateViSurfaceNN(VulkanHandle<VkInstance> instance, VkViSurfaceCreateInfoNN* pCreateInfo, VkAllocationCallbacks* pAllocator, VulkanHandle<VkSurfaceKHR>* pSurface)
	{
		if (_vkCreateViSurfaceNN == null) throw new VVK.FunctionNotLoadedException("vkCreateViSurfaceNN");
		return _vkCreateViSurfaceNN(instance, pCreateInfo, pAllocator, pSurface);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static VkResult vkCreateWaylandSurfaceKHR(VulkanHandle<VkInstance> instance, VkWaylandSurfaceCreateInfoKHR* pCreateInfo, VkAllocationCallbacks* pAllocator, VulkanHandle<VkSurfaceKHR>* pSurface)
	{
		if (_vkCreateWaylandSurfaceKHR == null) throw new VVK.FunctionNotLoadedException("vkCreateWaylandSurfaceKHR");
		return _vkCreateWaylandSurfaceKHR(instance, pCreateInfo, pAllocator, pSurface);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static VkBool32 vkGetPhysicalDeviceWaylandPresentationSupportKHR(VulkanHandle<VkPhysicalDevice> physicalDevice, uint queueFamilyIndex, void* display)
	{
		if (_vkGetPhysicalDeviceWaylandPresentationSupportKHR == null) throw new VVK.FunctionNotLoadedException("vkGetPhysicalDeviceWaylandPresentationSupportKHR");
		return _vkGetPhysicalDeviceWaylandPresentationSupportKHR(physicalDevice, queueFamilyIndex, display);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static VkResult vkCreateWin32SurfaceKHR(VulkanHandle<VkInstance> instance, VkWin32SurfaceCreateInfoKHR* pCreateInfo, VkAllocationCallbacks* pAllocator, VulkanHandle<VkSurfaceKHR>* pSurface)
	{
		if (_vkCreateWin32SurfaceKHR == null) throw new VVK.FunctionNotLoadedException("vkCreateWin32SurfaceKHR");
		return _vkCreateWin32SurfaceKHR(instance, pCreateInfo, pAllocator, pSurface);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static VkBool32 vkGetPhysicalDeviceWin32PresentationSupportKHR(VulkanHandle<VkPhysicalDevice> physicalDevice, uint queueFamilyIndex)
	{
		if (_vkGetPhysicalDeviceWin32PresentationSupportKHR == null) throw new VVK.FunctionNotLoadedException("vkGetPhysicalDeviceWin32PresentationSupportKHR");
		return _vkGetPhysicalDeviceWin32PresentationSupportKHR(physicalDevice, queueFamilyIndex);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static VkResult vkCreateXlibSurfaceKHR(VulkanHandle<VkInstance> instance, VkXlibSurfaceCreateInfoKHR* pCreateInfo, VkAllocationCallbacks* pAllocator, VulkanHandle<VkSurfaceKHR>* pSurface)
	{
		if (_vkCreateXlibSurfaceKHR == null) throw new VVK.FunctionNotLoadedException("vkCreateXlibSurfaceKHR");
		return _vkCreateXlibSurfaceKHR(instance, pCreateInfo, pAllocator, pSurface);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static VkBool32 vkGetPhysicalDeviceXlibPresentationSupportKHR(VulkanHandle<VkPhysicalDevice> physicalDevice, uint queueFamilyIndex, void* dpy, ulong visualID)
	{
		if (_vkGetPhysicalDeviceXlibPresentationSupportKHR == null) throw new VVK.FunctionNotLoadedException("vkGetPhysicalDeviceXlibPresentationSupportKHR");
		return _vkGetPhysicalDeviceXlibPresentationSupportKHR(physicalDevice, queueFamilyIndex, dpy, visualID);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static VkResult vkCreateXcbSurfaceKHR(VulkanHandle<VkInstance> instance, VkXcbSurfaceCreateInfoKHR* pCreateInfo, VkAllocationCallbacks* pAllocator, VulkanHandle<VkSurfaceKHR>* pSurface)
	{
		if (_vkCreateXcbSurfaceKHR == null) throw new VVK.FunctionNotLoadedException("vkCreateXcbSurfaceKHR");
		return _vkCreateXcbSurfaceKHR(instance, pCreateInfo, pAllocator, pSurface);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static VkBool32 vkGetPhysicalDeviceXcbPresentationSupportKHR(VulkanHandle<VkPhysicalDevice> physicalDevice, uint queueFamilyIndex, void* connection, uint visual_id)
	{
		if (_vkGetPhysicalDeviceXcbPresentationSupportKHR == null) throw new VVK.FunctionNotLoadedException("vkGetPhysicalDeviceXcbPresentationSupportKHR");
		return _vkGetPhysicalDeviceXcbPresentationSupportKHR(physicalDevice, queueFamilyIndex, connection, visual_id);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static VkResult vkCreateDirectFBSurfaceEXT(VulkanHandle<VkInstance> instance, VkDirectFBSurfaceCreateInfoEXT* pCreateInfo, VkAllocationCallbacks* pAllocator, VulkanHandle<VkSurfaceKHR>* pSurface)
	{
		if (_vkCreateDirectFBSurfaceEXT == null) throw new VVK.FunctionNotLoadedException("vkCreateDirectFBSurfaceEXT");
		return _vkCreateDirectFBSurfaceEXT(instance, pCreateInfo, pAllocator, pSurface);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static VkBool32 vkGetPhysicalDeviceDirectFBPresentationSupportEXT(VulkanHandle<VkPhysicalDevice> physicalDevice, uint queueFamilyIndex, void* dfb)
	{
		if (_vkGetPhysicalDeviceDirectFBPresentationSupportEXT == null) throw new VVK.FunctionNotLoadedException("vkGetPhysicalDeviceDirectFBPresentationSupportEXT");
		return _vkGetPhysicalDeviceDirectFBPresentationSupportEXT(physicalDevice, queueFamilyIndex, dfb);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static VkResult vkCreateImagePipeSurfaceFUCHSIA(VulkanHandle<VkInstance> instance, VkImagePipeSurfaceCreateInfoFUCHSIA* pCreateInfo, VkAllocationCallbacks* pAllocator, VulkanHandle<VkSurfaceKHR>* pSurface)
	{
		if (_vkCreateImagePipeSurfaceFUCHSIA == null) throw new VVK.FunctionNotLoadedException("vkCreateImagePipeSurfaceFUCHSIA");
		return _vkCreateImagePipeSurfaceFUCHSIA(instance, pCreateInfo, pAllocator, pSurface);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static VkResult vkCreateStreamDescriptorSurfaceGGP(VulkanHandle<VkInstance> instance, VkStreamDescriptorSurfaceCreateInfoGGP* pCreateInfo, VkAllocationCallbacks* pAllocator, VulkanHandle<VkSurfaceKHR>* pSurface)
	{
		if (_vkCreateStreamDescriptorSurfaceGGP == null) throw new VVK.FunctionNotLoadedException("vkCreateStreamDescriptorSurfaceGGP");
		return _vkCreateStreamDescriptorSurfaceGGP(instance, pCreateInfo, pAllocator, pSurface);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static VkResult vkCreateDebugReportCallbackEXT(VulkanHandle<VkInstance> instance, VkDebugReportCallbackCreateInfoEXT* pCreateInfo, VkAllocationCallbacks* pAllocator, VulkanHandle<VkDebugReportCallbackEXT>* pCallback)
	{
		if (_vkCreateDebugReportCallbackEXT == null) throw new VVK.FunctionNotLoadedException("vkCreateDebugReportCallbackEXT");
		return _vkCreateDebugReportCallbackEXT(instance, pCreateInfo, pAllocator, pCallback);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void vkDestroyDebugReportCallbackEXT(VulkanHandle<VkInstance> instance, VulkanHandle<VkDebugReportCallbackEXT> callback, VkAllocationCallbacks* pAllocator)
	{
		if (_vkDestroyDebugReportCallbackEXT == null) throw new VVK.FunctionNotLoadedException("vkDestroyDebugReportCallbackEXT");
		_vkDestroyDebugReportCallbackEXT(instance, callback, pAllocator);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void vkDebugReportMessageEXT(VulkanHandle<VkInstance> instance, VkDebugReportFlagsEXT flags, VkDebugReportObjectTypeEXT objectType, ulong @object, ulong location, int messageCode, byte* pLayerPrefix, byte* pMessage)
	{
		if (_vkDebugReportMessageEXT == null) throw new VVK.FunctionNotLoadedException("vkDebugReportMessageEXT");
		_vkDebugReportMessageEXT(instance, flags, objectType, @object, location, messageCode, pLayerPrefix, pMessage);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static VkResult vkGetPhysicalDeviceExternalImageFormatPropertiesNV(VulkanHandle<VkPhysicalDevice> physicalDevice, VkFormat format, VkImageType type, VkImageTiling tiling, VkImageUsageFlags usage, VkImageCreateFlags flags, VkExternalMemoryHandleTypeFlagsNV externalHandleType, VkExternalImageFormatPropertiesNV* pExternalImageFormatProperties)
	{
		if (_vkGetPhysicalDeviceExternalImageFormatPropertiesNV == null) throw new VVK.FunctionNotLoadedException("vkGetPhysicalDeviceExternalImageFormatPropertiesNV");
		return _vkGetPhysicalDeviceExternalImageFormatPropertiesNV(physicalDevice, format, type, tiling, usage, flags, externalHandleType, pExternalImageFormatProperties);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void vkGetPhysicalDeviceFeatures2(VulkanHandle<VkPhysicalDevice> physicalDevice, VkPhysicalDeviceFeatures2* pFeatures)
	{
		if (_vkGetPhysicalDeviceFeatures2 == null) throw new VVK.FunctionNotLoadedException("vkGetPhysicalDeviceFeatures2");
		_vkGetPhysicalDeviceFeatures2(physicalDevice, pFeatures);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void vkGetPhysicalDeviceFeatures2KHR(VulkanHandle<VkPhysicalDevice> physicalDevice, VkPhysicalDeviceFeatures2* pFeatures)
	{
		if (_vkGetPhysicalDeviceFeatures2KHR == null) throw new VVK.FunctionNotLoadedException("vkGetPhysicalDeviceFeatures2KHR");
		_vkGetPhysicalDeviceFeatures2KHR(physicalDevice, pFeatures);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void vkGetPhysicalDeviceProperties2(VulkanHandle<VkPhysicalDevice> physicalDevice, VkPhysicalDeviceProperties2* pProperties)
	{
		if (_vkGetPhysicalDeviceProperties2 == null) throw new VVK.FunctionNotLoadedException("vkGetPhysicalDeviceProperties2");
		_vkGetPhysicalDeviceProperties2(physicalDevice, pProperties);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void vkGetPhysicalDeviceProperties2KHR(VulkanHandle<VkPhysicalDevice> physicalDevice, VkPhysicalDeviceProperties2* pProperties)
	{
		if (_vkGetPhysicalDeviceProperties2KHR == null) throw new VVK.FunctionNotLoadedException("vkGetPhysicalDeviceProperties2KHR");
		_vkGetPhysicalDeviceProperties2KHR(physicalDevice, pProperties);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void vkGetPhysicalDeviceFormatProperties2(VulkanHandle<VkPhysicalDevice> physicalDevice, VkFormat format, VkFormatProperties2* pFormatProperties)
	{
		if (_vkGetPhysicalDeviceFormatProperties2 == null) throw new VVK.FunctionNotLoadedException("vkGetPhysicalDeviceFormatProperties2");
		_vkGetPhysicalDeviceFormatProperties2(physicalDevice, format, pFormatProperties);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void vkGetPhysicalDeviceFormatProperties2KHR(VulkanHandle<VkPhysicalDevice> physicalDevice, VkFormat format, VkFormatProperties2* pFormatProperties)
	{
		if (_vkGetPhysicalDeviceFormatProperties2KHR == null) throw new VVK.FunctionNotLoadedException("vkGetPhysicalDeviceFormatProperties2KHR");
		_vkGetPhysicalDeviceFormatProperties2KHR(physicalDevice, format, pFormatProperties);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static VkResult vkGetPhysicalDeviceImageFormatProperties2(VulkanHandle<VkPhysicalDevice> physicalDevice, VkPhysicalDeviceImageFormatInfo2* pImageFormatInfo, VkImageFormatProperties2* pImageFormatProperties)
	{
		if (_vkGetPhysicalDeviceImageFormatProperties2 == null) throw new VVK.FunctionNotLoadedException("vkGetPhysicalDeviceImageFormatProperties2");
		return _vkGetPhysicalDeviceImageFormatProperties2(physicalDevice, pImageFormatInfo, pImageFormatProperties);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static VkResult vkGetPhysicalDeviceImageFormatProperties2KHR(VulkanHandle<VkPhysicalDevice> physicalDevice, VkPhysicalDeviceImageFormatInfo2* pImageFormatInfo, VkImageFormatProperties2* pImageFormatProperties)
	{
		if (_vkGetPhysicalDeviceImageFormatProperties2KHR == null) throw new VVK.FunctionNotLoadedException("vkGetPhysicalDeviceImageFormatProperties2KHR");
		return _vkGetPhysicalDeviceImageFormatProperties2KHR(physicalDevice, pImageFormatInfo, pImageFormatProperties);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void vkGetPhysicalDeviceQueueFamilyProperties2(VulkanHandle<VkPhysicalDevice> physicalDevice, uint* pQueueFamilyPropertyCount, VkQueueFamilyProperties2* pQueueFamilyProperties)
	{
		if (_vkGetPhysicalDeviceQueueFamilyProperties2 == null) throw new VVK.FunctionNotLoadedException("vkGetPhysicalDeviceQueueFamilyProperties2");
		_vkGetPhysicalDeviceQueueFamilyProperties2(physicalDevice, pQueueFamilyPropertyCount, pQueueFamilyProperties);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void vkGetPhysicalDeviceQueueFamilyProperties2KHR(VulkanHandle<VkPhysicalDevice> physicalDevice, uint* pQueueFamilyPropertyCount, VkQueueFamilyProperties2* pQueueFamilyProperties)
	{
		if (_vkGetPhysicalDeviceQueueFamilyProperties2KHR == null) throw new VVK.FunctionNotLoadedException("vkGetPhysicalDeviceQueueFamilyProperties2KHR");
		_vkGetPhysicalDeviceQueueFamilyProperties2KHR(physicalDevice, pQueueFamilyPropertyCount, pQueueFamilyProperties);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void vkGetPhysicalDeviceMemoryProperties2(VulkanHandle<VkPhysicalDevice> physicalDevice, VkPhysicalDeviceMemoryProperties2* pMemoryProperties)
	{
		if (_vkGetPhysicalDeviceMemoryProperties2 == null) throw new VVK.FunctionNotLoadedException("vkGetPhysicalDeviceMemoryProperties2");
		_vkGetPhysicalDeviceMemoryProperties2(physicalDevice, pMemoryProperties);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void vkGetPhysicalDeviceMemoryProperties2KHR(VulkanHandle<VkPhysicalDevice> physicalDevice, VkPhysicalDeviceMemoryProperties2* pMemoryProperties)
	{
		if (_vkGetPhysicalDeviceMemoryProperties2KHR == null) throw new VVK.FunctionNotLoadedException("vkGetPhysicalDeviceMemoryProperties2KHR");
		_vkGetPhysicalDeviceMemoryProperties2KHR(physicalDevice, pMemoryProperties);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void vkGetPhysicalDeviceSparseImageFormatProperties2(VulkanHandle<VkPhysicalDevice> physicalDevice, VkPhysicalDeviceSparseImageFormatInfo2* pFormatInfo, uint* pPropertyCount, VkSparseImageFormatProperties2* pProperties)
	{
		if (_vkGetPhysicalDeviceSparseImageFormatProperties2 == null) throw new VVK.FunctionNotLoadedException("vkGetPhysicalDeviceSparseImageFormatProperties2");
		_vkGetPhysicalDeviceSparseImageFormatProperties2(physicalDevice, pFormatInfo, pPropertyCount, pProperties);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void vkGetPhysicalDeviceSparseImageFormatProperties2KHR(VulkanHandle<VkPhysicalDevice> physicalDevice, VkPhysicalDeviceSparseImageFormatInfo2* pFormatInfo, uint* pPropertyCount, VkSparseImageFormatProperties2* pProperties)
	{
		if (_vkGetPhysicalDeviceSparseImageFormatProperties2KHR == null) throw new VVK.FunctionNotLoadedException("vkGetPhysicalDeviceSparseImageFormatProperties2KHR");
		_vkGetPhysicalDeviceSparseImageFormatProperties2KHR(physicalDevice, pFormatInfo, pPropertyCount, pProperties);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void vkGetPhysicalDeviceExternalBufferProperties(VulkanHandle<VkPhysicalDevice> physicalDevice, VkPhysicalDeviceExternalBufferInfo* pExternalBufferInfo, VkExternalBufferProperties* pExternalBufferProperties)
	{
		if (_vkGetPhysicalDeviceExternalBufferProperties == null) throw new VVK.FunctionNotLoadedException("vkGetPhysicalDeviceExternalBufferProperties");
		_vkGetPhysicalDeviceExternalBufferProperties(physicalDevice, pExternalBufferInfo, pExternalBufferProperties);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void vkGetPhysicalDeviceExternalBufferPropertiesKHR(VulkanHandle<VkPhysicalDevice> physicalDevice, VkPhysicalDeviceExternalBufferInfo* pExternalBufferInfo, VkExternalBufferProperties* pExternalBufferProperties)
	{
		if (_vkGetPhysicalDeviceExternalBufferPropertiesKHR == null) throw new VVK.FunctionNotLoadedException("vkGetPhysicalDeviceExternalBufferPropertiesKHR");
		_vkGetPhysicalDeviceExternalBufferPropertiesKHR(physicalDevice, pExternalBufferInfo, pExternalBufferProperties);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void vkGetPhysicalDeviceExternalSemaphoreProperties(VulkanHandle<VkPhysicalDevice> physicalDevice, VkPhysicalDeviceExternalSemaphoreInfo* pExternalSemaphoreInfo, VkExternalSemaphoreProperties* pExternalSemaphoreProperties)
	{
		if (_vkGetPhysicalDeviceExternalSemaphoreProperties == null) throw new VVK.FunctionNotLoadedException("vkGetPhysicalDeviceExternalSemaphoreProperties");
		_vkGetPhysicalDeviceExternalSemaphoreProperties(physicalDevice, pExternalSemaphoreInfo, pExternalSemaphoreProperties);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void vkGetPhysicalDeviceExternalSemaphorePropertiesKHR(VulkanHandle<VkPhysicalDevice> physicalDevice, VkPhysicalDeviceExternalSemaphoreInfo* pExternalSemaphoreInfo, VkExternalSemaphoreProperties* pExternalSemaphoreProperties)
	{
		if (_vkGetPhysicalDeviceExternalSemaphorePropertiesKHR == null) throw new VVK.FunctionNotLoadedException("vkGetPhysicalDeviceExternalSemaphorePropertiesKHR");
		_vkGetPhysicalDeviceExternalSemaphorePropertiesKHR(physicalDevice, pExternalSemaphoreInfo, pExternalSemaphoreProperties);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void vkGetPhysicalDeviceExternalFenceProperties(VulkanHandle<VkPhysicalDevice> physicalDevice, VkPhysicalDeviceExternalFenceInfo* pExternalFenceInfo, VkExternalFenceProperties* pExternalFenceProperties)
	{
		if (_vkGetPhysicalDeviceExternalFenceProperties == null) throw new VVK.FunctionNotLoadedException("vkGetPhysicalDeviceExternalFenceProperties");
		_vkGetPhysicalDeviceExternalFenceProperties(physicalDevice, pExternalFenceInfo, pExternalFenceProperties);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void vkGetPhysicalDeviceExternalFencePropertiesKHR(VulkanHandle<VkPhysicalDevice> physicalDevice, VkPhysicalDeviceExternalFenceInfo* pExternalFenceInfo, VkExternalFenceProperties* pExternalFenceProperties)
	{
		if (_vkGetPhysicalDeviceExternalFencePropertiesKHR == null) throw new VVK.FunctionNotLoadedException("vkGetPhysicalDeviceExternalFencePropertiesKHR");
		_vkGetPhysicalDeviceExternalFencePropertiesKHR(physicalDevice, pExternalFenceInfo, pExternalFenceProperties);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static VkResult vkReleaseDisplayEXT(VulkanHandle<VkPhysicalDevice> physicalDevice, VulkanHandle<VkDisplayKHR> display)
	{
		if (_vkReleaseDisplayEXT == null) throw new VVK.FunctionNotLoadedException("vkReleaseDisplayEXT");
		return _vkReleaseDisplayEXT(physicalDevice, display);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static VkResult vkAcquireXlibDisplayEXT(VulkanHandle<VkPhysicalDevice> physicalDevice, void* dpy, VulkanHandle<VkDisplayKHR> display)
	{
		if (_vkAcquireXlibDisplayEXT == null) throw new VVK.FunctionNotLoadedException("vkAcquireXlibDisplayEXT");
		return _vkAcquireXlibDisplayEXT(physicalDevice, dpy, display);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static VkResult vkGetRandROutputDisplayEXT(VulkanHandle<VkPhysicalDevice> physicalDevice, void* dpy, ulong rrOutput, VulkanHandle<VkDisplayKHR>* pDisplay)
	{
		if (_vkGetRandROutputDisplayEXT == null) throw new VVK.FunctionNotLoadedException("vkGetRandROutputDisplayEXT");
		return _vkGetRandROutputDisplayEXT(physicalDevice, dpy, rrOutput, pDisplay);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static VkResult vkGetPhysicalDeviceSurfaceCapabilities2EXT(VulkanHandle<VkPhysicalDevice> physicalDevice, VulkanHandle<VkSurfaceKHR> surface, VkSurfaceCapabilities2EXT* pSurfaceCapabilities)
	{
		if (_vkGetPhysicalDeviceSurfaceCapabilities2EXT == null) throw new VVK.FunctionNotLoadedException("vkGetPhysicalDeviceSurfaceCapabilities2EXT");
		return _vkGetPhysicalDeviceSurfaceCapabilities2EXT(physicalDevice, surface, pSurfaceCapabilities);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static VkResult vkEnumeratePhysicalDeviceGroups(VulkanHandle<VkInstance> instance, uint* pPhysicalDeviceGroupCount, VkPhysicalDeviceGroupProperties* pPhysicalDeviceGroupProperties)
	{
		if (_vkEnumeratePhysicalDeviceGroups == null) throw new VVK.FunctionNotLoadedException("vkEnumeratePhysicalDeviceGroups");
		return _vkEnumeratePhysicalDeviceGroups(instance, pPhysicalDeviceGroupCount, pPhysicalDeviceGroupProperties);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static VkResult vkEnumeratePhysicalDeviceGroupsKHR(VulkanHandle<VkInstance> instance, uint* pPhysicalDeviceGroupCount, VkPhysicalDeviceGroupProperties* pPhysicalDeviceGroupProperties)
	{
		if (_vkEnumeratePhysicalDeviceGroupsKHR == null) throw new VVK.FunctionNotLoadedException("vkEnumeratePhysicalDeviceGroupsKHR");
		return _vkEnumeratePhysicalDeviceGroupsKHR(instance, pPhysicalDeviceGroupCount, pPhysicalDeviceGroupProperties);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static VkResult vkGetPhysicalDevicePresentRectanglesKHR(VulkanHandle<VkPhysicalDevice> physicalDevice, VulkanHandle<VkSurfaceKHR> surface, uint* pRectCount, VkRect2D* pRects)
	{
		if (_vkGetPhysicalDevicePresentRectanglesKHR == null) throw new VVK.FunctionNotLoadedException("vkGetPhysicalDevicePresentRectanglesKHR");
		return _vkGetPhysicalDevicePresentRectanglesKHR(physicalDevice, surface, pRectCount, pRects);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static VkResult vkCreateIOSSurfaceMVK(VulkanHandle<VkInstance> instance, VkIOSSurfaceCreateInfoMVK* pCreateInfo, VkAllocationCallbacks* pAllocator, VulkanHandle<VkSurfaceKHR>* pSurface)
	{
		if (_vkCreateIOSSurfaceMVK == null) throw new VVK.FunctionNotLoadedException("vkCreateIOSSurfaceMVK");
		return _vkCreateIOSSurfaceMVK(instance, pCreateInfo, pAllocator, pSurface);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static VkResult vkCreateMacOSSurfaceMVK(VulkanHandle<VkInstance> instance, VkMacOSSurfaceCreateInfoMVK* pCreateInfo, VkAllocationCallbacks* pAllocator, VulkanHandle<VkSurfaceKHR>* pSurface)
	{
		if (_vkCreateMacOSSurfaceMVK == null) throw new VVK.FunctionNotLoadedException("vkCreateMacOSSurfaceMVK");
		return _vkCreateMacOSSurfaceMVK(instance, pCreateInfo, pAllocator, pSurface);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static VkResult vkCreateMetalSurfaceEXT(VulkanHandle<VkInstance> instance, VkMetalSurfaceCreateInfoEXT* pCreateInfo, VkAllocationCallbacks* pAllocator, VulkanHandle<VkSurfaceKHR>* pSurface)
	{
		if (_vkCreateMetalSurfaceEXT == null) throw new VVK.FunctionNotLoadedException("vkCreateMetalSurfaceEXT");
		return _vkCreateMetalSurfaceEXT(instance, pCreateInfo, pAllocator, pSurface);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void vkGetPhysicalDeviceMultisamplePropertiesEXT(VulkanHandle<VkPhysicalDevice> physicalDevice, VkSampleCountFlags samples, VkMultisamplePropertiesEXT* pMultisampleProperties)
	{
		if (_vkGetPhysicalDeviceMultisamplePropertiesEXT == null) throw new VVK.FunctionNotLoadedException("vkGetPhysicalDeviceMultisamplePropertiesEXT");
		_vkGetPhysicalDeviceMultisamplePropertiesEXT(physicalDevice, samples, pMultisampleProperties);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static VkResult vkGetPhysicalDeviceSurfaceCapabilities2KHR(VulkanHandle<VkPhysicalDevice> physicalDevice, VkPhysicalDeviceSurfaceInfo2KHR* pSurfaceInfo, VkSurfaceCapabilities2KHR* pSurfaceCapabilities)
	{
		if (_vkGetPhysicalDeviceSurfaceCapabilities2KHR == null) throw new VVK.FunctionNotLoadedException("vkGetPhysicalDeviceSurfaceCapabilities2KHR");
		return _vkGetPhysicalDeviceSurfaceCapabilities2KHR(physicalDevice, pSurfaceInfo, pSurfaceCapabilities);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static VkResult vkGetPhysicalDeviceSurfaceFormats2KHR(VulkanHandle<VkPhysicalDevice> physicalDevice, VkPhysicalDeviceSurfaceInfo2KHR* pSurfaceInfo, uint* pSurfaceFormatCount, VkSurfaceFormat2KHR* pSurfaceFormats)
	{
		if (_vkGetPhysicalDeviceSurfaceFormats2KHR == null) throw new VVK.FunctionNotLoadedException("vkGetPhysicalDeviceSurfaceFormats2KHR");
		return _vkGetPhysicalDeviceSurfaceFormats2KHR(physicalDevice, pSurfaceInfo, pSurfaceFormatCount, pSurfaceFormats);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static VkResult vkGetPhysicalDeviceDisplayProperties2KHR(VulkanHandle<VkPhysicalDevice> physicalDevice, uint* pPropertyCount, VkDisplayProperties2KHR* pProperties)
	{
		if (_vkGetPhysicalDeviceDisplayProperties2KHR == null) throw new VVK.FunctionNotLoadedException("vkGetPhysicalDeviceDisplayProperties2KHR");
		return _vkGetPhysicalDeviceDisplayProperties2KHR(physicalDevice, pPropertyCount, pProperties);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static VkResult vkGetPhysicalDeviceDisplayPlaneProperties2KHR(VulkanHandle<VkPhysicalDevice> physicalDevice, uint* pPropertyCount, VkDisplayPlaneProperties2KHR* pProperties)
	{
		if (_vkGetPhysicalDeviceDisplayPlaneProperties2KHR == null) throw new VVK.FunctionNotLoadedException("vkGetPhysicalDeviceDisplayPlaneProperties2KHR");
		return _vkGetPhysicalDeviceDisplayPlaneProperties2KHR(physicalDevice, pPropertyCount, pProperties);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static VkResult vkGetDisplayModeProperties2KHR(VulkanHandle<VkPhysicalDevice> physicalDevice, VulkanHandle<VkDisplayKHR> display, uint* pPropertyCount, VkDisplayModeProperties2KHR* pProperties)
	{
		if (_vkGetDisplayModeProperties2KHR == null) throw new VVK.FunctionNotLoadedException("vkGetDisplayModeProperties2KHR");
		return _vkGetDisplayModeProperties2KHR(physicalDevice, display, pPropertyCount, pProperties);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static VkResult vkGetDisplayPlaneCapabilities2KHR(VulkanHandle<VkPhysicalDevice> physicalDevice, VkDisplayPlaneInfo2KHR* pDisplayPlaneInfo, VkDisplayPlaneCapabilities2KHR* pCapabilities)
	{
		if (_vkGetDisplayPlaneCapabilities2KHR == null) throw new VVK.FunctionNotLoadedException("vkGetDisplayPlaneCapabilities2KHR");
		return _vkGetDisplayPlaneCapabilities2KHR(physicalDevice, pDisplayPlaneInfo, pCapabilities);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static VkResult vkGetPhysicalDeviceCalibrateableTimeDomainsEXT(VulkanHandle<VkPhysicalDevice> physicalDevice, uint* pTimeDomainCount, VkTimeDomainEXT* pTimeDomains)
	{
		if (_vkGetPhysicalDeviceCalibrateableTimeDomainsEXT == null) throw new VVK.FunctionNotLoadedException("vkGetPhysicalDeviceCalibrateableTimeDomainsEXT");
		return _vkGetPhysicalDeviceCalibrateableTimeDomainsEXT(physicalDevice, pTimeDomainCount, pTimeDomains);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static VkResult vkCreateDebugUtilsMessengerEXT(VulkanHandle<VkInstance> instance, VkDebugUtilsMessengerCreateInfoEXT* pCreateInfo, VkAllocationCallbacks* pAllocator, VulkanHandle<VkDebugUtilsMessengerEXT>* pMessenger)
	{
		if (_vkCreateDebugUtilsMessengerEXT == null) throw new VVK.FunctionNotLoadedException("vkCreateDebugUtilsMessengerEXT");
		return _vkCreateDebugUtilsMessengerEXT(instance, pCreateInfo, pAllocator, pMessenger);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void vkDestroyDebugUtilsMessengerEXT(VulkanHandle<VkInstance> instance, VulkanHandle<VkDebugUtilsMessengerEXT> messenger, VkAllocationCallbacks* pAllocator)
	{
		if (_vkDestroyDebugUtilsMessengerEXT == null) throw new VVK.FunctionNotLoadedException("vkDestroyDebugUtilsMessengerEXT");
		_vkDestroyDebugUtilsMessengerEXT(instance, messenger, pAllocator);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void vkSubmitDebugUtilsMessageEXT(VulkanHandle<VkInstance> instance, VkDebugUtilsMessageSeverityFlagsEXT messageSeverity, VkDebugUtilsMessageTypeFlagsEXT messageTypes, VkDebugUtilsMessengerCallbackDataEXT* pCallbackData)
	{
		if (_vkSubmitDebugUtilsMessageEXT == null) throw new VVK.FunctionNotLoadedException("vkSubmitDebugUtilsMessageEXT");
		_vkSubmitDebugUtilsMessageEXT(instance, messageSeverity, messageTypes, pCallbackData);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static VkResult vkGetPhysicalDeviceCooperativeMatrixPropertiesNV(VulkanHandle<VkPhysicalDevice> physicalDevice, uint* pPropertyCount, VkCooperativeMatrixPropertiesNV* pProperties)
	{
		if (_vkGetPhysicalDeviceCooperativeMatrixPropertiesNV == null) throw new VVK.FunctionNotLoadedException("vkGetPhysicalDeviceCooperativeMatrixPropertiesNV");
		return _vkGetPhysicalDeviceCooperativeMatrixPropertiesNV(physicalDevice, pPropertyCount, pProperties);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static VkResult vkGetPhysicalDeviceSurfacePresentModes2EXT(VulkanHandle<VkPhysicalDevice> physicalDevice, VkPhysicalDeviceSurfaceInfo2KHR* pSurfaceInfo, uint* pPresentModeCount, VkPresentModeKHR* pPresentModes)
	{
		if (_vkGetPhysicalDeviceSurfacePresentModes2EXT == null) throw new VVK.FunctionNotLoadedException("vkGetPhysicalDeviceSurfacePresentModes2EXT");
		return _vkGetPhysicalDeviceSurfacePresentModes2EXT(physicalDevice, pSurfaceInfo, pPresentModeCount, pPresentModes);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static VkResult vkEnumeratePhysicalDeviceQueueFamilyPerformanceQueryCountersKHR(VulkanHandle<VkPhysicalDevice> physicalDevice, uint queueFamilyIndex, uint* pCounterCount, VkPerformanceCounterKHR* pCounters, VkPerformanceCounterDescriptionKHR* pCounterDescriptions)
	{
		if (_vkEnumeratePhysicalDeviceQueueFamilyPerformanceQueryCountersKHR == null) throw new VVK.FunctionNotLoadedException("vkEnumeratePhysicalDeviceQueueFamilyPerformanceQueryCountersKHR");
		return _vkEnumeratePhysicalDeviceQueueFamilyPerformanceQueryCountersKHR(physicalDevice, queueFamilyIndex, pCounterCount, pCounters, pCounterDescriptions);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void vkGetPhysicalDeviceQueueFamilyPerformanceQueryPassesKHR(VulkanHandle<VkPhysicalDevice> physicalDevice, VkQueryPoolPerformanceCreateInfoKHR* pPerformanceQueryCreateInfo, uint* pNumPasses)
	{
		if (_vkGetPhysicalDeviceQueueFamilyPerformanceQueryPassesKHR == null) throw new VVK.FunctionNotLoadedException("vkGetPhysicalDeviceQueueFamilyPerformanceQueryPassesKHR");
		_vkGetPhysicalDeviceQueueFamilyPerformanceQueryPassesKHR(physicalDevice, pPerformanceQueryCreateInfo, pNumPasses);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static VkResult vkCreateHeadlessSurfaceEXT(VulkanHandle<VkInstance> instance, VkHeadlessSurfaceCreateInfoEXT* pCreateInfo, VkAllocationCallbacks* pAllocator, VulkanHandle<VkSurfaceKHR>* pSurface)
	{
		if (_vkCreateHeadlessSurfaceEXT == null) throw new VVK.FunctionNotLoadedException("vkCreateHeadlessSurfaceEXT");
		return _vkCreateHeadlessSurfaceEXT(instance, pCreateInfo, pAllocator, pSurface);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static VkResult vkGetPhysicalDeviceSupportedFramebufferMixedSamplesCombinationsNV(VulkanHandle<VkPhysicalDevice> physicalDevice, uint* pCombinationCount, VkFramebufferMixedSamplesCombinationNV* pCombinations)
	{
		if (_vkGetPhysicalDeviceSupportedFramebufferMixedSamplesCombinationsNV == null) throw new VVK.FunctionNotLoadedException("vkGetPhysicalDeviceSupportedFramebufferMixedSamplesCombinationsNV");
		return _vkGetPhysicalDeviceSupportedFramebufferMixedSamplesCombinationsNV(physicalDevice, pCombinationCount, pCombinations);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static VkResult vkGetPhysicalDeviceToolPropertiesEXT(VulkanHandle<VkPhysicalDevice> physicalDevice, uint* pToolCount, VkPhysicalDeviceToolPropertiesEXT* pToolProperties)
	{
		if (_vkGetPhysicalDeviceToolPropertiesEXT == null) throw new VVK.FunctionNotLoadedException("vkGetPhysicalDeviceToolPropertiesEXT");
		return _vkGetPhysicalDeviceToolPropertiesEXT(physicalDevice, pToolCount, pToolProperties);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static VkResult vkGetPhysicalDeviceFragmentShadingRatesKHR(VulkanHandle<VkPhysicalDevice> physicalDevice, uint* pFragmentShadingRateCount, VkPhysicalDeviceFragmentShadingRateKHR* pFragmentShadingRates)
	{
		if (_vkGetPhysicalDeviceFragmentShadingRatesKHR == null) throw new VVK.FunctionNotLoadedException("vkGetPhysicalDeviceFragmentShadingRatesKHR");
		return _vkGetPhysicalDeviceFragmentShadingRatesKHR(physicalDevice, pFragmentShadingRateCount, pFragmentShadingRates);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void vkDestroyDevice(VulkanHandle<VkDevice> device, VkAllocationCallbacks* pAllocator)
	{
		if (_vkDestroyDevice == null) throw new VVK.FunctionNotLoadedException("vkDestroyDevice");
		_vkDestroyDevice(device, pAllocator);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void vkGetDeviceQueue(VulkanHandle<VkDevice> device, uint queueFamilyIndex, uint queueIndex, VulkanHandle<VkQueue>* pQueue)
	{
		if (_vkGetDeviceQueue == null) throw new VVK.FunctionNotLoadedException("vkGetDeviceQueue");
		_vkGetDeviceQueue(device, queueFamilyIndex, queueIndex, pQueue);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static VkResult vkQueueSubmit(VulkanHandle<VkQueue> queue, uint submitCount, VkSubmitInfo* pSubmits, VulkanHandle<VkFence> fence)
	{
		if (_vkQueueSubmit == null) throw new VVK.FunctionNotLoadedException("vkQueueSubmit");
		return _vkQueueSubmit(queue, submitCount, pSubmits, fence);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static VkResult vkQueueWaitIdle(VulkanHandle<VkQueue> queue)
	{
		if (_vkQueueWaitIdle == null) throw new VVK.FunctionNotLoadedException("vkQueueWaitIdle");
		return _vkQueueWaitIdle(queue);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static VkResult vkDeviceWaitIdle(VulkanHandle<VkDevice> device)
	{
		if (_vkDeviceWaitIdle == null) throw new VVK.FunctionNotLoadedException("vkDeviceWaitIdle");
		return _vkDeviceWaitIdle(device);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static VkResult vkAllocateMemory(VulkanHandle<VkDevice> device, VkMemoryAllocateInfo* pAllocateInfo, VkAllocationCallbacks* pAllocator, VulkanHandle<VkDeviceMemory>* pMemory)
	{
		if (_vkAllocateMemory == null) throw new VVK.FunctionNotLoadedException("vkAllocateMemory");
		return _vkAllocateMemory(device, pAllocateInfo, pAllocator, pMemory);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void vkFreeMemory(VulkanHandle<VkDevice> device, VulkanHandle<VkDeviceMemory> memory, VkAllocationCallbacks* pAllocator)
	{
		if (_vkFreeMemory == null) throw new VVK.FunctionNotLoadedException("vkFreeMemory");
		_vkFreeMemory(device, memory, pAllocator);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static VkResult vkMapMemory(VulkanHandle<VkDevice> device, VulkanHandle<VkDeviceMemory> memory, ulong offset, ulong size, VkMemoryMapFlags flags, void** ppData)
	{
		if (_vkMapMemory == null) throw new VVK.FunctionNotLoadedException("vkMapMemory");
		return _vkMapMemory(device, memory, offset, size, flags, ppData);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void vkUnmapMemory(VulkanHandle<VkDevice> device, VulkanHandle<VkDeviceMemory> memory)
	{
		if (_vkUnmapMemory == null) throw new VVK.FunctionNotLoadedException("vkUnmapMemory");
		_vkUnmapMemory(device, memory);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static VkResult vkFlushMappedMemoryRanges(VulkanHandle<VkDevice> device, uint memoryRangeCount, VkMappedMemoryRange* pMemoryRanges)
	{
		if (_vkFlushMappedMemoryRanges == null) throw new VVK.FunctionNotLoadedException("vkFlushMappedMemoryRanges");
		return _vkFlushMappedMemoryRanges(device, memoryRangeCount, pMemoryRanges);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static VkResult vkInvalidateMappedMemoryRanges(VulkanHandle<VkDevice> device, uint memoryRangeCount, VkMappedMemoryRange* pMemoryRanges)
	{
		if (_vkInvalidateMappedMemoryRanges == null) throw new VVK.FunctionNotLoadedException("vkInvalidateMappedMemoryRanges");
		return _vkInvalidateMappedMemoryRanges(device, memoryRangeCount, pMemoryRanges);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void vkGetDeviceMemoryCommitment(VulkanHandle<VkDevice> device, VulkanHandle<VkDeviceMemory> memory, ulong* pCommittedMemoryInBytes)
	{
		if (_vkGetDeviceMemoryCommitment == null) throw new VVK.FunctionNotLoadedException("vkGetDeviceMemoryCommitment");
		_vkGetDeviceMemoryCommitment(device, memory, pCommittedMemoryInBytes);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void vkGetBufferMemoryRequirements(VulkanHandle<VkDevice> device, VulkanHandle<VkBuffer> buffer, VkMemoryRequirements* pMemoryRequirements)
	{
		if (_vkGetBufferMemoryRequirements == null) throw new VVK.FunctionNotLoadedException("vkGetBufferMemoryRequirements");
		_vkGetBufferMemoryRequirements(device, buffer, pMemoryRequirements);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static VkResult vkBindBufferMemory(VulkanHandle<VkDevice> device, VulkanHandle<VkBuffer> buffer, VulkanHandle<VkDeviceMemory> memory, ulong memoryOffset)
	{
		if (_vkBindBufferMemory == null) throw new VVK.FunctionNotLoadedException("vkBindBufferMemory");
		return _vkBindBufferMemory(device, buffer, memory, memoryOffset);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void vkGetImageMemoryRequirements(VulkanHandle<VkDevice> device, VulkanHandle<VkImage> image, VkMemoryRequirements* pMemoryRequirements)
	{
		if (_vkGetImageMemoryRequirements == null) throw new VVK.FunctionNotLoadedException("vkGetImageMemoryRequirements");
		_vkGetImageMemoryRequirements(device, image, pMemoryRequirements);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static VkResult vkBindImageMemory(VulkanHandle<VkDevice> device, VulkanHandle<VkImage> image, VulkanHandle<VkDeviceMemory> memory, ulong memoryOffset)
	{
		if (_vkBindImageMemory == null) throw new VVK.FunctionNotLoadedException("vkBindImageMemory");
		return _vkBindImageMemory(device, image, memory, memoryOffset);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void vkGetImageSparseMemoryRequirements(VulkanHandle<VkDevice> device, VulkanHandle<VkImage> image, uint* pSparseMemoryRequirementCount, VkSparseImageMemoryRequirements* pSparseMemoryRequirements)
	{
		if (_vkGetImageSparseMemoryRequirements == null) throw new VVK.FunctionNotLoadedException("vkGetImageSparseMemoryRequirements");
		_vkGetImageSparseMemoryRequirements(device, image, pSparseMemoryRequirementCount, pSparseMemoryRequirements);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static VkResult vkQueueBindSparse(VulkanHandle<VkQueue> queue, uint bindInfoCount, VkBindSparseInfo* pBindInfo, VulkanHandle<VkFence> fence)
	{
		if (_vkQueueBindSparse == null) throw new VVK.FunctionNotLoadedException("vkQueueBindSparse");
		return _vkQueueBindSparse(queue, bindInfoCount, pBindInfo, fence);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static VkResult vkCreateFence(VulkanHandle<VkDevice> device, VkFenceCreateInfo* pCreateInfo, VkAllocationCallbacks* pAllocator, VulkanHandle<VkFence>* pFence)
	{
		if (_vkCreateFence == null) throw new VVK.FunctionNotLoadedException("vkCreateFence");
		return _vkCreateFence(device, pCreateInfo, pAllocator, pFence);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void vkDestroyFence(VulkanHandle<VkDevice> device, VulkanHandle<VkFence> fence, VkAllocationCallbacks* pAllocator)
	{
		if (_vkDestroyFence == null) throw new VVK.FunctionNotLoadedException("vkDestroyFence");
		_vkDestroyFence(device, fence, pAllocator);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static VkResult vkResetFences(VulkanHandle<VkDevice> device, uint fenceCount, VulkanHandle<VkFence>* pFences)
	{
		if (_vkResetFences == null) throw new VVK.FunctionNotLoadedException("vkResetFences");
		return _vkResetFences(device, fenceCount, pFences);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static VkResult vkGetFenceStatus(VulkanHandle<VkDevice> device, VulkanHandle<VkFence> fence)
	{
		if (_vkGetFenceStatus == null) throw new VVK.FunctionNotLoadedException("vkGetFenceStatus");
		return _vkGetFenceStatus(device, fence);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static VkResult vkWaitForFences(VulkanHandle<VkDevice> device, uint fenceCount, VulkanHandle<VkFence>* pFences, VkBool32 waitAll, ulong timeout)
	{
		if (_vkWaitForFences == null) throw new VVK.FunctionNotLoadedException("vkWaitForFences");
		return _vkWaitForFences(device, fenceCount, pFences, waitAll, timeout);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static VkResult vkCreateSemaphore(VulkanHandle<VkDevice> device, VkSemaphoreCreateInfo* pCreateInfo, VkAllocationCallbacks* pAllocator, VulkanHandle<VkSemaphore>* pSemaphore)
	{
		if (_vkCreateSemaphore == null) throw new VVK.FunctionNotLoadedException("vkCreateSemaphore");
		return _vkCreateSemaphore(device, pCreateInfo, pAllocator, pSemaphore);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void vkDestroySemaphore(VulkanHandle<VkDevice> device, VulkanHandle<VkSemaphore> semaphore, VkAllocationCallbacks* pAllocator)
	{
		if (_vkDestroySemaphore == null) throw new VVK.FunctionNotLoadedException("vkDestroySemaphore");
		_vkDestroySemaphore(device, semaphore, pAllocator);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static VkResult vkCreateEvent(VulkanHandle<VkDevice> device, VkEventCreateInfo* pCreateInfo, VkAllocationCallbacks* pAllocator, VulkanHandle<VkEvent>* pEvent)
	{
		if (_vkCreateEvent == null) throw new VVK.FunctionNotLoadedException("vkCreateEvent");
		return _vkCreateEvent(device, pCreateInfo, pAllocator, pEvent);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void vkDestroyEvent(VulkanHandle<VkDevice> device, VulkanHandle<VkEvent> @event, VkAllocationCallbacks* pAllocator)
	{
		if (_vkDestroyEvent == null) throw new VVK.FunctionNotLoadedException("vkDestroyEvent");
		_vkDestroyEvent(device, @event, pAllocator);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static VkResult vkGetEventStatus(VulkanHandle<VkDevice> device, VulkanHandle<VkEvent> @event)
	{
		if (_vkGetEventStatus == null) throw new VVK.FunctionNotLoadedException("vkGetEventStatus");
		return _vkGetEventStatus(device, @event);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static VkResult vkSetEvent(VulkanHandle<VkDevice> device, VulkanHandle<VkEvent> @event)
	{
		if (_vkSetEvent == null) throw new VVK.FunctionNotLoadedException("vkSetEvent");
		return _vkSetEvent(device, @event);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static VkResult vkResetEvent(VulkanHandle<VkDevice> device, VulkanHandle<VkEvent> @event)
	{
		if (_vkResetEvent == null) throw new VVK.FunctionNotLoadedException("vkResetEvent");
		return _vkResetEvent(device, @event);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static VkResult vkCreateQueryPool(VulkanHandle<VkDevice> device, VkQueryPoolCreateInfo* pCreateInfo, VkAllocationCallbacks* pAllocator, VulkanHandle<VkQueryPool>* pQueryPool)
	{
		if (_vkCreateQueryPool == null) throw new VVK.FunctionNotLoadedException("vkCreateQueryPool");
		return _vkCreateQueryPool(device, pCreateInfo, pAllocator, pQueryPool);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void vkDestroyQueryPool(VulkanHandle<VkDevice> device, VulkanHandle<VkQueryPool> queryPool, VkAllocationCallbacks* pAllocator)
	{
		if (_vkDestroyQueryPool == null) throw new VVK.FunctionNotLoadedException("vkDestroyQueryPool");
		_vkDestroyQueryPool(device, queryPool, pAllocator);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static VkResult vkGetQueryPoolResults(VulkanHandle<VkDevice> device, VulkanHandle<VkQueryPool> queryPool, uint firstQuery, uint queryCount, ulong dataSize, void* pData, ulong stride, VkQueryResultFlags flags)
	{
		if (_vkGetQueryPoolResults == null) throw new VVK.FunctionNotLoadedException("vkGetQueryPoolResults");
		return _vkGetQueryPoolResults(device, queryPool, firstQuery, queryCount, dataSize, pData, stride, flags);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void vkResetQueryPool(VulkanHandle<VkDevice> device, VulkanHandle<VkQueryPool> queryPool, uint firstQuery, uint queryCount)
	{
		if (_vkResetQueryPool == null) throw new VVK.FunctionNotLoadedException("vkResetQueryPool");
		_vkResetQueryPool(device, queryPool, firstQuery, queryCount);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void vkResetQueryPoolEXT(VulkanHandle<VkDevice> device, VulkanHandle<VkQueryPool> queryPool, uint firstQuery, uint queryCount)
	{
		if (_vkResetQueryPoolEXT == null) throw new VVK.FunctionNotLoadedException("vkResetQueryPoolEXT");
		_vkResetQueryPoolEXT(device, queryPool, firstQuery, queryCount);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static VkResult vkCreateBuffer(VulkanHandle<VkDevice> device, VkBufferCreateInfo* pCreateInfo, VkAllocationCallbacks* pAllocator, VulkanHandle<VkBuffer>* pBuffer)
	{
		if (_vkCreateBuffer == null) throw new VVK.FunctionNotLoadedException("vkCreateBuffer");
		return _vkCreateBuffer(device, pCreateInfo, pAllocator, pBuffer);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void vkDestroyBuffer(VulkanHandle<VkDevice> device, VulkanHandle<VkBuffer> buffer, VkAllocationCallbacks* pAllocator)
	{
		if (_vkDestroyBuffer == null) throw new VVK.FunctionNotLoadedException("vkDestroyBuffer");
		_vkDestroyBuffer(device, buffer, pAllocator);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static VkResult vkCreateBufferView(VulkanHandle<VkDevice> device, VkBufferViewCreateInfo* pCreateInfo, VkAllocationCallbacks* pAllocator, VulkanHandle<VkBufferView>* pView)
	{
		if (_vkCreateBufferView == null) throw new VVK.FunctionNotLoadedException("vkCreateBufferView");
		return _vkCreateBufferView(device, pCreateInfo, pAllocator, pView);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void vkDestroyBufferView(VulkanHandle<VkDevice> device, VulkanHandle<VkBufferView> bufferView, VkAllocationCallbacks* pAllocator)
	{
		if (_vkDestroyBufferView == null) throw new VVK.FunctionNotLoadedException("vkDestroyBufferView");
		_vkDestroyBufferView(device, bufferView, pAllocator);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static VkResult vkCreateImage(VulkanHandle<VkDevice> device, VkImageCreateInfo* pCreateInfo, VkAllocationCallbacks* pAllocator, VulkanHandle<VkImage>* pImage)
	{
		if (_vkCreateImage == null) throw new VVK.FunctionNotLoadedException("vkCreateImage");
		return _vkCreateImage(device, pCreateInfo, pAllocator, pImage);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void vkDestroyImage(VulkanHandle<VkDevice> device, VulkanHandle<VkImage> image, VkAllocationCallbacks* pAllocator)
	{
		if (_vkDestroyImage == null) throw new VVK.FunctionNotLoadedException("vkDestroyImage");
		_vkDestroyImage(device, image, pAllocator);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void vkGetImageSubresourceLayout(VulkanHandle<VkDevice> device, VulkanHandle<VkImage> image, VkImageSubresource* pSubresource, VkSubresourceLayout* pLayout)
	{
		if (_vkGetImageSubresourceLayout == null) throw new VVK.FunctionNotLoadedException("vkGetImageSubresourceLayout");
		_vkGetImageSubresourceLayout(device, image, pSubresource, pLayout);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static VkResult vkCreateImageView(VulkanHandle<VkDevice> device, VkImageViewCreateInfo* pCreateInfo, VkAllocationCallbacks* pAllocator, VulkanHandle<VkImageView>* pView)
	{
		if (_vkCreateImageView == null) throw new VVK.FunctionNotLoadedException("vkCreateImageView");
		return _vkCreateImageView(device, pCreateInfo, pAllocator, pView);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void vkDestroyImageView(VulkanHandle<VkDevice> device, VulkanHandle<VkImageView> imageView, VkAllocationCallbacks* pAllocator)
	{
		if (_vkDestroyImageView == null) throw new VVK.FunctionNotLoadedException("vkDestroyImageView");
		_vkDestroyImageView(device, imageView, pAllocator);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static VkResult vkCreateShaderModule(VulkanHandle<VkDevice> device, VkShaderModuleCreateInfo* pCreateInfo, VkAllocationCallbacks* pAllocator, VulkanHandle<VkShaderModule>* pShaderModule)
	{
		if (_vkCreateShaderModule == null) throw new VVK.FunctionNotLoadedException("vkCreateShaderModule");
		return _vkCreateShaderModule(device, pCreateInfo, pAllocator, pShaderModule);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void vkDestroyShaderModule(VulkanHandle<VkDevice> device, VulkanHandle<VkShaderModule> shaderModule, VkAllocationCallbacks* pAllocator)
	{
		if (_vkDestroyShaderModule == null) throw new VVK.FunctionNotLoadedException("vkDestroyShaderModule");
		_vkDestroyShaderModule(device, shaderModule, pAllocator);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static VkResult vkCreatePipelineCache(VulkanHandle<VkDevice> device, VkPipelineCacheCreateInfo* pCreateInfo, VkAllocationCallbacks* pAllocator, VulkanHandle<VkPipelineCache>* pPipelineCache)
	{
		if (_vkCreatePipelineCache == null) throw new VVK.FunctionNotLoadedException("vkCreatePipelineCache");
		return _vkCreatePipelineCache(device, pCreateInfo, pAllocator, pPipelineCache);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void vkDestroyPipelineCache(VulkanHandle<VkDevice> device, VulkanHandle<VkPipelineCache> pipelineCache, VkAllocationCallbacks* pAllocator)
	{
		if (_vkDestroyPipelineCache == null) throw new VVK.FunctionNotLoadedException("vkDestroyPipelineCache");
		_vkDestroyPipelineCache(device, pipelineCache, pAllocator);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static VkResult vkGetPipelineCacheData(VulkanHandle<VkDevice> device, VulkanHandle<VkPipelineCache> pipelineCache, ulong* pDataSize, void* pData)
	{
		if (_vkGetPipelineCacheData == null) throw new VVK.FunctionNotLoadedException("vkGetPipelineCacheData");
		return _vkGetPipelineCacheData(device, pipelineCache, pDataSize, pData);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static VkResult vkMergePipelineCaches(VulkanHandle<VkDevice> device, VulkanHandle<VkPipelineCache> dstCache, uint srcCacheCount, VulkanHandle<VkPipelineCache>* pSrcCaches)
	{
		if (_vkMergePipelineCaches == null) throw new VVK.FunctionNotLoadedException("vkMergePipelineCaches");
		return _vkMergePipelineCaches(device, dstCache, srcCacheCount, pSrcCaches);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static VkResult vkCreateGraphicsPipelines(VulkanHandle<VkDevice> device, VulkanHandle<VkPipelineCache> pipelineCache, uint createInfoCount, VkGraphicsPipelineCreateInfo* pCreateInfos, VkAllocationCallbacks* pAllocator, VulkanHandle<VkPipeline>* pPipelines)
	{
		if (_vkCreateGraphicsPipelines == null) throw new VVK.FunctionNotLoadedException("vkCreateGraphicsPipelines");
		return _vkCreateGraphicsPipelines(device, pipelineCache, createInfoCount, pCreateInfos, pAllocator, pPipelines);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static VkResult vkCreateComputePipelines(VulkanHandle<VkDevice> device, VulkanHandle<VkPipelineCache> pipelineCache, uint createInfoCount, VkComputePipelineCreateInfo* pCreateInfos, VkAllocationCallbacks* pAllocator, VulkanHandle<VkPipeline>* pPipelines)
	{
		if (_vkCreateComputePipelines == null) throw new VVK.FunctionNotLoadedException("vkCreateComputePipelines");
		return _vkCreateComputePipelines(device, pipelineCache, createInfoCount, pCreateInfos, pAllocator, pPipelines);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void vkDestroyPipeline(VulkanHandle<VkDevice> device, VulkanHandle<VkPipeline> pipeline, VkAllocationCallbacks* pAllocator)
	{
		if (_vkDestroyPipeline == null) throw new VVK.FunctionNotLoadedException("vkDestroyPipeline");
		_vkDestroyPipeline(device, pipeline, pAllocator);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static VkResult vkCreatePipelineLayout(VulkanHandle<VkDevice> device, VkPipelineLayoutCreateInfo* pCreateInfo, VkAllocationCallbacks* pAllocator, VulkanHandle<VkPipelineLayout>* pPipelineLayout)
	{
		if (_vkCreatePipelineLayout == null) throw new VVK.FunctionNotLoadedException("vkCreatePipelineLayout");
		return _vkCreatePipelineLayout(device, pCreateInfo, pAllocator, pPipelineLayout);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void vkDestroyPipelineLayout(VulkanHandle<VkDevice> device, VulkanHandle<VkPipelineLayout> pipelineLayout, VkAllocationCallbacks* pAllocator)
	{
		if (_vkDestroyPipelineLayout == null) throw new VVK.FunctionNotLoadedException("vkDestroyPipelineLayout");
		_vkDestroyPipelineLayout(device, pipelineLayout, pAllocator);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static VkResult vkCreateSampler(VulkanHandle<VkDevice> device, VkSamplerCreateInfo* pCreateInfo, VkAllocationCallbacks* pAllocator, VulkanHandle<VkSampler>* pSampler)
	{
		if (_vkCreateSampler == null) throw new VVK.FunctionNotLoadedException("vkCreateSampler");
		return _vkCreateSampler(device, pCreateInfo, pAllocator, pSampler);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void vkDestroySampler(VulkanHandle<VkDevice> device, VulkanHandle<VkSampler> sampler, VkAllocationCallbacks* pAllocator)
	{
		if (_vkDestroySampler == null) throw new VVK.FunctionNotLoadedException("vkDestroySampler");
		_vkDestroySampler(device, sampler, pAllocator);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static VkResult vkCreateDescriptorSetLayout(VulkanHandle<VkDevice> device, VkDescriptorSetLayoutCreateInfo* pCreateInfo, VkAllocationCallbacks* pAllocator, VulkanHandle<VkDescriptorSetLayout>* pSetLayout)
	{
		if (_vkCreateDescriptorSetLayout == null) throw new VVK.FunctionNotLoadedException("vkCreateDescriptorSetLayout");
		return _vkCreateDescriptorSetLayout(device, pCreateInfo, pAllocator, pSetLayout);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void vkDestroyDescriptorSetLayout(VulkanHandle<VkDevice> device, VulkanHandle<VkDescriptorSetLayout> descriptorSetLayout, VkAllocationCallbacks* pAllocator)
	{
		if (_vkDestroyDescriptorSetLayout == null) throw new VVK.FunctionNotLoadedException("vkDestroyDescriptorSetLayout");
		_vkDestroyDescriptorSetLayout(device, descriptorSetLayout, pAllocator);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static VkResult vkCreateDescriptorPool(VulkanHandle<VkDevice> device, VkDescriptorPoolCreateInfo* pCreateInfo, VkAllocationCallbacks* pAllocator, VulkanHandle<VkDescriptorPool>* pDescriptorPool)
	{
		if (_vkCreateDescriptorPool == null) throw new VVK.FunctionNotLoadedException("vkCreateDescriptorPool");
		return _vkCreateDescriptorPool(device, pCreateInfo, pAllocator, pDescriptorPool);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void vkDestroyDescriptorPool(VulkanHandle<VkDevice> device, VulkanHandle<VkDescriptorPool> descriptorPool, VkAllocationCallbacks* pAllocator)
	{
		if (_vkDestroyDescriptorPool == null) throw new VVK.FunctionNotLoadedException("vkDestroyDescriptorPool");
		_vkDestroyDescriptorPool(device, descriptorPool, pAllocator);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static VkResult vkResetDescriptorPool(VulkanHandle<VkDevice> device, VulkanHandle<VkDescriptorPool> descriptorPool, VkDescriptorPoolResetFlags flags)
	{
		if (_vkResetDescriptorPool == null) throw new VVK.FunctionNotLoadedException("vkResetDescriptorPool");
		return _vkResetDescriptorPool(device, descriptorPool, flags);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static VkResult vkAllocateDescriptorSets(VulkanHandle<VkDevice> device, VkDescriptorSetAllocateInfo* pAllocateInfo, VulkanHandle<VkDescriptorSet>* pDescriptorSets)
	{
		if (_vkAllocateDescriptorSets == null) throw new VVK.FunctionNotLoadedException("vkAllocateDescriptorSets");
		return _vkAllocateDescriptorSets(device, pAllocateInfo, pDescriptorSets);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static VkResult vkFreeDescriptorSets(VulkanHandle<VkDevice> device, VulkanHandle<VkDescriptorPool> descriptorPool, uint descriptorSetCount, VulkanHandle<VkDescriptorSet>* pDescriptorSets)
	{
		if (_vkFreeDescriptorSets == null) throw new VVK.FunctionNotLoadedException("vkFreeDescriptorSets");
		return _vkFreeDescriptorSets(device, descriptorPool, descriptorSetCount, pDescriptorSets);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void vkUpdateDescriptorSets(VulkanHandle<VkDevice> device, uint descriptorWriteCount, VkWriteDescriptorSet* pDescriptorWrites, uint descriptorCopyCount, VkCopyDescriptorSet* pDescriptorCopies)
	{
		if (_vkUpdateDescriptorSets == null) throw new VVK.FunctionNotLoadedException("vkUpdateDescriptorSets");
		_vkUpdateDescriptorSets(device, descriptorWriteCount, pDescriptorWrites, descriptorCopyCount, pDescriptorCopies);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static VkResult vkCreateFramebuffer(VulkanHandle<VkDevice> device, VkFramebufferCreateInfo* pCreateInfo, VkAllocationCallbacks* pAllocator, VulkanHandle<VkFramebuffer>* pFramebuffer)
	{
		if (_vkCreateFramebuffer == null) throw new VVK.FunctionNotLoadedException("vkCreateFramebuffer");
		return _vkCreateFramebuffer(device, pCreateInfo, pAllocator, pFramebuffer);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void vkDestroyFramebuffer(VulkanHandle<VkDevice> device, VulkanHandle<VkFramebuffer> framebuffer, VkAllocationCallbacks* pAllocator)
	{
		if (_vkDestroyFramebuffer == null) throw new VVK.FunctionNotLoadedException("vkDestroyFramebuffer");
		_vkDestroyFramebuffer(device, framebuffer, pAllocator);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static VkResult vkCreateRenderPass(VulkanHandle<VkDevice> device, VkRenderPassCreateInfo* pCreateInfo, VkAllocationCallbacks* pAllocator, VulkanHandle<VkRenderPass>* pRenderPass)
	{
		if (_vkCreateRenderPass == null) throw new VVK.FunctionNotLoadedException("vkCreateRenderPass");
		return _vkCreateRenderPass(device, pCreateInfo, pAllocator, pRenderPass);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void vkDestroyRenderPass(VulkanHandle<VkDevice> device, VulkanHandle<VkRenderPass> renderPass, VkAllocationCallbacks* pAllocator)
	{
		if (_vkDestroyRenderPass == null) throw new VVK.FunctionNotLoadedException("vkDestroyRenderPass");
		_vkDestroyRenderPass(device, renderPass, pAllocator);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void vkGetRenderAreaGranularity(VulkanHandle<VkDevice> device, VulkanHandle<VkRenderPass> renderPass, VkExtent2D* pGranularity)
	{
		if (_vkGetRenderAreaGranularity == null) throw new VVK.FunctionNotLoadedException("vkGetRenderAreaGranularity");
		_vkGetRenderAreaGranularity(device, renderPass, pGranularity);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static VkResult vkCreateCommandPool(VulkanHandle<VkDevice> device, VkCommandPoolCreateInfo* pCreateInfo, VkAllocationCallbacks* pAllocator, VulkanHandle<VkCommandPool>* pCommandPool)
	{
		if (_vkCreateCommandPool == null) throw new VVK.FunctionNotLoadedException("vkCreateCommandPool");
		return _vkCreateCommandPool(device, pCreateInfo, pAllocator, pCommandPool);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void vkDestroyCommandPool(VulkanHandle<VkDevice> device, VulkanHandle<VkCommandPool> commandPool, VkAllocationCallbacks* pAllocator)
	{
		if (_vkDestroyCommandPool == null) throw new VVK.FunctionNotLoadedException("vkDestroyCommandPool");
		_vkDestroyCommandPool(device, commandPool, pAllocator);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static VkResult vkResetCommandPool(VulkanHandle<VkDevice> device, VulkanHandle<VkCommandPool> commandPool, VkCommandPoolResetFlags flags)
	{
		if (_vkResetCommandPool == null) throw new VVK.FunctionNotLoadedException("vkResetCommandPool");
		return _vkResetCommandPool(device, commandPool, flags);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static VkResult vkAllocateCommandBuffers(VulkanHandle<VkDevice> device, VkCommandBufferAllocateInfo* pAllocateInfo, VulkanHandle<VkCommandBuffer>* pCommandBuffers)
	{
		if (_vkAllocateCommandBuffers == null) throw new VVK.FunctionNotLoadedException("vkAllocateCommandBuffers");
		return _vkAllocateCommandBuffers(device, pAllocateInfo, pCommandBuffers);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void vkFreeCommandBuffers(VulkanHandle<VkDevice> device, VulkanHandle<VkCommandPool> commandPool, uint commandBufferCount, VulkanHandle<VkCommandBuffer>* pCommandBuffers)
	{
		if (_vkFreeCommandBuffers == null) throw new VVK.FunctionNotLoadedException("vkFreeCommandBuffers");
		_vkFreeCommandBuffers(device, commandPool, commandBufferCount, pCommandBuffers);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static VkResult vkBeginCommandBuffer(VulkanHandle<VkCommandBuffer> commandBuffer, VkCommandBufferBeginInfo* pBeginInfo)
	{
		if (_vkBeginCommandBuffer == null) throw new VVK.FunctionNotLoadedException("vkBeginCommandBuffer");
		return _vkBeginCommandBuffer(commandBuffer, pBeginInfo);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static VkResult vkEndCommandBuffer(VulkanHandle<VkCommandBuffer> commandBuffer)
	{
		if (_vkEndCommandBuffer == null) throw new VVK.FunctionNotLoadedException("vkEndCommandBuffer");
		return _vkEndCommandBuffer(commandBuffer);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static VkResult vkResetCommandBuffer(VulkanHandle<VkCommandBuffer> commandBuffer, VkCommandBufferResetFlags flags)
	{
		if (_vkResetCommandBuffer == null) throw new VVK.FunctionNotLoadedException("vkResetCommandBuffer");
		return _vkResetCommandBuffer(commandBuffer, flags);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void vkCmdBindPipeline(VulkanHandle<VkCommandBuffer> commandBuffer, VkPipelineBindPoint pipelineBindPoint, VulkanHandle<VkPipeline> pipeline)
	{
		if (_vkCmdBindPipeline == null) throw new VVK.FunctionNotLoadedException("vkCmdBindPipeline");
		_vkCmdBindPipeline(commandBuffer, pipelineBindPoint, pipeline);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void vkCmdSetViewport(VulkanHandle<VkCommandBuffer> commandBuffer, uint firstViewport, uint viewportCount, VkViewport* pViewports)
	{
		if (_vkCmdSetViewport == null) throw new VVK.FunctionNotLoadedException("vkCmdSetViewport");
		_vkCmdSetViewport(commandBuffer, firstViewport, viewportCount, pViewports);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void vkCmdSetScissor(VulkanHandle<VkCommandBuffer> commandBuffer, uint firstScissor, uint scissorCount, VkRect2D* pScissors)
	{
		if (_vkCmdSetScissor == null) throw new VVK.FunctionNotLoadedException("vkCmdSetScissor");
		_vkCmdSetScissor(commandBuffer, firstScissor, scissorCount, pScissors);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void vkCmdSetLineWidth(VulkanHandle<VkCommandBuffer> commandBuffer, float lineWidth)
	{
		if (_vkCmdSetLineWidth == null) throw new VVK.FunctionNotLoadedException("vkCmdSetLineWidth");
		_vkCmdSetLineWidth(commandBuffer, lineWidth);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void vkCmdSetDepthBias(VulkanHandle<VkCommandBuffer> commandBuffer, float depthBiasConstantFactor, float depthBiasClamp, float depthBiasSlopeFactor)
	{
		if (_vkCmdSetDepthBias == null) throw new VVK.FunctionNotLoadedException("vkCmdSetDepthBias");
		_vkCmdSetDepthBias(commandBuffer, depthBiasConstantFactor, depthBiasClamp, depthBiasSlopeFactor);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void vkCmdSetBlendConstants(VulkanHandle<VkCommandBuffer> commandBuffer, float* blendConstants)
	{
		if (_vkCmdSetBlendConstants == null) throw new VVK.FunctionNotLoadedException("vkCmdSetBlendConstants");
		_vkCmdSetBlendConstants(commandBuffer, blendConstants);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void vkCmdSetDepthBounds(VulkanHandle<VkCommandBuffer> commandBuffer, float minDepthBounds, float maxDepthBounds)
	{
		if (_vkCmdSetDepthBounds == null) throw new VVK.FunctionNotLoadedException("vkCmdSetDepthBounds");
		_vkCmdSetDepthBounds(commandBuffer, minDepthBounds, maxDepthBounds);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void vkCmdSetStencilCompareMask(VulkanHandle<VkCommandBuffer> commandBuffer, VkStencilFaceFlags faceMask, uint compareMask)
	{
		if (_vkCmdSetStencilCompareMask == null) throw new VVK.FunctionNotLoadedException("vkCmdSetStencilCompareMask");
		_vkCmdSetStencilCompareMask(commandBuffer, faceMask, compareMask);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void vkCmdSetStencilWriteMask(VulkanHandle<VkCommandBuffer> commandBuffer, VkStencilFaceFlags faceMask, uint writeMask)
	{
		if (_vkCmdSetStencilWriteMask == null) throw new VVK.FunctionNotLoadedException("vkCmdSetStencilWriteMask");
		_vkCmdSetStencilWriteMask(commandBuffer, faceMask, writeMask);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void vkCmdSetStencilReference(VulkanHandle<VkCommandBuffer> commandBuffer, VkStencilFaceFlags faceMask, uint reference)
	{
		if (_vkCmdSetStencilReference == null) throw new VVK.FunctionNotLoadedException("vkCmdSetStencilReference");
		_vkCmdSetStencilReference(commandBuffer, faceMask, reference);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void vkCmdBindDescriptorSets(VulkanHandle<VkCommandBuffer> commandBuffer, VkPipelineBindPoint pipelineBindPoint, VulkanHandle<VkPipelineLayout> layout, uint firstSet, uint descriptorSetCount, VulkanHandle<VkDescriptorSet>* pDescriptorSets, uint dynamicOffsetCount, uint* pDynamicOffsets)
	{
		if (_vkCmdBindDescriptorSets == null) throw new VVK.FunctionNotLoadedException("vkCmdBindDescriptorSets");
		_vkCmdBindDescriptorSets(commandBuffer, pipelineBindPoint, layout, firstSet, descriptorSetCount, pDescriptorSets, dynamicOffsetCount, pDynamicOffsets);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void vkCmdBindIndexBuffer(VulkanHandle<VkCommandBuffer> commandBuffer, VulkanHandle<VkBuffer> buffer, ulong offset, VkIndexType indexType)
	{
		if (_vkCmdBindIndexBuffer == null) throw new VVK.FunctionNotLoadedException("vkCmdBindIndexBuffer");
		_vkCmdBindIndexBuffer(commandBuffer, buffer, offset, indexType);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void vkCmdBindVertexBuffers(VulkanHandle<VkCommandBuffer> commandBuffer, uint firstBinding, uint bindingCount, VulkanHandle<VkBuffer>* pBuffers, ulong* pOffsets)
	{
		if (_vkCmdBindVertexBuffers == null) throw new VVK.FunctionNotLoadedException("vkCmdBindVertexBuffers");
		_vkCmdBindVertexBuffers(commandBuffer, firstBinding, bindingCount, pBuffers, pOffsets);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void vkCmdDraw(VulkanHandle<VkCommandBuffer> commandBuffer, uint vertexCount, uint instanceCount, uint firstVertex, uint firstInstance)
	{
		if (_vkCmdDraw == null) throw new VVK.FunctionNotLoadedException("vkCmdDraw");
		_vkCmdDraw(commandBuffer, vertexCount, instanceCount, firstVertex, firstInstance);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void vkCmdDrawIndexed(VulkanHandle<VkCommandBuffer> commandBuffer, uint indexCount, uint instanceCount, uint firstIndex, int vertexOffset, uint firstInstance)
	{
		if (_vkCmdDrawIndexed == null) throw new VVK.FunctionNotLoadedException("vkCmdDrawIndexed");
		_vkCmdDrawIndexed(commandBuffer, indexCount, instanceCount, firstIndex, vertexOffset, firstInstance);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void vkCmdDrawIndirect(VulkanHandle<VkCommandBuffer> commandBuffer, VulkanHandle<VkBuffer> buffer, ulong offset, uint drawCount, uint stride)
	{
		if (_vkCmdDrawIndirect == null) throw new VVK.FunctionNotLoadedException("vkCmdDrawIndirect");
		_vkCmdDrawIndirect(commandBuffer, buffer, offset, drawCount, stride);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void vkCmdDrawIndexedIndirect(VulkanHandle<VkCommandBuffer> commandBuffer, VulkanHandle<VkBuffer> buffer, ulong offset, uint drawCount, uint stride)
	{
		if (_vkCmdDrawIndexedIndirect == null) throw new VVK.FunctionNotLoadedException("vkCmdDrawIndexedIndirect");
		_vkCmdDrawIndexedIndirect(commandBuffer, buffer, offset, drawCount, stride);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void vkCmdDispatch(VulkanHandle<VkCommandBuffer> commandBuffer, uint groupCountX, uint groupCountY, uint groupCountZ)
	{
		if (_vkCmdDispatch == null) throw new VVK.FunctionNotLoadedException("vkCmdDispatch");
		_vkCmdDispatch(commandBuffer, groupCountX, groupCountY, groupCountZ);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void vkCmdDispatchIndirect(VulkanHandle<VkCommandBuffer> commandBuffer, VulkanHandle<VkBuffer> buffer, ulong offset)
	{
		if (_vkCmdDispatchIndirect == null) throw new VVK.FunctionNotLoadedException("vkCmdDispatchIndirect");
		_vkCmdDispatchIndirect(commandBuffer, buffer, offset);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void vkCmdCopyBuffer(VulkanHandle<VkCommandBuffer> commandBuffer, VulkanHandle<VkBuffer> srcBuffer, VulkanHandle<VkBuffer> dstBuffer, uint regionCount, VkBufferCopy* pRegions)
	{
		if (_vkCmdCopyBuffer == null) throw new VVK.FunctionNotLoadedException("vkCmdCopyBuffer");
		_vkCmdCopyBuffer(commandBuffer, srcBuffer, dstBuffer, regionCount, pRegions);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void vkCmdCopyImage(VulkanHandle<VkCommandBuffer> commandBuffer, VulkanHandle<VkImage> srcImage, VkImageLayout srcImageLayout, VulkanHandle<VkImage> dstImage, VkImageLayout dstImageLayout, uint regionCount, VkImageCopy* pRegions)
	{
		if (_vkCmdCopyImage == null) throw new VVK.FunctionNotLoadedException("vkCmdCopyImage");
		_vkCmdCopyImage(commandBuffer, srcImage, srcImageLayout, dstImage, dstImageLayout, regionCount, pRegions);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void vkCmdBlitImage(VulkanHandle<VkCommandBuffer> commandBuffer, VulkanHandle<VkImage> srcImage, VkImageLayout srcImageLayout, VulkanHandle<VkImage> dstImage, VkImageLayout dstImageLayout, uint regionCount, VkImageBlit* pRegions, VkFilter filter)
	{
		if (_vkCmdBlitImage == null) throw new VVK.FunctionNotLoadedException("vkCmdBlitImage");
		_vkCmdBlitImage(commandBuffer, srcImage, srcImageLayout, dstImage, dstImageLayout, regionCount, pRegions, filter);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void vkCmdCopyBufferToImage(VulkanHandle<VkCommandBuffer> commandBuffer, VulkanHandle<VkBuffer> srcBuffer, VulkanHandle<VkImage> dstImage, VkImageLayout dstImageLayout, uint regionCount, VkBufferImageCopy* pRegions)
	{
		if (_vkCmdCopyBufferToImage == null) throw new VVK.FunctionNotLoadedException("vkCmdCopyBufferToImage");
		_vkCmdCopyBufferToImage(commandBuffer, srcBuffer, dstImage, dstImageLayout, regionCount, pRegions);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void vkCmdCopyImageToBuffer(VulkanHandle<VkCommandBuffer> commandBuffer, VulkanHandle<VkImage> srcImage, VkImageLayout srcImageLayout, VulkanHandle<VkBuffer> dstBuffer, uint regionCount, VkBufferImageCopy* pRegions)
	{
		if (_vkCmdCopyImageToBuffer == null) throw new VVK.FunctionNotLoadedException("vkCmdCopyImageToBuffer");
		_vkCmdCopyImageToBuffer(commandBuffer, srcImage, srcImageLayout, dstBuffer, regionCount, pRegions);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void vkCmdUpdateBuffer(VulkanHandle<VkCommandBuffer> commandBuffer, VulkanHandle<VkBuffer> dstBuffer, ulong dstOffset, ulong dataSize, void* pData)
	{
		if (_vkCmdUpdateBuffer == null) throw new VVK.FunctionNotLoadedException("vkCmdUpdateBuffer");
		_vkCmdUpdateBuffer(commandBuffer, dstBuffer, dstOffset, dataSize, pData);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void vkCmdFillBuffer(VulkanHandle<VkCommandBuffer> commandBuffer, VulkanHandle<VkBuffer> dstBuffer, ulong dstOffset, ulong size, uint data)
	{
		if (_vkCmdFillBuffer == null) throw new VVK.FunctionNotLoadedException("vkCmdFillBuffer");
		_vkCmdFillBuffer(commandBuffer, dstBuffer, dstOffset, size, data);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void vkCmdClearColorImage(VulkanHandle<VkCommandBuffer> commandBuffer, VulkanHandle<VkImage> image, VkImageLayout imageLayout, VkClearColorValue* pColor, uint rangeCount, VkImageSubresourceRange* pRanges)
	{
		if (_vkCmdClearColorImage == null) throw new VVK.FunctionNotLoadedException("vkCmdClearColorImage");
		_vkCmdClearColorImage(commandBuffer, image, imageLayout, pColor, rangeCount, pRanges);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void vkCmdClearDepthStencilImage(VulkanHandle<VkCommandBuffer> commandBuffer, VulkanHandle<VkImage> image, VkImageLayout imageLayout, VkClearDepthStencilValue* pDepthStencil, uint rangeCount, VkImageSubresourceRange* pRanges)
	{
		if (_vkCmdClearDepthStencilImage == null) throw new VVK.FunctionNotLoadedException("vkCmdClearDepthStencilImage");
		_vkCmdClearDepthStencilImage(commandBuffer, image, imageLayout, pDepthStencil, rangeCount, pRanges);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void vkCmdClearAttachments(VulkanHandle<VkCommandBuffer> commandBuffer, uint attachmentCount, VkClearAttachment* pAttachments, uint rectCount, VkClearRect* pRects)
	{
		if (_vkCmdClearAttachments == null) throw new VVK.FunctionNotLoadedException("vkCmdClearAttachments");
		_vkCmdClearAttachments(commandBuffer, attachmentCount, pAttachments, rectCount, pRects);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void vkCmdResolveImage(VulkanHandle<VkCommandBuffer> commandBuffer, VulkanHandle<VkImage> srcImage, VkImageLayout srcImageLayout, VulkanHandle<VkImage> dstImage, VkImageLayout dstImageLayout, uint regionCount, VkImageResolve* pRegions)
	{
		if (_vkCmdResolveImage == null) throw new VVK.FunctionNotLoadedException("vkCmdResolveImage");
		_vkCmdResolveImage(commandBuffer, srcImage, srcImageLayout, dstImage, dstImageLayout, regionCount, pRegions);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void vkCmdSetEvent(VulkanHandle<VkCommandBuffer> commandBuffer, VulkanHandle<VkEvent> @event, VkPipelineStageFlags stageMask)
	{
		if (_vkCmdSetEvent == null) throw new VVK.FunctionNotLoadedException("vkCmdSetEvent");
		_vkCmdSetEvent(commandBuffer, @event, stageMask);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void vkCmdResetEvent(VulkanHandle<VkCommandBuffer> commandBuffer, VulkanHandle<VkEvent> @event, VkPipelineStageFlags stageMask)
	{
		if (_vkCmdResetEvent == null) throw new VVK.FunctionNotLoadedException("vkCmdResetEvent");
		_vkCmdResetEvent(commandBuffer, @event, stageMask);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void vkCmdWaitEvents(VulkanHandle<VkCommandBuffer> commandBuffer, uint eventCount, VulkanHandle<VkEvent>* pEvents, VkPipelineStageFlags srcStageMask, VkPipelineStageFlags dstStageMask, uint memoryBarrierCount, VkMemoryBarrier* pMemoryBarriers, uint bufferMemoryBarrierCount, VkBufferMemoryBarrier* pBufferMemoryBarriers, uint imageMemoryBarrierCount, VkImageMemoryBarrier* pImageMemoryBarriers)
	{
		if (_vkCmdWaitEvents == null) throw new VVK.FunctionNotLoadedException("vkCmdWaitEvents");
		_vkCmdWaitEvents(commandBuffer, eventCount, pEvents, srcStageMask, dstStageMask, memoryBarrierCount, pMemoryBarriers, bufferMemoryBarrierCount, pBufferMemoryBarriers, imageMemoryBarrierCount, pImageMemoryBarriers);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void vkCmdPipelineBarrier(VulkanHandle<VkCommandBuffer> commandBuffer, VkPipelineStageFlags srcStageMask, VkPipelineStageFlags dstStageMask, VkDependencyFlags dependencyFlags, uint memoryBarrierCount, VkMemoryBarrier* pMemoryBarriers, uint bufferMemoryBarrierCount, VkBufferMemoryBarrier* pBufferMemoryBarriers, uint imageMemoryBarrierCount, VkImageMemoryBarrier* pImageMemoryBarriers)
	{
		if (_vkCmdPipelineBarrier == null) throw new VVK.FunctionNotLoadedException("vkCmdPipelineBarrier");
		_vkCmdPipelineBarrier(commandBuffer, srcStageMask, dstStageMask, dependencyFlags, memoryBarrierCount, pMemoryBarriers, bufferMemoryBarrierCount, pBufferMemoryBarriers, imageMemoryBarrierCount, pImageMemoryBarriers);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void vkCmdBeginQuery(VulkanHandle<VkCommandBuffer> commandBuffer, VulkanHandle<VkQueryPool> queryPool, uint query, VkQueryControlFlags flags)
	{
		if (_vkCmdBeginQuery == null) throw new VVK.FunctionNotLoadedException("vkCmdBeginQuery");
		_vkCmdBeginQuery(commandBuffer, queryPool, query, flags);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void vkCmdEndQuery(VulkanHandle<VkCommandBuffer> commandBuffer, VulkanHandle<VkQueryPool> queryPool, uint query)
	{
		if (_vkCmdEndQuery == null) throw new VVK.FunctionNotLoadedException("vkCmdEndQuery");
		_vkCmdEndQuery(commandBuffer, queryPool, query);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void vkCmdBeginConditionalRenderingEXT(VulkanHandle<VkCommandBuffer> commandBuffer, VkConditionalRenderingBeginInfoEXT* pConditionalRenderingBegin)
	{
		if (_vkCmdBeginConditionalRenderingEXT == null) throw new VVK.FunctionNotLoadedException("vkCmdBeginConditionalRenderingEXT");
		_vkCmdBeginConditionalRenderingEXT(commandBuffer, pConditionalRenderingBegin);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void vkCmdEndConditionalRenderingEXT(VulkanHandle<VkCommandBuffer> commandBuffer)
	{
		if (_vkCmdEndConditionalRenderingEXT == null) throw new VVK.FunctionNotLoadedException("vkCmdEndConditionalRenderingEXT");
		_vkCmdEndConditionalRenderingEXT(commandBuffer);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void vkCmdResetQueryPool(VulkanHandle<VkCommandBuffer> commandBuffer, VulkanHandle<VkQueryPool> queryPool, uint firstQuery, uint queryCount)
	{
		if (_vkCmdResetQueryPool == null) throw new VVK.FunctionNotLoadedException("vkCmdResetQueryPool");
		_vkCmdResetQueryPool(commandBuffer, queryPool, firstQuery, queryCount);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void vkCmdWriteTimestamp(VulkanHandle<VkCommandBuffer> commandBuffer, VkPipelineStageFlags pipelineStage, VulkanHandle<VkQueryPool> queryPool, uint query)
	{
		if (_vkCmdWriteTimestamp == null) throw new VVK.FunctionNotLoadedException("vkCmdWriteTimestamp");
		_vkCmdWriteTimestamp(commandBuffer, pipelineStage, queryPool, query);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void vkCmdCopyQueryPoolResults(VulkanHandle<VkCommandBuffer> commandBuffer, VulkanHandle<VkQueryPool> queryPool, uint firstQuery, uint queryCount, VulkanHandle<VkBuffer> dstBuffer, ulong dstOffset, ulong stride, VkQueryResultFlags flags)
	{
		if (_vkCmdCopyQueryPoolResults == null) throw new VVK.FunctionNotLoadedException("vkCmdCopyQueryPoolResults");
		_vkCmdCopyQueryPoolResults(commandBuffer, queryPool, firstQuery, queryCount, dstBuffer, dstOffset, stride, flags);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void vkCmdPushConstants(VulkanHandle<VkCommandBuffer> commandBuffer, VulkanHandle<VkPipelineLayout> layout, VkShaderStageFlags stageFlags, uint offset, uint size, void* pValues)
	{
		if (_vkCmdPushConstants == null) throw new VVK.FunctionNotLoadedException("vkCmdPushConstants");
		_vkCmdPushConstants(commandBuffer, layout, stageFlags, offset, size, pValues);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void vkCmdBeginRenderPass(VulkanHandle<VkCommandBuffer> commandBuffer, VkRenderPassBeginInfo* pRenderPassBegin, VkSubpassContents contents)
	{
		if (_vkCmdBeginRenderPass == null) throw new VVK.FunctionNotLoadedException("vkCmdBeginRenderPass");
		_vkCmdBeginRenderPass(commandBuffer, pRenderPassBegin, contents);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void vkCmdNextSubpass(VulkanHandle<VkCommandBuffer> commandBuffer, VkSubpassContents contents)
	{
		if (_vkCmdNextSubpass == null) throw new VVK.FunctionNotLoadedException("vkCmdNextSubpass");
		_vkCmdNextSubpass(commandBuffer, contents);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void vkCmdEndRenderPass(VulkanHandle<VkCommandBuffer> commandBuffer)
	{
		if (_vkCmdEndRenderPass == null) throw new VVK.FunctionNotLoadedException("vkCmdEndRenderPass");
		_vkCmdEndRenderPass(commandBuffer);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void vkCmdExecuteCommands(VulkanHandle<VkCommandBuffer> commandBuffer, uint commandBufferCount, VulkanHandle<VkCommandBuffer>* pCommandBuffers)
	{
		if (_vkCmdExecuteCommands == null) throw new VVK.FunctionNotLoadedException("vkCmdExecuteCommands");
		_vkCmdExecuteCommands(commandBuffer, commandBufferCount, pCommandBuffers);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static VkResult vkCreateSharedSwapchainsKHR(VulkanHandle<VkDevice> device, uint swapchainCount, VkSwapchainCreateInfoKHR* pCreateInfos, VkAllocationCallbacks* pAllocator, VulkanHandle<VkSwapchainKHR>* pSwapchains)
	{
		if (_vkCreateSharedSwapchainsKHR == null) throw new VVK.FunctionNotLoadedException("vkCreateSharedSwapchainsKHR");
		return _vkCreateSharedSwapchainsKHR(device, swapchainCount, pCreateInfos, pAllocator, pSwapchains);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static VkResult vkCreateSwapchainKHR(VulkanHandle<VkDevice> device, VkSwapchainCreateInfoKHR* pCreateInfo, VkAllocationCallbacks* pAllocator, VulkanHandle<VkSwapchainKHR>* pSwapchain)
	{
		if (_vkCreateSwapchainKHR == null) throw new VVK.FunctionNotLoadedException("vkCreateSwapchainKHR");
		return _vkCreateSwapchainKHR(device, pCreateInfo, pAllocator, pSwapchain);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void vkDestroySwapchainKHR(VulkanHandle<VkDevice> device, VulkanHandle<VkSwapchainKHR> swapchain, VkAllocationCallbacks* pAllocator)
	{
		if (_vkDestroySwapchainKHR == null) throw new VVK.FunctionNotLoadedException("vkDestroySwapchainKHR");
		_vkDestroySwapchainKHR(device, swapchain, pAllocator);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static VkResult vkGetSwapchainImagesKHR(VulkanHandle<VkDevice> device, VulkanHandle<VkSwapchainKHR> swapchain, uint* pSwapchainImageCount, VulkanHandle<VkImage>* pSwapchainImages)
	{
		if (_vkGetSwapchainImagesKHR == null) throw new VVK.FunctionNotLoadedException("vkGetSwapchainImagesKHR");
		return _vkGetSwapchainImagesKHR(device, swapchain, pSwapchainImageCount, pSwapchainImages);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static VkResult vkAcquireNextImageKHR(VulkanHandle<VkDevice> device, VulkanHandle<VkSwapchainKHR> swapchain, ulong timeout, VulkanHandle<VkSemaphore> semaphore, VulkanHandle<VkFence> fence, uint* pImageIndex)
	{
		if (_vkAcquireNextImageKHR == null) throw new VVK.FunctionNotLoadedException("vkAcquireNextImageKHR");
		return _vkAcquireNextImageKHR(device, swapchain, timeout, semaphore, fence, pImageIndex);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static VkResult vkQueuePresentKHR(VulkanHandle<VkQueue> queue, VkPresentInfoKHR* pPresentInfo)
	{
		if (_vkQueuePresentKHR == null) throw new VVK.FunctionNotLoadedException("vkQueuePresentKHR");
		return _vkQueuePresentKHR(queue, pPresentInfo);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static VkResult vkDebugMarkerSetObjectNameEXT(VulkanHandle<VkDevice> device, VkDebugMarkerObjectNameInfoEXT* pNameInfo)
	{
		if (_vkDebugMarkerSetObjectNameEXT == null) throw new VVK.FunctionNotLoadedException("vkDebugMarkerSetObjectNameEXT");
		return _vkDebugMarkerSetObjectNameEXT(device, pNameInfo);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static VkResult vkDebugMarkerSetObjectTagEXT(VulkanHandle<VkDevice> device, VkDebugMarkerObjectTagInfoEXT* pTagInfo)
	{
		if (_vkDebugMarkerSetObjectTagEXT == null) throw new VVK.FunctionNotLoadedException("vkDebugMarkerSetObjectTagEXT");
		return _vkDebugMarkerSetObjectTagEXT(device, pTagInfo);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void vkCmdDebugMarkerBeginEXT(VulkanHandle<VkCommandBuffer> commandBuffer, VkDebugMarkerMarkerInfoEXT* pMarkerInfo)
	{
		if (_vkCmdDebugMarkerBeginEXT == null) throw new VVK.FunctionNotLoadedException("vkCmdDebugMarkerBeginEXT");
		_vkCmdDebugMarkerBeginEXT(commandBuffer, pMarkerInfo);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void vkCmdDebugMarkerEndEXT(VulkanHandle<VkCommandBuffer> commandBuffer)
	{
		if (_vkCmdDebugMarkerEndEXT == null) throw new VVK.FunctionNotLoadedException("vkCmdDebugMarkerEndEXT");
		_vkCmdDebugMarkerEndEXT(commandBuffer);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void vkCmdDebugMarkerInsertEXT(VulkanHandle<VkCommandBuffer> commandBuffer, VkDebugMarkerMarkerInfoEXT* pMarkerInfo)
	{
		if (_vkCmdDebugMarkerInsertEXT == null) throw new VVK.FunctionNotLoadedException("vkCmdDebugMarkerInsertEXT");
		_vkCmdDebugMarkerInsertEXT(commandBuffer, pMarkerInfo);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static VkResult vkGetMemoryWin32HandleNV(VulkanHandle<VkDevice> device, VulkanHandle<VkDeviceMemory> memory, VkExternalMemoryHandleTypeFlagsNV handleType, void** pHandle)
	{
		if (_vkGetMemoryWin32HandleNV == null) throw new VVK.FunctionNotLoadedException("vkGetMemoryWin32HandleNV");
		return _vkGetMemoryWin32HandleNV(device, memory, handleType, pHandle);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void vkCmdExecuteGeneratedCommandsNV(VulkanHandle<VkCommandBuffer> commandBuffer, VkBool32 isPreprocessed, VkGeneratedCommandsInfoNV* pGeneratedCommandsInfo)
	{
		if (_vkCmdExecuteGeneratedCommandsNV == null) throw new VVK.FunctionNotLoadedException("vkCmdExecuteGeneratedCommandsNV");
		_vkCmdExecuteGeneratedCommandsNV(commandBuffer, isPreprocessed, pGeneratedCommandsInfo);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void vkCmdPreprocessGeneratedCommandsNV(VulkanHandle<VkCommandBuffer> commandBuffer, VkGeneratedCommandsInfoNV* pGeneratedCommandsInfo)
	{
		if (_vkCmdPreprocessGeneratedCommandsNV == null) throw new VVK.FunctionNotLoadedException("vkCmdPreprocessGeneratedCommandsNV");
		_vkCmdPreprocessGeneratedCommandsNV(commandBuffer, pGeneratedCommandsInfo);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void vkCmdBindPipelineShaderGroupNV(VulkanHandle<VkCommandBuffer> commandBuffer, VkPipelineBindPoint pipelineBindPoint, VulkanHandle<VkPipeline> pipeline, uint groupIndex)
	{
		if (_vkCmdBindPipelineShaderGroupNV == null) throw new VVK.FunctionNotLoadedException("vkCmdBindPipelineShaderGroupNV");
		_vkCmdBindPipelineShaderGroupNV(commandBuffer, pipelineBindPoint, pipeline, groupIndex);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void vkGetGeneratedCommandsMemoryRequirementsNV(VulkanHandle<VkDevice> device, VkGeneratedCommandsMemoryRequirementsInfoNV* pInfo, VkMemoryRequirements2* pMemoryRequirements)
	{
		if (_vkGetGeneratedCommandsMemoryRequirementsNV == null) throw new VVK.FunctionNotLoadedException("vkGetGeneratedCommandsMemoryRequirementsNV");
		_vkGetGeneratedCommandsMemoryRequirementsNV(device, pInfo, pMemoryRequirements);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static VkResult vkCreateIndirectCommandsLayoutNV(VulkanHandle<VkDevice> device, VkIndirectCommandsLayoutCreateInfoNV* pCreateInfo, VkAllocationCallbacks* pAllocator, VulkanHandle<VkIndirectCommandsLayoutNV>* pIndirectCommandsLayout)
	{
		if (_vkCreateIndirectCommandsLayoutNV == null) throw new VVK.FunctionNotLoadedException("vkCreateIndirectCommandsLayoutNV");
		return _vkCreateIndirectCommandsLayoutNV(device, pCreateInfo, pAllocator, pIndirectCommandsLayout);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void vkDestroyIndirectCommandsLayoutNV(VulkanHandle<VkDevice> device, VulkanHandle<VkIndirectCommandsLayoutNV> indirectCommandsLayout, VkAllocationCallbacks* pAllocator)
	{
		if (_vkDestroyIndirectCommandsLayoutNV == null) throw new VVK.FunctionNotLoadedException("vkDestroyIndirectCommandsLayoutNV");
		_vkDestroyIndirectCommandsLayoutNV(device, indirectCommandsLayout, pAllocator);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void vkCmdPushDescriptorSetKHR(VulkanHandle<VkCommandBuffer> commandBuffer, VkPipelineBindPoint pipelineBindPoint, VulkanHandle<VkPipelineLayout> layout, uint set, uint descriptorWriteCount, VkWriteDescriptorSet* pDescriptorWrites)
	{
		if (_vkCmdPushDescriptorSetKHR == null) throw new VVK.FunctionNotLoadedException("vkCmdPushDescriptorSetKHR");
		_vkCmdPushDescriptorSetKHR(commandBuffer, pipelineBindPoint, layout, set, descriptorWriteCount, pDescriptorWrites);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void vkTrimCommandPool(VulkanHandle<VkDevice> device, VulkanHandle<VkCommandPool> commandPool, VkCommandPoolTrimFlags flags)
	{
		if (_vkTrimCommandPool == null) throw new VVK.FunctionNotLoadedException("vkTrimCommandPool");
		_vkTrimCommandPool(device, commandPool, flags);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void vkTrimCommandPoolKHR(VulkanHandle<VkDevice> device, VulkanHandle<VkCommandPool> commandPool, VkCommandPoolTrimFlags flags)
	{
		if (_vkTrimCommandPoolKHR == null) throw new VVK.FunctionNotLoadedException("vkTrimCommandPoolKHR");
		_vkTrimCommandPoolKHR(device, commandPool, flags);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static VkResult vkGetMemoryWin32HandleKHR(VulkanHandle<VkDevice> device, VkMemoryGetWin32HandleInfoKHR* pGetWin32HandleInfo, void** pHandle)
	{
		if (_vkGetMemoryWin32HandleKHR == null) throw new VVK.FunctionNotLoadedException("vkGetMemoryWin32HandleKHR");
		return _vkGetMemoryWin32HandleKHR(device, pGetWin32HandleInfo, pHandle);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static VkResult vkGetMemoryWin32HandlePropertiesKHR(VulkanHandle<VkDevice> device, VkExternalMemoryHandleTypeFlags handleType, void* handle, VkMemoryWin32HandlePropertiesKHR* pMemoryWin32HandleProperties)
	{
		if (_vkGetMemoryWin32HandlePropertiesKHR == null) throw new VVK.FunctionNotLoadedException("vkGetMemoryWin32HandlePropertiesKHR");
		return _vkGetMemoryWin32HandlePropertiesKHR(device, handleType, handle, pMemoryWin32HandleProperties);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static VkResult vkGetMemoryFdKHR(VulkanHandle<VkDevice> device, VkMemoryGetFdInfoKHR* pGetFdInfo, int* pFd)
	{
		if (_vkGetMemoryFdKHR == null) throw new VVK.FunctionNotLoadedException("vkGetMemoryFdKHR");
		return _vkGetMemoryFdKHR(device, pGetFdInfo, pFd);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static VkResult vkGetMemoryFdPropertiesKHR(VulkanHandle<VkDevice> device, VkExternalMemoryHandleTypeFlags handleType, int fd, VkMemoryFdPropertiesKHR* pMemoryFdProperties)
	{
		if (_vkGetMemoryFdPropertiesKHR == null) throw new VVK.FunctionNotLoadedException("vkGetMemoryFdPropertiesKHR");
		return _vkGetMemoryFdPropertiesKHR(device, handleType, fd, pMemoryFdProperties);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static VkResult vkGetSemaphoreWin32HandleKHR(VulkanHandle<VkDevice> device, VkSemaphoreGetWin32HandleInfoKHR* pGetWin32HandleInfo, void** pHandle)
	{
		if (_vkGetSemaphoreWin32HandleKHR == null) throw new VVK.FunctionNotLoadedException("vkGetSemaphoreWin32HandleKHR");
		return _vkGetSemaphoreWin32HandleKHR(device, pGetWin32HandleInfo, pHandle);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static VkResult vkImportSemaphoreWin32HandleKHR(VulkanHandle<VkDevice> device, VkImportSemaphoreWin32HandleInfoKHR* pImportSemaphoreWin32HandleInfo)
	{
		if (_vkImportSemaphoreWin32HandleKHR == null) throw new VVK.FunctionNotLoadedException("vkImportSemaphoreWin32HandleKHR");
		return _vkImportSemaphoreWin32HandleKHR(device, pImportSemaphoreWin32HandleInfo);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static VkResult vkGetSemaphoreFdKHR(VulkanHandle<VkDevice> device, VkSemaphoreGetFdInfoKHR* pGetFdInfo, int* pFd)
	{
		if (_vkGetSemaphoreFdKHR == null) throw new VVK.FunctionNotLoadedException("vkGetSemaphoreFdKHR");
		return _vkGetSemaphoreFdKHR(device, pGetFdInfo, pFd);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static VkResult vkImportSemaphoreFdKHR(VulkanHandle<VkDevice> device, VkImportSemaphoreFdInfoKHR* pImportSemaphoreFdInfo)
	{
		if (_vkImportSemaphoreFdKHR == null) throw new VVK.FunctionNotLoadedException("vkImportSemaphoreFdKHR");
		return _vkImportSemaphoreFdKHR(device, pImportSemaphoreFdInfo);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static VkResult vkGetFenceWin32HandleKHR(VulkanHandle<VkDevice> device, VkFenceGetWin32HandleInfoKHR* pGetWin32HandleInfo, void** pHandle)
	{
		if (_vkGetFenceWin32HandleKHR == null) throw new VVK.FunctionNotLoadedException("vkGetFenceWin32HandleKHR");
		return _vkGetFenceWin32HandleKHR(device, pGetWin32HandleInfo, pHandle);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static VkResult vkImportFenceWin32HandleKHR(VulkanHandle<VkDevice> device, VkImportFenceWin32HandleInfoKHR* pImportFenceWin32HandleInfo)
	{
		if (_vkImportFenceWin32HandleKHR == null) throw new VVK.FunctionNotLoadedException("vkImportFenceWin32HandleKHR");
		return _vkImportFenceWin32HandleKHR(device, pImportFenceWin32HandleInfo);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static VkResult vkGetFenceFdKHR(VulkanHandle<VkDevice> device, VkFenceGetFdInfoKHR* pGetFdInfo, int* pFd)
	{
		if (_vkGetFenceFdKHR == null) throw new VVK.FunctionNotLoadedException("vkGetFenceFdKHR");
		return _vkGetFenceFdKHR(device, pGetFdInfo, pFd);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static VkResult vkImportFenceFdKHR(VulkanHandle<VkDevice> device, VkImportFenceFdInfoKHR* pImportFenceFdInfo)
	{
		if (_vkImportFenceFdKHR == null) throw new VVK.FunctionNotLoadedException("vkImportFenceFdKHR");
		return _vkImportFenceFdKHR(device, pImportFenceFdInfo);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static VkResult vkDisplayPowerControlEXT(VulkanHandle<VkDevice> device, VulkanHandle<VkDisplayKHR> display, VkDisplayPowerInfoEXT* pDisplayPowerInfo)
	{
		if (_vkDisplayPowerControlEXT == null) throw new VVK.FunctionNotLoadedException("vkDisplayPowerControlEXT");
		return _vkDisplayPowerControlEXT(device, display, pDisplayPowerInfo);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static VkResult vkRegisterDeviceEventEXT(VulkanHandle<VkDevice> device, VkDeviceEventInfoEXT* pDeviceEventInfo, VkAllocationCallbacks* pAllocator, VulkanHandle<VkFence>* pFence)
	{
		if (_vkRegisterDeviceEventEXT == null) throw new VVK.FunctionNotLoadedException("vkRegisterDeviceEventEXT");
		return _vkRegisterDeviceEventEXT(device, pDeviceEventInfo, pAllocator, pFence);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static VkResult vkRegisterDisplayEventEXT(VulkanHandle<VkDevice> device, VulkanHandle<VkDisplayKHR> display, VkDisplayEventInfoEXT* pDisplayEventInfo, VkAllocationCallbacks* pAllocator, VulkanHandle<VkFence>* pFence)
	{
		if (_vkRegisterDisplayEventEXT == null) throw new VVK.FunctionNotLoadedException("vkRegisterDisplayEventEXT");
		return _vkRegisterDisplayEventEXT(device, display, pDisplayEventInfo, pAllocator, pFence);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static VkResult vkGetSwapchainCounterEXT(VulkanHandle<VkDevice> device, VulkanHandle<VkSwapchainKHR> swapchain, VkSurfaceCounterFlagsEXT counter, ulong* pCounterValue)
	{
		if (_vkGetSwapchainCounterEXT == null) throw new VVK.FunctionNotLoadedException("vkGetSwapchainCounterEXT");
		return _vkGetSwapchainCounterEXT(device, swapchain, counter, pCounterValue);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void vkGetDeviceGroupPeerMemoryFeatures(VulkanHandle<VkDevice> device, uint heapIndex, uint localDeviceIndex, uint remoteDeviceIndex, VkPeerMemoryFeatureFlags* pPeerMemoryFeatures)
	{
		if (_vkGetDeviceGroupPeerMemoryFeatures == null) throw new VVK.FunctionNotLoadedException("vkGetDeviceGroupPeerMemoryFeatures");
		_vkGetDeviceGroupPeerMemoryFeatures(device, heapIndex, localDeviceIndex, remoteDeviceIndex, pPeerMemoryFeatures);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void vkGetDeviceGroupPeerMemoryFeaturesKHR(VulkanHandle<VkDevice> device, uint heapIndex, uint localDeviceIndex, uint remoteDeviceIndex, VkPeerMemoryFeatureFlags* pPeerMemoryFeatures)
	{
		if (_vkGetDeviceGroupPeerMemoryFeaturesKHR == null) throw new VVK.FunctionNotLoadedException("vkGetDeviceGroupPeerMemoryFeaturesKHR");
		_vkGetDeviceGroupPeerMemoryFeaturesKHR(device, heapIndex, localDeviceIndex, remoteDeviceIndex, pPeerMemoryFeatures);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static VkResult vkBindBufferMemory2(VulkanHandle<VkDevice> device, uint bindInfoCount, VkBindBufferMemoryInfo* pBindInfos)
	{
		if (_vkBindBufferMemory2 == null) throw new VVK.FunctionNotLoadedException("vkBindBufferMemory2");
		return _vkBindBufferMemory2(device, bindInfoCount, pBindInfos);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static VkResult vkBindBufferMemory2KHR(VulkanHandle<VkDevice> device, uint bindInfoCount, VkBindBufferMemoryInfo* pBindInfos)
	{
		if (_vkBindBufferMemory2KHR == null) throw new VVK.FunctionNotLoadedException("vkBindBufferMemory2KHR");
		return _vkBindBufferMemory2KHR(device, bindInfoCount, pBindInfos);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static VkResult vkBindImageMemory2(VulkanHandle<VkDevice> device, uint bindInfoCount, VkBindImageMemoryInfo* pBindInfos)
	{
		if (_vkBindImageMemory2 == null) throw new VVK.FunctionNotLoadedException("vkBindImageMemory2");
		return _vkBindImageMemory2(device, bindInfoCount, pBindInfos);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static VkResult vkBindImageMemory2KHR(VulkanHandle<VkDevice> device, uint bindInfoCount, VkBindImageMemoryInfo* pBindInfos)
	{
		if (_vkBindImageMemory2KHR == null) throw new VVK.FunctionNotLoadedException("vkBindImageMemory2KHR");
		return _vkBindImageMemory2KHR(device, bindInfoCount, pBindInfos);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void vkCmdSetDeviceMask(VulkanHandle<VkCommandBuffer> commandBuffer, uint deviceMask)
	{
		if (_vkCmdSetDeviceMask == null) throw new VVK.FunctionNotLoadedException("vkCmdSetDeviceMask");
		_vkCmdSetDeviceMask(commandBuffer, deviceMask);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void vkCmdSetDeviceMaskKHR(VulkanHandle<VkCommandBuffer> commandBuffer, uint deviceMask)
	{
		if (_vkCmdSetDeviceMaskKHR == null) throw new VVK.FunctionNotLoadedException("vkCmdSetDeviceMaskKHR");
		_vkCmdSetDeviceMaskKHR(commandBuffer, deviceMask);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static VkResult vkGetDeviceGroupPresentCapabilitiesKHR(VulkanHandle<VkDevice> device, VkDeviceGroupPresentCapabilitiesKHR* pDeviceGroupPresentCapabilities)
	{
		if (_vkGetDeviceGroupPresentCapabilitiesKHR == null) throw new VVK.FunctionNotLoadedException("vkGetDeviceGroupPresentCapabilitiesKHR");
		return _vkGetDeviceGroupPresentCapabilitiesKHR(device, pDeviceGroupPresentCapabilities);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static VkResult vkGetDeviceGroupSurfacePresentModesKHR(VulkanHandle<VkDevice> device, VulkanHandle<VkSurfaceKHR> surface, VkDeviceGroupPresentModeFlagsKHR* pModes)
	{
		if (_vkGetDeviceGroupSurfacePresentModesKHR == null) throw new VVK.FunctionNotLoadedException("vkGetDeviceGroupSurfacePresentModesKHR");
		return _vkGetDeviceGroupSurfacePresentModesKHR(device, surface, pModes);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static VkResult vkAcquireNextImage2KHR(VulkanHandle<VkDevice> device, VkAcquireNextImageInfoKHR* pAcquireInfo, uint* pImageIndex)
	{
		if (_vkAcquireNextImage2KHR == null) throw new VVK.FunctionNotLoadedException("vkAcquireNextImage2KHR");
		return _vkAcquireNextImage2KHR(device, pAcquireInfo, pImageIndex);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void vkCmdDispatchBase(VulkanHandle<VkCommandBuffer> commandBuffer, uint baseGroupX, uint baseGroupY, uint baseGroupZ, uint groupCountX, uint groupCountY, uint groupCountZ)
	{
		if (_vkCmdDispatchBase == null) throw new VVK.FunctionNotLoadedException("vkCmdDispatchBase");
		_vkCmdDispatchBase(commandBuffer, baseGroupX, baseGroupY, baseGroupZ, groupCountX, groupCountY, groupCountZ);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void vkCmdDispatchBaseKHR(VulkanHandle<VkCommandBuffer> commandBuffer, uint baseGroupX, uint baseGroupY, uint baseGroupZ, uint groupCountX, uint groupCountY, uint groupCountZ)
	{
		if (_vkCmdDispatchBaseKHR == null) throw new VVK.FunctionNotLoadedException("vkCmdDispatchBaseKHR");
		_vkCmdDispatchBaseKHR(commandBuffer, baseGroupX, baseGroupY, baseGroupZ, groupCountX, groupCountY, groupCountZ);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static VkResult vkCreateDescriptorUpdateTemplate(VulkanHandle<VkDevice> device, VkDescriptorUpdateTemplateCreateInfo* pCreateInfo, VkAllocationCallbacks* pAllocator, VulkanHandle<VkDescriptorUpdateTemplate>* pDescriptorUpdateTemplate)
	{
		if (_vkCreateDescriptorUpdateTemplate == null) throw new VVK.FunctionNotLoadedException("vkCreateDescriptorUpdateTemplate");
		return _vkCreateDescriptorUpdateTemplate(device, pCreateInfo, pAllocator, pDescriptorUpdateTemplate);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static VkResult vkCreateDescriptorUpdateTemplateKHR(VulkanHandle<VkDevice> device, VkDescriptorUpdateTemplateCreateInfo* pCreateInfo, VkAllocationCallbacks* pAllocator, VulkanHandle<VkDescriptorUpdateTemplate>* pDescriptorUpdateTemplate)
	{
		if (_vkCreateDescriptorUpdateTemplateKHR == null) throw new VVK.FunctionNotLoadedException("vkCreateDescriptorUpdateTemplateKHR");
		return _vkCreateDescriptorUpdateTemplateKHR(device, pCreateInfo, pAllocator, pDescriptorUpdateTemplate);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void vkDestroyDescriptorUpdateTemplate(VulkanHandle<VkDevice> device, VulkanHandle<VkDescriptorUpdateTemplate> descriptorUpdateTemplate, VkAllocationCallbacks* pAllocator)
	{
		if (_vkDestroyDescriptorUpdateTemplate == null) throw new VVK.FunctionNotLoadedException("vkDestroyDescriptorUpdateTemplate");
		_vkDestroyDescriptorUpdateTemplate(device, descriptorUpdateTemplate, pAllocator);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void vkDestroyDescriptorUpdateTemplateKHR(VulkanHandle<VkDevice> device, VulkanHandle<VkDescriptorUpdateTemplate> descriptorUpdateTemplate, VkAllocationCallbacks* pAllocator)
	{
		if (_vkDestroyDescriptorUpdateTemplateKHR == null) throw new VVK.FunctionNotLoadedException("vkDestroyDescriptorUpdateTemplateKHR");
		_vkDestroyDescriptorUpdateTemplateKHR(device, descriptorUpdateTemplate, pAllocator);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void vkUpdateDescriptorSetWithTemplate(VulkanHandle<VkDevice> device, VulkanHandle<VkDescriptorSet> descriptorSet, VulkanHandle<VkDescriptorUpdateTemplate> descriptorUpdateTemplate, void* pData)
	{
		if (_vkUpdateDescriptorSetWithTemplate == null) throw new VVK.FunctionNotLoadedException("vkUpdateDescriptorSetWithTemplate");
		_vkUpdateDescriptorSetWithTemplate(device, descriptorSet, descriptorUpdateTemplate, pData);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void vkUpdateDescriptorSetWithTemplateKHR(VulkanHandle<VkDevice> device, VulkanHandle<VkDescriptorSet> descriptorSet, VulkanHandle<VkDescriptorUpdateTemplate> descriptorUpdateTemplate, void* pData)
	{
		if (_vkUpdateDescriptorSetWithTemplateKHR == null) throw new VVK.FunctionNotLoadedException("vkUpdateDescriptorSetWithTemplateKHR");
		_vkUpdateDescriptorSetWithTemplateKHR(device, descriptorSet, descriptorUpdateTemplate, pData);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void vkCmdPushDescriptorSetWithTemplateKHR(VulkanHandle<VkCommandBuffer> commandBuffer, VulkanHandle<VkDescriptorUpdateTemplate> descriptorUpdateTemplate, VulkanHandle<VkPipelineLayout> layout, uint set, void* pData)
	{
		if (_vkCmdPushDescriptorSetWithTemplateKHR == null) throw new VVK.FunctionNotLoadedException("vkCmdPushDescriptorSetWithTemplateKHR");
		_vkCmdPushDescriptorSetWithTemplateKHR(commandBuffer, descriptorUpdateTemplate, layout, set, pData);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void vkSetHdrMetadataEXT(VulkanHandle<VkDevice> device, uint swapchainCount, VulkanHandle<VkSwapchainKHR>* pSwapchains, VkHdrMetadataEXT* pMetadata)
	{
		if (_vkSetHdrMetadataEXT == null) throw new VVK.FunctionNotLoadedException("vkSetHdrMetadataEXT");
		_vkSetHdrMetadataEXT(device, swapchainCount, pSwapchains, pMetadata);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static VkResult vkGetSwapchainStatusKHR(VulkanHandle<VkDevice> device, VulkanHandle<VkSwapchainKHR> swapchain)
	{
		if (_vkGetSwapchainStatusKHR == null) throw new VVK.FunctionNotLoadedException("vkGetSwapchainStatusKHR");
		return _vkGetSwapchainStatusKHR(device, swapchain);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static VkResult vkGetRefreshCycleDurationGOOGLE(VulkanHandle<VkDevice> device, VulkanHandle<VkSwapchainKHR> swapchain, VkRefreshCycleDurationGOOGLE* pDisplayTimingProperties)
	{
		if (_vkGetRefreshCycleDurationGOOGLE == null) throw new VVK.FunctionNotLoadedException("vkGetRefreshCycleDurationGOOGLE");
		return _vkGetRefreshCycleDurationGOOGLE(device, swapchain, pDisplayTimingProperties);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static VkResult vkGetPastPresentationTimingGOOGLE(VulkanHandle<VkDevice> device, VulkanHandle<VkSwapchainKHR> swapchain, uint* pPresentationTimingCount, VkPastPresentationTimingGOOGLE* pPresentationTimings)
	{
		if (_vkGetPastPresentationTimingGOOGLE == null) throw new VVK.FunctionNotLoadedException("vkGetPastPresentationTimingGOOGLE");
		return _vkGetPastPresentationTimingGOOGLE(device, swapchain, pPresentationTimingCount, pPresentationTimings);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void vkCmdSetViewportWScalingNV(VulkanHandle<VkCommandBuffer> commandBuffer, uint firstViewport, uint viewportCount, VkViewportWScalingNV* pViewportWScalings)
	{
		if (_vkCmdSetViewportWScalingNV == null) throw new VVK.FunctionNotLoadedException("vkCmdSetViewportWScalingNV");
		_vkCmdSetViewportWScalingNV(commandBuffer, firstViewport, viewportCount, pViewportWScalings);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void vkCmdSetDiscardRectangleEXT(VulkanHandle<VkCommandBuffer> commandBuffer, uint firstDiscardRectangle, uint discardRectangleCount, VkRect2D* pDiscardRectangles)
	{
		if (_vkCmdSetDiscardRectangleEXT == null) throw new VVK.FunctionNotLoadedException("vkCmdSetDiscardRectangleEXT");
		_vkCmdSetDiscardRectangleEXT(commandBuffer, firstDiscardRectangle, discardRectangleCount, pDiscardRectangles);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void vkCmdSetSampleLocationsEXT(VulkanHandle<VkCommandBuffer> commandBuffer, VkSampleLocationsInfoEXT* pSampleLocationsInfo)
	{
		if (_vkCmdSetSampleLocationsEXT == null) throw new VVK.FunctionNotLoadedException("vkCmdSetSampleLocationsEXT");
		_vkCmdSetSampleLocationsEXT(commandBuffer, pSampleLocationsInfo);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void vkGetBufferMemoryRequirements2(VulkanHandle<VkDevice> device, VkBufferMemoryRequirementsInfo2* pInfo, VkMemoryRequirements2* pMemoryRequirements)
	{
		if (_vkGetBufferMemoryRequirements2 == null) throw new VVK.FunctionNotLoadedException("vkGetBufferMemoryRequirements2");
		_vkGetBufferMemoryRequirements2(device, pInfo, pMemoryRequirements);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void vkGetBufferMemoryRequirements2KHR(VulkanHandle<VkDevice> device, VkBufferMemoryRequirementsInfo2* pInfo, VkMemoryRequirements2* pMemoryRequirements)
	{
		if (_vkGetBufferMemoryRequirements2KHR == null) throw new VVK.FunctionNotLoadedException("vkGetBufferMemoryRequirements2KHR");
		_vkGetBufferMemoryRequirements2KHR(device, pInfo, pMemoryRequirements);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void vkGetImageMemoryRequirements2(VulkanHandle<VkDevice> device, VkImageMemoryRequirementsInfo2* pInfo, VkMemoryRequirements2* pMemoryRequirements)
	{
		if (_vkGetImageMemoryRequirements2 == null) throw new VVK.FunctionNotLoadedException("vkGetImageMemoryRequirements2");
		_vkGetImageMemoryRequirements2(device, pInfo, pMemoryRequirements);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void vkGetImageMemoryRequirements2KHR(VulkanHandle<VkDevice> device, VkImageMemoryRequirementsInfo2* pInfo, VkMemoryRequirements2* pMemoryRequirements)
	{
		if (_vkGetImageMemoryRequirements2KHR == null) throw new VVK.FunctionNotLoadedException("vkGetImageMemoryRequirements2KHR");
		_vkGetImageMemoryRequirements2KHR(device, pInfo, pMemoryRequirements);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void vkGetImageSparseMemoryRequirements2(VulkanHandle<VkDevice> device, VkImageSparseMemoryRequirementsInfo2* pInfo, uint* pSparseMemoryRequirementCount, VkSparseImageMemoryRequirements2* pSparseMemoryRequirements)
	{
		if (_vkGetImageSparseMemoryRequirements2 == null) throw new VVK.FunctionNotLoadedException("vkGetImageSparseMemoryRequirements2");
		_vkGetImageSparseMemoryRequirements2(device, pInfo, pSparseMemoryRequirementCount, pSparseMemoryRequirements);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void vkGetImageSparseMemoryRequirements2KHR(VulkanHandle<VkDevice> device, VkImageSparseMemoryRequirementsInfo2* pInfo, uint* pSparseMemoryRequirementCount, VkSparseImageMemoryRequirements2* pSparseMemoryRequirements)
	{
		if (_vkGetImageSparseMemoryRequirements2KHR == null) throw new VVK.FunctionNotLoadedException("vkGetImageSparseMemoryRequirements2KHR");
		_vkGetImageSparseMemoryRequirements2KHR(device, pInfo, pSparseMemoryRequirementCount, pSparseMemoryRequirements);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static VkResult vkCreateSamplerYcbcrConversion(VulkanHandle<VkDevice> device, VkSamplerYcbcrConversionCreateInfo* pCreateInfo, VkAllocationCallbacks* pAllocator, VulkanHandle<VkSamplerYcbcrConversion>* pYcbcrConversion)
	{
		if (_vkCreateSamplerYcbcrConversion == null) throw new VVK.FunctionNotLoadedException("vkCreateSamplerYcbcrConversion");
		return _vkCreateSamplerYcbcrConversion(device, pCreateInfo, pAllocator, pYcbcrConversion);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static VkResult vkCreateSamplerYcbcrConversionKHR(VulkanHandle<VkDevice> device, VkSamplerYcbcrConversionCreateInfo* pCreateInfo, VkAllocationCallbacks* pAllocator, VulkanHandle<VkSamplerYcbcrConversion>* pYcbcrConversion)
	{
		if (_vkCreateSamplerYcbcrConversionKHR == null) throw new VVK.FunctionNotLoadedException("vkCreateSamplerYcbcrConversionKHR");
		return _vkCreateSamplerYcbcrConversionKHR(device, pCreateInfo, pAllocator, pYcbcrConversion);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void vkDestroySamplerYcbcrConversion(VulkanHandle<VkDevice> device, VulkanHandle<VkSamplerYcbcrConversion> ycbcrConversion, VkAllocationCallbacks* pAllocator)
	{
		if (_vkDestroySamplerYcbcrConversion == null) throw new VVK.FunctionNotLoadedException("vkDestroySamplerYcbcrConversion");
		_vkDestroySamplerYcbcrConversion(device, ycbcrConversion, pAllocator);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void vkDestroySamplerYcbcrConversionKHR(VulkanHandle<VkDevice> device, VulkanHandle<VkSamplerYcbcrConversion> ycbcrConversion, VkAllocationCallbacks* pAllocator)
	{
		if (_vkDestroySamplerYcbcrConversionKHR == null) throw new VVK.FunctionNotLoadedException("vkDestroySamplerYcbcrConversionKHR");
		_vkDestroySamplerYcbcrConversionKHR(device, ycbcrConversion, pAllocator);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void vkGetDeviceQueue2(VulkanHandle<VkDevice> device, VkDeviceQueueInfo2* pQueueInfo, VulkanHandle<VkQueue>* pQueue)
	{
		if (_vkGetDeviceQueue2 == null) throw new VVK.FunctionNotLoadedException("vkGetDeviceQueue2");
		_vkGetDeviceQueue2(device, pQueueInfo, pQueue);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static VkResult vkCreateValidationCacheEXT(VulkanHandle<VkDevice> device, VkValidationCacheCreateInfoEXT* pCreateInfo, VkAllocationCallbacks* pAllocator, VulkanHandle<VkValidationCacheEXT>* pValidationCache)
	{
		if (_vkCreateValidationCacheEXT == null) throw new VVK.FunctionNotLoadedException("vkCreateValidationCacheEXT");
		return _vkCreateValidationCacheEXT(device, pCreateInfo, pAllocator, pValidationCache);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void vkDestroyValidationCacheEXT(VulkanHandle<VkDevice> device, VulkanHandle<VkValidationCacheEXT> validationCache, VkAllocationCallbacks* pAllocator)
	{
		if (_vkDestroyValidationCacheEXT == null) throw new VVK.FunctionNotLoadedException("vkDestroyValidationCacheEXT");
		_vkDestroyValidationCacheEXT(device, validationCache, pAllocator);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static VkResult vkGetValidationCacheDataEXT(VulkanHandle<VkDevice> device, VulkanHandle<VkValidationCacheEXT> validationCache, ulong* pDataSize, void* pData)
	{
		if (_vkGetValidationCacheDataEXT == null) throw new VVK.FunctionNotLoadedException("vkGetValidationCacheDataEXT");
		return _vkGetValidationCacheDataEXT(device, validationCache, pDataSize, pData);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static VkResult vkMergeValidationCachesEXT(VulkanHandle<VkDevice> device, VulkanHandle<VkValidationCacheEXT> dstCache, uint srcCacheCount, VulkanHandle<VkValidationCacheEXT>* pSrcCaches)
	{
		if (_vkMergeValidationCachesEXT == null) throw new VVK.FunctionNotLoadedException("vkMergeValidationCachesEXT");
		return _vkMergeValidationCachesEXT(device, dstCache, srcCacheCount, pSrcCaches);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void vkGetDescriptorSetLayoutSupport(VulkanHandle<VkDevice> device, VkDescriptorSetLayoutCreateInfo* pCreateInfo, VkDescriptorSetLayoutSupport* pSupport)
	{
		if (_vkGetDescriptorSetLayoutSupport == null) throw new VVK.FunctionNotLoadedException("vkGetDescriptorSetLayoutSupport");
		_vkGetDescriptorSetLayoutSupport(device, pCreateInfo, pSupport);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void vkGetDescriptorSetLayoutSupportKHR(VulkanHandle<VkDevice> device, VkDescriptorSetLayoutCreateInfo* pCreateInfo, VkDescriptorSetLayoutSupport* pSupport)
	{
		if (_vkGetDescriptorSetLayoutSupportKHR == null) throw new VVK.FunctionNotLoadedException("vkGetDescriptorSetLayoutSupportKHR");
		_vkGetDescriptorSetLayoutSupportKHR(device, pCreateInfo, pSupport);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static VkResult vkGetSwapchainGrallocUsageANDROID(VulkanHandle<VkDevice> device, VkFormat format, VkImageUsageFlags imageUsage, int* grallocUsage)
	{
		if (_vkGetSwapchainGrallocUsageANDROID == null) throw new VVK.FunctionNotLoadedException("vkGetSwapchainGrallocUsageANDROID");
		return _vkGetSwapchainGrallocUsageANDROID(device, format, imageUsage, grallocUsage);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static VkResult vkGetSwapchainGrallocUsage2ANDROID(VulkanHandle<VkDevice> device, VkFormat format, VkImageUsageFlags imageUsage, VkSwapchainImageUsageFlagsANDROID swapchainImageUsage, ulong* grallocConsumerUsage, ulong* grallocProducerUsage)
	{
		if (_vkGetSwapchainGrallocUsage2ANDROID == null) throw new VVK.FunctionNotLoadedException("vkGetSwapchainGrallocUsage2ANDROID");
		return _vkGetSwapchainGrallocUsage2ANDROID(device, format, imageUsage, swapchainImageUsage, grallocConsumerUsage, grallocProducerUsage);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static VkResult vkAcquireImageANDROID(VulkanHandle<VkDevice> device, VulkanHandle<VkImage> image, int nativeFenceFd, VulkanHandle<VkSemaphore> semaphore, VulkanHandle<VkFence> fence)
	{
		if (_vkAcquireImageANDROID == null) throw new VVK.FunctionNotLoadedException("vkAcquireImageANDROID");
		return _vkAcquireImageANDROID(device, image, nativeFenceFd, semaphore, fence);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static VkResult vkQueueSignalReleaseImageANDROID(VulkanHandle<VkQueue> queue, uint waitSemaphoreCount, VulkanHandle<VkSemaphore>* pWaitSemaphores, VulkanHandle<VkImage> image, int* pNativeFenceFd)
	{
		if (_vkQueueSignalReleaseImageANDROID == null) throw new VVK.FunctionNotLoadedException("vkQueueSignalReleaseImageANDROID");
		return _vkQueueSignalReleaseImageANDROID(queue, waitSemaphoreCount, pWaitSemaphores, image, pNativeFenceFd);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static VkResult vkGetShaderInfoAMD(VulkanHandle<VkDevice> device, VulkanHandle<VkPipeline> pipeline, VkShaderStageFlags shaderStage, VkShaderInfoTypeAMD infoType, ulong* pInfoSize, void* pInfo)
	{
		if (_vkGetShaderInfoAMD == null) throw new VVK.FunctionNotLoadedException("vkGetShaderInfoAMD");
		return _vkGetShaderInfoAMD(device, pipeline, shaderStage, infoType, pInfoSize, pInfo);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void vkSetLocalDimmingAMD(VulkanHandle<VkDevice> device, VulkanHandle<VkSwapchainKHR> swapChain, VkBool32 localDimmingEnable)
	{
		if (_vkSetLocalDimmingAMD == null) throw new VVK.FunctionNotLoadedException("vkSetLocalDimmingAMD");
		_vkSetLocalDimmingAMD(device, swapChain, localDimmingEnable);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static VkResult vkGetCalibratedTimestampsEXT(VulkanHandle<VkDevice> device, uint timestampCount, VkCalibratedTimestampInfoEXT* pTimestampInfos, ulong* pTimestamps, ulong* pMaxDeviation)
	{
		if (_vkGetCalibratedTimestampsEXT == null) throw new VVK.FunctionNotLoadedException("vkGetCalibratedTimestampsEXT");
		return _vkGetCalibratedTimestampsEXT(device, timestampCount, pTimestampInfos, pTimestamps, pMaxDeviation);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static VkResult vkSetDebugUtilsObjectNameEXT(VulkanHandle<VkDevice> device, VkDebugUtilsObjectNameInfoEXT* pNameInfo)
	{
		if (_vkSetDebugUtilsObjectNameEXT == null) throw new VVK.FunctionNotLoadedException("vkSetDebugUtilsObjectNameEXT");
		return _vkSetDebugUtilsObjectNameEXT(device, pNameInfo);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static VkResult vkSetDebugUtilsObjectTagEXT(VulkanHandle<VkDevice> device, VkDebugUtilsObjectTagInfoEXT* pTagInfo)
	{
		if (_vkSetDebugUtilsObjectTagEXT == null) throw new VVK.FunctionNotLoadedException("vkSetDebugUtilsObjectTagEXT");
		return _vkSetDebugUtilsObjectTagEXT(device, pTagInfo);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void vkQueueBeginDebugUtilsLabelEXT(VulkanHandle<VkQueue> queue, VkDebugUtilsLabelEXT* pLabelInfo)
	{
		if (_vkQueueBeginDebugUtilsLabelEXT == null) throw new VVK.FunctionNotLoadedException("vkQueueBeginDebugUtilsLabelEXT");
		_vkQueueBeginDebugUtilsLabelEXT(queue, pLabelInfo);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void vkQueueEndDebugUtilsLabelEXT(VulkanHandle<VkQueue> queue)
	{
		if (_vkQueueEndDebugUtilsLabelEXT == null) throw new VVK.FunctionNotLoadedException("vkQueueEndDebugUtilsLabelEXT");
		_vkQueueEndDebugUtilsLabelEXT(queue);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void vkQueueInsertDebugUtilsLabelEXT(VulkanHandle<VkQueue> queue, VkDebugUtilsLabelEXT* pLabelInfo)
	{
		if (_vkQueueInsertDebugUtilsLabelEXT == null) throw new VVK.FunctionNotLoadedException("vkQueueInsertDebugUtilsLabelEXT");
		_vkQueueInsertDebugUtilsLabelEXT(queue, pLabelInfo);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void vkCmdBeginDebugUtilsLabelEXT(VulkanHandle<VkCommandBuffer> commandBuffer, VkDebugUtilsLabelEXT* pLabelInfo)
	{
		if (_vkCmdBeginDebugUtilsLabelEXT == null) throw new VVK.FunctionNotLoadedException("vkCmdBeginDebugUtilsLabelEXT");
		_vkCmdBeginDebugUtilsLabelEXT(commandBuffer, pLabelInfo);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void vkCmdEndDebugUtilsLabelEXT(VulkanHandle<VkCommandBuffer> commandBuffer)
	{
		if (_vkCmdEndDebugUtilsLabelEXT == null) throw new VVK.FunctionNotLoadedException("vkCmdEndDebugUtilsLabelEXT");
		_vkCmdEndDebugUtilsLabelEXT(commandBuffer);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void vkCmdInsertDebugUtilsLabelEXT(VulkanHandle<VkCommandBuffer> commandBuffer, VkDebugUtilsLabelEXT* pLabelInfo)
	{
		if (_vkCmdInsertDebugUtilsLabelEXT == null) throw new VVK.FunctionNotLoadedException("vkCmdInsertDebugUtilsLabelEXT");
		_vkCmdInsertDebugUtilsLabelEXT(commandBuffer, pLabelInfo);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static VkResult vkGetMemoryHostPointerPropertiesEXT(VulkanHandle<VkDevice> device, VkExternalMemoryHandleTypeFlags handleType, void* pHostPointer, VkMemoryHostPointerPropertiesEXT* pMemoryHostPointerProperties)
	{
		if (_vkGetMemoryHostPointerPropertiesEXT == null) throw new VVK.FunctionNotLoadedException("vkGetMemoryHostPointerPropertiesEXT");
		return _vkGetMemoryHostPointerPropertiesEXT(device, handleType, pHostPointer, pMemoryHostPointerProperties);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void vkCmdWriteBufferMarkerAMD(VulkanHandle<VkCommandBuffer> commandBuffer, VkPipelineStageFlags pipelineStage, VulkanHandle<VkBuffer> dstBuffer, ulong dstOffset, uint marker)
	{
		if (_vkCmdWriteBufferMarkerAMD == null) throw new VVK.FunctionNotLoadedException("vkCmdWriteBufferMarkerAMD");
		_vkCmdWriteBufferMarkerAMD(commandBuffer, pipelineStage, dstBuffer, dstOffset, marker);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static VkResult vkCreateRenderPass2(VulkanHandle<VkDevice> device, VkRenderPassCreateInfo2* pCreateInfo, VkAllocationCallbacks* pAllocator, VulkanHandle<VkRenderPass>* pRenderPass)
	{
		if (_vkCreateRenderPass2 == null) throw new VVK.FunctionNotLoadedException("vkCreateRenderPass2");
		return _vkCreateRenderPass2(device, pCreateInfo, pAllocator, pRenderPass);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static VkResult vkCreateRenderPass2KHR(VulkanHandle<VkDevice> device, VkRenderPassCreateInfo2* pCreateInfo, VkAllocationCallbacks* pAllocator, VulkanHandle<VkRenderPass>* pRenderPass)
	{
		if (_vkCreateRenderPass2KHR == null) throw new VVK.FunctionNotLoadedException("vkCreateRenderPass2KHR");
		return _vkCreateRenderPass2KHR(device, pCreateInfo, pAllocator, pRenderPass);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void vkCmdBeginRenderPass2(VulkanHandle<VkCommandBuffer> commandBuffer, VkRenderPassBeginInfo* pRenderPassBegin, VkSubpassBeginInfo* pSubpassBeginInfo)
	{
		if (_vkCmdBeginRenderPass2 == null) throw new VVK.FunctionNotLoadedException("vkCmdBeginRenderPass2");
		_vkCmdBeginRenderPass2(commandBuffer, pRenderPassBegin, pSubpassBeginInfo);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void vkCmdBeginRenderPass2KHR(VulkanHandle<VkCommandBuffer> commandBuffer, VkRenderPassBeginInfo* pRenderPassBegin, VkSubpassBeginInfo* pSubpassBeginInfo)
	{
		if (_vkCmdBeginRenderPass2KHR == null) throw new VVK.FunctionNotLoadedException("vkCmdBeginRenderPass2KHR");
		_vkCmdBeginRenderPass2KHR(commandBuffer, pRenderPassBegin, pSubpassBeginInfo);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void vkCmdNextSubpass2(VulkanHandle<VkCommandBuffer> commandBuffer, VkSubpassBeginInfo* pSubpassBeginInfo, VkSubpassEndInfo* pSubpassEndInfo)
	{
		if (_vkCmdNextSubpass2 == null) throw new VVK.FunctionNotLoadedException("vkCmdNextSubpass2");
		_vkCmdNextSubpass2(commandBuffer, pSubpassBeginInfo, pSubpassEndInfo);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void vkCmdNextSubpass2KHR(VulkanHandle<VkCommandBuffer> commandBuffer, VkSubpassBeginInfo* pSubpassBeginInfo, VkSubpassEndInfo* pSubpassEndInfo)
	{
		if (_vkCmdNextSubpass2KHR == null) throw new VVK.FunctionNotLoadedException("vkCmdNextSubpass2KHR");
		_vkCmdNextSubpass2KHR(commandBuffer, pSubpassBeginInfo, pSubpassEndInfo);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void vkCmdEndRenderPass2(VulkanHandle<VkCommandBuffer> commandBuffer, VkSubpassEndInfo* pSubpassEndInfo)
	{
		if (_vkCmdEndRenderPass2 == null) throw new VVK.FunctionNotLoadedException("vkCmdEndRenderPass2");
		_vkCmdEndRenderPass2(commandBuffer, pSubpassEndInfo);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void vkCmdEndRenderPass2KHR(VulkanHandle<VkCommandBuffer> commandBuffer, VkSubpassEndInfo* pSubpassEndInfo)
	{
		if (_vkCmdEndRenderPass2KHR == null) throw new VVK.FunctionNotLoadedException("vkCmdEndRenderPass2KHR");
		_vkCmdEndRenderPass2KHR(commandBuffer, pSubpassEndInfo);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static VkResult vkGetSemaphoreCounterValue(VulkanHandle<VkDevice> device, VulkanHandle<VkSemaphore> semaphore, ulong* pValue)
	{
		if (_vkGetSemaphoreCounterValue == null) throw new VVK.FunctionNotLoadedException("vkGetSemaphoreCounterValue");
		return _vkGetSemaphoreCounterValue(device, semaphore, pValue);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static VkResult vkGetSemaphoreCounterValueKHR(VulkanHandle<VkDevice> device, VulkanHandle<VkSemaphore> semaphore, ulong* pValue)
	{
		if (_vkGetSemaphoreCounterValueKHR == null) throw new VVK.FunctionNotLoadedException("vkGetSemaphoreCounterValueKHR");
		return _vkGetSemaphoreCounterValueKHR(device, semaphore, pValue);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static VkResult vkWaitSemaphores(VulkanHandle<VkDevice> device, VkSemaphoreWaitInfo* pWaitInfo, ulong timeout)
	{
		if (_vkWaitSemaphores == null) throw new VVK.FunctionNotLoadedException("vkWaitSemaphores");
		return _vkWaitSemaphores(device, pWaitInfo, timeout);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static VkResult vkWaitSemaphoresKHR(VulkanHandle<VkDevice> device, VkSemaphoreWaitInfo* pWaitInfo, ulong timeout)
	{
		if (_vkWaitSemaphoresKHR == null) throw new VVK.FunctionNotLoadedException("vkWaitSemaphoresKHR");
		return _vkWaitSemaphoresKHR(device, pWaitInfo, timeout);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static VkResult vkSignalSemaphore(VulkanHandle<VkDevice> device, VkSemaphoreSignalInfo* pSignalInfo)
	{
		if (_vkSignalSemaphore == null) throw new VVK.FunctionNotLoadedException("vkSignalSemaphore");
		return _vkSignalSemaphore(device, pSignalInfo);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static VkResult vkSignalSemaphoreKHR(VulkanHandle<VkDevice> device, VkSemaphoreSignalInfo* pSignalInfo)
	{
		if (_vkSignalSemaphoreKHR == null) throw new VVK.FunctionNotLoadedException("vkSignalSemaphoreKHR");
		return _vkSignalSemaphoreKHR(device, pSignalInfo);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static VkResult vkGetAndroidHardwareBufferPropertiesANDROID(VulkanHandle<VkDevice> device, void* buffer, VkAndroidHardwareBufferPropertiesANDROID* pProperties)
	{
		if (_vkGetAndroidHardwareBufferPropertiesANDROID == null) throw new VVK.FunctionNotLoadedException("vkGetAndroidHardwareBufferPropertiesANDROID");
		return _vkGetAndroidHardwareBufferPropertiesANDROID(device, buffer, pProperties);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static VkResult vkGetMemoryAndroidHardwareBufferANDROID(VulkanHandle<VkDevice> device, VkMemoryGetAndroidHardwareBufferInfoANDROID* pInfo, void** pBuffer)
	{
		if (_vkGetMemoryAndroidHardwareBufferANDROID == null) throw new VVK.FunctionNotLoadedException("vkGetMemoryAndroidHardwareBufferANDROID");
		return _vkGetMemoryAndroidHardwareBufferANDROID(device, pInfo, pBuffer);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void vkCmdDrawIndirectCount(VulkanHandle<VkCommandBuffer> commandBuffer, VulkanHandle<VkBuffer> buffer, ulong offset, VulkanHandle<VkBuffer> countBuffer, ulong countBufferOffset, uint maxDrawCount, uint stride)
	{
		if (_vkCmdDrawIndirectCount == null) throw new VVK.FunctionNotLoadedException("vkCmdDrawIndirectCount");
		_vkCmdDrawIndirectCount(commandBuffer, buffer, offset, countBuffer, countBufferOffset, maxDrawCount, stride);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void vkCmdDrawIndirectCountKHR(VulkanHandle<VkCommandBuffer> commandBuffer, VulkanHandle<VkBuffer> buffer, ulong offset, VulkanHandle<VkBuffer> countBuffer, ulong countBufferOffset, uint maxDrawCount, uint stride)
	{
		if (_vkCmdDrawIndirectCountKHR == null) throw new VVK.FunctionNotLoadedException("vkCmdDrawIndirectCountKHR");
		_vkCmdDrawIndirectCountKHR(commandBuffer, buffer, offset, countBuffer, countBufferOffset, maxDrawCount, stride);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void vkCmdDrawIndirectCountAMD(VulkanHandle<VkCommandBuffer> commandBuffer, VulkanHandle<VkBuffer> buffer, ulong offset, VulkanHandle<VkBuffer> countBuffer, ulong countBufferOffset, uint maxDrawCount, uint stride)
	{
		if (_vkCmdDrawIndirectCountAMD == null) throw new VVK.FunctionNotLoadedException("vkCmdDrawIndirectCountAMD");
		_vkCmdDrawIndirectCountAMD(commandBuffer, buffer, offset, countBuffer, countBufferOffset, maxDrawCount, stride);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void vkCmdDrawIndexedIndirectCount(VulkanHandle<VkCommandBuffer> commandBuffer, VulkanHandle<VkBuffer> buffer, ulong offset, VulkanHandle<VkBuffer> countBuffer, ulong countBufferOffset, uint maxDrawCount, uint stride)
	{
		if (_vkCmdDrawIndexedIndirectCount == null) throw new VVK.FunctionNotLoadedException("vkCmdDrawIndexedIndirectCount");
		_vkCmdDrawIndexedIndirectCount(commandBuffer, buffer, offset, countBuffer, countBufferOffset, maxDrawCount, stride);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void vkCmdDrawIndexedIndirectCountKHR(VulkanHandle<VkCommandBuffer> commandBuffer, VulkanHandle<VkBuffer> buffer, ulong offset, VulkanHandle<VkBuffer> countBuffer, ulong countBufferOffset, uint maxDrawCount, uint stride)
	{
		if (_vkCmdDrawIndexedIndirectCountKHR == null) throw new VVK.FunctionNotLoadedException("vkCmdDrawIndexedIndirectCountKHR");
		_vkCmdDrawIndexedIndirectCountKHR(commandBuffer, buffer, offset, countBuffer, countBufferOffset, maxDrawCount, stride);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void vkCmdDrawIndexedIndirectCountAMD(VulkanHandle<VkCommandBuffer> commandBuffer, VulkanHandle<VkBuffer> buffer, ulong offset, VulkanHandle<VkBuffer> countBuffer, ulong countBufferOffset, uint maxDrawCount, uint stride)
	{
		if (_vkCmdDrawIndexedIndirectCountAMD == null) throw new VVK.FunctionNotLoadedException("vkCmdDrawIndexedIndirectCountAMD");
		_vkCmdDrawIndexedIndirectCountAMD(commandBuffer, buffer, offset, countBuffer, countBufferOffset, maxDrawCount, stride);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void vkCmdSetCheckpointNV(VulkanHandle<VkCommandBuffer> commandBuffer, void* pCheckpointMarker)
	{
		if (_vkCmdSetCheckpointNV == null) throw new VVK.FunctionNotLoadedException("vkCmdSetCheckpointNV");
		_vkCmdSetCheckpointNV(commandBuffer, pCheckpointMarker);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void vkGetQueueCheckpointDataNV(VulkanHandle<VkQueue> queue, uint* pCheckpointDataCount, VkCheckpointDataNV* pCheckpointData)
	{
		if (_vkGetQueueCheckpointDataNV == null) throw new VVK.FunctionNotLoadedException("vkGetQueueCheckpointDataNV");
		_vkGetQueueCheckpointDataNV(queue, pCheckpointDataCount, pCheckpointData);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void vkCmdBindTransformFeedbackBuffersEXT(VulkanHandle<VkCommandBuffer> commandBuffer, uint firstBinding, uint bindingCount, VulkanHandle<VkBuffer>* pBuffers, ulong* pOffsets, ulong* pSizes)
	{
		if (_vkCmdBindTransformFeedbackBuffersEXT == null) throw new VVK.FunctionNotLoadedException("vkCmdBindTransformFeedbackBuffersEXT");
		_vkCmdBindTransformFeedbackBuffersEXT(commandBuffer, firstBinding, bindingCount, pBuffers, pOffsets, pSizes);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void vkCmdBeginTransformFeedbackEXT(VulkanHandle<VkCommandBuffer> commandBuffer, uint firstCounterBuffer, uint counterBufferCount, VulkanHandle<VkBuffer>* pCounterBuffers, ulong* pCounterBufferOffsets)
	{
		if (_vkCmdBeginTransformFeedbackEXT == null) throw new VVK.FunctionNotLoadedException("vkCmdBeginTransformFeedbackEXT");
		_vkCmdBeginTransformFeedbackEXT(commandBuffer, firstCounterBuffer, counterBufferCount, pCounterBuffers, pCounterBufferOffsets);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void vkCmdEndTransformFeedbackEXT(VulkanHandle<VkCommandBuffer> commandBuffer, uint firstCounterBuffer, uint counterBufferCount, VulkanHandle<VkBuffer>* pCounterBuffers, ulong* pCounterBufferOffsets)
	{
		if (_vkCmdEndTransformFeedbackEXT == null) throw new VVK.FunctionNotLoadedException("vkCmdEndTransformFeedbackEXT");
		_vkCmdEndTransformFeedbackEXT(commandBuffer, firstCounterBuffer, counterBufferCount, pCounterBuffers, pCounterBufferOffsets);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void vkCmdBeginQueryIndexedEXT(VulkanHandle<VkCommandBuffer> commandBuffer, VulkanHandle<VkQueryPool> queryPool, uint query, VkQueryControlFlags flags, uint index)
	{
		if (_vkCmdBeginQueryIndexedEXT == null) throw new VVK.FunctionNotLoadedException("vkCmdBeginQueryIndexedEXT");
		_vkCmdBeginQueryIndexedEXT(commandBuffer, queryPool, query, flags, index);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void vkCmdEndQueryIndexedEXT(VulkanHandle<VkCommandBuffer> commandBuffer, VulkanHandle<VkQueryPool> queryPool, uint query, uint index)
	{
		if (_vkCmdEndQueryIndexedEXT == null) throw new VVK.FunctionNotLoadedException("vkCmdEndQueryIndexedEXT");
		_vkCmdEndQueryIndexedEXT(commandBuffer, queryPool, query, index);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void vkCmdDrawIndirectByteCountEXT(VulkanHandle<VkCommandBuffer> commandBuffer, uint instanceCount, uint firstInstance, VulkanHandle<VkBuffer> counterBuffer, ulong counterBufferOffset, uint counterOffset, uint vertexStride)
	{
		if (_vkCmdDrawIndirectByteCountEXT == null) throw new VVK.FunctionNotLoadedException("vkCmdDrawIndirectByteCountEXT");
		_vkCmdDrawIndirectByteCountEXT(commandBuffer, instanceCount, firstInstance, counterBuffer, counterBufferOffset, counterOffset, vertexStride);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void vkCmdSetExclusiveScissorNV(VulkanHandle<VkCommandBuffer> commandBuffer, uint firstExclusiveScissor, uint exclusiveScissorCount, VkRect2D* pExclusiveScissors)
	{
		if (_vkCmdSetExclusiveScissorNV == null) throw new VVK.FunctionNotLoadedException("vkCmdSetExclusiveScissorNV");
		_vkCmdSetExclusiveScissorNV(commandBuffer, firstExclusiveScissor, exclusiveScissorCount, pExclusiveScissors);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void vkCmdBindShadingRateImageNV(VulkanHandle<VkCommandBuffer> commandBuffer, VulkanHandle<VkImageView> imageView, VkImageLayout imageLayout)
	{
		if (_vkCmdBindShadingRateImageNV == null) throw new VVK.FunctionNotLoadedException("vkCmdBindShadingRateImageNV");
		_vkCmdBindShadingRateImageNV(commandBuffer, imageView, imageLayout);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void vkCmdSetViewportShadingRatePaletteNV(VulkanHandle<VkCommandBuffer> commandBuffer, uint firstViewport, uint viewportCount, VkShadingRatePaletteNV* pShadingRatePalettes)
	{
		if (_vkCmdSetViewportShadingRatePaletteNV == null) throw new VVK.FunctionNotLoadedException("vkCmdSetViewportShadingRatePaletteNV");
		_vkCmdSetViewportShadingRatePaletteNV(commandBuffer, firstViewport, viewportCount, pShadingRatePalettes);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void vkCmdSetCoarseSampleOrderNV(VulkanHandle<VkCommandBuffer> commandBuffer, VkCoarseSampleOrderTypeNV sampleOrderType, uint customSampleOrderCount, VkCoarseSampleOrderCustomNV* pCustomSampleOrders)
	{
		if (_vkCmdSetCoarseSampleOrderNV == null) throw new VVK.FunctionNotLoadedException("vkCmdSetCoarseSampleOrderNV");
		_vkCmdSetCoarseSampleOrderNV(commandBuffer, sampleOrderType, customSampleOrderCount, pCustomSampleOrders);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void vkCmdDrawMeshTasksNV(VulkanHandle<VkCommandBuffer> commandBuffer, uint taskCount, uint firstTask)
	{
		if (_vkCmdDrawMeshTasksNV == null) throw new VVK.FunctionNotLoadedException("vkCmdDrawMeshTasksNV");
		_vkCmdDrawMeshTasksNV(commandBuffer, taskCount, firstTask);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void vkCmdDrawMeshTasksIndirectNV(VulkanHandle<VkCommandBuffer> commandBuffer, VulkanHandle<VkBuffer> buffer, ulong offset, uint drawCount, uint stride)
	{
		if (_vkCmdDrawMeshTasksIndirectNV == null) throw new VVK.FunctionNotLoadedException("vkCmdDrawMeshTasksIndirectNV");
		_vkCmdDrawMeshTasksIndirectNV(commandBuffer, buffer, offset, drawCount, stride);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void vkCmdDrawMeshTasksIndirectCountNV(VulkanHandle<VkCommandBuffer> commandBuffer, VulkanHandle<VkBuffer> buffer, ulong offset, VulkanHandle<VkBuffer> countBuffer, ulong countBufferOffset, uint maxDrawCount, uint stride)
	{
		if (_vkCmdDrawMeshTasksIndirectCountNV == null) throw new VVK.FunctionNotLoadedException("vkCmdDrawMeshTasksIndirectCountNV");
		_vkCmdDrawMeshTasksIndirectCountNV(commandBuffer, buffer, offset, countBuffer, countBufferOffset, maxDrawCount, stride);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static VkResult vkCompileDeferredNV(VulkanHandle<VkDevice> device, VulkanHandle<VkPipeline> pipeline, uint shader)
	{
		if (_vkCompileDeferredNV == null) throw new VVK.FunctionNotLoadedException("vkCompileDeferredNV");
		return _vkCompileDeferredNV(device, pipeline, shader);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static VkResult vkCreateAccelerationStructureNV(VulkanHandle<VkDevice> device, VkAccelerationStructureCreateInfoNV* pCreateInfo, VkAllocationCallbacks* pAllocator, VulkanHandle<VkAccelerationStructureNV>* pAccelerationStructure)
	{
		if (_vkCreateAccelerationStructureNV == null) throw new VVK.FunctionNotLoadedException("vkCreateAccelerationStructureNV");
		return _vkCreateAccelerationStructureNV(device, pCreateInfo, pAllocator, pAccelerationStructure);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void vkDestroyAccelerationStructureKHR(VulkanHandle<VkDevice> device, VulkanHandle<VkAccelerationStructureKHR> accelerationStructure, VkAllocationCallbacks* pAllocator)
	{
		if (_vkDestroyAccelerationStructureKHR == null) throw new VVK.FunctionNotLoadedException("vkDestroyAccelerationStructureKHR");
		_vkDestroyAccelerationStructureKHR(device, accelerationStructure, pAllocator);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void vkDestroyAccelerationStructureNV(VulkanHandle<VkDevice> device, VulkanHandle<VkAccelerationStructureNV> accelerationStructure, VkAllocationCallbacks* pAllocator)
	{
		if (_vkDestroyAccelerationStructureNV == null) throw new VVK.FunctionNotLoadedException("vkDestroyAccelerationStructureNV");
		_vkDestroyAccelerationStructureNV(device, accelerationStructure, pAllocator);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void vkGetAccelerationStructureMemoryRequirementsNV(VulkanHandle<VkDevice> device, VkAccelerationStructureMemoryRequirementsInfoNV* pInfo, VkMemoryRequirements2KHR* pMemoryRequirements)
	{
		if (_vkGetAccelerationStructureMemoryRequirementsNV == null) throw new VVK.FunctionNotLoadedException("vkGetAccelerationStructureMemoryRequirementsNV");
		_vkGetAccelerationStructureMemoryRequirementsNV(device, pInfo, pMemoryRequirements);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static VkResult vkBindAccelerationStructureMemoryNV(VulkanHandle<VkDevice> device, uint bindInfoCount, VkBindAccelerationStructureMemoryInfoNV* pBindInfos)
	{
		if (_vkBindAccelerationStructureMemoryNV == null) throw new VVK.FunctionNotLoadedException("vkBindAccelerationStructureMemoryNV");
		return _vkBindAccelerationStructureMemoryNV(device, bindInfoCount, pBindInfos);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void vkCmdCopyAccelerationStructureNV(VulkanHandle<VkCommandBuffer> commandBuffer, VulkanHandle<VkAccelerationStructureNV> dst, VulkanHandle<VkAccelerationStructureNV> src, VkCopyAccelerationStructureModeKHR mode)
	{
		if (_vkCmdCopyAccelerationStructureNV == null) throw new VVK.FunctionNotLoadedException("vkCmdCopyAccelerationStructureNV");
		_vkCmdCopyAccelerationStructureNV(commandBuffer, dst, src, mode);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void vkCmdCopyAccelerationStructureKHR(VulkanHandle<VkCommandBuffer> commandBuffer, VkCopyAccelerationStructureInfoKHR* pInfo)
	{
		if (_vkCmdCopyAccelerationStructureKHR == null) throw new VVK.FunctionNotLoadedException("vkCmdCopyAccelerationStructureKHR");
		_vkCmdCopyAccelerationStructureKHR(commandBuffer, pInfo);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static VkResult vkCopyAccelerationStructureKHR(VulkanHandle<VkDevice> device, VulkanHandle<VkDeferredOperationKHR> deferredOperation, VkCopyAccelerationStructureInfoKHR* pInfo)
	{
		if (_vkCopyAccelerationStructureKHR == null) throw new VVK.FunctionNotLoadedException("vkCopyAccelerationStructureKHR");
		return _vkCopyAccelerationStructureKHR(device, deferredOperation, pInfo);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void vkCmdCopyAccelerationStructureToMemoryKHR(VulkanHandle<VkCommandBuffer> commandBuffer, VkCopyAccelerationStructureToMemoryInfoKHR* pInfo)
	{
		if (_vkCmdCopyAccelerationStructureToMemoryKHR == null) throw new VVK.FunctionNotLoadedException("vkCmdCopyAccelerationStructureToMemoryKHR");
		_vkCmdCopyAccelerationStructureToMemoryKHR(commandBuffer, pInfo);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static VkResult vkCopyAccelerationStructureToMemoryKHR(VulkanHandle<VkDevice> device, VulkanHandle<VkDeferredOperationKHR> deferredOperation, VkCopyAccelerationStructureToMemoryInfoKHR* pInfo)
	{
		if (_vkCopyAccelerationStructureToMemoryKHR == null) throw new VVK.FunctionNotLoadedException("vkCopyAccelerationStructureToMemoryKHR");
		return _vkCopyAccelerationStructureToMemoryKHR(device, deferredOperation, pInfo);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void vkCmdCopyMemoryToAccelerationStructureKHR(VulkanHandle<VkCommandBuffer> commandBuffer, VkCopyMemoryToAccelerationStructureInfoKHR* pInfo)
	{
		if (_vkCmdCopyMemoryToAccelerationStructureKHR == null) throw new VVK.FunctionNotLoadedException("vkCmdCopyMemoryToAccelerationStructureKHR");
		_vkCmdCopyMemoryToAccelerationStructureKHR(commandBuffer, pInfo);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static VkResult vkCopyMemoryToAccelerationStructureKHR(VulkanHandle<VkDevice> device, VulkanHandle<VkDeferredOperationKHR> deferredOperation, VkCopyMemoryToAccelerationStructureInfoKHR* pInfo)
	{
		if (_vkCopyMemoryToAccelerationStructureKHR == null) throw new VVK.FunctionNotLoadedException("vkCopyMemoryToAccelerationStructureKHR");
		return _vkCopyMemoryToAccelerationStructureKHR(device, deferredOperation, pInfo);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void vkCmdWriteAccelerationStructuresPropertiesKHR(VulkanHandle<VkCommandBuffer> commandBuffer, uint accelerationStructureCount, VulkanHandle<VkAccelerationStructureKHR>* pAccelerationStructures, VkQueryType queryType, VulkanHandle<VkQueryPool> queryPool, uint firstQuery)
	{
		if (_vkCmdWriteAccelerationStructuresPropertiesKHR == null) throw new VVK.FunctionNotLoadedException("vkCmdWriteAccelerationStructuresPropertiesKHR");
		_vkCmdWriteAccelerationStructuresPropertiesKHR(commandBuffer, accelerationStructureCount, pAccelerationStructures, queryType, queryPool, firstQuery);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void vkCmdWriteAccelerationStructuresPropertiesNV(VulkanHandle<VkCommandBuffer> commandBuffer, uint accelerationStructureCount, VulkanHandle<VkAccelerationStructureNV>* pAccelerationStructures, VkQueryType queryType, VulkanHandle<VkQueryPool> queryPool, uint firstQuery)
	{
		if (_vkCmdWriteAccelerationStructuresPropertiesNV == null) throw new VVK.FunctionNotLoadedException("vkCmdWriteAccelerationStructuresPropertiesNV");
		_vkCmdWriteAccelerationStructuresPropertiesNV(commandBuffer, accelerationStructureCount, pAccelerationStructures, queryType, queryPool, firstQuery);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void vkCmdBuildAccelerationStructureNV(VulkanHandle<VkCommandBuffer> commandBuffer, VkAccelerationStructureInfoNV* pInfo, VulkanHandle<VkBuffer> instanceData, ulong instanceOffset, VkBool32 update, VulkanHandle<VkAccelerationStructureNV> dst, VulkanHandle<VkAccelerationStructureNV> src, VulkanHandle<VkBuffer> scratch, ulong scratchOffset)
	{
		if (_vkCmdBuildAccelerationStructureNV == null) throw new VVK.FunctionNotLoadedException("vkCmdBuildAccelerationStructureNV");
		_vkCmdBuildAccelerationStructureNV(commandBuffer, pInfo, instanceData, instanceOffset, update, dst, src, scratch, scratchOffset);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static VkResult vkWriteAccelerationStructuresPropertiesKHR(VulkanHandle<VkDevice> device, uint accelerationStructureCount, VulkanHandle<VkAccelerationStructureKHR>* pAccelerationStructures, VkQueryType queryType, ulong dataSize, void* pData, ulong stride)
	{
		if (_vkWriteAccelerationStructuresPropertiesKHR == null) throw new VVK.FunctionNotLoadedException("vkWriteAccelerationStructuresPropertiesKHR");
		return _vkWriteAccelerationStructuresPropertiesKHR(device, accelerationStructureCount, pAccelerationStructures, queryType, dataSize, pData, stride);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void vkCmdTraceRaysKHR(VulkanHandle<VkCommandBuffer> commandBuffer, VkStridedDeviceAddressRegionKHR* pRaygenShaderBindingTable, VkStridedDeviceAddressRegionKHR* pMissShaderBindingTable, VkStridedDeviceAddressRegionKHR* pHitShaderBindingTable, VkStridedDeviceAddressRegionKHR* pCallableShaderBindingTable, uint width, uint height, uint depth)
	{
		if (_vkCmdTraceRaysKHR == null) throw new VVK.FunctionNotLoadedException("vkCmdTraceRaysKHR");
		_vkCmdTraceRaysKHR(commandBuffer, pRaygenShaderBindingTable, pMissShaderBindingTable, pHitShaderBindingTable, pCallableShaderBindingTable, width, height, depth);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void vkCmdTraceRaysNV(VulkanHandle<VkCommandBuffer> commandBuffer, VulkanHandle<VkBuffer> raygenShaderBindingTableBuffer, ulong raygenShaderBindingOffset, VulkanHandle<VkBuffer> missShaderBindingTableBuffer, ulong missShaderBindingOffset, ulong missShaderBindingStride, VulkanHandle<VkBuffer> hitShaderBindingTableBuffer, ulong hitShaderBindingOffset, ulong hitShaderBindingStride, VulkanHandle<VkBuffer> callableShaderBindingTableBuffer, ulong callableShaderBindingOffset, ulong callableShaderBindingStride, uint width, uint height, uint depth)
	{
		if (_vkCmdTraceRaysNV == null) throw new VVK.FunctionNotLoadedException("vkCmdTraceRaysNV");
		_vkCmdTraceRaysNV(commandBuffer, raygenShaderBindingTableBuffer, raygenShaderBindingOffset, missShaderBindingTableBuffer, missShaderBindingOffset, missShaderBindingStride, hitShaderBindingTableBuffer, hitShaderBindingOffset, hitShaderBindingStride, callableShaderBindingTableBuffer, callableShaderBindingOffset, callableShaderBindingStride, width, height, depth);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static VkResult vkGetRayTracingShaderGroupHandlesKHR(VulkanHandle<VkDevice> device, VulkanHandle<VkPipeline> pipeline, uint firstGroup, uint groupCount, ulong dataSize, void* pData)
	{
		if (_vkGetRayTracingShaderGroupHandlesKHR == null) throw new VVK.FunctionNotLoadedException("vkGetRayTracingShaderGroupHandlesKHR");
		return _vkGetRayTracingShaderGroupHandlesKHR(device, pipeline, firstGroup, groupCount, dataSize, pData);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static VkResult vkGetRayTracingShaderGroupHandlesNV(VulkanHandle<VkDevice> device, VulkanHandle<VkPipeline> pipeline, uint firstGroup, uint groupCount, ulong dataSize, void* pData)
	{
		if (_vkGetRayTracingShaderGroupHandlesNV == null) throw new VVK.FunctionNotLoadedException("vkGetRayTracingShaderGroupHandlesNV");
		return _vkGetRayTracingShaderGroupHandlesNV(device, pipeline, firstGroup, groupCount, dataSize, pData);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static VkResult vkGetRayTracingCaptureReplayShaderGroupHandlesKHR(VulkanHandle<VkDevice> device, VulkanHandle<VkPipeline> pipeline, uint firstGroup, uint groupCount, ulong dataSize, void* pData)
	{
		if (_vkGetRayTracingCaptureReplayShaderGroupHandlesKHR == null) throw new VVK.FunctionNotLoadedException("vkGetRayTracingCaptureReplayShaderGroupHandlesKHR");
		return _vkGetRayTracingCaptureReplayShaderGroupHandlesKHR(device, pipeline, firstGroup, groupCount, dataSize, pData);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static VkResult vkGetAccelerationStructureHandleNV(VulkanHandle<VkDevice> device, VulkanHandle<VkAccelerationStructureNV> accelerationStructure, ulong dataSize, void* pData)
	{
		if (_vkGetAccelerationStructureHandleNV == null) throw new VVK.FunctionNotLoadedException("vkGetAccelerationStructureHandleNV");
		return _vkGetAccelerationStructureHandleNV(device, accelerationStructure, dataSize, pData);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static VkResult vkCreateRayTracingPipelinesNV(VulkanHandle<VkDevice> device, VulkanHandle<VkPipelineCache> pipelineCache, uint createInfoCount, VkRayTracingPipelineCreateInfoNV* pCreateInfos, VkAllocationCallbacks* pAllocator, VulkanHandle<VkPipeline>* pPipelines)
	{
		if (_vkCreateRayTracingPipelinesNV == null) throw new VVK.FunctionNotLoadedException("vkCreateRayTracingPipelinesNV");
		return _vkCreateRayTracingPipelinesNV(device, pipelineCache, createInfoCount, pCreateInfos, pAllocator, pPipelines);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static VkResult vkCreateRayTracingPipelinesKHR(VulkanHandle<VkDevice> device, VulkanHandle<VkDeferredOperationKHR> deferredOperation, VulkanHandle<VkPipelineCache> pipelineCache, uint createInfoCount, VkRayTracingPipelineCreateInfoKHR* pCreateInfos, VkAllocationCallbacks* pAllocator, VulkanHandle<VkPipeline>* pPipelines)
	{
		if (_vkCreateRayTracingPipelinesKHR == null) throw new VVK.FunctionNotLoadedException("vkCreateRayTracingPipelinesKHR");
		return _vkCreateRayTracingPipelinesKHR(device, deferredOperation, pipelineCache, createInfoCount, pCreateInfos, pAllocator, pPipelines);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void vkCmdTraceRaysIndirectKHR(VulkanHandle<VkCommandBuffer> commandBuffer, VkStridedDeviceAddressRegionKHR* pRaygenShaderBindingTable, VkStridedDeviceAddressRegionKHR* pMissShaderBindingTable, VkStridedDeviceAddressRegionKHR* pHitShaderBindingTable, VkStridedDeviceAddressRegionKHR* pCallableShaderBindingTable, ulong indirectDeviceAddress)
	{
		if (_vkCmdTraceRaysIndirectKHR == null) throw new VVK.FunctionNotLoadedException("vkCmdTraceRaysIndirectKHR");
		_vkCmdTraceRaysIndirectKHR(commandBuffer, pRaygenShaderBindingTable, pMissShaderBindingTable, pHitShaderBindingTable, pCallableShaderBindingTable, indirectDeviceAddress);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void vkGetDeviceAccelerationStructureCompatibilityKHR(VulkanHandle<VkDevice> device, VkAccelerationStructureVersionInfoKHR* pVersionInfo, VkAccelerationStructureCompatibilityKHR* pCompatibility)
	{
		if (_vkGetDeviceAccelerationStructureCompatibilityKHR == null) throw new VVK.FunctionNotLoadedException("vkGetDeviceAccelerationStructureCompatibilityKHR");
		_vkGetDeviceAccelerationStructureCompatibilityKHR(device, pVersionInfo, pCompatibility);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static ulong vkGetRayTracingShaderGroupStackSizeKHR(VulkanHandle<VkDevice> device, VulkanHandle<VkPipeline> pipeline, uint group, VkShaderGroupShaderKHR groupShader)
	{
		if (_vkGetRayTracingShaderGroupStackSizeKHR == null) throw new VVK.FunctionNotLoadedException("vkGetRayTracingShaderGroupStackSizeKHR");
		return _vkGetRayTracingShaderGroupStackSizeKHR(device, pipeline, group, groupShader);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void vkCmdSetRayTracingPipelineStackSizeKHR(VulkanHandle<VkCommandBuffer> commandBuffer, uint pipelineStackSize)
	{
		if (_vkCmdSetRayTracingPipelineStackSizeKHR == null) throw new VVK.FunctionNotLoadedException("vkCmdSetRayTracingPipelineStackSizeKHR");
		_vkCmdSetRayTracingPipelineStackSizeKHR(commandBuffer, pipelineStackSize);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static uint vkGetImageViewHandleNVX(VulkanHandle<VkDevice> device, VkImageViewHandleInfoNVX* pInfo)
	{
		if (_vkGetImageViewHandleNVX == null) throw new VVK.FunctionNotLoadedException("vkGetImageViewHandleNVX");
		return _vkGetImageViewHandleNVX(device, pInfo);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static VkResult vkGetImageViewAddressNVX(VulkanHandle<VkDevice> device, VulkanHandle<VkImageView> imageView, VkImageViewAddressPropertiesNVX* pProperties)
	{
		if (_vkGetImageViewAddressNVX == null) throw new VVK.FunctionNotLoadedException("vkGetImageViewAddressNVX");
		return _vkGetImageViewAddressNVX(device, imageView, pProperties);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static VkResult vkGetDeviceGroupSurfacePresentModes2EXT(VulkanHandle<VkDevice> device, VkPhysicalDeviceSurfaceInfo2KHR* pSurfaceInfo, VkDeviceGroupPresentModeFlagsKHR* pModes)
	{
		if (_vkGetDeviceGroupSurfacePresentModes2EXT == null) throw new VVK.FunctionNotLoadedException("vkGetDeviceGroupSurfacePresentModes2EXT");
		return _vkGetDeviceGroupSurfacePresentModes2EXT(device, pSurfaceInfo, pModes);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static VkResult vkAcquireFullScreenExclusiveModeEXT(VulkanHandle<VkDevice> device, VulkanHandle<VkSwapchainKHR> swapchain)
	{
		if (_vkAcquireFullScreenExclusiveModeEXT == null) throw new VVK.FunctionNotLoadedException("vkAcquireFullScreenExclusiveModeEXT");
		return _vkAcquireFullScreenExclusiveModeEXT(device, swapchain);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static VkResult vkReleaseFullScreenExclusiveModeEXT(VulkanHandle<VkDevice> device, VulkanHandle<VkSwapchainKHR> swapchain)
	{
		if (_vkReleaseFullScreenExclusiveModeEXT == null) throw new VVK.FunctionNotLoadedException("vkReleaseFullScreenExclusiveModeEXT");
		return _vkReleaseFullScreenExclusiveModeEXT(device, swapchain);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static VkResult vkAcquireProfilingLockKHR(VulkanHandle<VkDevice> device, VkAcquireProfilingLockInfoKHR* pInfo)
	{
		if (_vkAcquireProfilingLockKHR == null) throw new VVK.FunctionNotLoadedException("vkAcquireProfilingLockKHR");
		return _vkAcquireProfilingLockKHR(device, pInfo);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void vkReleaseProfilingLockKHR(VulkanHandle<VkDevice> device)
	{
		if (_vkReleaseProfilingLockKHR == null) throw new VVK.FunctionNotLoadedException("vkReleaseProfilingLockKHR");
		_vkReleaseProfilingLockKHR(device);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static VkResult vkGetImageDrmFormatModifierPropertiesEXT(VulkanHandle<VkDevice> device, VulkanHandle<VkImage> image, VkImageDrmFormatModifierPropertiesEXT* pProperties)
	{
		if (_vkGetImageDrmFormatModifierPropertiesEXT == null) throw new VVK.FunctionNotLoadedException("vkGetImageDrmFormatModifierPropertiesEXT");
		return _vkGetImageDrmFormatModifierPropertiesEXT(device, image, pProperties);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static ulong vkGetBufferOpaqueCaptureAddress(VulkanHandle<VkDevice> device, VkBufferDeviceAddressInfo* pInfo)
	{
		if (_vkGetBufferOpaqueCaptureAddress == null) throw new VVK.FunctionNotLoadedException("vkGetBufferOpaqueCaptureAddress");
		return _vkGetBufferOpaqueCaptureAddress(device, pInfo);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static ulong vkGetBufferOpaqueCaptureAddressKHR(VulkanHandle<VkDevice> device, VkBufferDeviceAddressInfo* pInfo)
	{
		if (_vkGetBufferOpaqueCaptureAddressKHR == null) throw new VVK.FunctionNotLoadedException("vkGetBufferOpaqueCaptureAddressKHR");
		return _vkGetBufferOpaqueCaptureAddressKHR(device, pInfo);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static ulong vkGetBufferDeviceAddress(VulkanHandle<VkDevice> device, VkBufferDeviceAddressInfo* pInfo)
	{
		if (_vkGetBufferDeviceAddress == null) throw new VVK.FunctionNotLoadedException("vkGetBufferDeviceAddress");
		return _vkGetBufferDeviceAddress(device, pInfo);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static ulong vkGetBufferDeviceAddressKHR(VulkanHandle<VkDevice> device, VkBufferDeviceAddressInfo* pInfo)
	{
		if (_vkGetBufferDeviceAddressKHR == null) throw new VVK.FunctionNotLoadedException("vkGetBufferDeviceAddressKHR");
		return _vkGetBufferDeviceAddressKHR(device, pInfo);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static ulong vkGetBufferDeviceAddressEXT(VulkanHandle<VkDevice> device, VkBufferDeviceAddressInfo* pInfo)
	{
		if (_vkGetBufferDeviceAddressEXT == null) throw new VVK.FunctionNotLoadedException("vkGetBufferDeviceAddressEXT");
		return _vkGetBufferDeviceAddressEXT(device, pInfo);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static VkResult vkInitializePerformanceApiINTEL(VulkanHandle<VkDevice> device, VkInitializePerformanceApiInfoINTEL* pInitializeInfo)
	{
		if (_vkInitializePerformanceApiINTEL == null) throw new VVK.FunctionNotLoadedException("vkInitializePerformanceApiINTEL");
		return _vkInitializePerformanceApiINTEL(device, pInitializeInfo);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void vkUninitializePerformanceApiINTEL(VulkanHandle<VkDevice> device)
	{
		if (_vkUninitializePerformanceApiINTEL == null) throw new VVK.FunctionNotLoadedException("vkUninitializePerformanceApiINTEL");
		_vkUninitializePerformanceApiINTEL(device);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static VkResult vkCmdSetPerformanceMarkerINTEL(VulkanHandle<VkCommandBuffer> commandBuffer, VkPerformanceMarkerInfoINTEL* pMarkerInfo)
	{
		if (_vkCmdSetPerformanceMarkerINTEL == null) throw new VVK.FunctionNotLoadedException("vkCmdSetPerformanceMarkerINTEL");
		return _vkCmdSetPerformanceMarkerINTEL(commandBuffer, pMarkerInfo);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static VkResult vkCmdSetPerformanceStreamMarkerINTEL(VulkanHandle<VkCommandBuffer> commandBuffer, VkPerformanceStreamMarkerInfoINTEL* pMarkerInfo)
	{
		if (_vkCmdSetPerformanceStreamMarkerINTEL == null) throw new VVK.FunctionNotLoadedException("vkCmdSetPerformanceStreamMarkerINTEL");
		return _vkCmdSetPerformanceStreamMarkerINTEL(commandBuffer, pMarkerInfo);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static VkResult vkCmdSetPerformanceOverrideINTEL(VulkanHandle<VkCommandBuffer> commandBuffer, VkPerformanceOverrideInfoINTEL* pOverrideInfo)
	{
		if (_vkCmdSetPerformanceOverrideINTEL == null) throw new VVK.FunctionNotLoadedException("vkCmdSetPerformanceOverrideINTEL");
		return _vkCmdSetPerformanceOverrideINTEL(commandBuffer, pOverrideInfo);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static VkResult vkAcquirePerformanceConfigurationINTEL(VulkanHandle<VkDevice> device, VkPerformanceConfigurationAcquireInfoINTEL* pAcquireInfo, VulkanHandle<VkPerformanceConfigurationINTEL>* pConfiguration)
	{
		if (_vkAcquirePerformanceConfigurationINTEL == null) throw new VVK.FunctionNotLoadedException("vkAcquirePerformanceConfigurationINTEL");
		return _vkAcquirePerformanceConfigurationINTEL(device, pAcquireInfo, pConfiguration);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static VkResult vkReleasePerformanceConfigurationINTEL(VulkanHandle<VkDevice> device, VulkanHandle<VkPerformanceConfigurationINTEL> configuration)
	{
		if (_vkReleasePerformanceConfigurationINTEL == null) throw new VVK.FunctionNotLoadedException("vkReleasePerformanceConfigurationINTEL");
		return _vkReleasePerformanceConfigurationINTEL(device, configuration);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static VkResult vkQueueSetPerformanceConfigurationINTEL(VulkanHandle<VkQueue> queue, VulkanHandle<VkPerformanceConfigurationINTEL> configuration)
	{
		if (_vkQueueSetPerformanceConfigurationINTEL == null) throw new VVK.FunctionNotLoadedException("vkQueueSetPerformanceConfigurationINTEL");
		return _vkQueueSetPerformanceConfigurationINTEL(queue, configuration);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static VkResult vkGetPerformanceParameterINTEL(VulkanHandle<VkDevice> device, VkPerformanceParameterTypeINTEL parameter, VkPerformanceValueINTEL* pValue)
	{
		if (_vkGetPerformanceParameterINTEL == null) throw new VVK.FunctionNotLoadedException("vkGetPerformanceParameterINTEL");
		return _vkGetPerformanceParameterINTEL(device, parameter, pValue);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static ulong vkGetDeviceMemoryOpaqueCaptureAddress(VulkanHandle<VkDevice> device, VkDeviceMemoryOpaqueCaptureAddressInfo* pInfo)
	{
		if (_vkGetDeviceMemoryOpaqueCaptureAddress == null) throw new VVK.FunctionNotLoadedException("vkGetDeviceMemoryOpaqueCaptureAddress");
		return _vkGetDeviceMemoryOpaqueCaptureAddress(device, pInfo);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static ulong vkGetDeviceMemoryOpaqueCaptureAddressKHR(VulkanHandle<VkDevice> device, VkDeviceMemoryOpaqueCaptureAddressInfo* pInfo)
	{
		if (_vkGetDeviceMemoryOpaqueCaptureAddressKHR == null) throw new VVK.FunctionNotLoadedException("vkGetDeviceMemoryOpaqueCaptureAddressKHR");
		return _vkGetDeviceMemoryOpaqueCaptureAddressKHR(device, pInfo);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static VkResult vkGetPipelineExecutablePropertiesKHR(VulkanHandle<VkDevice> device, VkPipelineInfoKHR* pPipelineInfo, uint* pExecutableCount, VkPipelineExecutablePropertiesKHR* pProperties)
	{
		if (_vkGetPipelineExecutablePropertiesKHR == null) throw new VVK.FunctionNotLoadedException("vkGetPipelineExecutablePropertiesKHR");
		return _vkGetPipelineExecutablePropertiesKHR(device, pPipelineInfo, pExecutableCount, pProperties);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static VkResult vkGetPipelineExecutableStatisticsKHR(VulkanHandle<VkDevice> device, VkPipelineExecutableInfoKHR* pExecutableInfo, uint* pStatisticCount, VkPipelineExecutableStatisticKHR* pStatistics)
	{
		if (_vkGetPipelineExecutableStatisticsKHR == null) throw new VVK.FunctionNotLoadedException("vkGetPipelineExecutableStatisticsKHR");
		return _vkGetPipelineExecutableStatisticsKHR(device, pExecutableInfo, pStatisticCount, pStatistics);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static VkResult vkGetPipelineExecutableInternalRepresentationsKHR(VulkanHandle<VkDevice> device, VkPipelineExecutableInfoKHR* pExecutableInfo, uint* pInternalRepresentationCount, VkPipelineExecutableInternalRepresentationKHR* pInternalRepresentations)
	{
		if (_vkGetPipelineExecutableInternalRepresentationsKHR == null) throw new VVK.FunctionNotLoadedException("vkGetPipelineExecutableInternalRepresentationsKHR");
		return _vkGetPipelineExecutableInternalRepresentationsKHR(device, pExecutableInfo, pInternalRepresentationCount, pInternalRepresentations);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void vkCmdSetLineStippleEXT(VulkanHandle<VkCommandBuffer> commandBuffer, uint lineStippleFactor, ushort lineStipplePattern)
	{
		if (_vkCmdSetLineStippleEXT == null) throw new VVK.FunctionNotLoadedException("vkCmdSetLineStippleEXT");
		_vkCmdSetLineStippleEXT(commandBuffer, lineStippleFactor, lineStipplePattern);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static VkResult vkCreateAccelerationStructureKHR(VulkanHandle<VkDevice> device, VkAccelerationStructureCreateInfoKHR* pCreateInfo, VkAllocationCallbacks* pAllocator, VulkanHandle<VkAccelerationStructureKHR>* pAccelerationStructure)
	{
		if (_vkCreateAccelerationStructureKHR == null) throw new VVK.FunctionNotLoadedException("vkCreateAccelerationStructureKHR");
		return _vkCreateAccelerationStructureKHR(device, pCreateInfo, pAllocator, pAccelerationStructure);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void vkCmdBuildAccelerationStructuresKHR(VulkanHandle<VkCommandBuffer> commandBuffer, uint infoCount, VkAccelerationStructureBuildGeometryInfoKHR* pInfos, VkAccelerationStructureBuildRangeInfoKHR** ppBuildRangeInfos)
	{
		if (_vkCmdBuildAccelerationStructuresKHR == null) throw new VVK.FunctionNotLoadedException("vkCmdBuildAccelerationStructuresKHR");
		_vkCmdBuildAccelerationStructuresKHR(commandBuffer, infoCount, pInfos, ppBuildRangeInfos);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void vkCmdBuildAccelerationStructuresIndirectKHR(VulkanHandle<VkCommandBuffer> commandBuffer, uint infoCount, VkAccelerationStructureBuildGeometryInfoKHR* pInfos, ulong* pIndirectDeviceAddresses, uint* pIndirectStrides, uint** ppMaxPrimitiveCounts)
	{
		if (_vkCmdBuildAccelerationStructuresIndirectKHR == null) throw new VVK.FunctionNotLoadedException("vkCmdBuildAccelerationStructuresIndirectKHR");
		_vkCmdBuildAccelerationStructuresIndirectKHR(commandBuffer, infoCount, pInfos, pIndirectDeviceAddresses, pIndirectStrides, ppMaxPrimitiveCounts);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static VkResult vkBuildAccelerationStructuresKHR(VulkanHandle<VkDevice> device, VulkanHandle<VkDeferredOperationKHR> deferredOperation, uint infoCount, VkAccelerationStructureBuildGeometryInfoKHR* pInfos, VkAccelerationStructureBuildRangeInfoKHR** ppBuildRangeInfos)
	{
		if (_vkBuildAccelerationStructuresKHR == null) throw new VVK.FunctionNotLoadedException("vkBuildAccelerationStructuresKHR");
		return _vkBuildAccelerationStructuresKHR(device, deferredOperation, infoCount, pInfos, ppBuildRangeInfos);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static ulong vkGetAccelerationStructureDeviceAddressKHR(VulkanHandle<VkDevice> device, VkAccelerationStructureDeviceAddressInfoKHR* pInfo)
	{
		if (_vkGetAccelerationStructureDeviceAddressKHR == null) throw new VVK.FunctionNotLoadedException("vkGetAccelerationStructureDeviceAddressKHR");
		return _vkGetAccelerationStructureDeviceAddressKHR(device, pInfo);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static VkResult vkCreateDeferredOperationKHR(VulkanHandle<VkDevice> device, VkAllocationCallbacks* pAllocator, VulkanHandle<VkDeferredOperationKHR>* pDeferredOperation)
	{
		if (_vkCreateDeferredOperationKHR == null) throw new VVK.FunctionNotLoadedException("vkCreateDeferredOperationKHR");
		return _vkCreateDeferredOperationKHR(device, pAllocator, pDeferredOperation);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void vkDestroyDeferredOperationKHR(VulkanHandle<VkDevice> device, VulkanHandle<VkDeferredOperationKHR> operation, VkAllocationCallbacks* pAllocator)
	{
		if (_vkDestroyDeferredOperationKHR == null) throw new VVK.FunctionNotLoadedException("vkDestroyDeferredOperationKHR");
		_vkDestroyDeferredOperationKHR(device, operation, pAllocator);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static uint vkGetDeferredOperationMaxConcurrencyKHR(VulkanHandle<VkDevice> device, VulkanHandle<VkDeferredOperationKHR> operation)
	{
		if (_vkGetDeferredOperationMaxConcurrencyKHR == null) throw new VVK.FunctionNotLoadedException("vkGetDeferredOperationMaxConcurrencyKHR");
		return _vkGetDeferredOperationMaxConcurrencyKHR(device, operation);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static VkResult vkGetDeferredOperationResultKHR(VulkanHandle<VkDevice> device, VulkanHandle<VkDeferredOperationKHR> operation)
	{
		if (_vkGetDeferredOperationResultKHR == null) throw new VVK.FunctionNotLoadedException("vkGetDeferredOperationResultKHR");
		return _vkGetDeferredOperationResultKHR(device, operation);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static VkResult vkDeferredOperationJoinKHR(VulkanHandle<VkDevice> device, VulkanHandle<VkDeferredOperationKHR> operation)
	{
		if (_vkDeferredOperationJoinKHR == null) throw new VVK.FunctionNotLoadedException("vkDeferredOperationJoinKHR");
		return _vkDeferredOperationJoinKHR(device, operation);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void vkCmdSetCullModeEXT(VulkanHandle<VkCommandBuffer> commandBuffer, VkCullModeFlags cullMode)
	{
		if (_vkCmdSetCullModeEXT == null) throw new VVK.FunctionNotLoadedException("vkCmdSetCullModeEXT");
		_vkCmdSetCullModeEXT(commandBuffer, cullMode);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void vkCmdSetFrontFaceEXT(VulkanHandle<VkCommandBuffer> commandBuffer, VkFrontFace frontFace)
	{
		if (_vkCmdSetFrontFaceEXT == null) throw new VVK.FunctionNotLoadedException("vkCmdSetFrontFaceEXT");
		_vkCmdSetFrontFaceEXT(commandBuffer, frontFace);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void vkCmdSetPrimitiveTopologyEXT(VulkanHandle<VkCommandBuffer> commandBuffer, VkPrimitiveTopology primitiveTopology)
	{
		if (_vkCmdSetPrimitiveTopologyEXT == null) throw new VVK.FunctionNotLoadedException("vkCmdSetPrimitiveTopologyEXT");
		_vkCmdSetPrimitiveTopologyEXT(commandBuffer, primitiveTopology);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void vkCmdSetViewportWithCountEXT(VulkanHandle<VkCommandBuffer> commandBuffer, uint viewportCount, VkViewport* pViewports)
	{
		if (_vkCmdSetViewportWithCountEXT == null) throw new VVK.FunctionNotLoadedException("vkCmdSetViewportWithCountEXT");
		_vkCmdSetViewportWithCountEXT(commandBuffer, viewportCount, pViewports);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void vkCmdSetScissorWithCountEXT(VulkanHandle<VkCommandBuffer> commandBuffer, uint scissorCount, VkRect2D* pScissors)
	{
		if (_vkCmdSetScissorWithCountEXT == null) throw new VVK.FunctionNotLoadedException("vkCmdSetScissorWithCountEXT");
		_vkCmdSetScissorWithCountEXT(commandBuffer, scissorCount, pScissors);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void vkCmdBindVertexBuffers2EXT(VulkanHandle<VkCommandBuffer> commandBuffer, uint firstBinding, uint bindingCount, VulkanHandle<VkBuffer>* pBuffers, ulong* pOffsets, ulong* pSizes, ulong* pStrides)
	{
		if (_vkCmdBindVertexBuffers2EXT == null) throw new VVK.FunctionNotLoadedException("vkCmdBindVertexBuffers2EXT");
		_vkCmdBindVertexBuffers2EXT(commandBuffer, firstBinding, bindingCount, pBuffers, pOffsets, pSizes, pStrides);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void vkCmdSetDepthTestEnableEXT(VulkanHandle<VkCommandBuffer> commandBuffer, VkBool32 depthTestEnable)
	{
		if (_vkCmdSetDepthTestEnableEXT == null) throw new VVK.FunctionNotLoadedException("vkCmdSetDepthTestEnableEXT");
		_vkCmdSetDepthTestEnableEXT(commandBuffer, depthTestEnable);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void vkCmdSetDepthWriteEnableEXT(VulkanHandle<VkCommandBuffer> commandBuffer, VkBool32 depthWriteEnable)
	{
		if (_vkCmdSetDepthWriteEnableEXT == null) throw new VVK.FunctionNotLoadedException("vkCmdSetDepthWriteEnableEXT");
		_vkCmdSetDepthWriteEnableEXT(commandBuffer, depthWriteEnable);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void vkCmdSetDepthCompareOpEXT(VulkanHandle<VkCommandBuffer> commandBuffer, VkCompareOp depthCompareOp)
	{
		if (_vkCmdSetDepthCompareOpEXT == null) throw new VVK.FunctionNotLoadedException("vkCmdSetDepthCompareOpEXT");
		_vkCmdSetDepthCompareOpEXT(commandBuffer, depthCompareOp);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void vkCmdSetDepthBoundsTestEnableEXT(VulkanHandle<VkCommandBuffer> commandBuffer, VkBool32 depthBoundsTestEnable)
	{
		if (_vkCmdSetDepthBoundsTestEnableEXT == null) throw new VVK.FunctionNotLoadedException("vkCmdSetDepthBoundsTestEnableEXT");
		_vkCmdSetDepthBoundsTestEnableEXT(commandBuffer, depthBoundsTestEnable);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void vkCmdSetStencilTestEnableEXT(VulkanHandle<VkCommandBuffer> commandBuffer, VkBool32 stencilTestEnable)
	{
		if (_vkCmdSetStencilTestEnableEXT == null) throw new VVK.FunctionNotLoadedException("vkCmdSetStencilTestEnableEXT");
		_vkCmdSetStencilTestEnableEXT(commandBuffer, stencilTestEnable);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void vkCmdSetStencilOpEXT(VulkanHandle<VkCommandBuffer> commandBuffer, VkStencilFaceFlags faceMask, VkStencilOp failOp, VkStencilOp passOp, VkStencilOp depthFailOp, VkCompareOp compareOp)
	{
		if (_vkCmdSetStencilOpEXT == null) throw new VVK.FunctionNotLoadedException("vkCmdSetStencilOpEXT");
		_vkCmdSetStencilOpEXT(commandBuffer, faceMask, failOp, passOp, depthFailOp, compareOp);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static VkResult vkCreatePrivateDataSlotEXT(VulkanHandle<VkDevice> device, VkPrivateDataSlotCreateInfoEXT* pCreateInfo, VkAllocationCallbacks* pAllocator, VulkanHandle<VkPrivateDataSlotEXT>* pPrivateDataSlot)
	{
		if (_vkCreatePrivateDataSlotEXT == null) throw new VVK.FunctionNotLoadedException("vkCreatePrivateDataSlotEXT");
		return _vkCreatePrivateDataSlotEXT(device, pCreateInfo, pAllocator, pPrivateDataSlot);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void vkDestroyPrivateDataSlotEXT(VulkanHandle<VkDevice> device, VulkanHandle<VkPrivateDataSlotEXT> privateDataSlot, VkAllocationCallbacks* pAllocator)
	{
		if (_vkDestroyPrivateDataSlotEXT == null) throw new VVK.FunctionNotLoadedException("vkDestroyPrivateDataSlotEXT");
		_vkDestroyPrivateDataSlotEXT(device, privateDataSlot, pAllocator);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static VkResult vkSetPrivateDataEXT(VulkanHandle<VkDevice> device, VkObjectType objectType, ulong objectHandle, VulkanHandle<VkPrivateDataSlotEXT> privateDataSlot, ulong data)
	{
		if (_vkSetPrivateDataEXT == null) throw new VVK.FunctionNotLoadedException("vkSetPrivateDataEXT");
		return _vkSetPrivateDataEXT(device, objectType, objectHandle, privateDataSlot, data);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void vkGetPrivateDataEXT(VulkanHandle<VkDevice> device, VkObjectType objectType, ulong objectHandle, VulkanHandle<VkPrivateDataSlotEXT> privateDataSlot, ulong* pData)
	{
		if (_vkGetPrivateDataEXT == null) throw new VVK.FunctionNotLoadedException("vkGetPrivateDataEXT");
		_vkGetPrivateDataEXT(device, objectType, objectHandle, privateDataSlot, pData);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void vkCmdCopyBuffer2KHR(VulkanHandle<VkCommandBuffer> commandBuffer, VkCopyBufferInfo2KHR* pCopyBufferInfo)
	{
		if (_vkCmdCopyBuffer2KHR == null) throw new VVK.FunctionNotLoadedException("vkCmdCopyBuffer2KHR");
		_vkCmdCopyBuffer2KHR(commandBuffer, pCopyBufferInfo);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void vkCmdCopyImage2KHR(VulkanHandle<VkCommandBuffer> commandBuffer, VkCopyImageInfo2KHR* pCopyImageInfo)
	{
		if (_vkCmdCopyImage2KHR == null) throw new VVK.FunctionNotLoadedException("vkCmdCopyImage2KHR");
		_vkCmdCopyImage2KHR(commandBuffer, pCopyImageInfo);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void vkCmdBlitImage2KHR(VulkanHandle<VkCommandBuffer> commandBuffer, VkBlitImageInfo2KHR* pBlitImageInfo)
	{
		if (_vkCmdBlitImage2KHR == null) throw new VVK.FunctionNotLoadedException("vkCmdBlitImage2KHR");
		_vkCmdBlitImage2KHR(commandBuffer, pBlitImageInfo);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void vkCmdCopyBufferToImage2KHR(VulkanHandle<VkCommandBuffer> commandBuffer, VkCopyBufferToImageInfo2KHR* pCopyBufferToImageInfo)
	{
		if (_vkCmdCopyBufferToImage2KHR == null) throw new VVK.FunctionNotLoadedException("vkCmdCopyBufferToImage2KHR");
		_vkCmdCopyBufferToImage2KHR(commandBuffer, pCopyBufferToImageInfo);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void vkCmdCopyImageToBuffer2KHR(VulkanHandle<VkCommandBuffer> commandBuffer, VkCopyImageToBufferInfo2KHR* pCopyImageToBufferInfo)
	{
		if (_vkCmdCopyImageToBuffer2KHR == null) throw new VVK.FunctionNotLoadedException("vkCmdCopyImageToBuffer2KHR");
		_vkCmdCopyImageToBuffer2KHR(commandBuffer, pCopyImageToBufferInfo);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void vkCmdResolveImage2KHR(VulkanHandle<VkCommandBuffer> commandBuffer, VkResolveImageInfo2KHR* pResolveImageInfo)
	{
		if (_vkCmdResolveImage2KHR == null) throw new VVK.FunctionNotLoadedException("vkCmdResolveImage2KHR");
		_vkCmdResolveImage2KHR(commandBuffer, pResolveImageInfo);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void vkCmdSetFragmentShadingRateKHR(VulkanHandle<VkCommandBuffer> commandBuffer, VkExtent2D* pFragmentSize, VkFragmentShadingRateCombinerOpKHR* combinerOps)
	{
		if (_vkCmdSetFragmentShadingRateKHR == null) throw new VVK.FunctionNotLoadedException("vkCmdSetFragmentShadingRateKHR");
		_vkCmdSetFragmentShadingRateKHR(commandBuffer, pFragmentSize, combinerOps);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void vkCmdSetFragmentShadingRateEnumNV(VulkanHandle<VkCommandBuffer> commandBuffer, VkFragmentShadingRateNV shadingRate, VkFragmentShadingRateCombinerOpKHR* combinerOps)
	{
		if (_vkCmdSetFragmentShadingRateEnumNV == null) throw new VVK.FunctionNotLoadedException("vkCmdSetFragmentShadingRateEnumNV");
		_vkCmdSetFragmentShadingRateEnumNV(commandBuffer, shadingRate, combinerOps);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void vkGetAccelerationStructureBuildSizesKHR(VulkanHandle<VkDevice> device, VkAccelerationStructureBuildTypeKHR buildType, VkAccelerationStructureBuildGeometryInfoKHR* pBuildInfo, uint* pMaxPrimitiveCounts, VkAccelerationStructureBuildSizesInfoKHR* pSizeInfo)
	{
		if (_vkGetAccelerationStructureBuildSizesKHR == null) throw new VVK.FunctionNotLoadedException("vkGetAccelerationStructureBuildSizesKHR");
		_vkGetAccelerationStructureBuildSizesKHR(device, buildType, pBuildInfo, pMaxPrimitiveCounts, pSizeInfo);
	}

}


} // namespace Vulkan

