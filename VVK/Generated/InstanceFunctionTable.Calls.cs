/*
 * MIT License - Copyright(c) 2020 Sean Moss
 * This file is subject to the terms and conditions of the MIT License, the text of which can be found in the 'LICENSE'
 * file at the root of this repository, or online at <https://opensource.org/licenses/MIT>.
 */

/// This file was generated by VVKGen. Edits to this file will be lost on next generation.

using System;
using System.Runtime.InteropServices;
using System.Runtime.CompilerServices;

namespace Vulkan
{

public unsafe sealed partial class InstanceFunctionTable
{
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static VkResult CreateInstance(VkInstanceCreateInfo* pCreateInfo, VkAllocationCallbacks* pAllocator, VulkanHandle<VkInstance>* pInstance)
	{
		return vkCreateInstance(pCreateInfo, pAllocator, pInstance);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static delegate* unmanaged<void> GetDeviceProcAddr(VulkanHandle<VkDevice> device, byte* pName)
	{
		return vkGetDeviceProcAddr(device, pName);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static delegate* unmanaged<void> GetInstanceProcAddr(VulkanHandle<VkInstance> instance, byte* pName)
	{
		return vkGetInstanceProcAddr(instance, pName);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static VkResult EnumerateInstanceVersion(uint* pApiVersion)
	{
		if (vkEnumerateInstanceVersion == null) throw new VVK.FunctionNotLoadedException("vkEnumerateInstanceVersion");
		return vkEnumerateInstanceVersion(pApiVersion);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static VkResult EnumerateInstanceLayerProperties(uint* pPropertyCount, VkLayerProperties* pProperties)
	{
		return vkEnumerateInstanceLayerProperties(pPropertyCount, pProperties);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static VkResult EnumerateInstanceExtensionProperties(byte* pLayerName, uint* pPropertyCount, VkExtensionProperties* pProperties)
	{
		return vkEnumerateInstanceExtensionProperties(pLayerName, pPropertyCount, pProperties);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void DestroyInstance(VulkanHandle<VkInstance> instance, VkAllocationCallbacks* pAllocator)
	{
		vkDestroyInstance(instance, pAllocator);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public VkResult EnumeratePhysicalDevices(VulkanHandle<VkInstance> instance, uint* pPhysicalDeviceCount, VulkanHandle<VkPhysicalDevice>* pPhysicalDevices)
	{
		return vkEnumeratePhysicalDevices(instance, pPhysicalDeviceCount, pPhysicalDevices);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void GetPhysicalDeviceProperties(VulkanHandle<VkPhysicalDevice> physicalDevice, VkPhysicalDeviceProperties* pProperties)
	{
		vkGetPhysicalDeviceProperties(physicalDevice, pProperties);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void GetPhysicalDeviceQueueFamilyProperties(VulkanHandle<VkPhysicalDevice> physicalDevice, uint* pQueueFamilyPropertyCount, VkQueueFamilyProperties* pQueueFamilyProperties)
	{
		vkGetPhysicalDeviceQueueFamilyProperties(physicalDevice, pQueueFamilyPropertyCount, pQueueFamilyProperties);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void GetPhysicalDeviceMemoryProperties(VulkanHandle<VkPhysicalDevice> physicalDevice, VkPhysicalDeviceMemoryProperties* pMemoryProperties)
	{
		vkGetPhysicalDeviceMemoryProperties(physicalDevice, pMemoryProperties);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void GetPhysicalDeviceFeatures(VulkanHandle<VkPhysicalDevice> physicalDevice, VkPhysicalDeviceFeatures* pFeatures)
	{
		vkGetPhysicalDeviceFeatures(physicalDevice, pFeatures);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void GetPhysicalDeviceFormatProperties(VulkanHandle<VkPhysicalDevice> physicalDevice, VkFormat format, VkFormatProperties* pFormatProperties)
	{
		vkGetPhysicalDeviceFormatProperties(physicalDevice, format, pFormatProperties);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public VkResult GetPhysicalDeviceImageFormatProperties(VulkanHandle<VkPhysicalDevice> physicalDevice, VkFormat format, VkImageType type, VkImageTiling tiling, VkImageUsageFlags usage, VkImageCreateFlags flags, VkImageFormatProperties* pImageFormatProperties)
	{
		return vkGetPhysicalDeviceImageFormatProperties(physicalDevice, format, type, tiling, usage, flags, pImageFormatProperties);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public VkResult CreateDevice(VulkanHandle<VkPhysicalDevice> physicalDevice, VkDeviceCreateInfo* pCreateInfo, VkAllocationCallbacks* pAllocator, VulkanHandle<VkDevice>* pDevice)
	{
		return vkCreateDevice(physicalDevice, pCreateInfo, pAllocator, pDevice);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public VkResult EnumerateDeviceLayerProperties(VulkanHandle<VkPhysicalDevice> physicalDevice, uint* pPropertyCount, VkLayerProperties* pProperties)
	{
		return vkEnumerateDeviceLayerProperties(physicalDevice, pPropertyCount, pProperties);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public VkResult EnumerateDeviceExtensionProperties(VulkanHandle<VkPhysicalDevice> physicalDevice, byte* pLayerName, uint* pPropertyCount, VkExtensionProperties* pProperties)
	{
		return vkEnumerateDeviceExtensionProperties(physicalDevice, pLayerName, pPropertyCount, pProperties);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void GetPhysicalDeviceSparseImageFormatProperties(VulkanHandle<VkPhysicalDevice> physicalDevice, VkFormat format, VkImageType type, VkSampleCountFlags samples, VkImageUsageFlags usage, VkImageTiling tiling, uint* pPropertyCount, VkSparseImageFormatProperties* pProperties)
	{
		vkGetPhysicalDeviceSparseImageFormatProperties(physicalDevice, format, type, samples, usage, tiling, pPropertyCount, pProperties);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public VkResult CreateAndroidSurfaceKHR(VulkanHandle<VkInstance> instance, VkAndroidSurfaceCreateInfoKHR* pCreateInfo, VkAllocationCallbacks* pAllocator, VulkanHandle<VkSurfaceKHR>* pSurface)
	{
		if (vkCreateAndroidSurfaceKHR == null) throw new VVK.FunctionNotLoadedException("vkCreateAndroidSurfaceKHR");
		return vkCreateAndroidSurfaceKHR(instance, pCreateInfo, pAllocator, pSurface);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public VkResult GetPhysicalDeviceDisplayPropertiesKHR(VulkanHandle<VkPhysicalDevice> physicalDevice, uint* pPropertyCount, VkDisplayPropertiesKHR* pProperties)
	{
		if (vkGetPhysicalDeviceDisplayPropertiesKHR == null) throw new VVK.FunctionNotLoadedException("vkGetPhysicalDeviceDisplayPropertiesKHR");
		return vkGetPhysicalDeviceDisplayPropertiesKHR(physicalDevice, pPropertyCount, pProperties);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public VkResult GetPhysicalDeviceDisplayPlanePropertiesKHR(VulkanHandle<VkPhysicalDevice> physicalDevice, uint* pPropertyCount, VkDisplayPlanePropertiesKHR* pProperties)
	{
		if (vkGetPhysicalDeviceDisplayPlanePropertiesKHR == null) throw new VVK.FunctionNotLoadedException("vkGetPhysicalDeviceDisplayPlanePropertiesKHR");
		return vkGetPhysicalDeviceDisplayPlanePropertiesKHR(physicalDevice, pPropertyCount, pProperties);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public VkResult GetDisplayPlaneSupportedDisplaysKHR(VulkanHandle<VkPhysicalDevice> physicalDevice, uint planeIndex, uint* pDisplayCount, VulkanHandle<VkDisplayKHR>* pDisplays)
	{
		if (vkGetDisplayPlaneSupportedDisplaysKHR == null) throw new VVK.FunctionNotLoadedException("vkGetDisplayPlaneSupportedDisplaysKHR");
		return vkGetDisplayPlaneSupportedDisplaysKHR(physicalDevice, planeIndex, pDisplayCount, pDisplays);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public VkResult GetDisplayModePropertiesKHR(VulkanHandle<VkPhysicalDevice> physicalDevice, VulkanHandle<VkDisplayKHR> display, uint* pPropertyCount, VkDisplayModePropertiesKHR* pProperties)
	{
		if (vkGetDisplayModePropertiesKHR == null) throw new VVK.FunctionNotLoadedException("vkGetDisplayModePropertiesKHR");
		return vkGetDisplayModePropertiesKHR(physicalDevice, display, pPropertyCount, pProperties);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public VkResult CreateDisplayModeKHR(VulkanHandle<VkPhysicalDevice> physicalDevice, VulkanHandle<VkDisplayKHR> display, VkDisplayModeCreateInfoKHR* pCreateInfo, VkAllocationCallbacks* pAllocator, VulkanHandle<VkDisplayModeKHR>* pMode)
	{
		if (vkCreateDisplayModeKHR == null) throw new VVK.FunctionNotLoadedException("vkCreateDisplayModeKHR");
		return vkCreateDisplayModeKHR(physicalDevice, display, pCreateInfo, pAllocator, pMode);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public VkResult GetDisplayPlaneCapabilitiesKHR(VulkanHandle<VkPhysicalDevice> physicalDevice, VulkanHandle<VkDisplayModeKHR> mode, uint planeIndex, VkDisplayPlaneCapabilitiesKHR* pCapabilities)
	{
		if (vkGetDisplayPlaneCapabilitiesKHR == null) throw new VVK.FunctionNotLoadedException("vkGetDisplayPlaneCapabilitiesKHR");
		return vkGetDisplayPlaneCapabilitiesKHR(physicalDevice, mode, planeIndex, pCapabilities);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public VkResult CreateDisplayPlaneSurfaceKHR(VulkanHandle<VkInstance> instance, VkDisplaySurfaceCreateInfoKHR* pCreateInfo, VkAllocationCallbacks* pAllocator, VulkanHandle<VkSurfaceKHR>* pSurface)
	{
		if (vkCreateDisplayPlaneSurfaceKHR == null) throw new VVK.FunctionNotLoadedException("vkCreateDisplayPlaneSurfaceKHR");
		return vkCreateDisplayPlaneSurfaceKHR(instance, pCreateInfo, pAllocator, pSurface);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void DestroySurfaceKHR(VulkanHandle<VkInstance> instance, VulkanHandle<VkSurfaceKHR> surface, VkAllocationCallbacks* pAllocator)
	{
		if (vkDestroySurfaceKHR == null) throw new VVK.FunctionNotLoadedException("vkDestroySurfaceKHR");
		vkDestroySurfaceKHR(instance, surface, pAllocator);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public VkResult GetPhysicalDeviceSurfaceSupportKHR(VulkanHandle<VkPhysicalDevice> physicalDevice, uint queueFamilyIndex, VulkanHandle<VkSurfaceKHR> surface, VkBool32* pSupported)
	{
		if (vkGetPhysicalDeviceSurfaceSupportKHR == null) throw new VVK.FunctionNotLoadedException("vkGetPhysicalDeviceSurfaceSupportKHR");
		return vkGetPhysicalDeviceSurfaceSupportKHR(physicalDevice, queueFamilyIndex, surface, pSupported);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public VkResult GetPhysicalDeviceSurfaceCapabilitiesKHR(VulkanHandle<VkPhysicalDevice> physicalDevice, VulkanHandle<VkSurfaceKHR> surface, VkSurfaceCapabilitiesKHR* pSurfaceCapabilities)
	{
		if (vkGetPhysicalDeviceSurfaceCapabilitiesKHR == null) throw new VVK.FunctionNotLoadedException("vkGetPhysicalDeviceSurfaceCapabilitiesKHR");
		return vkGetPhysicalDeviceSurfaceCapabilitiesKHR(physicalDevice, surface, pSurfaceCapabilities);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public VkResult GetPhysicalDeviceSurfaceFormatsKHR(VulkanHandle<VkPhysicalDevice> physicalDevice, VulkanHandle<VkSurfaceKHR> surface, uint* pSurfaceFormatCount, VkSurfaceFormatKHR* pSurfaceFormats)
	{
		if (vkGetPhysicalDeviceSurfaceFormatsKHR == null) throw new VVK.FunctionNotLoadedException("vkGetPhysicalDeviceSurfaceFormatsKHR");
		return vkGetPhysicalDeviceSurfaceFormatsKHR(physicalDevice, surface, pSurfaceFormatCount, pSurfaceFormats);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public VkResult GetPhysicalDeviceSurfacePresentModesKHR(VulkanHandle<VkPhysicalDevice> physicalDevice, VulkanHandle<VkSurfaceKHR> surface, uint* pPresentModeCount, VkPresentModeKHR* pPresentModes)
	{
		if (vkGetPhysicalDeviceSurfacePresentModesKHR == null) throw new VVK.FunctionNotLoadedException("vkGetPhysicalDeviceSurfacePresentModesKHR");
		return vkGetPhysicalDeviceSurfacePresentModesKHR(physicalDevice, surface, pPresentModeCount, pPresentModes);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public VkResult CreateViSurfaceNN(VulkanHandle<VkInstance> instance, VkViSurfaceCreateInfoNN* pCreateInfo, VkAllocationCallbacks* pAllocator, VulkanHandle<VkSurfaceKHR>* pSurface)
	{
		if (vkCreateViSurfaceNN == null) throw new VVK.FunctionNotLoadedException("vkCreateViSurfaceNN");
		return vkCreateViSurfaceNN(instance, pCreateInfo, pAllocator, pSurface);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public VkResult CreateWaylandSurfaceKHR(VulkanHandle<VkInstance> instance, VkWaylandSurfaceCreateInfoKHR* pCreateInfo, VkAllocationCallbacks* pAllocator, VulkanHandle<VkSurfaceKHR>* pSurface)
	{
		if (vkCreateWaylandSurfaceKHR == null) throw new VVK.FunctionNotLoadedException("vkCreateWaylandSurfaceKHR");
		return vkCreateWaylandSurfaceKHR(instance, pCreateInfo, pAllocator, pSurface);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public VkBool32 GetPhysicalDeviceWaylandPresentationSupportKHR(VulkanHandle<VkPhysicalDevice> physicalDevice, uint queueFamilyIndex, void* display)
	{
		if (vkGetPhysicalDeviceWaylandPresentationSupportKHR == null) throw new VVK.FunctionNotLoadedException("vkGetPhysicalDeviceWaylandPresentationSupportKHR");
		return vkGetPhysicalDeviceWaylandPresentationSupportKHR(physicalDevice, queueFamilyIndex, display);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public VkResult CreateWin32SurfaceKHR(VulkanHandle<VkInstance> instance, VkWin32SurfaceCreateInfoKHR* pCreateInfo, VkAllocationCallbacks* pAllocator, VulkanHandle<VkSurfaceKHR>* pSurface)
	{
		if (vkCreateWin32SurfaceKHR == null) throw new VVK.FunctionNotLoadedException("vkCreateWin32SurfaceKHR");
		return vkCreateWin32SurfaceKHR(instance, pCreateInfo, pAllocator, pSurface);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public VkBool32 GetPhysicalDeviceWin32PresentationSupportKHR(VulkanHandle<VkPhysicalDevice> physicalDevice, uint queueFamilyIndex)
	{
		if (vkGetPhysicalDeviceWin32PresentationSupportKHR == null) throw new VVK.FunctionNotLoadedException("vkGetPhysicalDeviceWin32PresentationSupportKHR");
		return vkGetPhysicalDeviceWin32PresentationSupportKHR(physicalDevice, queueFamilyIndex);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public VkResult CreateXlibSurfaceKHR(VulkanHandle<VkInstance> instance, VkXlibSurfaceCreateInfoKHR* pCreateInfo, VkAllocationCallbacks* pAllocator, VulkanHandle<VkSurfaceKHR>* pSurface)
	{
		if (vkCreateXlibSurfaceKHR == null) throw new VVK.FunctionNotLoadedException("vkCreateXlibSurfaceKHR");
		return vkCreateXlibSurfaceKHR(instance, pCreateInfo, pAllocator, pSurface);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public VkBool32 GetPhysicalDeviceXlibPresentationSupportKHR(VulkanHandle<VkPhysicalDevice> physicalDevice, uint queueFamilyIndex, void* dpy, ulong visualID)
	{
		if (vkGetPhysicalDeviceXlibPresentationSupportKHR == null) throw new VVK.FunctionNotLoadedException("vkGetPhysicalDeviceXlibPresentationSupportKHR");
		return vkGetPhysicalDeviceXlibPresentationSupportKHR(physicalDevice, queueFamilyIndex, dpy, visualID);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public VkResult CreateXcbSurfaceKHR(VulkanHandle<VkInstance> instance, VkXcbSurfaceCreateInfoKHR* pCreateInfo, VkAllocationCallbacks* pAllocator, VulkanHandle<VkSurfaceKHR>* pSurface)
	{
		if (vkCreateXcbSurfaceKHR == null) throw new VVK.FunctionNotLoadedException("vkCreateXcbSurfaceKHR");
		return vkCreateXcbSurfaceKHR(instance, pCreateInfo, pAllocator, pSurface);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public VkBool32 GetPhysicalDeviceXcbPresentationSupportKHR(VulkanHandle<VkPhysicalDevice> physicalDevice, uint queueFamilyIndex, void* connection, uint visual_id)
	{
		if (vkGetPhysicalDeviceXcbPresentationSupportKHR == null) throw new VVK.FunctionNotLoadedException("vkGetPhysicalDeviceXcbPresentationSupportKHR");
		return vkGetPhysicalDeviceXcbPresentationSupportKHR(physicalDevice, queueFamilyIndex, connection, visual_id);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public VkResult CreateDirectFBSurfaceEXT(VulkanHandle<VkInstance> instance, VkDirectFBSurfaceCreateInfoEXT* pCreateInfo, VkAllocationCallbacks* pAllocator, VulkanHandle<VkSurfaceKHR>* pSurface)
	{
		if (vkCreateDirectFBSurfaceEXT == null) throw new VVK.FunctionNotLoadedException("vkCreateDirectFBSurfaceEXT");
		return vkCreateDirectFBSurfaceEXT(instance, pCreateInfo, pAllocator, pSurface);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public VkBool32 GetPhysicalDeviceDirectFBPresentationSupportEXT(VulkanHandle<VkPhysicalDevice> physicalDevice, uint queueFamilyIndex, void* dfb)
	{
		if (vkGetPhysicalDeviceDirectFBPresentationSupportEXT == null) throw new VVK.FunctionNotLoadedException("vkGetPhysicalDeviceDirectFBPresentationSupportEXT");
		return vkGetPhysicalDeviceDirectFBPresentationSupportEXT(physicalDevice, queueFamilyIndex, dfb);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public VkResult CreateImagePipeSurfaceFUCHSIA(VulkanHandle<VkInstance> instance, VkImagePipeSurfaceCreateInfoFUCHSIA* pCreateInfo, VkAllocationCallbacks* pAllocator, VulkanHandle<VkSurfaceKHR>* pSurface)
	{
		if (vkCreateImagePipeSurfaceFUCHSIA == null) throw new VVK.FunctionNotLoadedException("vkCreateImagePipeSurfaceFUCHSIA");
		return vkCreateImagePipeSurfaceFUCHSIA(instance, pCreateInfo, pAllocator, pSurface);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public VkResult CreateStreamDescriptorSurfaceGGP(VulkanHandle<VkInstance> instance, VkStreamDescriptorSurfaceCreateInfoGGP* pCreateInfo, VkAllocationCallbacks* pAllocator, VulkanHandle<VkSurfaceKHR>* pSurface)
	{
		if (vkCreateStreamDescriptorSurfaceGGP == null) throw new VVK.FunctionNotLoadedException("vkCreateStreamDescriptorSurfaceGGP");
		return vkCreateStreamDescriptorSurfaceGGP(instance, pCreateInfo, pAllocator, pSurface);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public VkResult CreateDebugReportCallbackEXT(VulkanHandle<VkInstance> instance, VkDebugReportCallbackCreateInfoEXT* pCreateInfo, VkAllocationCallbacks* pAllocator, VulkanHandle<VkDebugReportCallbackEXT>* pCallback)
	{
		if (vkCreateDebugReportCallbackEXT == null) throw new VVK.FunctionNotLoadedException("vkCreateDebugReportCallbackEXT");
		return vkCreateDebugReportCallbackEXT(instance, pCreateInfo, pAllocator, pCallback);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void DestroyDebugReportCallbackEXT(VulkanHandle<VkInstance> instance, VulkanHandle<VkDebugReportCallbackEXT> callback, VkAllocationCallbacks* pAllocator)
	{
		if (vkDestroyDebugReportCallbackEXT == null) throw new VVK.FunctionNotLoadedException("vkDestroyDebugReportCallbackEXT");
		vkDestroyDebugReportCallbackEXT(instance, callback, pAllocator);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void DebugReportMessageEXT(VulkanHandle<VkInstance> instance, VkDebugReportFlagsEXT flags, VkDebugReportObjectTypeEXT objectType, ulong @object, ulong location, int messageCode, byte* pLayerPrefix, byte* pMessage)
	{
		if (vkDebugReportMessageEXT == null) throw new VVK.FunctionNotLoadedException("vkDebugReportMessageEXT");
		vkDebugReportMessageEXT(instance, flags, objectType, @object, location, messageCode, pLayerPrefix, pMessage);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public VkResult GetPhysicalDeviceExternalImageFormatPropertiesNV(VulkanHandle<VkPhysicalDevice> physicalDevice, VkFormat format, VkImageType type, VkImageTiling tiling, VkImageUsageFlags usage, VkImageCreateFlags flags, VkExternalMemoryHandleTypeFlagsNV externalHandleType, VkExternalImageFormatPropertiesNV* pExternalImageFormatProperties)
	{
		if (vkGetPhysicalDeviceExternalImageFormatPropertiesNV == null) throw new VVK.FunctionNotLoadedException("vkGetPhysicalDeviceExternalImageFormatPropertiesNV");
		return vkGetPhysicalDeviceExternalImageFormatPropertiesNV(physicalDevice, format, type, tiling, usage, flags, externalHandleType, pExternalImageFormatProperties);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void GetPhysicalDeviceFeatures2(VulkanHandle<VkPhysicalDevice> physicalDevice, VkPhysicalDeviceFeatures2* pFeatures)
	{
		if (vkGetPhysicalDeviceFeatures2 == null) throw new VVK.FunctionNotLoadedException("vkGetPhysicalDeviceFeatures2");
		vkGetPhysicalDeviceFeatures2(physicalDevice, pFeatures);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void GetPhysicalDeviceFeatures2KHR(VulkanHandle<VkPhysicalDevice> physicalDevice, VkPhysicalDeviceFeatures2* pFeatures)
	{
		if (vkGetPhysicalDeviceFeatures2KHR == null) throw new VVK.FunctionNotLoadedException("vkGetPhysicalDeviceFeatures2KHR");
		vkGetPhysicalDeviceFeatures2KHR(physicalDevice, pFeatures);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void GetPhysicalDeviceProperties2(VulkanHandle<VkPhysicalDevice> physicalDevice, VkPhysicalDeviceProperties2* pProperties)
	{
		if (vkGetPhysicalDeviceProperties2 == null) throw new VVK.FunctionNotLoadedException("vkGetPhysicalDeviceProperties2");
		vkGetPhysicalDeviceProperties2(physicalDevice, pProperties);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void GetPhysicalDeviceProperties2KHR(VulkanHandle<VkPhysicalDevice> physicalDevice, VkPhysicalDeviceProperties2* pProperties)
	{
		if (vkGetPhysicalDeviceProperties2KHR == null) throw new VVK.FunctionNotLoadedException("vkGetPhysicalDeviceProperties2KHR");
		vkGetPhysicalDeviceProperties2KHR(physicalDevice, pProperties);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void GetPhysicalDeviceFormatProperties2(VulkanHandle<VkPhysicalDevice> physicalDevice, VkFormat format, VkFormatProperties2* pFormatProperties)
	{
		if (vkGetPhysicalDeviceFormatProperties2 == null) throw new VVK.FunctionNotLoadedException("vkGetPhysicalDeviceFormatProperties2");
		vkGetPhysicalDeviceFormatProperties2(physicalDevice, format, pFormatProperties);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void GetPhysicalDeviceFormatProperties2KHR(VulkanHandle<VkPhysicalDevice> physicalDevice, VkFormat format, VkFormatProperties2* pFormatProperties)
	{
		if (vkGetPhysicalDeviceFormatProperties2KHR == null) throw new VVK.FunctionNotLoadedException("vkGetPhysicalDeviceFormatProperties2KHR");
		vkGetPhysicalDeviceFormatProperties2KHR(physicalDevice, format, pFormatProperties);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public VkResult GetPhysicalDeviceImageFormatProperties2(VulkanHandle<VkPhysicalDevice> physicalDevice, VkPhysicalDeviceImageFormatInfo2* pImageFormatInfo, VkImageFormatProperties2* pImageFormatProperties)
	{
		if (vkGetPhysicalDeviceImageFormatProperties2 == null) throw new VVK.FunctionNotLoadedException("vkGetPhysicalDeviceImageFormatProperties2");
		return vkGetPhysicalDeviceImageFormatProperties2(physicalDevice, pImageFormatInfo, pImageFormatProperties);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public VkResult GetPhysicalDeviceImageFormatProperties2KHR(VulkanHandle<VkPhysicalDevice> physicalDevice, VkPhysicalDeviceImageFormatInfo2* pImageFormatInfo, VkImageFormatProperties2* pImageFormatProperties)
	{
		if (vkGetPhysicalDeviceImageFormatProperties2KHR == null) throw new VVK.FunctionNotLoadedException("vkGetPhysicalDeviceImageFormatProperties2KHR");
		return vkGetPhysicalDeviceImageFormatProperties2KHR(physicalDevice, pImageFormatInfo, pImageFormatProperties);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void GetPhysicalDeviceQueueFamilyProperties2(VulkanHandle<VkPhysicalDevice> physicalDevice, uint* pQueueFamilyPropertyCount, VkQueueFamilyProperties2* pQueueFamilyProperties)
	{
		if (vkGetPhysicalDeviceQueueFamilyProperties2 == null) throw new VVK.FunctionNotLoadedException("vkGetPhysicalDeviceQueueFamilyProperties2");
		vkGetPhysicalDeviceQueueFamilyProperties2(physicalDevice, pQueueFamilyPropertyCount, pQueueFamilyProperties);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void GetPhysicalDeviceQueueFamilyProperties2KHR(VulkanHandle<VkPhysicalDevice> physicalDevice, uint* pQueueFamilyPropertyCount, VkQueueFamilyProperties2* pQueueFamilyProperties)
	{
		if (vkGetPhysicalDeviceQueueFamilyProperties2KHR == null) throw new VVK.FunctionNotLoadedException("vkGetPhysicalDeviceQueueFamilyProperties2KHR");
		vkGetPhysicalDeviceQueueFamilyProperties2KHR(physicalDevice, pQueueFamilyPropertyCount, pQueueFamilyProperties);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void GetPhysicalDeviceMemoryProperties2(VulkanHandle<VkPhysicalDevice> physicalDevice, VkPhysicalDeviceMemoryProperties2* pMemoryProperties)
	{
		if (vkGetPhysicalDeviceMemoryProperties2 == null) throw new VVK.FunctionNotLoadedException("vkGetPhysicalDeviceMemoryProperties2");
		vkGetPhysicalDeviceMemoryProperties2(physicalDevice, pMemoryProperties);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void GetPhysicalDeviceMemoryProperties2KHR(VulkanHandle<VkPhysicalDevice> physicalDevice, VkPhysicalDeviceMemoryProperties2* pMemoryProperties)
	{
		if (vkGetPhysicalDeviceMemoryProperties2KHR == null) throw new VVK.FunctionNotLoadedException("vkGetPhysicalDeviceMemoryProperties2KHR");
		vkGetPhysicalDeviceMemoryProperties2KHR(physicalDevice, pMemoryProperties);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void GetPhysicalDeviceSparseImageFormatProperties2(VulkanHandle<VkPhysicalDevice> physicalDevice, VkPhysicalDeviceSparseImageFormatInfo2* pFormatInfo, uint* pPropertyCount, VkSparseImageFormatProperties2* pProperties)
	{
		if (vkGetPhysicalDeviceSparseImageFormatProperties2 == null) throw new VVK.FunctionNotLoadedException("vkGetPhysicalDeviceSparseImageFormatProperties2");
		vkGetPhysicalDeviceSparseImageFormatProperties2(physicalDevice, pFormatInfo, pPropertyCount, pProperties);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void GetPhysicalDeviceSparseImageFormatProperties2KHR(VulkanHandle<VkPhysicalDevice> physicalDevice, VkPhysicalDeviceSparseImageFormatInfo2* pFormatInfo, uint* pPropertyCount, VkSparseImageFormatProperties2* pProperties)
	{
		if (vkGetPhysicalDeviceSparseImageFormatProperties2KHR == null) throw new VVK.FunctionNotLoadedException("vkGetPhysicalDeviceSparseImageFormatProperties2KHR");
		vkGetPhysicalDeviceSparseImageFormatProperties2KHR(physicalDevice, pFormatInfo, pPropertyCount, pProperties);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void GetPhysicalDeviceExternalBufferProperties(VulkanHandle<VkPhysicalDevice> physicalDevice, VkPhysicalDeviceExternalBufferInfo* pExternalBufferInfo, VkExternalBufferProperties* pExternalBufferProperties)
	{
		if (vkGetPhysicalDeviceExternalBufferProperties == null) throw new VVK.FunctionNotLoadedException("vkGetPhysicalDeviceExternalBufferProperties");
		vkGetPhysicalDeviceExternalBufferProperties(physicalDevice, pExternalBufferInfo, pExternalBufferProperties);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void GetPhysicalDeviceExternalBufferPropertiesKHR(VulkanHandle<VkPhysicalDevice> physicalDevice, VkPhysicalDeviceExternalBufferInfo* pExternalBufferInfo, VkExternalBufferProperties* pExternalBufferProperties)
	{
		if (vkGetPhysicalDeviceExternalBufferPropertiesKHR == null) throw new VVK.FunctionNotLoadedException("vkGetPhysicalDeviceExternalBufferPropertiesKHR");
		vkGetPhysicalDeviceExternalBufferPropertiesKHR(physicalDevice, pExternalBufferInfo, pExternalBufferProperties);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void GetPhysicalDeviceExternalSemaphoreProperties(VulkanHandle<VkPhysicalDevice> physicalDevice, VkPhysicalDeviceExternalSemaphoreInfo* pExternalSemaphoreInfo, VkExternalSemaphoreProperties* pExternalSemaphoreProperties)
	{
		if (vkGetPhysicalDeviceExternalSemaphoreProperties == null) throw new VVK.FunctionNotLoadedException("vkGetPhysicalDeviceExternalSemaphoreProperties");
		vkGetPhysicalDeviceExternalSemaphoreProperties(physicalDevice, pExternalSemaphoreInfo, pExternalSemaphoreProperties);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void GetPhysicalDeviceExternalSemaphorePropertiesKHR(VulkanHandle<VkPhysicalDevice> physicalDevice, VkPhysicalDeviceExternalSemaphoreInfo* pExternalSemaphoreInfo, VkExternalSemaphoreProperties* pExternalSemaphoreProperties)
	{
		if (vkGetPhysicalDeviceExternalSemaphorePropertiesKHR == null) throw new VVK.FunctionNotLoadedException("vkGetPhysicalDeviceExternalSemaphorePropertiesKHR");
		vkGetPhysicalDeviceExternalSemaphorePropertiesKHR(physicalDevice, pExternalSemaphoreInfo, pExternalSemaphoreProperties);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void GetPhysicalDeviceExternalFenceProperties(VulkanHandle<VkPhysicalDevice> physicalDevice, VkPhysicalDeviceExternalFenceInfo* pExternalFenceInfo, VkExternalFenceProperties* pExternalFenceProperties)
	{
		if (vkGetPhysicalDeviceExternalFenceProperties == null) throw new VVK.FunctionNotLoadedException("vkGetPhysicalDeviceExternalFenceProperties");
		vkGetPhysicalDeviceExternalFenceProperties(physicalDevice, pExternalFenceInfo, pExternalFenceProperties);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void GetPhysicalDeviceExternalFencePropertiesKHR(VulkanHandle<VkPhysicalDevice> physicalDevice, VkPhysicalDeviceExternalFenceInfo* pExternalFenceInfo, VkExternalFenceProperties* pExternalFenceProperties)
	{
		if (vkGetPhysicalDeviceExternalFencePropertiesKHR == null) throw new VVK.FunctionNotLoadedException("vkGetPhysicalDeviceExternalFencePropertiesKHR");
		vkGetPhysicalDeviceExternalFencePropertiesKHR(physicalDevice, pExternalFenceInfo, pExternalFenceProperties);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public VkResult ReleaseDisplayEXT(VulkanHandle<VkPhysicalDevice> physicalDevice, VulkanHandle<VkDisplayKHR> display)
	{
		if (vkReleaseDisplayEXT == null) throw new VVK.FunctionNotLoadedException("vkReleaseDisplayEXT");
		return vkReleaseDisplayEXT(physicalDevice, display);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public VkResult AcquireXlibDisplayEXT(VulkanHandle<VkPhysicalDevice> physicalDevice, void* dpy, VulkanHandle<VkDisplayKHR> display)
	{
		if (vkAcquireXlibDisplayEXT == null) throw new VVK.FunctionNotLoadedException("vkAcquireXlibDisplayEXT");
		return vkAcquireXlibDisplayEXT(physicalDevice, dpy, display);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public VkResult GetRandROutputDisplayEXT(VulkanHandle<VkPhysicalDevice> physicalDevice, void* dpy, ulong rrOutput, VulkanHandle<VkDisplayKHR>* pDisplay)
	{
		if (vkGetRandROutputDisplayEXT == null) throw new VVK.FunctionNotLoadedException("vkGetRandROutputDisplayEXT");
		return vkGetRandROutputDisplayEXT(physicalDevice, dpy, rrOutput, pDisplay);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public VkResult AcquireWinrtDisplayNV(VulkanHandle<VkPhysicalDevice> physicalDevice, VulkanHandle<VkDisplayKHR> display)
	{
		if (vkAcquireWinrtDisplayNV == null) throw new VVK.FunctionNotLoadedException("vkAcquireWinrtDisplayNV");
		return vkAcquireWinrtDisplayNV(physicalDevice, display);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public VkResult GetWinrtDisplayNV(VulkanHandle<VkPhysicalDevice> physicalDevice, uint deviceRelativeId, VulkanHandle<VkDisplayKHR>* pDisplay)
	{
		if (vkGetWinrtDisplayNV == null) throw new VVK.FunctionNotLoadedException("vkGetWinrtDisplayNV");
		return vkGetWinrtDisplayNV(physicalDevice, deviceRelativeId, pDisplay);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public VkResult GetPhysicalDeviceSurfaceCapabilities2EXT(VulkanHandle<VkPhysicalDevice> physicalDevice, VulkanHandle<VkSurfaceKHR> surface, VkSurfaceCapabilities2EXT* pSurfaceCapabilities)
	{
		if (vkGetPhysicalDeviceSurfaceCapabilities2EXT == null) throw new VVK.FunctionNotLoadedException("vkGetPhysicalDeviceSurfaceCapabilities2EXT");
		return vkGetPhysicalDeviceSurfaceCapabilities2EXT(physicalDevice, surface, pSurfaceCapabilities);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public VkResult EnumeratePhysicalDeviceGroups(VulkanHandle<VkInstance> instance, uint* pPhysicalDeviceGroupCount, VkPhysicalDeviceGroupProperties* pPhysicalDeviceGroupProperties)
	{
		if (vkEnumeratePhysicalDeviceGroups == null) throw new VVK.FunctionNotLoadedException("vkEnumeratePhysicalDeviceGroups");
		return vkEnumeratePhysicalDeviceGroups(instance, pPhysicalDeviceGroupCount, pPhysicalDeviceGroupProperties);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public VkResult EnumeratePhysicalDeviceGroupsKHR(VulkanHandle<VkInstance> instance, uint* pPhysicalDeviceGroupCount, VkPhysicalDeviceGroupProperties* pPhysicalDeviceGroupProperties)
	{
		if (vkEnumeratePhysicalDeviceGroupsKHR == null) throw new VVK.FunctionNotLoadedException("vkEnumeratePhysicalDeviceGroupsKHR");
		return vkEnumeratePhysicalDeviceGroupsKHR(instance, pPhysicalDeviceGroupCount, pPhysicalDeviceGroupProperties);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public VkResult GetPhysicalDevicePresentRectanglesKHR(VulkanHandle<VkPhysicalDevice> physicalDevice, VulkanHandle<VkSurfaceKHR> surface, uint* pRectCount, VkRect2D* pRects)
	{
		if (vkGetPhysicalDevicePresentRectanglesKHR == null) throw new VVK.FunctionNotLoadedException("vkGetPhysicalDevicePresentRectanglesKHR");
		return vkGetPhysicalDevicePresentRectanglesKHR(physicalDevice, surface, pRectCount, pRects);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public VkResult CreateIOSSurfaceMVK(VulkanHandle<VkInstance> instance, VkIOSSurfaceCreateInfoMVK* pCreateInfo, VkAllocationCallbacks* pAllocator, VulkanHandle<VkSurfaceKHR>* pSurface)
	{
		if (vkCreateIOSSurfaceMVK == null) throw new VVK.FunctionNotLoadedException("vkCreateIOSSurfaceMVK");
		return vkCreateIOSSurfaceMVK(instance, pCreateInfo, pAllocator, pSurface);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public VkResult CreateMacOSSurfaceMVK(VulkanHandle<VkInstance> instance, VkMacOSSurfaceCreateInfoMVK* pCreateInfo, VkAllocationCallbacks* pAllocator, VulkanHandle<VkSurfaceKHR>* pSurface)
	{
		if (vkCreateMacOSSurfaceMVK == null) throw new VVK.FunctionNotLoadedException("vkCreateMacOSSurfaceMVK");
		return vkCreateMacOSSurfaceMVK(instance, pCreateInfo, pAllocator, pSurface);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public VkResult CreateMetalSurfaceEXT(VulkanHandle<VkInstance> instance, VkMetalSurfaceCreateInfoEXT* pCreateInfo, VkAllocationCallbacks* pAllocator, VulkanHandle<VkSurfaceKHR>* pSurface)
	{
		if (vkCreateMetalSurfaceEXT == null) throw new VVK.FunctionNotLoadedException("vkCreateMetalSurfaceEXT");
		return vkCreateMetalSurfaceEXT(instance, pCreateInfo, pAllocator, pSurface);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void GetPhysicalDeviceMultisamplePropertiesEXT(VulkanHandle<VkPhysicalDevice> physicalDevice, VkSampleCountFlags samples, VkMultisamplePropertiesEXT* pMultisampleProperties)
	{
		if (vkGetPhysicalDeviceMultisamplePropertiesEXT == null) throw new VVK.FunctionNotLoadedException("vkGetPhysicalDeviceMultisamplePropertiesEXT");
		vkGetPhysicalDeviceMultisamplePropertiesEXT(physicalDevice, samples, pMultisampleProperties);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public VkResult GetPhysicalDeviceSurfaceCapabilities2KHR(VulkanHandle<VkPhysicalDevice> physicalDevice, VkPhysicalDeviceSurfaceInfo2KHR* pSurfaceInfo, VkSurfaceCapabilities2KHR* pSurfaceCapabilities)
	{
		if (vkGetPhysicalDeviceSurfaceCapabilities2KHR == null) throw new VVK.FunctionNotLoadedException("vkGetPhysicalDeviceSurfaceCapabilities2KHR");
		return vkGetPhysicalDeviceSurfaceCapabilities2KHR(physicalDevice, pSurfaceInfo, pSurfaceCapabilities);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public VkResult GetPhysicalDeviceSurfaceFormats2KHR(VulkanHandle<VkPhysicalDevice> physicalDevice, VkPhysicalDeviceSurfaceInfo2KHR* pSurfaceInfo, uint* pSurfaceFormatCount, VkSurfaceFormat2KHR* pSurfaceFormats)
	{
		if (vkGetPhysicalDeviceSurfaceFormats2KHR == null) throw new VVK.FunctionNotLoadedException("vkGetPhysicalDeviceSurfaceFormats2KHR");
		return vkGetPhysicalDeviceSurfaceFormats2KHR(physicalDevice, pSurfaceInfo, pSurfaceFormatCount, pSurfaceFormats);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public VkResult GetPhysicalDeviceDisplayProperties2KHR(VulkanHandle<VkPhysicalDevice> physicalDevice, uint* pPropertyCount, VkDisplayProperties2KHR* pProperties)
	{
		if (vkGetPhysicalDeviceDisplayProperties2KHR == null) throw new VVK.FunctionNotLoadedException("vkGetPhysicalDeviceDisplayProperties2KHR");
		return vkGetPhysicalDeviceDisplayProperties2KHR(physicalDevice, pPropertyCount, pProperties);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public VkResult GetPhysicalDeviceDisplayPlaneProperties2KHR(VulkanHandle<VkPhysicalDevice> physicalDevice, uint* pPropertyCount, VkDisplayPlaneProperties2KHR* pProperties)
	{
		if (vkGetPhysicalDeviceDisplayPlaneProperties2KHR == null) throw new VVK.FunctionNotLoadedException("vkGetPhysicalDeviceDisplayPlaneProperties2KHR");
		return vkGetPhysicalDeviceDisplayPlaneProperties2KHR(physicalDevice, pPropertyCount, pProperties);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public VkResult GetDisplayModeProperties2KHR(VulkanHandle<VkPhysicalDevice> physicalDevice, VulkanHandle<VkDisplayKHR> display, uint* pPropertyCount, VkDisplayModeProperties2KHR* pProperties)
	{
		if (vkGetDisplayModeProperties2KHR == null) throw new VVK.FunctionNotLoadedException("vkGetDisplayModeProperties2KHR");
		return vkGetDisplayModeProperties2KHR(physicalDevice, display, pPropertyCount, pProperties);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public VkResult GetDisplayPlaneCapabilities2KHR(VulkanHandle<VkPhysicalDevice> physicalDevice, VkDisplayPlaneInfo2KHR* pDisplayPlaneInfo, VkDisplayPlaneCapabilities2KHR* pCapabilities)
	{
		if (vkGetDisplayPlaneCapabilities2KHR == null) throw new VVK.FunctionNotLoadedException("vkGetDisplayPlaneCapabilities2KHR");
		return vkGetDisplayPlaneCapabilities2KHR(physicalDevice, pDisplayPlaneInfo, pCapabilities);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public VkResult GetPhysicalDeviceCalibrateableTimeDomainsEXT(VulkanHandle<VkPhysicalDevice> physicalDevice, uint* pTimeDomainCount, VkTimeDomainEXT* pTimeDomains)
	{
		if (vkGetPhysicalDeviceCalibrateableTimeDomainsEXT == null) throw new VVK.FunctionNotLoadedException("vkGetPhysicalDeviceCalibrateableTimeDomainsEXT");
		return vkGetPhysicalDeviceCalibrateableTimeDomainsEXT(physicalDevice, pTimeDomainCount, pTimeDomains);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public VkResult CreateDebugUtilsMessengerEXT(VulkanHandle<VkInstance> instance, VkDebugUtilsMessengerCreateInfoEXT* pCreateInfo, VkAllocationCallbacks* pAllocator, VulkanHandle<VkDebugUtilsMessengerEXT>* pMessenger)
	{
		if (vkCreateDebugUtilsMessengerEXT == null) throw new VVK.FunctionNotLoadedException("vkCreateDebugUtilsMessengerEXT");
		return vkCreateDebugUtilsMessengerEXT(instance, pCreateInfo, pAllocator, pMessenger);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void DestroyDebugUtilsMessengerEXT(VulkanHandle<VkInstance> instance, VulkanHandle<VkDebugUtilsMessengerEXT> messenger, VkAllocationCallbacks* pAllocator)
	{
		if (vkDestroyDebugUtilsMessengerEXT == null) throw new VVK.FunctionNotLoadedException("vkDestroyDebugUtilsMessengerEXT");
		vkDestroyDebugUtilsMessengerEXT(instance, messenger, pAllocator);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void SubmitDebugUtilsMessageEXT(VulkanHandle<VkInstance> instance, VkDebugUtilsMessageSeverityFlagsEXT messageSeverity, VkDebugUtilsMessageTypeFlagsEXT messageTypes, VkDebugUtilsMessengerCallbackDataEXT* pCallbackData)
	{
		if (vkSubmitDebugUtilsMessageEXT == null) throw new VVK.FunctionNotLoadedException("vkSubmitDebugUtilsMessageEXT");
		vkSubmitDebugUtilsMessageEXT(instance, messageSeverity, messageTypes, pCallbackData);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public VkResult GetPhysicalDeviceCooperativeMatrixPropertiesNV(VulkanHandle<VkPhysicalDevice> physicalDevice, uint* pPropertyCount, VkCooperativeMatrixPropertiesNV* pProperties)
	{
		if (vkGetPhysicalDeviceCooperativeMatrixPropertiesNV == null) throw new VVK.FunctionNotLoadedException("vkGetPhysicalDeviceCooperativeMatrixPropertiesNV");
		return vkGetPhysicalDeviceCooperativeMatrixPropertiesNV(physicalDevice, pPropertyCount, pProperties);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public VkResult GetPhysicalDeviceSurfacePresentModes2EXT(VulkanHandle<VkPhysicalDevice> physicalDevice, VkPhysicalDeviceSurfaceInfo2KHR* pSurfaceInfo, uint* pPresentModeCount, VkPresentModeKHR* pPresentModes)
	{
		if (vkGetPhysicalDeviceSurfacePresentModes2EXT == null) throw new VVK.FunctionNotLoadedException("vkGetPhysicalDeviceSurfacePresentModes2EXT");
		return vkGetPhysicalDeviceSurfacePresentModes2EXT(physicalDevice, pSurfaceInfo, pPresentModeCount, pPresentModes);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public VkResult EnumeratePhysicalDeviceQueueFamilyPerformanceQueryCountersKHR(VulkanHandle<VkPhysicalDevice> physicalDevice, uint queueFamilyIndex, uint* pCounterCount, VkPerformanceCounterKHR* pCounters, VkPerformanceCounterDescriptionKHR* pCounterDescriptions)
	{
		if (vkEnumeratePhysicalDeviceQueueFamilyPerformanceQueryCountersKHR == null) throw new VVK.FunctionNotLoadedException("vkEnumeratePhysicalDeviceQueueFamilyPerformanceQueryCountersKHR");
		return vkEnumeratePhysicalDeviceQueueFamilyPerformanceQueryCountersKHR(physicalDevice, queueFamilyIndex, pCounterCount, pCounters, pCounterDescriptions);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void GetPhysicalDeviceQueueFamilyPerformanceQueryPassesKHR(VulkanHandle<VkPhysicalDevice> physicalDevice, VkQueryPoolPerformanceCreateInfoKHR* pPerformanceQueryCreateInfo, uint* pNumPasses)
	{
		if (vkGetPhysicalDeviceQueueFamilyPerformanceQueryPassesKHR == null) throw new VVK.FunctionNotLoadedException("vkGetPhysicalDeviceQueueFamilyPerformanceQueryPassesKHR");
		vkGetPhysicalDeviceQueueFamilyPerformanceQueryPassesKHR(physicalDevice, pPerformanceQueryCreateInfo, pNumPasses);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public VkResult CreateHeadlessSurfaceEXT(VulkanHandle<VkInstance> instance, VkHeadlessSurfaceCreateInfoEXT* pCreateInfo, VkAllocationCallbacks* pAllocator, VulkanHandle<VkSurfaceKHR>* pSurface)
	{
		if (vkCreateHeadlessSurfaceEXT == null) throw new VVK.FunctionNotLoadedException("vkCreateHeadlessSurfaceEXT");
		return vkCreateHeadlessSurfaceEXT(instance, pCreateInfo, pAllocator, pSurface);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public VkResult GetPhysicalDeviceSupportedFramebufferMixedSamplesCombinationsNV(VulkanHandle<VkPhysicalDevice> physicalDevice, uint* pCombinationCount, VkFramebufferMixedSamplesCombinationNV* pCombinations)
	{
		if (vkGetPhysicalDeviceSupportedFramebufferMixedSamplesCombinationsNV == null) throw new VVK.FunctionNotLoadedException("vkGetPhysicalDeviceSupportedFramebufferMixedSamplesCombinationsNV");
		return vkGetPhysicalDeviceSupportedFramebufferMixedSamplesCombinationsNV(physicalDevice, pCombinationCount, pCombinations);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public VkResult GetPhysicalDeviceToolPropertiesEXT(VulkanHandle<VkPhysicalDevice> physicalDevice, uint* pToolCount, VkPhysicalDeviceToolPropertiesEXT* pToolProperties)
	{
		if (vkGetPhysicalDeviceToolPropertiesEXT == null) throw new VVK.FunctionNotLoadedException("vkGetPhysicalDeviceToolPropertiesEXT");
		return vkGetPhysicalDeviceToolPropertiesEXT(physicalDevice, pToolCount, pToolProperties);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public VkResult GetPhysicalDeviceFragmentShadingRatesKHR(VulkanHandle<VkPhysicalDevice> physicalDevice, uint* pFragmentShadingRateCount, VkPhysicalDeviceFragmentShadingRateKHR* pFragmentShadingRates)
	{
		if (vkGetPhysicalDeviceFragmentShadingRatesKHR == null) throw new VVK.FunctionNotLoadedException("vkGetPhysicalDeviceFragmentShadingRatesKHR");
		return vkGetPhysicalDeviceFragmentShadingRatesKHR(physicalDevice, pFragmentShadingRateCount, pFragmentShadingRates);
	}

}


} // namespace Vulkan

