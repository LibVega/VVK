/*
 * MIT License - Copyright(c) 2020 Sean Moss
 * This file is subject to the terms and conditions of the MIT License, the text of which can be found in the 'LICENSE'
 * file at the root of this repository, or online at <https://opensource.org/licenses/MIT>.
 */

/// This file was generated by VVKGen. Edits to this file will be lost on next generation.

using System;
using System.Runtime.InteropServices;
using System.Runtime.CompilerServices;

namespace Vulkan
{

public unsafe sealed partial class DeviceFunctionTable
{
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void DestroyDevice(VulkanHandle<VkDevice> device, VkAllocationCallbacks* pAllocator)
	{
		vkDestroyDevice(device, pAllocator);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void GetDeviceQueue(VulkanHandle<VkDevice> device, uint queueFamilyIndex, uint queueIndex, VulkanHandle<VkQueue>* pQueue)
	{
		vkGetDeviceQueue(device, queueFamilyIndex, queueIndex, pQueue);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public VkResult QueueSubmit(VulkanHandle<VkQueue> queue, uint submitCount, VkSubmitInfo* pSubmits, VulkanHandle<VkFence> fence)
	{
		return vkQueueSubmit(queue, submitCount, pSubmits, fence);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public VkResult QueueWaitIdle(VulkanHandle<VkQueue> queue)
	{
		return vkQueueWaitIdle(queue);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public VkResult DeviceWaitIdle(VulkanHandle<VkDevice> device)
	{
		return vkDeviceWaitIdle(device);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public VkResult AllocateMemory(VulkanHandle<VkDevice> device, VkMemoryAllocateInfo* pAllocateInfo, VkAllocationCallbacks* pAllocator, VulkanHandle<VkDeviceMemory>* pMemory)
	{
		return vkAllocateMemory(device, pAllocateInfo, pAllocator, pMemory);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void FreeMemory(VulkanHandle<VkDevice> device, VulkanHandle<VkDeviceMemory> memory, VkAllocationCallbacks* pAllocator)
	{
		vkFreeMemory(device, memory, pAllocator);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public VkResult MapMemory(VulkanHandle<VkDevice> device, VulkanHandle<VkDeviceMemory> memory, ulong offset, ulong size, VkMemoryMapFlags flags, void** ppData)
	{
		return vkMapMemory(device, memory, offset, size, flags, ppData);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void UnmapMemory(VulkanHandle<VkDevice> device, VulkanHandle<VkDeviceMemory> memory)
	{
		vkUnmapMemory(device, memory);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public VkResult FlushMappedMemoryRanges(VulkanHandle<VkDevice> device, uint memoryRangeCount, VkMappedMemoryRange* pMemoryRanges)
	{
		return vkFlushMappedMemoryRanges(device, memoryRangeCount, pMemoryRanges);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public VkResult InvalidateMappedMemoryRanges(VulkanHandle<VkDevice> device, uint memoryRangeCount, VkMappedMemoryRange* pMemoryRanges)
	{
		return vkInvalidateMappedMemoryRanges(device, memoryRangeCount, pMemoryRanges);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void GetDeviceMemoryCommitment(VulkanHandle<VkDevice> device, VulkanHandle<VkDeviceMemory> memory, ulong* pCommittedMemoryInBytes)
	{
		vkGetDeviceMemoryCommitment(device, memory, pCommittedMemoryInBytes);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void GetBufferMemoryRequirements(VulkanHandle<VkDevice> device, VulkanHandle<VkBuffer> buffer, VkMemoryRequirements* pMemoryRequirements)
	{
		vkGetBufferMemoryRequirements(device, buffer, pMemoryRequirements);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public VkResult BindBufferMemory(VulkanHandle<VkDevice> device, VulkanHandle<VkBuffer> buffer, VulkanHandle<VkDeviceMemory> memory, ulong memoryOffset)
	{
		return vkBindBufferMemory(device, buffer, memory, memoryOffset);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void GetImageMemoryRequirements(VulkanHandle<VkDevice> device, VulkanHandle<VkImage> image, VkMemoryRequirements* pMemoryRequirements)
	{
		vkGetImageMemoryRequirements(device, image, pMemoryRequirements);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public VkResult BindImageMemory(VulkanHandle<VkDevice> device, VulkanHandle<VkImage> image, VulkanHandle<VkDeviceMemory> memory, ulong memoryOffset)
	{
		return vkBindImageMemory(device, image, memory, memoryOffset);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void GetImageSparseMemoryRequirements(VulkanHandle<VkDevice> device, VulkanHandle<VkImage> image, uint* pSparseMemoryRequirementCount, VkSparseImageMemoryRequirements* pSparseMemoryRequirements)
	{
		vkGetImageSparseMemoryRequirements(device, image, pSparseMemoryRequirementCount, pSparseMemoryRequirements);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public VkResult QueueBindSparse(VulkanHandle<VkQueue> queue, uint bindInfoCount, VkBindSparseInfo* pBindInfo, VulkanHandle<VkFence> fence)
	{
		return vkQueueBindSparse(queue, bindInfoCount, pBindInfo, fence);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public VkResult CreateFence(VulkanHandle<VkDevice> device, VkFenceCreateInfo* pCreateInfo, VkAllocationCallbacks* pAllocator, VulkanHandle<VkFence>* pFence)
	{
		return vkCreateFence(device, pCreateInfo, pAllocator, pFence);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void DestroyFence(VulkanHandle<VkDevice> device, VulkanHandle<VkFence> fence, VkAllocationCallbacks* pAllocator)
	{
		vkDestroyFence(device, fence, pAllocator);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public VkResult ResetFences(VulkanHandle<VkDevice> device, uint fenceCount, VulkanHandle<VkFence>* pFences)
	{
		return vkResetFences(device, fenceCount, pFences);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public VkResult GetFenceStatus(VulkanHandle<VkDevice> device, VulkanHandle<VkFence> fence)
	{
		return vkGetFenceStatus(device, fence);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public VkResult WaitForFences(VulkanHandle<VkDevice> device, uint fenceCount, VulkanHandle<VkFence>* pFences, VkBool32 waitAll, ulong timeout)
	{
		return vkWaitForFences(device, fenceCount, pFences, waitAll, timeout);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public VkResult CreateSemaphore(VulkanHandle<VkDevice> device, VkSemaphoreCreateInfo* pCreateInfo, VkAllocationCallbacks* pAllocator, VulkanHandle<VkSemaphore>* pSemaphore)
	{
		return vkCreateSemaphore(device, pCreateInfo, pAllocator, pSemaphore);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void DestroySemaphore(VulkanHandle<VkDevice> device, VulkanHandle<VkSemaphore> semaphore, VkAllocationCallbacks* pAllocator)
	{
		vkDestroySemaphore(device, semaphore, pAllocator);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public VkResult CreateEvent(VulkanHandle<VkDevice> device, VkEventCreateInfo* pCreateInfo, VkAllocationCallbacks* pAllocator, VulkanHandle<VkEvent>* pEvent)
	{
		return vkCreateEvent(device, pCreateInfo, pAllocator, pEvent);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void DestroyEvent(VulkanHandle<VkDevice> device, VulkanHandle<VkEvent> @event, VkAllocationCallbacks* pAllocator)
	{
		vkDestroyEvent(device, @event, pAllocator);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public VkResult GetEventStatus(VulkanHandle<VkDevice> device, VulkanHandle<VkEvent> @event)
	{
		return vkGetEventStatus(device, @event);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public VkResult SetEvent(VulkanHandle<VkDevice> device, VulkanHandle<VkEvent> @event)
	{
		return vkSetEvent(device, @event);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public VkResult ResetEvent(VulkanHandle<VkDevice> device, VulkanHandle<VkEvent> @event)
	{
		return vkResetEvent(device, @event);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public VkResult CreateQueryPool(VulkanHandle<VkDevice> device, VkQueryPoolCreateInfo* pCreateInfo, VkAllocationCallbacks* pAllocator, VulkanHandle<VkQueryPool>* pQueryPool)
	{
		return vkCreateQueryPool(device, pCreateInfo, pAllocator, pQueryPool);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void DestroyQueryPool(VulkanHandle<VkDevice> device, VulkanHandle<VkQueryPool> queryPool, VkAllocationCallbacks* pAllocator)
	{
		vkDestroyQueryPool(device, queryPool, pAllocator);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public VkResult GetQueryPoolResults(VulkanHandle<VkDevice> device, VulkanHandle<VkQueryPool> queryPool, uint firstQuery, uint queryCount, ulong dataSize, void* pData, ulong stride, VkQueryResultFlags flags)
	{
		return vkGetQueryPoolResults(device, queryPool, firstQuery, queryCount, dataSize, pData, stride, flags);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void ResetQueryPool(VulkanHandle<VkDevice> device, VulkanHandle<VkQueryPool> queryPool, uint firstQuery, uint queryCount)
	{
		if (vkResetQueryPool == null) throw new VVK.FunctionNotLoadedException("vkResetQueryPool");
		vkResetQueryPool(device, queryPool, firstQuery, queryCount);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void ResetQueryPoolEXT(VulkanHandle<VkDevice> device, VulkanHandle<VkQueryPool> queryPool, uint firstQuery, uint queryCount)
	{
		if (vkResetQueryPoolEXT == null) throw new VVK.FunctionNotLoadedException("vkResetQueryPoolEXT");
		vkResetQueryPoolEXT(device, queryPool, firstQuery, queryCount);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public VkResult CreateBuffer(VulkanHandle<VkDevice> device, VkBufferCreateInfo* pCreateInfo, VkAllocationCallbacks* pAllocator, VulkanHandle<VkBuffer>* pBuffer)
	{
		return vkCreateBuffer(device, pCreateInfo, pAllocator, pBuffer);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void DestroyBuffer(VulkanHandle<VkDevice> device, VulkanHandle<VkBuffer> buffer, VkAllocationCallbacks* pAllocator)
	{
		vkDestroyBuffer(device, buffer, pAllocator);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public VkResult CreateBufferView(VulkanHandle<VkDevice> device, VkBufferViewCreateInfo* pCreateInfo, VkAllocationCallbacks* pAllocator, VulkanHandle<VkBufferView>* pView)
	{
		return vkCreateBufferView(device, pCreateInfo, pAllocator, pView);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void DestroyBufferView(VulkanHandle<VkDevice> device, VulkanHandle<VkBufferView> bufferView, VkAllocationCallbacks* pAllocator)
	{
		vkDestroyBufferView(device, bufferView, pAllocator);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public VkResult CreateImage(VulkanHandle<VkDevice> device, VkImageCreateInfo* pCreateInfo, VkAllocationCallbacks* pAllocator, VulkanHandle<VkImage>* pImage)
	{
		return vkCreateImage(device, pCreateInfo, pAllocator, pImage);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void DestroyImage(VulkanHandle<VkDevice> device, VulkanHandle<VkImage> image, VkAllocationCallbacks* pAllocator)
	{
		vkDestroyImage(device, image, pAllocator);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void GetImageSubresourceLayout(VulkanHandle<VkDevice> device, VulkanHandle<VkImage> image, VkImageSubresource* pSubresource, VkSubresourceLayout* pLayout)
	{
		vkGetImageSubresourceLayout(device, image, pSubresource, pLayout);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public VkResult CreateImageView(VulkanHandle<VkDevice> device, VkImageViewCreateInfo* pCreateInfo, VkAllocationCallbacks* pAllocator, VulkanHandle<VkImageView>* pView)
	{
		return vkCreateImageView(device, pCreateInfo, pAllocator, pView);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void DestroyImageView(VulkanHandle<VkDevice> device, VulkanHandle<VkImageView> imageView, VkAllocationCallbacks* pAllocator)
	{
		vkDestroyImageView(device, imageView, pAllocator);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public VkResult CreateShaderModule(VulkanHandle<VkDevice> device, VkShaderModuleCreateInfo* pCreateInfo, VkAllocationCallbacks* pAllocator, VulkanHandle<VkShaderModule>* pShaderModule)
	{
		return vkCreateShaderModule(device, pCreateInfo, pAllocator, pShaderModule);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void DestroyShaderModule(VulkanHandle<VkDevice> device, VulkanHandle<VkShaderModule> shaderModule, VkAllocationCallbacks* pAllocator)
	{
		vkDestroyShaderModule(device, shaderModule, pAllocator);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public VkResult CreatePipelineCache(VulkanHandle<VkDevice> device, VkPipelineCacheCreateInfo* pCreateInfo, VkAllocationCallbacks* pAllocator, VulkanHandle<VkPipelineCache>* pPipelineCache)
	{
		return vkCreatePipelineCache(device, pCreateInfo, pAllocator, pPipelineCache);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void DestroyPipelineCache(VulkanHandle<VkDevice> device, VulkanHandle<VkPipelineCache> pipelineCache, VkAllocationCallbacks* pAllocator)
	{
		vkDestroyPipelineCache(device, pipelineCache, pAllocator);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public VkResult GetPipelineCacheData(VulkanHandle<VkDevice> device, VulkanHandle<VkPipelineCache> pipelineCache, ulong* pDataSize, void* pData)
	{
		return vkGetPipelineCacheData(device, pipelineCache, pDataSize, pData);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public VkResult MergePipelineCaches(VulkanHandle<VkDevice> device, VulkanHandle<VkPipelineCache> dstCache, uint srcCacheCount, VulkanHandle<VkPipelineCache>* pSrcCaches)
	{
		return vkMergePipelineCaches(device, dstCache, srcCacheCount, pSrcCaches);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public VkResult CreateGraphicsPipelines(VulkanHandle<VkDevice> device, VulkanHandle<VkPipelineCache> pipelineCache, uint createInfoCount, VkGraphicsPipelineCreateInfo* pCreateInfos, VkAllocationCallbacks* pAllocator, VulkanHandle<VkPipeline>* pPipelines)
	{
		return vkCreateGraphicsPipelines(device, pipelineCache, createInfoCount, pCreateInfos, pAllocator, pPipelines);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public VkResult CreateComputePipelines(VulkanHandle<VkDevice> device, VulkanHandle<VkPipelineCache> pipelineCache, uint createInfoCount, VkComputePipelineCreateInfo* pCreateInfos, VkAllocationCallbacks* pAllocator, VulkanHandle<VkPipeline>* pPipelines)
	{
		return vkCreateComputePipelines(device, pipelineCache, createInfoCount, pCreateInfos, pAllocator, pPipelines);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void DestroyPipeline(VulkanHandle<VkDevice> device, VulkanHandle<VkPipeline> pipeline, VkAllocationCallbacks* pAllocator)
	{
		vkDestroyPipeline(device, pipeline, pAllocator);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public VkResult CreatePipelineLayout(VulkanHandle<VkDevice> device, VkPipelineLayoutCreateInfo* pCreateInfo, VkAllocationCallbacks* pAllocator, VulkanHandle<VkPipelineLayout>* pPipelineLayout)
	{
		return vkCreatePipelineLayout(device, pCreateInfo, pAllocator, pPipelineLayout);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void DestroyPipelineLayout(VulkanHandle<VkDevice> device, VulkanHandle<VkPipelineLayout> pipelineLayout, VkAllocationCallbacks* pAllocator)
	{
		vkDestroyPipelineLayout(device, pipelineLayout, pAllocator);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public VkResult CreateSampler(VulkanHandle<VkDevice> device, VkSamplerCreateInfo* pCreateInfo, VkAllocationCallbacks* pAllocator, VulkanHandle<VkSampler>* pSampler)
	{
		return vkCreateSampler(device, pCreateInfo, pAllocator, pSampler);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void DestroySampler(VulkanHandle<VkDevice> device, VulkanHandle<VkSampler> sampler, VkAllocationCallbacks* pAllocator)
	{
		vkDestroySampler(device, sampler, pAllocator);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public VkResult CreateDescriptorSetLayout(VulkanHandle<VkDevice> device, VkDescriptorSetLayoutCreateInfo* pCreateInfo, VkAllocationCallbacks* pAllocator, VulkanHandle<VkDescriptorSetLayout>* pSetLayout)
	{
		return vkCreateDescriptorSetLayout(device, pCreateInfo, pAllocator, pSetLayout);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void DestroyDescriptorSetLayout(VulkanHandle<VkDevice> device, VulkanHandle<VkDescriptorSetLayout> descriptorSetLayout, VkAllocationCallbacks* pAllocator)
	{
		vkDestroyDescriptorSetLayout(device, descriptorSetLayout, pAllocator);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public VkResult CreateDescriptorPool(VulkanHandle<VkDevice> device, VkDescriptorPoolCreateInfo* pCreateInfo, VkAllocationCallbacks* pAllocator, VulkanHandle<VkDescriptorPool>* pDescriptorPool)
	{
		return vkCreateDescriptorPool(device, pCreateInfo, pAllocator, pDescriptorPool);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void DestroyDescriptorPool(VulkanHandle<VkDevice> device, VulkanHandle<VkDescriptorPool> descriptorPool, VkAllocationCallbacks* pAllocator)
	{
		vkDestroyDescriptorPool(device, descriptorPool, pAllocator);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public VkResult ResetDescriptorPool(VulkanHandle<VkDevice> device, VulkanHandle<VkDescriptorPool> descriptorPool, VkDescriptorPoolResetFlags flags)
	{
		return vkResetDescriptorPool(device, descriptorPool, flags);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public VkResult AllocateDescriptorSets(VulkanHandle<VkDevice> device, VkDescriptorSetAllocateInfo* pAllocateInfo, VulkanHandle<VkDescriptorSet>* pDescriptorSets)
	{
		return vkAllocateDescriptorSets(device, pAllocateInfo, pDescriptorSets);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public VkResult FreeDescriptorSets(VulkanHandle<VkDevice> device, VulkanHandle<VkDescriptorPool> descriptorPool, uint descriptorSetCount, VulkanHandle<VkDescriptorSet>* pDescriptorSets)
	{
		return vkFreeDescriptorSets(device, descriptorPool, descriptorSetCount, pDescriptorSets);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void UpdateDescriptorSets(VulkanHandle<VkDevice> device, uint descriptorWriteCount, VkWriteDescriptorSet* pDescriptorWrites, uint descriptorCopyCount, VkCopyDescriptorSet* pDescriptorCopies)
	{
		vkUpdateDescriptorSets(device, descriptorWriteCount, pDescriptorWrites, descriptorCopyCount, pDescriptorCopies);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public VkResult CreateFramebuffer(VulkanHandle<VkDevice> device, VkFramebufferCreateInfo* pCreateInfo, VkAllocationCallbacks* pAllocator, VulkanHandle<VkFramebuffer>* pFramebuffer)
	{
		return vkCreateFramebuffer(device, pCreateInfo, pAllocator, pFramebuffer);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void DestroyFramebuffer(VulkanHandle<VkDevice> device, VulkanHandle<VkFramebuffer> framebuffer, VkAllocationCallbacks* pAllocator)
	{
		vkDestroyFramebuffer(device, framebuffer, pAllocator);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public VkResult CreateRenderPass(VulkanHandle<VkDevice> device, VkRenderPassCreateInfo* pCreateInfo, VkAllocationCallbacks* pAllocator, VulkanHandle<VkRenderPass>* pRenderPass)
	{
		return vkCreateRenderPass(device, pCreateInfo, pAllocator, pRenderPass);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void DestroyRenderPass(VulkanHandle<VkDevice> device, VulkanHandle<VkRenderPass> renderPass, VkAllocationCallbacks* pAllocator)
	{
		vkDestroyRenderPass(device, renderPass, pAllocator);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void GetRenderAreaGranularity(VulkanHandle<VkDevice> device, VulkanHandle<VkRenderPass> renderPass, VkExtent2D* pGranularity)
	{
		vkGetRenderAreaGranularity(device, renderPass, pGranularity);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public VkResult CreateCommandPool(VulkanHandle<VkDevice> device, VkCommandPoolCreateInfo* pCreateInfo, VkAllocationCallbacks* pAllocator, VulkanHandle<VkCommandPool>* pCommandPool)
	{
		return vkCreateCommandPool(device, pCreateInfo, pAllocator, pCommandPool);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void DestroyCommandPool(VulkanHandle<VkDevice> device, VulkanHandle<VkCommandPool> commandPool, VkAllocationCallbacks* pAllocator)
	{
		vkDestroyCommandPool(device, commandPool, pAllocator);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public VkResult ResetCommandPool(VulkanHandle<VkDevice> device, VulkanHandle<VkCommandPool> commandPool, VkCommandPoolResetFlags flags)
	{
		return vkResetCommandPool(device, commandPool, flags);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public VkResult AllocateCommandBuffers(VulkanHandle<VkDevice> device, VkCommandBufferAllocateInfo* pAllocateInfo, VulkanHandle<VkCommandBuffer>* pCommandBuffers)
	{
		return vkAllocateCommandBuffers(device, pAllocateInfo, pCommandBuffers);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void FreeCommandBuffers(VulkanHandle<VkDevice> device, VulkanHandle<VkCommandPool> commandPool, uint commandBufferCount, VulkanHandle<VkCommandBuffer>* pCommandBuffers)
	{
		vkFreeCommandBuffers(device, commandPool, commandBufferCount, pCommandBuffers);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public VkResult BeginCommandBuffer(VulkanHandle<VkCommandBuffer> commandBuffer, VkCommandBufferBeginInfo* pBeginInfo)
	{
		return vkBeginCommandBuffer(commandBuffer, pBeginInfo);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public VkResult EndCommandBuffer(VulkanHandle<VkCommandBuffer> commandBuffer)
	{
		return vkEndCommandBuffer(commandBuffer);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public VkResult ResetCommandBuffer(VulkanHandle<VkCommandBuffer> commandBuffer, VkCommandBufferResetFlags flags)
	{
		return vkResetCommandBuffer(commandBuffer, flags);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void CmdBindPipeline(VulkanHandle<VkCommandBuffer> commandBuffer, VkPipelineBindPoint pipelineBindPoint, VulkanHandle<VkPipeline> pipeline)
	{
		vkCmdBindPipeline(commandBuffer, pipelineBindPoint, pipeline);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void CmdSetViewport(VulkanHandle<VkCommandBuffer> commandBuffer, uint firstViewport, uint viewportCount, VkViewport* pViewports)
	{
		vkCmdSetViewport(commandBuffer, firstViewport, viewportCount, pViewports);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void CmdSetScissor(VulkanHandle<VkCommandBuffer> commandBuffer, uint firstScissor, uint scissorCount, VkRect2D* pScissors)
	{
		vkCmdSetScissor(commandBuffer, firstScissor, scissorCount, pScissors);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void CmdSetLineWidth(VulkanHandle<VkCommandBuffer> commandBuffer, float lineWidth)
	{
		vkCmdSetLineWidth(commandBuffer, lineWidth);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void CmdSetDepthBias(VulkanHandle<VkCommandBuffer> commandBuffer, float depthBiasConstantFactor, float depthBiasClamp, float depthBiasSlopeFactor)
	{
		vkCmdSetDepthBias(commandBuffer, depthBiasConstantFactor, depthBiasClamp, depthBiasSlopeFactor);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void CmdSetBlendConstants(VulkanHandle<VkCommandBuffer> commandBuffer, float* blendConstants)
	{
		vkCmdSetBlendConstants(commandBuffer, blendConstants);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void CmdSetDepthBounds(VulkanHandle<VkCommandBuffer> commandBuffer, float minDepthBounds, float maxDepthBounds)
	{
		vkCmdSetDepthBounds(commandBuffer, minDepthBounds, maxDepthBounds);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void CmdSetStencilCompareMask(VulkanHandle<VkCommandBuffer> commandBuffer, VkStencilFaceFlags faceMask, uint compareMask)
	{
		vkCmdSetStencilCompareMask(commandBuffer, faceMask, compareMask);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void CmdSetStencilWriteMask(VulkanHandle<VkCommandBuffer> commandBuffer, VkStencilFaceFlags faceMask, uint writeMask)
	{
		vkCmdSetStencilWriteMask(commandBuffer, faceMask, writeMask);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void CmdSetStencilReference(VulkanHandle<VkCommandBuffer> commandBuffer, VkStencilFaceFlags faceMask, uint reference)
	{
		vkCmdSetStencilReference(commandBuffer, faceMask, reference);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void CmdBindDescriptorSets(VulkanHandle<VkCommandBuffer> commandBuffer, VkPipelineBindPoint pipelineBindPoint, VulkanHandle<VkPipelineLayout> layout, uint firstSet, uint descriptorSetCount, VulkanHandle<VkDescriptorSet>* pDescriptorSets, uint dynamicOffsetCount, uint* pDynamicOffsets)
	{
		vkCmdBindDescriptorSets(commandBuffer, pipelineBindPoint, layout, firstSet, descriptorSetCount, pDescriptorSets, dynamicOffsetCount, pDynamicOffsets);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void CmdBindIndexBuffer(VulkanHandle<VkCommandBuffer> commandBuffer, VulkanHandle<VkBuffer> buffer, ulong offset, VkIndexType indexType)
	{
		vkCmdBindIndexBuffer(commandBuffer, buffer, offset, indexType);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void CmdBindVertexBuffers(VulkanHandle<VkCommandBuffer> commandBuffer, uint firstBinding, uint bindingCount, VulkanHandle<VkBuffer>* pBuffers, ulong* pOffsets)
	{
		vkCmdBindVertexBuffers(commandBuffer, firstBinding, bindingCount, pBuffers, pOffsets);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void CmdDraw(VulkanHandle<VkCommandBuffer> commandBuffer, uint vertexCount, uint instanceCount, uint firstVertex, uint firstInstance)
	{
		vkCmdDraw(commandBuffer, vertexCount, instanceCount, firstVertex, firstInstance);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void CmdDrawIndexed(VulkanHandle<VkCommandBuffer> commandBuffer, uint indexCount, uint instanceCount, uint firstIndex, int vertexOffset, uint firstInstance)
	{
		vkCmdDrawIndexed(commandBuffer, indexCount, instanceCount, firstIndex, vertexOffset, firstInstance);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void CmdDrawIndirect(VulkanHandle<VkCommandBuffer> commandBuffer, VulkanHandle<VkBuffer> buffer, ulong offset, uint drawCount, uint stride)
	{
		vkCmdDrawIndirect(commandBuffer, buffer, offset, drawCount, stride);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void CmdDrawIndexedIndirect(VulkanHandle<VkCommandBuffer> commandBuffer, VulkanHandle<VkBuffer> buffer, ulong offset, uint drawCount, uint stride)
	{
		vkCmdDrawIndexedIndirect(commandBuffer, buffer, offset, drawCount, stride);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void CmdDispatch(VulkanHandle<VkCommandBuffer> commandBuffer, uint groupCountX, uint groupCountY, uint groupCountZ)
	{
		vkCmdDispatch(commandBuffer, groupCountX, groupCountY, groupCountZ);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void CmdDispatchIndirect(VulkanHandle<VkCommandBuffer> commandBuffer, VulkanHandle<VkBuffer> buffer, ulong offset)
	{
		vkCmdDispatchIndirect(commandBuffer, buffer, offset);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void CmdCopyBuffer(VulkanHandle<VkCommandBuffer> commandBuffer, VulkanHandle<VkBuffer> srcBuffer, VulkanHandle<VkBuffer> dstBuffer, uint regionCount, VkBufferCopy* pRegions)
	{
		vkCmdCopyBuffer(commandBuffer, srcBuffer, dstBuffer, regionCount, pRegions);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void CmdCopyImage(VulkanHandle<VkCommandBuffer> commandBuffer, VulkanHandle<VkImage> srcImage, VkImageLayout srcImageLayout, VulkanHandle<VkImage> dstImage, VkImageLayout dstImageLayout, uint regionCount, VkImageCopy* pRegions)
	{
		vkCmdCopyImage(commandBuffer, srcImage, srcImageLayout, dstImage, dstImageLayout, regionCount, pRegions);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void CmdBlitImage(VulkanHandle<VkCommandBuffer> commandBuffer, VulkanHandle<VkImage> srcImage, VkImageLayout srcImageLayout, VulkanHandle<VkImage> dstImage, VkImageLayout dstImageLayout, uint regionCount, VkImageBlit* pRegions, VkFilter filter)
	{
		vkCmdBlitImage(commandBuffer, srcImage, srcImageLayout, dstImage, dstImageLayout, regionCount, pRegions, filter);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void CmdCopyBufferToImage(VulkanHandle<VkCommandBuffer> commandBuffer, VulkanHandle<VkBuffer> srcBuffer, VulkanHandle<VkImage> dstImage, VkImageLayout dstImageLayout, uint regionCount, VkBufferImageCopy* pRegions)
	{
		vkCmdCopyBufferToImage(commandBuffer, srcBuffer, dstImage, dstImageLayout, regionCount, pRegions);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void CmdCopyImageToBuffer(VulkanHandle<VkCommandBuffer> commandBuffer, VulkanHandle<VkImage> srcImage, VkImageLayout srcImageLayout, VulkanHandle<VkBuffer> dstBuffer, uint regionCount, VkBufferImageCopy* pRegions)
	{
		vkCmdCopyImageToBuffer(commandBuffer, srcImage, srcImageLayout, dstBuffer, regionCount, pRegions);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void CmdUpdateBuffer(VulkanHandle<VkCommandBuffer> commandBuffer, VulkanHandle<VkBuffer> dstBuffer, ulong dstOffset, ulong dataSize, void* pData)
	{
		vkCmdUpdateBuffer(commandBuffer, dstBuffer, dstOffset, dataSize, pData);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void CmdFillBuffer(VulkanHandle<VkCommandBuffer> commandBuffer, VulkanHandle<VkBuffer> dstBuffer, ulong dstOffset, ulong size, uint data)
	{
		vkCmdFillBuffer(commandBuffer, dstBuffer, dstOffset, size, data);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void CmdClearColorImage(VulkanHandle<VkCommandBuffer> commandBuffer, VulkanHandle<VkImage> image, VkImageLayout imageLayout, VkClearColorValue* pColor, uint rangeCount, VkImageSubresourceRange* pRanges)
	{
		vkCmdClearColorImage(commandBuffer, image, imageLayout, pColor, rangeCount, pRanges);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void CmdClearDepthStencilImage(VulkanHandle<VkCommandBuffer> commandBuffer, VulkanHandle<VkImage> image, VkImageLayout imageLayout, VkClearDepthStencilValue* pDepthStencil, uint rangeCount, VkImageSubresourceRange* pRanges)
	{
		vkCmdClearDepthStencilImage(commandBuffer, image, imageLayout, pDepthStencil, rangeCount, pRanges);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void CmdClearAttachments(VulkanHandle<VkCommandBuffer> commandBuffer, uint attachmentCount, VkClearAttachment* pAttachments, uint rectCount, VkClearRect* pRects)
	{
		vkCmdClearAttachments(commandBuffer, attachmentCount, pAttachments, rectCount, pRects);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void CmdResolveImage(VulkanHandle<VkCommandBuffer> commandBuffer, VulkanHandle<VkImage> srcImage, VkImageLayout srcImageLayout, VulkanHandle<VkImage> dstImage, VkImageLayout dstImageLayout, uint regionCount, VkImageResolve* pRegions)
	{
		vkCmdResolveImage(commandBuffer, srcImage, srcImageLayout, dstImage, dstImageLayout, regionCount, pRegions);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void CmdSetEvent(VulkanHandle<VkCommandBuffer> commandBuffer, VulkanHandle<VkEvent> @event, VkPipelineStageFlags stageMask)
	{
		vkCmdSetEvent(commandBuffer, @event, stageMask);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void CmdResetEvent(VulkanHandle<VkCommandBuffer> commandBuffer, VulkanHandle<VkEvent> @event, VkPipelineStageFlags stageMask)
	{
		vkCmdResetEvent(commandBuffer, @event, stageMask);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void CmdWaitEvents(VulkanHandle<VkCommandBuffer> commandBuffer, uint eventCount, VulkanHandle<VkEvent>* pEvents, VkPipelineStageFlags srcStageMask, VkPipelineStageFlags dstStageMask, uint memoryBarrierCount, VkMemoryBarrier* pMemoryBarriers, uint bufferMemoryBarrierCount, VkBufferMemoryBarrier* pBufferMemoryBarriers, uint imageMemoryBarrierCount, VkImageMemoryBarrier* pImageMemoryBarriers)
	{
		vkCmdWaitEvents(commandBuffer, eventCount, pEvents, srcStageMask, dstStageMask, memoryBarrierCount, pMemoryBarriers, bufferMemoryBarrierCount, pBufferMemoryBarriers, imageMemoryBarrierCount, pImageMemoryBarriers);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void CmdPipelineBarrier(VulkanHandle<VkCommandBuffer> commandBuffer, VkPipelineStageFlags srcStageMask, VkPipelineStageFlags dstStageMask, VkDependencyFlags dependencyFlags, uint memoryBarrierCount, VkMemoryBarrier* pMemoryBarriers, uint bufferMemoryBarrierCount, VkBufferMemoryBarrier* pBufferMemoryBarriers, uint imageMemoryBarrierCount, VkImageMemoryBarrier* pImageMemoryBarriers)
	{
		vkCmdPipelineBarrier(commandBuffer, srcStageMask, dstStageMask, dependencyFlags, memoryBarrierCount, pMemoryBarriers, bufferMemoryBarrierCount, pBufferMemoryBarriers, imageMemoryBarrierCount, pImageMemoryBarriers);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void CmdBeginQuery(VulkanHandle<VkCommandBuffer> commandBuffer, VulkanHandle<VkQueryPool> queryPool, uint query, VkQueryControlFlags flags)
	{
		vkCmdBeginQuery(commandBuffer, queryPool, query, flags);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void CmdEndQuery(VulkanHandle<VkCommandBuffer> commandBuffer, VulkanHandle<VkQueryPool> queryPool, uint query)
	{
		vkCmdEndQuery(commandBuffer, queryPool, query);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void CmdBeginConditionalRenderingEXT(VulkanHandle<VkCommandBuffer> commandBuffer, VkConditionalRenderingBeginInfoEXT* pConditionalRenderingBegin)
	{
		if (vkCmdBeginConditionalRenderingEXT == null) throw new VVK.FunctionNotLoadedException("vkCmdBeginConditionalRenderingEXT");
		vkCmdBeginConditionalRenderingEXT(commandBuffer, pConditionalRenderingBegin);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void CmdEndConditionalRenderingEXT(VulkanHandle<VkCommandBuffer> commandBuffer)
	{
		if (vkCmdEndConditionalRenderingEXT == null) throw new VVK.FunctionNotLoadedException("vkCmdEndConditionalRenderingEXT");
		vkCmdEndConditionalRenderingEXT(commandBuffer);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void CmdResetQueryPool(VulkanHandle<VkCommandBuffer> commandBuffer, VulkanHandle<VkQueryPool> queryPool, uint firstQuery, uint queryCount)
	{
		vkCmdResetQueryPool(commandBuffer, queryPool, firstQuery, queryCount);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void CmdWriteTimestamp(VulkanHandle<VkCommandBuffer> commandBuffer, VkPipelineStageFlags pipelineStage, VulkanHandle<VkQueryPool> queryPool, uint query)
	{
		vkCmdWriteTimestamp(commandBuffer, pipelineStage, queryPool, query);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void CmdCopyQueryPoolResults(VulkanHandle<VkCommandBuffer> commandBuffer, VulkanHandle<VkQueryPool> queryPool, uint firstQuery, uint queryCount, VulkanHandle<VkBuffer> dstBuffer, ulong dstOffset, ulong stride, VkQueryResultFlags flags)
	{
		vkCmdCopyQueryPoolResults(commandBuffer, queryPool, firstQuery, queryCount, dstBuffer, dstOffset, stride, flags);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void CmdPushConstants(VulkanHandle<VkCommandBuffer> commandBuffer, VulkanHandle<VkPipelineLayout> layout, VkShaderStageFlags stageFlags, uint offset, uint size, void* pValues)
	{
		vkCmdPushConstants(commandBuffer, layout, stageFlags, offset, size, pValues);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void CmdBeginRenderPass(VulkanHandle<VkCommandBuffer> commandBuffer, VkRenderPassBeginInfo* pRenderPassBegin, VkSubpassContents contents)
	{
		vkCmdBeginRenderPass(commandBuffer, pRenderPassBegin, contents);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void CmdNextSubpass(VulkanHandle<VkCommandBuffer> commandBuffer, VkSubpassContents contents)
	{
		vkCmdNextSubpass(commandBuffer, contents);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void CmdEndRenderPass(VulkanHandle<VkCommandBuffer> commandBuffer)
	{
		vkCmdEndRenderPass(commandBuffer);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void CmdExecuteCommands(VulkanHandle<VkCommandBuffer> commandBuffer, uint commandBufferCount, VulkanHandle<VkCommandBuffer>* pCommandBuffers)
	{
		vkCmdExecuteCommands(commandBuffer, commandBufferCount, pCommandBuffers);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public VkResult CreateSharedSwapchainsKHR(VulkanHandle<VkDevice> device, uint swapchainCount, VkSwapchainCreateInfoKHR* pCreateInfos, VkAllocationCallbacks* pAllocator, VulkanHandle<VkSwapchainKHR>* pSwapchains)
	{
		if (vkCreateSharedSwapchainsKHR == null) throw new VVK.FunctionNotLoadedException("vkCreateSharedSwapchainsKHR");
		return vkCreateSharedSwapchainsKHR(device, swapchainCount, pCreateInfos, pAllocator, pSwapchains);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public VkResult CreateSwapchainKHR(VulkanHandle<VkDevice> device, VkSwapchainCreateInfoKHR* pCreateInfo, VkAllocationCallbacks* pAllocator, VulkanHandle<VkSwapchainKHR>* pSwapchain)
	{
		if (vkCreateSwapchainKHR == null) throw new VVK.FunctionNotLoadedException("vkCreateSwapchainKHR");
		return vkCreateSwapchainKHR(device, pCreateInfo, pAllocator, pSwapchain);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void DestroySwapchainKHR(VulkanHandle<VkDevice> device, VulkanHandle<VkSwapchainKHR> swapchain, VkAllocationCallbacks* pAllocator)
	{
		if (vkDestroySwapchainKHR == null) throw new VVK.FunctionNotLoadedException("vkDestroySwapchainKHR");
		vkDestroySwapchainKHR(device, swapchain, pAllocator);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public VkResult GetSwapchainImagesKHR(VulkanHandle<VkDevice> device, VulkanHandle<VkSwapchainKHR> swapchain, uint* pSwapchainImageCount, VulkanHandle<VkImage>* pSwapchainImages)
	{
		if (vkGetSwapchainImagesKHR == null) throw new VVK.FunctionNotLoadedException("vkGetSwapchainImagesKHR");
		return vkGetSwapchainImagesKHR(device, swapchain, pSwapchainImageCount, pSwapchainImages);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public VkResult AcquireNextImageKHR(VulkanHandle<VkDevice> device, VulkanHandle<VkSwapchainKHR> swapchain, ulong timeout, VulkanHandle<VkSemaphore> semaphore, VulkanHandle<VkFence> fence, uint* pImageIndex)
	{
		if (vkAcquireNextImageKHR == null) throw new VVK.FunctionNotLoadedException("vkAcquireNextImageKHR");
		return vkAcquireNextImageKHR(device, swapchain, timeout, semaphore, fence, pImageIndex);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public VkResult QueuePresentKHR(VulkanHandle<VkQueue> queue, VkPresentInfoKHR* pPresentInfo)
	{
		if (vkQueuePresentKHR == null) throw new VVK.FunctionNotLoadedException("vkQueuePresentKHR");
		return vkQueuePresentKHR(queue, pPresentInfo);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public VkResult DebugMarkerSetObjectNameEXT(VulkanHandle<VkDevice> device, VkDebugMarkerObjectNameInfoEXT* pNameInfo)
	{
		if (vkDebugMarkerSetObjectNameEXT == null) throw new VVK.FunctionNotLoadedException("vkDebugMarkerSetObjectNameEXT");
		return vkDebugMarkerSetObjectNameEXT(device, pNameInfo);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public VkResult DebugMarkerSetObjectTagEXT(VulkanHandle<VkDevice> device, VkDebugMarkerObjectTagInfoEXT* pTagInfo)
	{
		if (vkDebugMarkerSetObjectTagEXT == null) throw new VVK.FunctionNotLoadedException("vkDebugMarkerSetObjectTagEXT");
		return vkDebugMarkerSetObjectTagEXT(device, pTagInfo);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void CmdDebugMarkerBeginEXT(VulkanHandle<VkCommandBuffer> commandBuffer, VkDebugMarkerMarkerInfoEXT* pMarkerInfo)
	{
		if (vkCmdDebugMarkerBeginEXT == null) throw new VVK.FunctionNotLoadedException("vkCmdDebugMarkerBeginEXT");
		vkCmdDebugMarkerBeginEXT(commandBuffer, pMarkerInfo);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void CmdDebugMarkerEndEXT(VulkanHandle<VkCommandBuffer> commandBuffer)
	{
		if (vkCmdDebugMarkerEndEXT == null) throw new VVK.FunctionNotLoadedException("vkCmdDebugMarkerEndEXT");
		vkCmdDebugMarkerEndEXT(commandBuffer);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void CmdDebugMarkerInsertEXT(VulkanHandle<VkCommandBuffer> commandBuffer, VkDebugMarkerMarkerInfoEXT* pMarkerInfo)
	{
		if (vkCmdDebugMarkerInsertEXT == null) throw new VVK.FunctionNotLoadedException("vkCmdDebugMarkerInsertEXT");
		vkCmdDebugMarkerInsertEXT(commandBuffer, pMarkerInfo);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public VkResult GetMemoryWin32HandleNV(VulkanHandle<VkDevice> device, VulkanHandle<VkDeviceMemory> memory, VkExternalMemoryHandleTypeFlagsNV handleType, void** pHandle)
	{
		if (vkGetMemoryWin32HandleNV == null) throw new VVK.FunctionNotLoadedException("vkGetMemoryWin32HandleNV");
		return vkGetMemoryWin32HandleNV(device, memory, handleType, pHandle);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void CmdExecuteGeneratedCommandsNV(VulkanHandle<VkCommandBuffer> commandBuffer, VkBool32 isPreprocessed, VkGeneratedCommandsInfoNV* pGeneratedCommandsInfo)
	{
		if (vkCmdExecuteGeneratedCommandsNV == null) throw new VVK.FunctionNotLoadedException("vkCmdExecuteGeneratedCommandsNV");
		vkCmdExecuteGeneratedCommandsNV(commandBuffer, isPreprocessed, pGeneratedCommandsInfo);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void CmdPreprocessGeneratedCommandsNV(VulkanHandle<VkCommandBuffer> commandBuffer, VkGeneratedCommandsInfoNV* pGeneratedCommandsInfo)
	{
		if (vkCmdPreprocessGeneratedCommandsNV == null) throw new VVK.FunctionNotLoadedException("vkCmdPreprocessGeneratedCommandsNV");
		vkCmdPreprocessGeneratedCommandsNV(commandBuffer, pGeneratedCommandsInfo);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void CmdBindPipelineShaderGroupNV(VulkanHandle<VkCommandBuffer> commandBuffer, VkPipelineBindPoint pipelineBindPoint, VulkanHandle<VkPipeline> pipeline, uint groupIndex)
	{
		if (vkCmdBindPipelineShaderGroupNV == null) throw new VVK.FunctionNotLoadedException("vkCmdBindPipelineShaderGroupNV");
		vkCmdBindPipelineShaderGroupNV(commandBuffer, pipelineBindPoint, pipeline, groupIndex);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void GetGeneratedCommandsMemoryRequirementsNV(VulkanHandle<VkDevice> device, VkGeneratedCommandsMemoryRequirementsInfoNV* pInfo, VkMemoryRequirements2* pMemoryRequirements)
	{
		if (vkGetGeneratedCommandsMemoryRequirementsNV == null) throw new VVK.FunctionNotLoadedException("vkGetGeneratedCommandsMemoryRequirementsNV");
		vkGetGeneratedCommandsMemoryRequirementsNV(device, pInfo, pMemoryRequirements);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public VkResult CreateIndirectCommandsLayoutNV(VulkanHandle<VkDevice> device, VkIndirectCommandsLayoutCreateInfoNV* pCreateInfo, VkAllocationCallbacks* pAllocator, VulkanHandle<VkIndirectCommandsLayoutNV>* pIndirectCommandsLayout)
	{
		if (vkCreateIndirectCommandsLayoutNV == null) throw new VVK.FunctionNotLoadedException("vkCreateIndirectCommandsLayoutNV");
		return vkCreateIndirectCommandsLayoutNV(device, pCreateInfo, pAllocator, pIndirectCommandsLayout);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void DestroyIndirectCommandsLayoutNV(VulkanHandle<VkDevice> device, VulkanHandle<VkIndirectCommandsLayoutNV> indirectCommandsLayout, VkAllocationCallbacks* pAllocator)
	{
		if (vkDestroyIndirectCommandsLayoutNV == null) throw new VVK.FunctionNotLoadedException("vkDestroyIndirectCommandsLayoutNV");
		vkDestroyIndirectCommandsLayoutNV(device, indirectCommandsLayout, pAllocator);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void CmdPushDescriptorSetKHR(VulkanHandle<VkCommandBuffer> commandBuffer, VkPipelineBindPoint pipelineBindPoint, VulkanHandle<VkPipelineLayout> layout, uint set, uint descriptorWriteCount, VkWriteDescriptorSet* pDescriptorWrites)
	{
		if (vkCmdPushDescriptorSetKHR == null) throw new VVK.FunctionNotLoadedException("vkCmdPushDescriptorSetKHR");
		vkCmdPushDescriptorSetKHR(commandBuffer, pipelineBindPoint, layout, set, descriptorWriteCount, pDescriptorWrites);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void TrimCommandPool(VulkanHandle<VkDevice> device, VulkanHandle<VkCommandPool> commandPool, VkCommandPoolTrimFlags flags)
	{
		if (vkTrimCommandPool == null) throw new VVK.FunctionNotLoadedException("vkTrimCommandPool");
		vkTrimCommandPool(device, commandPool, flags);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void TrimCommandPoolKHR(VulkanHandle<VkDevice> device, VulkanHandle<VkCommandPool> commandPool, VkCommandPoolTrimFlags flags)
	{
		if (vkTrimCommandPoolKHR == null) throw new VVK.FunctionNotLoadedException("vkTrimCommandPoolKHR");
		vkTrimCommandPoolKHR(device, commandPool, flags);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public VkResult GetMemoryWin32HandleKHR(VulkanHandle<VkDevice> device, VkMemoryGetWin32HandleInfoKHR* pGetWin32HandleInfo, void** pHandle)
	{
		if (vkGetMemoryWin32HandleKHR == null) throw new VVK.FunctionNotLoadedException("vkGetMemoryWin32HandleKHR");
		return vkGetMemoryWin32HandleKHR(device, pGetWin32HandleInfo, pHandle);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public VkResult GetMemoryWin32HandlePropertiesKHR(VulkanHandle<VkDevice> device, VkExternalMemoryHandleTypeFlags handleType, void* handle, VkMemoryWin32HandlePropertiesKHR* pMemoryWin32HandleProperties)
	{
		if (vkGetMemoryWin32HandlePropertiesKHR == null) throw new VVK.FunctionNotLoadedException("vkGetMemoryWin32HandlePropertiesKHR");
		return vkGetMemoryWin32HandlePropertiesKHR(device, handleType, handle, pMemoryWin32HandleProperties);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public VkResult GetMemoryFdKHR(VulkanHandle<VkDevice> device, VkMemoryGetFdInfoKHR* pGetFdInfo, int* pFd)
	{
		if (vkGetMemoryFdKHR == null) throw new VVK.FunctionNotLoadedException("vkGetMemoryFdKHR");
		return vkGetMemoryFdKHR(device, pGetFdInfo, pFd);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public VkResult GetMemoryFdPropertiesKHR(VulkanHandle<VkDevice> device, VkExternalMemoryHandleTypeFlags handleType, int fd, VkMemoryFdPropertiesKHR* pMemoryFdProperties)
	{
		if (vkGetMemoryFdPropertiesKHR == null) throw new VVK.FunctionNotLoadedException("vkGetMemoryFdPropertiesKHR");
		return vkGetMemoryFdPropertiesKHR(device, handleType, fd, pMemoryFdProperties);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public VkResult GetSemaphoreWin32HandleKHR(VulkanHandle<VkDevice> device, VkSemaphoreGetWin32HandleInfoKHR* pGetWin32HandleInfo, void** pHandle)
	{
		if (vkGetSemaphoreWin32HandleKHR == null) throw new VVK.FunctionNotLoadedException("vkGetSemaphoreWin32HandleKHR");
		return vkGetSemaphoreWin32HandleKHR(device, pGetWin32HandleInfo, pHandle);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public VkResult ImportSemaphoreWin32HandleKHR(VulkanHandle<VkDevice> device, VkImportSemaphoreWin32HandleInfoKHR* pImportSemaphoreWin32HandleInfo)
	{
		if (vkImportSemaphoreWin32HandleKHR == null) throw new VVK.FunctionNotLoadedException("vkImportSemaphoreWin32HandleKHR");
		return vkImportSemaphoreWin32HandleKHR(device, pImportSemaphoreWin32HandleInfo);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public VkResult GetSemaphoreFdKHR(VulkanHandle<VkDevice> device, VkSemaphoreGetFdInfoKHR* pGetFdInfo, int* pFd)
	{
		if (vkGetSemaphoreFdKHR == null) throw new VVK.FunctionNotLoadedException("vkGetSemaphoreFdKHR");
		return vkGetSemaphoreFdKHR(device, pGetFdInfo, pFd);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public VkResult ImportSemaphoreFdKHR(VulkanHandle<VkDevice> device, VkImportSemaphoreFdInfoKHR* pImportSemaphoreFdInfo)
	{
		if (vkImportSemaphoreFdKHR == null) throw new VVK.FunctionNotLoadedException("vkImportSemaphoreFdKHR");
		return vkImportSemaphoreFdKHR(device, pImportSemaphoreFdInfo);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public VkResult GetFenceWin32HandleKHR(VulkanHandle<VkDevice> device, VkFenceGetWin32HandleInfoKHR* pGetWin32HandleInfo, void** pHandle)
	{
		if (vkGetFenceWin32HandleKHR == null) throw new VVK.FunctionNotLoadedException("vkGetFenceWin32HandleKHR");
		return vkGetFenceWin32HandleKHR(device, pGetWin32HandleInfo, pHandle);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public VkResult ImportFenceWin32HandleKHR(VulkanHandle<VkDevice> device, VkImportFenceWin32HandleInfoKHR* pImportFenceWin32HandleInfo)
	{
		if (vkImportFenceWin32HandleKHR == null) throw new VVK.FunctionNotLoadedException("vkImportFenceWin32HandleKHR");
		return vkImportFenceWin32HandleKHR(device, pImportFenceWin32HandleInfo);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public VkResult GetFenceFdKHR(VulkanHandle<VkDevice> device, VkFenceGetFdInfoKHR* pGetFdInfo, int* pFd)
	{
		if (vkGetFenceFdKHR == null) throw new VVK.FunctionNotLoadedException("vkGetFenceFdKHR");
		return vkGetFenceFdKHR(device, pGetFdInfo, pFd);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public VkResult ImportFenceFdKHR(VulkanHandle<VkDevice> device, VkImportFenceFdInfoKHR* pImportFenceFdInfo)
	{
		if (vkImportFenceFdKHR == null) throw new VVK.FunctionNotLoadedException("vkImportFenceFdKHR");
		return vkImportFenceFdKHR(device, pImportFenceFdInfo);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public VkResult DisplayPowerControlEXT(VulkanHandle<VkDevice> device, VulkanHandle<VkDisplayKHR> display, VkDisplayPowerInfoEXT* pDisplayPowerInfo)
	{
		if (vkDisplayPowerControlEXT == null) throw new VVK.FunctionNotLoadedException("vkDisplayPowerControlEXT");
		return vkDisplayPowerControlEXT(device, display, pDisplayPowerInfo);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public VkResult RegisterDeviceEventEXT(VulkanHandle<VkDevice> device, VkDeviceEventInfoEXT* pDeviceEventInfo, VkAllocationCallbacks* pAllocator, VulkanHandle<VkFence>* pFence)
	{
		if (vkRegisterDeviceEventEXT == null) throw new VVK.FunctionNotLoadedException("vkRegisterDeviceEventEXT");
		return vkRegisterDeviceEventEXT(device, pDeviceEventInfo, pAllocator, pFence);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public VkResult RegisterDisplayEventEXT(VulkanHandle<VkDevice> device, VulkanHandle<VkDisplayKHR> display, VkDisplayEventInfoEXT* pDisplayEventInfo, VkAllocationCallbacks* pAllocator, VulkanHandle<VkFence>* pFence)
	{
		if (vkRegisterDisplayEventEXT == null) throw new VVK.FunctionNotLoadedException("vkRegisterDisplayEventEXT");
		return vkRegisterDisplayEventEXT(device, display, pDisplayEventInfo, pAllocator, pFence);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public VkResult GetSwapchainCounterEXT(VulkanHandle<VkDevice> device, VulkanHandle<VkSwapchainKHR> swapchain, VkSurfaceCounterFlagsEXT counter, ulong* pCounterValue)
	{
		if (vkGetSwapchainCounterEXT == null) throw new VVK.FunctionNotLoadedException("vkGetSwapchainCounterEXT");
		return vkGetSwapchainCounterEXT(device, swapchain, counter, pCounterValue);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void GetDeviceGroupPeerMemoryFeatures(VulkanHandle<VkDevice> device, uint heapIndex, uint localDeviceIndex, uint remoteDeviceIndex, VkPeerMemoryFeatureFlags* pPeerMemoryFeatures)
	{
		if (vkGetDeviceGroupPeerMemoryFeatures == null) throw new VVK.FunctionNotLoadedException("vkGetDeviceGroupPeerMemoryFeatures");
		vkGetDeviceGroupPeerMemoryFeatures(device, heapIndex, localDeviceIndex, remoteDeviceIndex, pPeerMemoryFeatures);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void GetDeviceGroupPeerMemoryFeaturesKHR(VulkanHandle<VkDevice> device, uint heapIndex, uint localDeviceIndex, uint remoteDeviceIndex, VkPeerMemoryFeatureFlags* pPeerMemoryFeatures)
	{
		if (vkGetDeviceGroupPeerMemoryFeaturesKHR == null) throw new VVK.FunctionNotLoadedException("vkGetDeviceGroupPeerMemoryFeaturesKHR");
		vkGetDeviceGroupPeerMemoryFeaturesKHR(device, heapIndex, localDeviceIndex, remoteDeviceIndex, pPeerMemoryFeatures);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public VkResult BindBufferMemory2(VulkanHandle<VkDevice> device, uint bindInfoCount, VkBindBufferMemoryInfo* pBindInfos)
	{
		if (vkBindBufferMemory2 == null) throw new VVK.FunctionNotLoadedException("vkBindBufferMemory2");
		return vkBindBufferMemory2(device, bindInfoCount, pBindInfos);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public VkResult BindBufferMemory2KHR(VulkanHandle<VkDevice> device, uint bindInfoCount, VkBindBufferMemoryInfo* pBindInfos)
	{
		if (vkBindBufferMemory2KHR == null) throw new VVK.FunctionNotLoadedException("vkBindBufferMemory2KHR");
		return vkBindBufferMemory2KHR(device, bindInfoCount, pBindInfos);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public VkResult BindImageMemory2(VulkanHandle<VkDevice> device, uint bindInfoCount, VkBindImageMemoryInfo* pBindInfos)
	{
		if (vkBindImageMemory2 == null) throw new VVK.FunctionNotLoadedException("vkBindImageMemory2");
		return vkBindImageMemory2(device, bindInfoCount, pBindInfos);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public VkResult BindImageMemory2KHR(VulkanHandle<VkDevice> device, uint bindInfoCount, VkBindImageMemoryInfo* pBindInfos)
	{
		if (vkBindImageMemory2KHR == null) throw new VVK.FunctionNotLoadedException("vkBindImageMemory2KHR");
		return vkBindImageMemory2KHR(device, bindInfoCount, pBindInfos);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void CmdSetDeviceMask(VulkanHandle<VkCommandBuffer> commandBuffer, uint deviceMask)
	{
		if (vkCmdSetDeviceMask == null) throw new VVK.FunctionNotLoadedException("vkCmdSetDeviceMask");
		vkCmdSetDeviceMask(commandBuffer, deviceMask);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void CmdSetDeviceMaskKHR(VulkanHandle<VkCommandBuffer> commandBuffer, uint deviceMask)
	{
		if (vkCmdSetDeviceMaskKHR == null) throw new VVK.FunctionNotLoadedException("vkCmdSetDeviceMaskKHR");
		vkCmdSetDeviceMaskKHR(commandBuffer, deviceMask);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public VkResult GetDeviceGroupPresentCapabilitiesKHR(VulkanHandle<VkDevice> device, VkDeviceGroupPresentCapabilitiesKHR* pDeviceGroupPresentCapabilities)
	{
		if (vkGetDeviceGroupPresentCapabilitiesKHR == null) throw new VVK.FunctionNotLoadedException("vkGetDeviceGroupPresentCapabilitiesKHR");
		return vkGetDeviceGroupPresentCapabilitiesKHR(device, pDeviceGroupPresentCapabilities);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public VkResult GetDeviceGroupSurfacePresentModesKHR(VulkanHandle<VkDevice> device, VulkanHandle<VkSurfaceKHR> surface, VkDeviceGroupPresentModeFlagsKHR* pModes)
	{
		if (vkGetDeviceGroupSurfacePresentModesKHR == null) throw new VVK.FunctionNotLoadedException("vkGetDeviceGroupSurfacePresentModesKHR");
		return vkGetDeviceGroupSurfacePresentModesKHR(device, surface, pModes);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public VkResult AcquireNextImage2KHR(VulkanHandle<VkDevice> device, VkAcquireNextImageInfoKHR* pAcquireInfo, uint* pImageIndex)
	{
		if (vkAcquireNextImage2KHR == null) throw new VVK.FunctionNotLoadedException("vkAcquireNextImage2KHR");
		return vkAcquireNextImage2KHR(device, pAcquireInfo, pImageIndex);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void CmdDispatchBase(VulkanHandle<VkCommandBuffer> commandBuffer, uint baseGroupX, uint baseGroupY, uint baseGroupZ, uint groupCountX, uint groupCountY, uint groupCountZ)
	{
		if (vkCmdDispatchBase == null) throw new VVK.FunctionNotLoadedException("vkCmdDispatchBase");
		vkCmdDispatchBase(commandBuffer, baseGroupX, baseGroupY, baseGroupZ, groupCountX, groupCountY, groupCountZ);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void CmdDispatchBaseKHR(VulkanHandle<VkCommandBuffer> commandBuffer, uint baseGroupX, uint baseGroupY, uint baseGroupZ, uint groupCountX, uint groupCountY, uint groupCountZ)
	{
		if (vkCmdDispatchBaseKHR == null) throw new VVK.FunctionNotLoadedException("vkCmdDispatchBaseKHR");
		vkCmdDispatchBaseKHR(commandBuffer, baseGroupX, baseGroupY, baseGroupZ, groupCountX, groupCountY, groupCountZ);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public VkResult CreateDescriptorUpdateTemplate(VulkanHandle<VkDevice> device, VkDescriptorUpdateTemplateCreateInfo* pCreateInfo, VkAllocationCallbacks* pAllocator, VulkanHandle<VkDescriptorUpdateTemplate>* pDescriptorUpdateTemplate)
	{
		if (vkCreateDescriptorUpdateTemplate == null) throw new VVK.FunctionNotLoadedException("vkCreateDescriptorUpdateTemplate");
		return vkCreateDescriptorUpdateTemplate(device, pCreateInfo, pAllocator, pDescriptorUpdateTemplate);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public VkResult CreateDescriptorUpdateTemplateKHR(VulkanHandle<VkDevice> device, VkDescriptorUpdateTemplateCreateInfo* pCreateInfo, VkAllocationCallbacks* pAllocator, VulkanHandle<VkDescriptorUpdateTemplate>* pDescriptorUpdateTemplate)
	{
		if (vkCreateDescriptorUpdateTemplateKHR == null) throw new VVK.FunctionNotLoadedException("vkCreateDescriptorUpdateTemplateKHR");
		return vkCreateDescriptorUpdateTemplateKHR(device, pCreateInfo, pAllocator, pDescriptorUpdateTemplate);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void DestroyDescriptorUpdateTemplate(VulkanHandle<VkDevice> device, VulkanHandle<VkDescriptorUpdateTemplate> descriptorUpdateTemplate, VkAllocationCallbacks* pAllocator)
	{
		if (vkDestroyDescriptorUpdateTemplate == null) throw new VVK.FunctionNotLoadedException("vkDestroyDescriptorUpdateTemplate");
		vkDestroyDescriptorUpdateTemplate(device, descriptorUpdateTemplate, pAllocator);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void DestroyDescriptorUpdateTemplateKHR(VulkanHandle<VkDevice> device, VulkanHandle<VkDescriptorUpdateTemplate> descriptorUpdateTemplate, VkAllocationCallbacks* pAllocator)
	{
		if (vkDestroyDescriptorUpdateTemplateKHR == null) throw new VVK.FunctionNotLoadedException("vkDestroyDescriptorUpdateTemplateKHR");
		vkDestroyDescriptorUpdateTemplateKHR(device, descriptorUpdateTemplate, pAllocator);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void UpdateDescriptorSetWithTemplate(VulkanHandle<VkDevice> device, VulkanHandle<VkDescriptorSet> descriptorSet, VulkanHandle<VkDescriptorUpdateTemplate> descriptorUpdateTemplate, void* pData)
	{
		if (vkUpdateDescriptorSetWithTemplate == null) throw new VVK.FunctionNotLoadedException("vkUpdateDescriptorSetWithTemplate");
		vkUpdateDescriptorSetWithTemplate(device, descriptorSet, descriptorUpdateTemplate, pData);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void UpdateDescriptorSetWithTemplateKHR(VulkanHandle<VkDevice> device, VulkanHandle<VkDescriptorSet> descriptorSet, VulkanHandle<VkDescriptorUpdateTemplate> descriptorUpdateTemplate, void* pData)
	{
		if (vkUpdateDescriptorSetWithTemplateKHR == null) throw new VVK.FunctionNotLoadedException("vkUpdateDescriptorSetWithTemplateKHR");
		vkUpdateDescriptorSetWithTemplateKHR(device, descriptorSet, descriptorUpdateTemplate, pData);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void CmdPushDescriptorSetWithTemplateKHR(VulkanHandle<VkCommandBuffer> commandBuffer, VulkanHandle<VkDescriptorUpdateTemplate> descriptorUpdateTemplate, VulkanHandle<VkPipelineLayout> layout, uint set, void* pData)
	{
		if (vkCmdPushDescriptorSetWithTemplateKHR == null) throw new VVK.FunctionNotLoadedException("vkCmdPushDescriptorSetWithTemplateKHR");
		vkCmdPushDescriptorSetWithTemplateKHR(commandBuffer, descriptorUpdateTemplate, layout, set, pData);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void SetHdrMetadataEXT(VulkanHandle<VkDevice> device, uint swapchainCount, VulkanHandle<VkSwapchainKHR>* pSwapchains, VkHdrMetadataEXT* pMetadata)
	{
		if (vkSetHdrMetadataEXT == null) throw new VVK.FunctionNotLoadedException("vkSetHdrMetadataEXT");
		vkSetHdrMetadataEXT(device, swapchainCount, pSwapchains, pMetadata);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public VkResult GetSwapchainStatusKHR(VulkanHandle<VkDevice> device, VulkanHandle<VkSwapchainKHR> swapchain)
	{
		if (vkGetSwapchainStatusKHR == null) throw new VVK.FunctionNotLoadedException("vkGetSwapchainStatusKHR");
		return vkGetSwapchainStatusKHR(device, swapchain);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public VkResult GetRefreshCycleDurationGOOGLE(VulkanHandle<VkDevice> device, VulkanHandle<VkSwapchainKHR> swapchain, VkRefreshCycleDurationGOOGLE* pDisplayTimingProperties)
	{
		if (vkGetRefreshCycleDurationGOOGLE == null) throw new VVK.FunctionNotLoadedException("vkGetRefreshCycleDurationGOOGLE");
		return vkGetRefreshCycleDurationGOOGLE(device, swapchain, pDisplayTimingProperties);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public VkResult GetPastPresentationTimingGOOGLE(VulkanHandle<VkDevice> device, VulkanHandle<VkSwapchainKHR> swapchain, uint* pPresentationTimingCount, VkPastPresentationTimingGOOGLE* pPresentationTimings)
	{
		if (vkGetPastPresentationTimingGOOGLE == null) throw new VVK.FunctionNotLoadedException("vkGetPastPresentationTimingGOOGLE");
		return vkGetPastPresentationTimingGOOGLE(device, swapchain, pPresentationTimingCount, pPresentationTimings);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void CmdSetViewportWScalingNV(VulkanHandle<VkCommandBuffer> commandBuffer, uint firstViewport, uint viewportCount, VkViewportWScalingNV* pViewportWScalings)
	{
		if (vkCmdSetViewportWScalingNV == null) throw new VVK.FunctionNotLoadedException("vkCmdSetViewportWScalingNV");
		vkCmdSetViewportWScalingNV(commandBuffer, firstViewport, viewportCount, pViewportWScalings);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void CmdSetDiscardRectangleEXT(VulkanHandle<VkCommandBuffer> commandBuffer, uint firstDiscardRectangle, uint discardRectangleCount, VkRect2D* pDiscardRectangles)
	{
		if (vkCmdSetDiscardRectangleEXT == null) throw new VVK.FunctionNotLoadedException("vkCmdSetDiscardRectangleEXT");
		vkCmdSetDiscardRectangleEXT(commandBuffer, firstDiscardRectangle, discardRectangleCount, pDiscardRectangles);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void CmdSetSampleLocationsEXT(VulkanHandle<VkCommandBuffer> commandBuffer, VkSampleLocationsInfoEXT* pSampleLocationsInfo)
	{
		if (vkCmdSetSampleLocationsEXT == null) throw new VVK.FunctionNotLoadedException("vkCmdSetSampleLocationsEXT");
		vkCmdSetSampleLocationsEXT(commandBuffer, pSampleLocationsInfo);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void GetBufferMemoryRequirements2(VulkanHandle<VkDevice> device, VkBufferMemoryRequirementsInfo2* pInfo, VkMemoryRequirements2* pMemoryRequirements)
	{
		if (vkGetBufferMemoryRequirements2 == null) throw new VVK.FunctionNotLoadedException("vkGetBufferMemoryRequirements2");
		vkGetBufferMemoryRequirements2(device, pInfo, pMemoryRequirements);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void GetBufferMemoryRequirements2KHR(VulkanHandle<VkDevice> device, VkBufferMemoryRequirementsInfo2* pInfo, VkMemoryRequirements2* pMemoryRequirements)
	{
		if (vkGetBufferMemoryRequirements2KHR == null) throw new VVK.FunctionNotLoadedException("vkGetBufferMemoryRequirements2KHR");
		vkGetBufferMemoryRequirements2KHR(device, pInfo, pMemoryRequirements);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void GetImageMemoryRequirements2(VulkanHandle<VkDevice> device, VkImageMemoryRequirementsInfo2* pInfo, VkMemoryRequirements2* pMemoryRequirements)
	{
		if (vkGetImageMemoryRequirements2 == null) throw new VVK.FunctionNotLoadedException("vkGetImageMemoryRequirements2");
		vkGetImageMemoryRequirements2(device, pInfo, pMemoryRequirements);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void GetImageMemoryRequirements2KHR(VulkanHandle<VkDevice> device, VkImageMemoryRequirementsInfo2* pInfo, VkMemoryRequirements2* pMemoryRequirements)
	{
		if (vkGetImageMemoryRequirements2KHR == null) throw new VVK.FunctionNotLoadedException("vkGetImageMemoryRequirements2KHR");
		vkGetImageMemoryRequirements2KHR(device, pInfo, pMemoryRequirements);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void GetImageSparseMemoryRequirements2(VulkanHandle<VkDevice> device, VkImageSparseMemoryRequirementsInfo2* pInfo, uint* pSparseMemoryRequirementCount, VkSparseImageMemoryRequirements2* pSparseMemoryRequirements)
	{
		if (vkGetImageSparseMemoryRequirements2 == null) throw new VVK.FunctionNotLoadedException("vkGetImageSparseMemoryRequirements2");
		vkGetImageSparseMemoryRequirements2(device, pInfo, pSparseMemoryRequirementCount, pSparseMemoryRequirements);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void GetImageSparseMemoryRequirements2KHR(VulkanHandle<VkDevice> device, VkImageSparseMemoryRequirementsInfo2* pInfo, uint* pSparseMemoryRequirementCount, VkSparseImageMemoryRequirements2* pSparseMemoryRequirements)
	{
		if (vkGetImageSparseMemoryRequirements2KHR == null) throw new VVK.FunctionNotLoadedException("vkGetImageSparseMemoryRequirements2KHR");
		vkGetImageSparseMemoryRequirements2KHR(device, pInfo, pSparseMemoryRequirementCount, pSparseMemoryRequirements);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public VkResult CreateSamplerYcbcrConversion(VulkanHandle<VkDevice> device, VkSamplerYcbcrConversionCreateInfo* pCreateInfo, VkAllocationCallbacks* pAllocator, VulkanHandle<VkSamplerYcbcrConversion>* pYcbcrConversion)
	{
		if (vkCreateSamplerYcbcrConversion == null) throw new VVK.FunctionNotLoadedException("vkCreateSamplerYcbcrConversion");
		return vkCreateSamplerYcbcrConversion(device, pCreateInfo, pAllocator, pYcbcrConversion);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public VkResult CreateSamplerYcbcrConversionKHR(VulkanHandle<VkDevice> device, VkSamplerYcbcrConversionCreateInfo* pCreateInfo, VkAllocationCallbacks* pAllocator, VulkanHandle<VkSamplerYcbcrConversion>* pYcbcrConversion)
	{
		if (vkCreateSamplerYcbcrConversionKHR == null) throw new VVK.FunctionNotLoadedException("vkCreateSamplerYcbcrConversionKHR");
		return vkCreateSamplerYcbcrConversionKHR(device, pCreateInfo, pAllocator, pYcbcrConversion);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void DestroySamplerYcbcrConversion(VulkanHandle<VkDevice> device, VulkanHandle<VkSamplerYcbcrConversion> ycbcrConversion, VkAllocationCallbacks* pAllocator)
	{
		if (vkDestroySamplerYcbcrConversion == null) throw new VVK.FunctionNotLoadedException("vkDestroySamplerYcbcrConversion");
		vkDestroySamplerYcbcrConversion(device, ycbcrConversion, pAllocator);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void DestroySamplerYcbcrConversionKHR(VulkanHandle<VkDevice> device, VulkanHandle<VkSamplerYcbcrConversion> ycbcrConversion, VkAllocationCallbacks* pAllocator)
	{
		if (vkDestroySamplerYcbcrConversionKHR == null) throw new VVK.FunctionNotLoadedException("vkDestroySamplerYcbcrConversionKHR");
		vkDestroySamplerYcbcrConversionKHR(device, ycbcrConversion, pAllocator);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void GetDeviceQueue2(VulkanHandle<VkDevice> device, VkDeviceQueueInfo2* pQueueInfo, VulkanHandle<VkQueue>* pQueue)
	{
		if (vkGetDeviceQueue2 == null) throw new VVK.FunctionNotLoadedException("vkGetDeviceQueue2");
		vkGetDeviceQueue2(device, pQueueInfo, pQueue);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public VkResult CreateValidationCacheEXT(VulkanHandle<VkDevice> device, VkValidationCacheCreateInfoEXT* pCreateInfo, VkAllocationCallbacks* pAllocator, VulkanHandle<VkValidationCacheEXT>* pValidationCache)
	{
		if (vkCreateValidationCacheEXT == null) throw new VVK.FunctionNotLoadedException("vkCreateValidationCacheEXT");
		return vkCreateValidationCacheEXT(device, pCreateInfo, pAllocator, pValidationCache);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void DestroyValidationCacheEXT(VulkanHandle<VkDevice> device, VulkanHandle<VkValidationCacheEXT> validationCache, VkAllocationCallbacks* pAllocator)
	{
		if (vkDestroyValidationCacheEXT == null) throw new VVK.FunctionNotLoadedException("vkDestroyValidationCacheEXT");
		vkDestroyValidationCacheEXT(device, validationCache, pAllocator);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public VkResult GetValidationCacheDataEXT(VulkanHandle<VkDevice> device, VulkanHandle<VkValidationCacheEXT> validationCache, ulong* pDataSize, void* pData)
	{
		if (vkGetValidationCacheDataEXT == null) throw new VVK.FunctionNotLoadedException("vkGetValidationCacheDataEXT");
		return vkGetValidationCacheDataEXT(device, validationCache, pDataSize, pData);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public VkResult MergeValidationCachesEXT(VulkanHandle<VkDevice> device, VulkanHandle<VkValidationCacheEXT> dstCache, uint srcCacheCount, VulkanHandle<VkValidationCacheEXT>* pSrcCaches)
	{
		if (vkMergeValidationCachesEXT == null) throw new VVK.FunctionNotLoadedException("vkMergeValidationCachesEXT");
		return vkMergeValidationCachesEXT(device, dstCache, srcCacheCount, pSrcCaches);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void GetDescriptorSetLayoutSupport(VulkanHandle<VkDevice> device, VkDescriptorSetLayoutCreateInfo* pCreateInfo, VkDescriptorSetLayoutSupport* pSupport)
	{
		if (vkGetDescriptorSetLayoutSupport == null) throw new VVK.FunctionNotLoadedException("vkGetDescriptorSetLayoutSupport");
		vkGetDescriptorSetLayoutSupport(device, pCreateInfo, pSupport);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void GetDescriptorSetLayoutSupportKHR(VulkanHandle<VkDevice> device, VkDescriptorSetLayoutCreateInfo* pCreateInfo, VkDescriptorSetLayoutSupport* pSupport)
	{
		if (vkGetDescriptorSetLayoutSupportKHR == null) throw new VVK.FunctionNotLoadedException("vkGetDescriptorSetLayoutSupportKHR");
		vkGetDescriptorSetLayoutSupportKHR(device, pCreateInfo, pSupport);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public VkResult GetSwapchainGrallocUsageANDROID(VulkanHandle<VkDevice> device, VkFormat format, VkImageUsageFlags imageUsage, int* grallocUsage)
	{
		if (vkGetSwapchainGrallocUsageANDROID == null) throw new VVK.FunctionNotLoadedException("vkGetSwapchainGrallocUsageANDROID");
		return vkGetSwapchainGrallocUsageANDROID(device, format, imageUsage, grallocUsage);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public VkResult GetSwapchainGrallocUsage2ANDROID(VulkanHandle<VkDevice> device, VkFormat format, VkImageUsageFlags imageUsage, VkSwapchainImageUsageFlagsANDROID swapchainImageUsage, ulong* grallocConsumerUsage, ulong* grallocProducerUsage)
	{
		if (vkGetSwapchainGrallocUsage2ANDROID == null) throw new VVK.FunctionNotLoadedException("vkGetSwapchainGrallocUsage2ANDROID");
		return vkGetSwapchainGrallocUsage2ANDROID(device, format, imageUsage, swapchainImageUsage, grallocConsumerUsage, grallocProducerUsage);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public VkResult AcquireImageANDROID(VulkanHandle<VkDevice> device, VulkanHandle<VkImage> image, int nativeFenceFd, VulkanHandle<VkSemaphore> semaphore, VulkanHandle<VkFence> fence)
	{
		if (vkAcquireImageANDROID == null) throw new VVK.FunctionNotLoadedException("vkAcquireImageANDROID");
		return vkAcquireImageANDROID(device, image, nativeFenceFd, semaphore, fence);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public VkResult QueueSignalReleaseImageANDROID(VulkanHandle<VkQueue> queue, uint waitSemaphoreCount, VulkanHandle<VkSemaphore>* pWaitSemaphores, VulkanHandle<VkImage> image, int* pNativeFenceFd)
	{
		if (vkQueueSignalReleaseImageANDROID == null) throw new VVK.FunctionNotLoadedException("vkQueueSignalReleaseImageANDROID");
		return vkQueueSignalReleaseImageANDROID(queue, waitSemaphoreCount, pWaitSemaphores, image, pNativeFenceFd);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public VkResult GetShaderInfoAMD(VulkanHandle<VkDevice> device, VulkanHandle<VkPipeline> pipeline, VkShaderStageFlags shaderStage, VkShaderInfoTypeAMD infoType, ulong* pInfoSize, void* pInfo)
	{
		if (vkGetShaderInfoAMD == null) throw new VVK.FunctionNotLoadedException("vkGetShaderInfoAMD");
		return vkGetShaderInfoAMD(device, pipeline, shaderStage, infoType, pInfoSize, pInfo);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void SetLocalDimmingAMD(VulkanHandle<VkDevice> device, VulkanHandle<VkSwapchainKHR> swapChain, VkBool32 localDimmingEnable)
	{
		if (vkSetLocalDimmingAMD == null) throw new VVK.FunctionNotLoadedException("vkSetLocalDimmingAMD");
		vkSetLocalDimmingAMD(device, swapChain, localDimmingEnable);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public VkResult GetCalibratedTimestampsEXT(VulkanHandle<VkDevice> device, uint timestampCount, VkCalibratedTimestampInfoEXT* pTimestampInfos, ulong* pTimestamps, ulong* pMaxDeviation)
	{
		if (vkGetCalibratedTimestampsEXT == null) throw new VVK.FunctionNotLoadedException("vkGetCalibratedTimestampsEXT");
		return vkGetCalibratedTimestampsEXT(device, timestampCount, pTimestampInfos, pTimestamps, pMaxDeviation);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public VkResult SetDebugUtilsObjectNameEXT(VulkanHandle<VkDevice> device, VkDebugUtilsObjectNameInfoEXT* pNameInfo)
	{
		if (vkSetDebugUtilsObjectNameEXT == null) throw new VVK.FunctionNotLoadedException("vkSetDebugUtilsObjectNameEXT");
		return vkSetDebugUtilsObjectNameEXT(device, pNameInfo);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public VkResult SetDebugUtilsObjectTagEXT(VulkanHandle<VkDevice> device, VkDebugUtilsObjectTagInfoEXT* pTagInfo)
	{
		if (vkSetDebugUtilsObjectTagEXT == null) throw new VVK.FunctionNotLoadedException("vkSetDebugUtilsObjectTagEXT");
		return vkSetDebugUtilsObjectTagEXT(device, pTagInfo);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void QueueBeginDebugUtilsLabelEXT(VulkanHandle<VkQueue> queue, VkDebugUtilsLabelEXT* pLabelInfo)
	{
		if (vkQueueBeginDebugUtilsLabelEXT == null) throw new VVK.FunctionNotLoadedException("vkQueueBeginDebugUtilsLabelEXT");
		vkQueueBeginDebugUtilsLabelEXT(queue, pLabelInfo);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void QueueEndDebugUtilsLabelEXT(VulkanHandle<VkQueue> queue)
	{
		if (vkQueueEndDebugUtilsLabelEXT == null) throw new VVK.FunctionNotLoadedException("vkQueueEndDebugUtilsLabelEXT");
		vkQueueEndDebugUtilsLabelEXT(queue);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void QueueInsertDebugUtilsLabelEXT(VulkanHandle<VkQueue> queue, VkDebugUtilsLabelEXT* pLabelInfo)
	{
		if (vkQueueInsertDebugUtilsLabelEXT == null) throw new VVK.FunctionNotLoadedException("vkQueueInsertDebugUtilsLabelEXT");
		vkQueueInsertDebugUtilsLabelEXT(queue, pLabelInfo);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void CmdBeginDebugUtilsLabelEXT(VulkanHandle<VkCommandBuffer> commandBuffer, VkDebugUtilsLabelEXT* pLabelInfo)
	{
		if (vkCmdBeginDebugUtilsLabelEXT == null) throw new VVK.FunctionNotLoadedException("vkCmdBeginDebugUtilsLabelEXT");
		vkCmdBeginDebugUtilsLabelEXT(commandBuffer, pLabelInfo);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void CmdEndDebugUtilsLabelEXT(VulkanHandle<VkCommandBuffer> commandBuffer)
	{
		if (vkCmdEndDebugUtilsLabelEXT == null) throw new VVK.FunctionNotLoadedException("vkCmdEndDebugUtilsLabelEXT");
		vkCmdEndDebugUtilsLabelEXT(commandBuffer);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void CmdInsertDebugUtilsLabelEXT(VulkanHandle<VkCommandBuffer> commandBuffer, VkDebugUtilsLabelEXT* pLabelInfo)
	{
		if (vkCmdInsertDebugUtilsLabelEXT == null) throw new VVK.FunctionNotLoadedException("vkCmdInsertDebugUtilsLabelEXT");
		vkCmdInsertDebugUtilsLabelEXT(commandBuffer, pLabelInfo);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public VkResult GetMemoryHostPointerPropertiesEXT(VulkanHandle<VkDevice> device, VkExternalMemoryHandleTypeFlags handleType, void* pHostPointer, VkMemoryHostPointerPropertiesEXT* pMemoryHostPointerProperties)
	{
		if (vkGetMemoryHostPointerPropertiesEXT == null) throw new VVK.FunctionNotLoadedException("vkGetMemoryHostPointerPropertiesEXT");
		return vkGetMemoryHostPointerPropertiesEXT(device, handleType, pHostPointer, pMemoryHostPointerProperties);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void CmdWriteBufferMarkerAMD(VulkanHandle<VkCommandBuffer> commandBuffer, VkPipelineStageFlags pipelineStage, VulkanHandle<VkBuffer> dstBuffer, ulong dstOffset, uint marker)
	{
		if (vkCmdWriteBufferMarkerAMD == null) throw new VVK.FunctionNotLoadedException("vkCmdWriteBufferMarkerAMD");
		vkCmdWriteBufferMarkerAMD(commandBuffer, pipelineStage, dstBuffer, dstOffset, marker);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public VkResult CreateRenderPass2(VulkanHandle<VkDevice> device, VkRenderPassCreateInfo2* pCreateInfo, VkAllocationCallbacks* pAllocator, VulkanHandle<VkRenderPass>* pRenderPass)
	{
		if (vkCreateRenderPass2 == null) throw new VVK.FunctionNotLoadedException("vkCreateRenderPass2");
		return vkCreateRenderPass2(device, pCreateInfo, pAllocator, pRenderPass);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public VkResult CreateRenderPass2KHR(VulkanHandle<VkDevice> device, VkRenderPassCreateInfo2* pCreateInfo, VkAllocationCallbacks* pAllocator, VulkanHandle<VkRenderPass>* pRenderPass)
	{
		if (vkCreateRenderPass2KHR == null) throw new VVK.FunctionNotLoadedException("vkCreateRenderPass2KHR");
		return vkCreateRenderPass2KHR(device, pCreateInfo, pAllocator, pRenderPass);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void CmdBeginRenderPass2(VulkanHandle<VkCommandBuffer> commandBuffer, VkRenderPassBeginInfo* pRenderPassBegin, VkSubpassBeginInfo* pSubpassBeginInfo)
	{
		if (vkCmdBeginRenderPass2 == null) throw new VVK.FunctionNotLoadedException("vkCmdBeginRenderPass2");
		vkCmdBeginRenderPass2(commandBuffer, pRenderPassBegin, pSubpassBeginInfo);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void CmdBeginRenderPass2KHR(VulkanHandle<VkCommandBuffer> commandBuffer, VkRenderPassBeginInfo* pRenderPassBegin, VkSubpassBeginInfo* pSubpassBeginInfo)
	{
		if (vkCmdBeginRenderPass2KHR == null) throw new VVK.FunctionNotLoadedException("vkCmdBeginRenderPass2KHR");
		vkCmdBeginRenderPass2KHR(commandBuffer, pRenderPassBegin, pSubpassBeginInfo);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void CmdNextSubpass2(VulkanHandle<VkCommandBuffer> commandBuffer, VkSubpassBeginInfo* pSubpassBeginInfo, VkSubpassEndInfo* pSubpassEndInfo)
	{
		if (vkCmdNextSubpass2 == null) throw new VVK.FunctionNotLoadedException("vkCmdNextSubpass2");
		vkCmdNextSubpass2(commandBuffer, pSubpassBeginInfo, pSubpassEndInfo);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void CmdNextSubpass2KHR(VulkanHandle<VkCommandBuffer> commandBuffer, VkSubpassBeginInfo* pSubpassBeginInfo, VkSubpassEndInfo* pSubpassEndInfo)
	{
		if (vkCmdNextSubpass2KHR == null) throw new VVK.FunctionNotLoadedException("vkCmdNextSubpass2KHR");
		vkCmdNextSubpass2KHR(commandBuffer, pSubpassBeginInfo, pSubpassEndInfo);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void CmdEndRenderPass2(VulkanHandle<VkCommandBuffer> commandBuffer, VkSubpassEndInfo* pSubpassEndInfo)
	{
		if (vkCmdEndRenderPass2 == null) throw new VVK.FunctionNotLoadedException("vkCmdEndRenderPass2");
		vkCmdEndRenderPass2(commandBuffer, pSubpassEndInfo);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void CmdEndRenderPass2KHR(VulkanHandle<VkCommandBuffer> commandBuffer, VkSubpassEndInfo* pSubpassEndInfo)
	{
		if (vkCmdEndRenderPass2KHR == null) throw new VVK.FunctionNotLoadedException("vkCmdEndRenderPass2KHR");
		vkCmdEndRenderPass2KHR(commandBuffer, pSubpassEndInfo);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public VkResult GetSemaphoreCounterValue(VulkanHandle<VkDevice> device, VulkanHandle<VkSemaphore> semaphore, ulong* pValue)
	{
		if (vkGetSemaphoreCounterValue == null) throw new VVK.FunctionNotLoadedException("vkGetSemaphoreCounterValue");
		return vkGetSemaphoreCounterValue(device, semaphore, pValue);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public VkResult GetSemaphoreCounterValueKHR(VulkanHandle<VkDevice> device, VulkanHandle<VkSemaphore> semaphore, ulong* pValue)
	{
		if (vkGetSemaphoreCounterValueKHR == null) throw new VVK.FunctionNotLoadedException("vkGetSemaphoreCounterValueKHR");
		return vkGetSemaphoreCounterValueKHR(device, semaphore, pValue);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public VkResult WaitSemaphores(VulkanHandle<VkDevice> device, VkSemaphoreWaitInfo* pWaitInfo, ulong timeout)
	{
		if (vkWaitSemaphores == null) throw new VVK.FunctionNotLoadedException("vkWaitSemaphores");
		return vkWaitSemaphores(device, pWaitInfo, timeout);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public VkResult WaitSemaphoresKHR(VulkanHandle<VkDevice> device, VkSemaphoreWaitInfo* pWaitInfo, ulong timeout)
	{
		if (vkWaitSemaphoresKHR == null) throw new VVK.FunctionNotLoadedException("vkWaitSemaphoresKHR");
		return vkWaitSemaphoresKHR(device, pWaitInfo, timeout);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public VkResult SignalSemaphore(VulkanHandle<VkDevice> device, VkSemaphoreSignalInfo* pSignalInfo)
	{
		if (vkSignalSemaphore == null) throw new VVK.FunctionNotLoadedException("vkSignalSemaphore");
		return vkSignalSemaphore(device, pSignalInfo);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public VkResult SignalSemaphoreKHR(VulkanHandle<VkDevice> device, VkSemaphoreSignalInfo* pSignalInfo)
	{
		if (vkSignalSemaphoreKHR == null) throw new VVK.FunctionNotLoadedException("vkSignalSemaphoreKHR");
		return vkSignalSemaphoreKHR(device, pSignalInfo);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public VkResult GetAndroidHardwareBufferPropertiesANDROID(VulkanHandle<VkDevice> device, void* buffer, VkAndroidHardwareBufferPropertiesANDROID* pProperties)
	{
		if (vkGetAndroidHardwareBufferPropertiesANDROID == null) throw new VVK.FunctionNotLoadedException("vkGetAndroidHardwareBufferPropertiesANDROID");
		return vkGetAndroidHardwareBufferPropertiesANDROID(device, buffer, pProperties);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public VkResult GetMemoryAndroidHardwareBufferANDROID(VulkanHandle<VkDevice> device, VkMemoryGetAndroidHardwareBufferInfoANDROID* pInfo, void** pBuffer)
	{
		if (vkGetMemoryAndroidHardwareBufferANDROID == null) throw new VVK.FunctionNotLoadedException("vkGetMemoryAndroidHardwareBufferANDROID");
		return vkGetMemoryAndroidHardwareBufferANDROID(device, pInfo, pBuffer);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void CmdDrawIndirectCount(VulkanHandle<VkCommandBuffer> commandBuffer, VulkanHandle<VkBuffer> buffer, ulong offset, VulkanHandle<VkBuffer> countBuffer, ulong countBufferOffset, uint maxDrawCount, uint stride)
	{
		if (vkCmdDrawIndirectCount == null) throw new VVK.FunctionNotLoadedException("vkCmdDrawIndirectCount");
		vkCmdDrawIndirectCount(commandBuffer, buffer, offset, countBuffer, countBufferOffset, maxDrawCount, stride);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void CmdDrawIndirectCountKHR(VulkanHandle<VkCommandBuffer> commandBuffer, VulkanHandle<VkBuffer> buffer, ulong offset, VulkanHandle<VkBuffer> countBuffer, ulong countBufferOffset, uint maxDrawCount, uint stride)
	{
		if (vkCmdDrawIndirectCountKHR == null) throw new VVK.FunctionNotLoadedException("vkCmdDrawIndirectCountKHR");
		vkCmdDrawIndirectCountKHR(commandBuffer, buffer, offset, countBuffer, countBufferOffset, maxDrawCount, stride);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void CmdDrawIndirectCountAMD(VulkanHandle<VkCommandBuffer> commandBuffer, VulkanHandle<VkBuffer> buffer, ulong offset, VulkanHandle<VkBuffer> countBuffer, ulong countBufferOffset, uint maxDrawCount, uint stride)
	{
		if (vkCmdDrawIndirectCountAMD == null) throw new VVK.FunctionNotLoadedException("vkCmdDrawIndirectCountAMD");
		vkCmdDrawIndirectCountAMD(commandBuffer, buffer, offset, countBuffer, countBufferOffset, maxDrawCount, stride);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void CmdDrawIndexedIndirectCount(VulkanHandle<VkCommandBuffer> commandBuffer, VulkanHandle<VkBuffer> buffer, ulong offset, VulkanHandle<VkBuffer> countBuffer, ulong countBufferOffset, uint maxDrawCount, uint stride)
	{
		if (vkCmdDrawIndexedIndirectCount == null) throw new VVK.FunctionNotLoadedException("vkCmdDrawIndexedIndirectCount");
		vkCmdDrawIndexedIndirectCount(commandBuffer, buffer, offset, countBuffer, countBufferOffset, maxDrawCount, stride);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void CmdDrawIndexedIndirectCountKHR(VulkanHandle<VkCommandBuffer> commandBuffer, VulkanHandle<VkBuffer> buffer, ulong offset, VulkanHandle<VkBuffer> countBuffer, ulong countBufferOffset, uint maxDrawCount, uint stride)
	{
		if (vkCmdDrawIndexedIndirectCountKHR == null) throw new VVK.FunctionNotLoadedException("vkCmdDrawIndexedIndirectCountKHR");
		vkCmdDrawIndexedIndirectCountKHR(commandBuffer, buffer, offset, countBuffer, countBufferOffset, maxDrawCount, stride);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void CmdDrawIndexedIndirectCountAMD(VulkanHandle<VkCommandBuffer> commandBuffer, VulkanHandle<VkBuffer> buffer, ulong offset, VulkanHandle<VkBuffer> countBuffer, ulong countBufferOffset, uint maxDrawCount, uint stride)
	{
		if (vkCmdDrawIndexedIndirectCountAMD == null) throw new VVK.FunctionNotLoadedException("vkCmdDrawIndexedIndirectCountAMD");
		vkCmdDrawIndexedIndirectCountAMD(commandBuffer, buffer, offset, countBuffer, countBufferOffset, maxDrawCount, stride);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void CmdSetCheckpointNV(VulkanHandle<VkCommandBuffer> commandBuffer, void* pCheckpointMarker)
	{
		if (vkCmdSetCheckpointNV == null) throw new VVK.FunctionNotLoadedException("vkCmdSetCheckpointNV");
		vkCmdSetCheckpointNV(commandBuffer, pCheckpointMarker);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void GetQueueCheckpointDataNV(VulkanHandle<VkQueue> queue, uint* pCheckpointDataCount, VkCheckpointDataNV* pCheckpointData)
	{
		if (vkGetQueueCheckpointDataNV == null) throw new VVK.FunctionNotLoadedException("vkGetQueueCheckpointDataNV");
		vkGetQueueCheckpointDataNV(queue, pCheckpointDataCount, pCheckpointData);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void CmdBindTransformFeedbackBuffersEXT(VulkanHandle<VkCommandBuffer> commandBuffer, uint firstBinding, uint bindingCount, VulkanHandle<VkBuffer>* pBuffers, ulong* pOffsets, ulong* pSizes)
	{
		if (vkCmdBindTransformFeedbackBuffersEXT == null) throw new VVK.FunctionNotLoadedException("vkCmdBindTransformFeedbackBuffersEXT");
		vkCmdBindTransformFeedbackBuffersEXT(commandBuffer, firstBinding, bindingCount, pBuffers, pOffsets, pSizes);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void CmdBeginTransformFeedbackEXT(VulkanHandle<VkCommandBuffer> commandBuffer, uint firstCounterBuffer, uint counterBufferCount, VulkanHandle<VkBuffer>* pCounterBuffers, ulong* pCounterBufferOffsets)
	{
		if (vkCmdBeginTransformFeedbackEXT == null) throw new VVK.FunctionNotLoadedException("vkCmdBeginTransformFeedbackEXT");
		vkCmdBeginTransformFeedbackEXT(commandBuffer, firstCounterBuffer, counterBufferCount, pCounterBuffers, pCounterBufferOffsets);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void CmdEndTransformFeedbackEXT(VulkanHandle<VkCommandBuffer> commandBuffer, uint firstCounterBuffer, uint counterBufferCount, VulkanHandle<VkBuffer>* pCounterBuffers, ulong* pCounterBufferOffsets)
	{
		if (vkCmdEndTransformFeedbackEXT == null) throw new VVK.FunctionNotLoadedException("vkCmdEndTransformFeedbackEXT");
		vkCmdEndTransformFeedbackEXT(commandBuffer, firstCounterBuffer, counterBufferCount, pCounterBuffers, pCounterBufferOffsets);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void CmdBeginQueryIndexedEXT(VulkanHandle<VkCommandBuffer> commandBuffer, VulkanHandle<VkQueryPool> queryPool, uint query, VkQueryControlFlags flags, uint index)
	{
		if (vkCmdBeginQueryIndexedEXT == null) throw new VVK.FunctionNotLoadedException("vkCmdBeginQueryIndexedEXT");
		vkCmdBeginQueryIndexedEXT(commandBuffer, queryPool, query, flags, index);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void CmdEndQueryIndexedEXT(VulkanHandle<VkCommandBuffer> commandBuffer, VulkanHandle<VkQueryPool> queryPool, uint query, uint index)
	{
		if (vkCmdEndQueryIndexedEXT == null) throw new VVK.FunctionNotLoadedException("vkCmdEndQueryIndexedEXT");
		vkCmdEndQueryIndexedEXT(commandBuffer, queryPool, query, index);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void CmdDrawIndirectByteCountEXT(VulkanHandle<VkCommandBuffer> commandBuffer, uint instanceCount, uint firstInstance, VulkanHandle<VkBuffer> counterBuffer, ulong counterBufferOffset, uint counterOffset, uint vertexStride)
	{
		if (vkCmdDrawIndirectByteCountEXT == null) throw new VVK.FunctionNotLoadedException("vkCmdDrawIndirectByteCountEXT");
		vkCmdDrawIndirectByteCountEXT(commandBuffer, instanceCount, firstInstance, counterBuffer, counterBufferOffset, counterOffset, vertexStride);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void CmdSetExclusiveScissorNV(VulkanHandle<VkCommandBuffer> commandBuffer, uint firstExclusiveScissor, uint exclusiveScissorCount, VkRect2D* pExclusiveScissors)
	{
		if (vkCmdSetExclusiveScissorNV == null) throw new VVK.FunctionNotLoadedException("vkCmdSetExclusiveScissorNV");
		vkCmdSetExclusiveScissorNV(commandBuffer, firstExclusiveScissor, exclusiveScissorCount, pExclusiveScissors);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void CmdBindShadingRateImageNV(VulkanHandle<VkCommandBuffer> commandBuffer, VulkanHandle<VkImageView> imageView, VkImageLayout imageLayout)
	{
		if (vkCmdBindShadingRateImageNV == null) throw new VVK.FunctionNotLoadedException("vkCmdBindShadingRateImageNV");
		vkCmdBindShadingRateImageNV(commandBuffer, imageView, imageLayout);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void CmdSetViewportShadingRatePaletteNV(VulkanHandle<VkCommandBuffer> commandBuffer, uint firstViewport, uint viewportCount, VkShadingRatePaletteNV* pShadingRatePalettes)
	{
		if (vkCmdSetViewportShadingRatePaletteNV == null) throw new VVK.FunctionNotLoadedException("vkCmdSetViewportShadingRatePaletteNV");
		vkCmdSetViewportShadingRatePaletteNV(commandBuffer, firstViewport, viewportCount, pShadingRatePalettes);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void CmdSetCoarseSampleOrderNV(VulkanHandle<VkCommandBuffer> commandBuffer, VkCoarseSampleOrderTypeNV sampleOrderType, uint customSampleOrderCount, VkCoarseSampleOrderCustomNV* pCustomSampleOrders)
	{
		if (vkCmdSetCoarseSampleOrderNV == null) throw new VVK.FunctionNotLoadedException("vkCmdSetCoarseSampleOrderNV");
		vkCmdSetCoarseSampleOrderNV(commandBuffer, sampleOrderType, customSampleOrderCount, pCustomSampleOrders);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void CmdDrawMeshTasksNV(VulkanHandle<VkCommandBuffer> commandBuffer, uint taskCount, uint firstTask)
	{
		if (vkCmdDrawMeshTasksNV == null) throw new VVK.FunctionNotLoadedException("vkCmdDrawMeshTasksNV");
		vkCmdDrawMeshTasksNV(commandBuffer, taskCount, firstTask);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void CmdDrawMeshTasksIndirectNV(VulkanHandle<VkCommandBuffer> commandBuffer, VulkanHandle<VkBuffer> buffer, ulong offset, uint drawCount, uint stride)
	{
		if (vkCmdDrawMeshTasksIndirectNV == null) throw new VVK.FunctionNotLoadedException("vkCmdDrawMeshTasksIndirectNV");
		vkCmdDrawMeshTasksIndirectNV(commandBuffer, buffer, offset, drawCount, stride);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void CmdDrawMeshTasksIndirectCountNV(VulkanHandle<VkCommandBuffer> commandBuffer, VulkanHandle<VkBuffer> buffer, ulong offset, VulkanHandle<VkBuffer> countBuffer, ulong countBufferOffset, uint maxDrawCount, uint stride)
	{
		if (vkCmdDrawMeshTasksIndirectCountNV == null) throw new VVK.FunctionNotLoadedException("vkCmdDrawMeshTasksIndirectCountNV");
		vkCmdDrawMeshTasksIndirectCountNV(commandBuffer, buffer, offset, countBuffer, countBufferOffset, maxDrawCount, stride);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public VkResult CompileDeferredNV(VulkanHandle<VkDevice> device, VulkanHandle<VkPipeline> pipeline, uint shader)
	{
		if (vkCompileDeferredNV == null) throw new VVK.FunctionNotLoadedException("vkCompileDeferredNV");
		return vkCompileDeferredNV(device, pipeline, shader);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public VkResult CreateAccelerationStructureNV(VulkanHandle<VkDevice> device, VkAccelerationStructureCreateInfoNV* pCreateInfo, VkAllocationCallbacks* pAllocator, VulkanHandle<VkAccelerationStructureNV>* pAccelerationStructure)
	{
		if (vkCreateAccelerationStructureNV == null) throw new VVK.FunctionNotLoadedException("vkCreateAccelerationStructureNV");
		return vkCreateAccelerationStructureNV(device, pCreateInfo, pAllocator, pAccelerationStructure);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void DestroyAccelerationStructureKHR(VulkanHandle<VkDevice> device, VulkanHandle<VkAccelerationStructureKHR> accelerationStructure, VkAllocationCallbacks* pAllocator)
	{
		if (vkDestroyAccelerationStructureKHR == null) throw new VVK.FunctionNotLoadedException("vkDestroyAccelerationStructureKHR");
		vkDestroyAccelerationStructureKHR(device, accelerationStructure, pAllocator);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void DestroyAccelerationStructureNV(VulkanHandle<VkDevice> device, VulkanHandle<VkAccelerationStructureKHR> accelerationStructure, VkAllocationCallbacks* pAllocator)
	{
		if (vkDestroyAccelerationStructureNV == null) throw new VVK.FunctionNotLoadedException("vkDestroyAccelerationStructureNV");
		vkDestroyAccelerationStructureNV(device, accelerationStructure, pAllocator);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void GetAccelerationStructureMemoryRequirementsKHR(VulkanHandle<VkDevice> device, VkAccelerationStructureMemoryRequirementsInfoKHR* pInfo, VkMemoryRequirements2* pMemoryRequirements)
	{
		if (vkGetAccelerationStructureMemoryRequirementsKHR == null) throw new VVK.FunctionNotLoadedException("vkGetAccelerationStructureMemoryRequirementsKHR");
		vkGetAccelerationStructureMemoryRequirementsKHR(device, pInfo, pMemoryRequirements);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void GetAccelerationStructureMemoryRequirementsNV(VulkanHandle<VkDevice> device, VkAccelerationStructureMemoryRequirementsInfoNV* pInfo, VkMemoryRequirements2KHR* pMemoryRequirements)
	{
		if (vkGetAccelerationStructureMemoryRequirementsNV == null) throw new VVK.FunctionNotLoadedException("vkGetAccelerationStructureMemoryRequirementsNV");
		vkGetAccelerationStructureMemoryRequirementsNV(device, pInfo, pMemoryRequirements);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public VkResult BindAccelerationStructureMemoryKHR(VulkanHandle<VkDevice> device, uint bindInfoCount, VkBindAccelerationStructureMemoryInfoKHR* pBindInfos)
	{
		if (vkBindAccelerationStructureMemoryKHR == null) throw new VVK.FunctionNotLoadedException("vkBindAccelerationStructureMemoryKHR");
		return vkBindAccelerationStructureMemoryKHR(device, bindInfoCount, pBindInfos);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public VkResult BindAccelerationStructureMemoryNV(VulkanHandle<VkDevice> device, uint bindInfoCount, VkBindAccelerationStructureMemoryInfoKHR* pBindInfos)
	{
		if (vkBindAccelerationStructureMemoryNV == null) throw new VVK.FunctionNotLoadedException("vkBindAccelerationStructureMemoryNV");
		return vkBindAccelerationStructureMemoryNV(device, bindInfoCount, pBindInfos);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void CmdCopyAccelerationStructureNV(VulkanHandle<VkCommandBuffer> commandBuffer, VulkanHandle<VkAccelerationStructureKHR> dst, VulkanHandle<VkAccelerationStructureKHR> src, VkCopyAccelerationStructureModeKHR mode)
	{
		if (vkCmdCopyAccelerationStructureNV == null) throw new VVK.FunctionNotLoadedException("vkCmdCopyAccelerationStructureNV");
		vkCmdCopyAccelerationStructureNV(commandBuffer, dst, src, mode);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void CmdCopyAccelerationStructureKHR(VulkanHandle<VkCommandBuffer> commandBuffer, VkCopyAccelerationStructureInfoKHR* pInfo)
	{
		if (vkCmdCopyAccelerationStructureKHR == null) throw new VVK.FunctionNotLoadedException("vkCmdCopyAccelerationStructureKHR");
		vkCmdCopyAccelerationStructureKHR(commandBuffer, pInfo);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public VkResult CopyAccelerationStructureKHR(VulkanHandle<VkDevice> device, VkCopyAccelerationStructureInfoKHR* pInfo)
	{
		if (vkCopyAccelerationStructureKHR == null) throw new VVK.FunctionNotLoadedException("vkCopyAccelerationStructureKHR");
		return vkCopyAccelerationStructureKHR(device, pInfo);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void CmdCopyAccelerationStructureToMemoryKHR(VulkanHandle<VkCommandBuffer> commandBuffer, VkCopyAccelerationStructureToMemoryInfoKHR* pInfo)
	{
		if (vkCmdCopyAccelerationStructureToMemoryKHR == null) throw new VVK.FunctionNotLoadedException("vkCmdCopyAccelerationStructureToMemoryKHR");
		vkCmdCopyAccelerationStructureToMemoryKHR(commandBuffer, pInfo);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public VkResult CopyAccelerationStructureToMemoryKHR(VulkanHandle<VkDevice> device, VkCopyAccelerationStructureToMemoryInfoKHR* pInfo)
	{
		if (vkCopyAccelerationStructureToMemoryKHR == null) throw new VVK.FunctionNotLoadedException("vkCopyAccelerationStructureToMemoryKHR");
		return vkCopyAccelerationStructureToMemoryKHR(device, pInfo);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void CmdCopyMemoryToAccelerationStructureKHR(VulkanHandle<VkCommandBuffer> commandBuffer, VkCopyMemoryToAccelerationStructureInfoKHR* pInfo)
	{
		if (vkCmdCopyMemoryToAccelerationStructureKHR == null) throw new VVK.FunctionNotLoadedException("vkCmdCopyMemoryToAccelerationStructureKHR");
		vkCmdCopyMemoryToAccelerationStructureKHR(commandBuffer, pInfo);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public VkResult CopyMemoryToAccelerationStructureKHR(VulkanHandle<VkDevice> device, VkCopyMemoryToAccelerationStructureInfoKHR* pInfo)
	{
		if (vkCopyMemoryToAccelerationStructureKHR == null) throw new VVK.FunctionNotLoadedException("vkCopyMemoryToAccelerationStructureKHR");
		return vkCopyMemoryToAccelerationStructureKHR(device, pInfo);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void CmdWriteAccelerationStructuresPropertiesKHR(VulkanHandle<VkCommandBuffer> commandBuffer, uint accelerationStructureCount, VulkanHandle<VkAccelerationStructureKHR>* pAccelerationStructures, VkQueryType queryType, VulkanHandle<VkQueryPool> queryPool, uint firstQuery)
	{
		if (vkCmdWriteAccelerationStructuresPropertiesKHR == null) throw new VVK.FunctionNotLoadedException("vkCmdWriteAccelerationStructuresPropertiesKHR");
		vkCmdWriteAccelerationStructuresPropertiesKHR(commandBuffer, accelerationStructureCount, pAccelerationStructures, queryType, queryPool, firstQuery);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void CmdWriteAccelerationStructuresPropertiesNV(VulkanHandle<VkCommandBuffer> commandBuffer, uint accelerationStructureCount, VulkanHandle<VkAccelerationStructureKHR>* pAccelerationStructures, VkQueryType queryType, VulkanHandle<VkQueryPool> queryPool, uint firstQuery)
	{
		if (vkCmdWriteAccelerationStructuresPropertiesNV == null) throw new VVK.FunctionNotLoadedException("vkCmdWriteAccelerationStructuresPropertiesNV");
		vkCmdWriteAccelerationStructuresPropertiesNV(commandBuffer, accelerationStructureCount, pAccelerationStructures, queryType, queryPool, firstQuery);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void CmdBuildAccelerationStructureNV(VulkanHandle<VkCommandBuffer> commandBuffer, VkAccelerationStructureInfoNV* pInfo, VulkanHandle<VkBuffer> instanceData, ulong instanceOffset, VkBool32 update, VulkanHandle<VkAccelerationStructureKHR> dst, VulkanHandle<VkAccelerationStructureKHR> src, VulkanHandle<VkBuffer> scratch, ulong scratchOffset)
	{
		if (vkCmdBuildAccelerationStructureNV == null) throw new VVK.FunctionNotLoadedException("vkCmdBuildAccelerationStructureNV");
		vkCmdBuildAccelerationStructureNV(commandBuffer, pInfo, instanceData, instanceOffset, update, dst, src, scratch, scratchOffset);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public VkResult WriteAccelerationStructuresPropertiesKHR(VulkanHandle<VkDevice> device, uint accelerationStructureCount, VulkanHandle<VkAccelerationStructureKHR>* pAccelerationStructures, VkQueryType queryType, ulong dataSize, void* pData, ulong stride)
	{
		if (vkWriteAccelerationStructuresPropertiesKHR == null) throw new VVK.FunctionNotLoadedException("vkWriteAccelerationStructuresPropertiesKHR");
		return vkWriteAccelerationStructuresPropertiesKHR(device, accelerationStructureCount, pAccelerationStructures, queryType, dataSize, pData, stride);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void CmdTraceRaysKHR(VulkanHandle<VkCommandBuffer> commandBuffer, VkStridedBufferRegionKHR* pRaygenShaderBindingTable, VkStridedBufferRegionKHR* pMissShaderBindingTable, VkStridedBufferRegionKHR* pHitShaderBindingTable, VkStridedBufferRegionKHR* pCallableShaderBindingTable, uint width, uint height, uint depth)
	{
		if (vkCmdTraceRaysKHR == null) throw new VVK.FunctionNotLoadedException("vkCmdTraceRaysKHR");
		vkCmdTraceRaysKHR(commandBuffer, pRaygenShaderBindingTable, pMissShaderBindingTable, pHitShaderBindingTable, pCallableShaderBindingTable, width, height, depth);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void CmdTraceRaysNV(VulkanHandle<VkCommandBuffer> commandBuffer, VulkanHandle<VkBuffer> raygenShaderBindingTableBuffer, ulong raygenShaderBindingOffset, VulkanHandle<VkBuffer> missShaderBindingTableBuffer, ulong missShaderBindingOffset, ulong missShaderBindingStride, VulkanHandle<VkBuffer> hitShaderBindingTableBuffer, ulong hitShaderBindingOffset, ulong hitShaderBindingStride, VulkanHandle<VkBuffer> callableShaderBindingTableBuffer, ulong callableShaderBindingOffset, ulong callableShaderBindingStride, uint width, uint height, uint depth)
	{
		if (vkCmdTraceRaysNV == null) throw new VVK.FunctionNotLoadedException("vkCmdTraceRaysNV");
		vkCmdTraceRaysNV(commandBuffer, raygenShaderBindingTableBuffer, raygenShaderBindingOffset, missShaderBindingTableBuffer, missShaderBindingOffset, missShaderBindingStride, hitShaderBindingTableBuffer, hitShaderBindingOffset, hitShaderBindingStride, callableShaderBindingTableBuffer, callableShaderBindingOffset, callableShaderBindingStride, width, height, depth);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public VkResult GetRayTracingShaderGroupHandlesKHR(VulkanHandle<VkDevice> device, VulkanHandle<VkPipeline> pipeline, uint firstGroup, uint groupCount, ulong dataSize, void* pData)
	{
		if (vkGetRayTracingShaderGroupHandlesKHR == null) throw new VVK.FunctionNotLoadedException("vkGetRayTracingShaderGroupHandlesKHR");
		return vkGetRayTracingShaderGroupHandlesKHR(device, pipeline, firstGroup, groupCount, dataSize, pData);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public VkResult GetRayTracingShaderGroupHandlesNV(VulkanHandle<VkDevice> device, VulkanHandle<VkPipeline> pipeline, uint firstGroup, uint groupCount, ulong dataSize, void* pData)
	{
		if (vkGetRayTracingShaderGroupHandlesNV == null) throw new VVK.FunctionNotLoadedException("vkGetRayTracingShaderGroupHandlesNV");
		return vkGetRayTracingShaderGroupHandlesNV(device, pipeline, firstGroup, groupCount, dataSize, pData);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public VkResult GetRayTracingCaptureReplayShaderGroupHandlesKHR(VulkanHandle<VkDevice> device, VulkanHandle<VkPipeline> pipeline, uint firstGroup, uint groupCount, ulong dataSize, void* pData)
	{
		if (vkGetRayTracingCaptureReplayShaderGroupHandlesKHR == null) throw new VVK.FunctionNotLoadedException("vkGetRayTracingCaptureReplayShaderGroupHandlesKHR");
		return vkGetRayTracingCaptureReplayShaderGroupHandlesKHR(device, pipeline, firstGroup, groupCount, dataSize, pData);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public VkResult GetAccelerationStructureHandleNV(VulkanHandle<VkDevice> device, VulkanHandle<VkAccelerationStructureKHR> accelerationStructure, ulong dataSize, void* pData)
	{
		if (vkGetAccelerationStructureHandleNV == null) throw new VVK.FunctionNotLoadedException("vkGetAccelerationStructureHandleNV");
		return vkGetAccelerationStructureHandleNV(device, accelerationStructure, dataSize, pData);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public VkResult CreateRayTracingPipelinesNV(VulkanHandle<VkDevice> device, VulkanHandle<VkPipelineCache> pipelineCache, uint createInfoCount, VkRayTracingPipelineCreateInfoNV* pCreateInfos, VkAllocationCallbacks* pAllocator, VulkanHandle<VkPipeline>* pPipelines)
	{
		if (vkCreateRayTracingPipelinesNV == null) throw new VVK.FunctionNotLoadedException("vkCreateRayTracingPipelinesNV");
		return vkCreateRayTracingPipelinesNV(device, pipelineCache, createInfoCount, pCreateInfos, pAllocator, pPipelines);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public VkResult CreateRayTracingPipelinesKHR(VulkanHandle<VkDevice> device, VulkanHandle<VkPipelineCache> pipelineCache, uint createInfoCount, VkRayTracingPipelineCreateInfoKHR* pCreateInfos, VkAllocationCallbacks* pAllocator, VulkanHandle<VkPipeline>* pPipelines)
	{
		if (vkCreateRayTracingPipelinesKHR == null) throw new VVK.FunctionNotLoadedException("vkCreateRayTracingPipelinesKHR");
		return vkCreateRayTracingPipelinesKHR(device, pipelineCache, createInfoCount, pCreateInfos, pAllocator, pPipelines);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void CmdTraceRaysIndirectKHR(VulkanHandle<VkCommandBuffer> commandBuffer, VkStridedBufferRegionKHR* pRaygenShaderBindingTable, VkStridedBufferRegionKHR* pMissShaderBindingTable, VkStridedBufferRegionKHR* pHitShaderBindingTable, VkStridedBufferRegionKHR* pCallableShaderBindingTable, VulkanHandle<VkBuffer> buffer, ulong offset)
	{
		if (vkCmdTraceRaysIndirectKHR == null) throw new VVK.FunctionNotLoadedException("vkCmdTraceRaysIndirectKHR");
		vkCmdTraceRaysIndirectKHR(commandBuffer, pRaygenShaderBindingTable, pMissShaderBindingTable, pHitShaderBindingTable, pCallableShaderBindingTable, buffer, offset);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public VkResult GetDeviceAccelerationStructureCompatibilityKHR(VulkanHandle<VkDevice> device, VkAccelerationStructureVersionKHR* version)
	{
		if (vkGetDeviceAccelerationStructureCompatibilityKHR == null) throw new VVK.FunctionNotLoadedException("vkGetDeviceAccelerationStructureCompatibilityKHR");
		return vkGetDeviceAccelerationStructureCompatibilityKHR(device, version);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public uint GetImageViewHandleNVX(VulkanHandle<VkDevice> device, VkImageViewHandleInfoNVX* pInfo)
	{
		if (vkGetImageViewHandleNVX == null) throw new VVK.FunctionNotLoadedException("vkGetImageViewHandleNVX");
		return vkGetImageViewHandleNVX(device, pInfo);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public VkResult GetImageViewAddressNVX(VulkanHandle<VkDevice> device, VulkanHandle<VkImageView> imageView, VkImageViewAddressPropertiesNVX* pProperties)
	{
		if (vkGetImageViewAddressNVX == null) throw new VVK.FunctionNotLoadedException("vkGetImageViewAddressNVX");
		return vkGetImageViewAddressNVX(device, imageView, pProperties);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public VkResult GetDeviceGroupSurfacePresentModes2EXT(VulkanHandle<VkDevice> device, VkPhysicalDeviceSurfaceInfo2KHR* pSurfaceInfo, VkDeviceGroupPresentModeFlagsKHR* pModes)
	{
		if (vkGetDeviceGroupSurfacePresentModes2EXT == null) throw new VVK.FunctionNotLoadedException("vkGetDeviceGroupSurfacePresentModes2EXT");
		return vkGetDeviceGroupSurfacePresentModes2EXT(device, pSurfaceInfo, pModes);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public VkResult AcquireFullScreenExclusiveModeEXT(VulkanHandle<VkDevice> device, VulkanHandle<VkSwapchainKHR> swapchain)
	{
		if (vkAcquireFullScreenExclusiveModeEXT == null) throw new VVK.FunctionNotLoadedException("vkAcquireFullScreenExclusiveModeEXT");
		return vkAcquireFullScreenExclusiveModeEXT(device, swapchain);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public VkResult ReleaseFullScreenExclusiveModeEXT(VulkanHandle<VkDevice> device, VulkanHandle<VkSwapchainKHR> swapchain)
	{
		if (vkReleaseFullScreenExclusiveModeEXT == null) throw new VVK.FunctionNotLoadedException("vkReleaseFullScreenExclusiveModeEXT");
		return vkReleaseFullScreenExclusiveModeEXT(device, swapchain);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public VkResult AcquireProfilingLockKHR(VulkanHandle<VkDevice> device, VkAcquireProfilingLockInfoKHR* pInfo)
	{
		if (vkAcquireProfilingLockKHR == null) throw new VVK.FunctionNotLoadedException("vkAcquireProfilingLockKHR");
		return vkAcquireProfilingLockKHR(device, pInfo);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void ReleaseProfilingLockKHR(VulkanHandle<VkDevice> device)
	{
		if (vkReleaseProfilingLockKHR == null) throw new VVK.FunctionNotLoadedException("vkReleaseProfilingLockKHR");
		vkReleaseProfilingLockKHR(device);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public VkResult GetImageDrmFormatModifierPropertiesEXT(VulkanHandle<VkDevice> device, VulkanHandle<VkImage> image, VkImageDrmFormatModifierPropertiesEXT* pProperties)
	{
		if (vkGetImageDrmFormatModifierPropertiesEXT == null) throw new VVK.FunctionNotLoadedException("vkGetImageDrmFormatModifierPropertiesEXT");
		return vkGetImageDrmFormatModifierPropertiesEXT(device, image, pProperties);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public ulong GetBufferOpaqueCaptureAddress(VulkanHandle<VkDevice> device, VkBufferDeviceAddressInfo* pInfo)
	{
		if (vkGetBufferOpaqueCaptureAddress == null) throw new VVK.FunctionNotLoadedException("vkGetBufferOpaqueCaptureAddress");
		return vkGetBufferOpaqueCaptureAddress(device, pInfo);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public ulong GetBufferOpaqueCaptureAddressKHR(VulkanHandle<VkDevice> device, VkBufferDeviceAddressInfo* pInfo)
	{
		if (vkGetBufferOpaqueCaptureAddressKHR == null) throw new VVK.FunctionNotLoadedException("vkGetBufferOpaqueCaptureAddressKHR");
		return vkGetBufferOpaqueCaptureAddressKHR(device, pInfo);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public ulong GetBufferDeviceAddress(VulkanHandle<VkDevice> device, VkBufferDeviceAddressInfo* pInfo)
	{
		if (vkGetBufferDeviceAddress == null) throw new VVK.FunctionNotLoadedException("vkGetBufferDeviceAddress");
		return vkGetBufferDeviceAddress(device, pInfo);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public ulong GetBufferDeviceAddressKHR(VulkanHandle<VkDevice> device, VkBufferDeviceAddressInfo* pInfo)
	{
		if (vkGetBufferDeviceAddressKHR == null) throw new VVK.FunctionNotLoadedException("vkGetBufferDeviceAddressKHR");
		return vkGetBufferDeviceAddressKHR(device, pInfo);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public ulong GetBufferDeviceAddressEXT(VulkanHandle<VkDevice> device, VkBufferDeviceAddressInfo* pInfo)
	{
		if (vkGetBufferDeviceAddressEXT == null) throw new VVK.FunctionNotLoadedException("vkGetBufferDeviceAddressEXT");
		return vkGetBufferDeviceAddressEXT(device, pInfo);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public VkResult InitializePerformanceApiINTEL(VulkanHandle<VkDevice> device, VkInitializePerformanceApiInfoINTEL* pInitializeInfo)
	{
		if (vkInitializePerformanceApiINTEL == null) throw new VVK.FunctionNotLoadedException("vkInitializePerformanceApiINTEL");
		return vkInitializePerformanceApiINTEL(device, pInitializeInfo);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void UninitializePerformanceApiINTEL(VulkanHandle<VkDevice> device)
	{
		if (vkUninitializePerformanceApiINTEL == null) throw new VVK.FunctionNotLoadedException("vkUninitializePerformanceApiINTEL");
		vkUninitializePerformanceApiINTEL(device);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public VkResult CmdSetPerformanceMarkerINTEL(VulkanHandle<VkCommandBuffer> commandBuffer, VkPerformanceMarkerInfoINTEL* pMarkerInfo)
	{
		if (vkCmdSetPerformanceMarkerINTEL == null) throw new VVK.FunctionNotLoadedException("vkCmdSetPerformanceMarkerINTEL");
		return vkCmdSetPerformanceMarkerINTEL(commandBuffer, pMarkerInfo);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public VkResult CmdSetPerformanceStreamMarkerINTEL(VulkanHandle<VkCommandBuffer> commandBuffer, VkPerformanceStreamMarkerInfoINTEL* pMarkerInfo)
	{
		if (vkCmdSetPerformanceStreamMarkerINTEL == null) throw new VVK.FunctionNotLoadedException("vkCmdSetPerformanceStreamMarkerINTEL");
		return vkCmdSetPerformanceStreamMarkerINTEL(commandBuffer, pMarkerInfo);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public VkResult CmdSetPerformanceOverrideINTEL(VulkanHandle<VkCommandBuffer> commandBuffer, VkPerformanceOverrideInfoINTEL* pOverrideInfo)
	{
		if (vkCmdSetPerformanceOverrideINTEL == null) throw new VVK.FunctionNotLoadedException("vkCmdSetPerformanceOverrideINTEL");
		return vkCmdSetPerformanceOverrideINTEL(commandBuffer, pOverrideInfo);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public VkResult AcquirePerformanceConfigurationINTEL(VulkanHandle<VkDevice> device, VkPerformanceConfigurationAcquireInfoINTEL* pAcquireInfo, VulkanHandle<VkPerformanceConfigurationINTEL>* pConfiguration)
	{
		if (vkAcquirePerformanceConfigurationINTEL == null) throw new VVK.FunctionNotLoadedException("vkAcquirePerformanceConfigurationINTEL");
		return vkAcquirePerformanceConfigurationINTEL(device, pAcquireInfo, pConfiguration);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public VkResult ReleasePerformanceConfigurationINTEL(VulkanHandle<VkDevice> device, VulkanHandle<VkPerformanceConfigurationINTEL> configuration)
	{
		if (vkReleasePerformanceConfigurationINTEL == null) throw new VVK.FunctionNotLoadedException("vkReleasePerformanceConfigurationINTEL");
		return vkReleasePerformanceConfigurationINTEL(device, configuration);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public VkResult QueueSetPerformanceConfigurationINTEL(VulkanHandle<VkQueue> queue, VulkanHandle<VkPerformanceConfigurationINTEL> configuration)
	{
		if (vkQueueSetPerformanceConfigurationINTEL == null) throw new VVK.FunctionNotLoadedException("vkQueueSetPerformanceConfigurationINTEL");
		return vkQueueSetPerformanceConfigurationINTEL(queue, configuration);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public VkResult GetPerformanceParameterINTEL(VulkanHandle<VkDevice> device, VkPerformanceParameterTypeINTEL parameter, VkPerformanceValueINTEL* pValue)
	{
		if (vkGetPerformanceParameterINTEL == null) throw new VVK.FunctionNotLoadedException("vkGetPerformanceParameterINTEL");
		return vkGetPerformanceParameterINTEL(device, parameter, pValue);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public ulong GetDeviceMemoryOpaqueCaptureAddress(VulkanHandle<VkDevice> device, VkDeviceMemoryOpaqueCaptureAddressInfo* pInfo)
	{
		if (vkGetDeviceMemoryOpaqueCaptureAddress == null) throw new VVK.FunctionNotLoadedException("vkGetDeviceMemoryOpaqueCaptureAddress");
		return vkGetDeviceMemoryOpaqueCaptureAddress(device, pInfo);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public ulong GetDeviceMemoryOpaqueCaptureAddressKHR(VulkanHandle<VkDevice> device, VkDeviceMemoryOpaqueCaptureAddressInfo* pInfo)
	{
		if (vkGetDeviceMemoryOpaqueCaptureAddressKHR == null) throw new VVK.FunctionNotLoadedException("vkGetDeviceMemoryOpaqueCaptureAddressKHR");
		return vkGetDeviceMemoryOpaqueCaptureAddressKHR(device, pInfo);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public VkResult GetPipelineExecutablePropertiesKHR(VulkanHandle<VkDevice> device, VkPipelineInfoKHR* pPipelineInfo, uint* pExecutableCount, VkPipelineExecutablePropertiesKHR* pProperties)
	{
		if (vkGetPipelineExecutablePropertiesKHR == null) throw new VVK.FunctionNotLoadedException("vkGetPipelineExecutablePropertiesKHR");
		return vkGetPipelineExecutablePropertiesKHR(device, pPipelineInfo, pExecutableCount, pProperties);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public VkResult GetPipelineExecutableStatisticsKHR(VulkanHandle<VkDevice> device, VkPipelineExecutableInfoKHR* pExecutableInfo, uint* pStatisticCount, VkPipelineExecutableStatisticKHR* pStatistics)
	{
		if (vkGetPipelineExecutableStatisticsKHR == null) throw new VVK.FunctionNotLoadedException("vkGetPipelineExecutableStatisticsKHR");
		return vkGetPipelineExecutableStatisticsKHR(device, pExecutableInfo, pStatisticCount, pStatistics);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public VkResult GetPipelineExecutableInternalRepresentationsKHR(VulkanHandle<VkDevice> device, VkPipelineExecutableInfoKHR* pExecutableInfo, uint* pInternalRepresentationCount, VkPipelineExecutableInternalRepresentationKHR* pInternalRepresentations)
	{
		if (vkGetPipelineExecutableInternalRepresentationsKHR == null) throw new VVK.FunctionNotLoadedException("vkGetPipelineExecutableInternalRepresentationsKHR");
		return vkGetPipelineExecutableInternalRepresentationsKHR(device, pExecutableInfo, pInternalRepresentationCount, pInternalRepresentations);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void CmdSetLineStippleEXT(VulkanHandle<VkCommandBuffer> commandBuffer, uint lineStippleFactor, ushort lineStipplePattern)
	{
		if (vkCmdSetLineStippleEXT == null) throw new VVK.FunctionNotLoadedException("vkCmdSetLineStippleEXT");
		vkCmdSetLineStippleEXT(commandBuffer, lineStippleFactor, lineStipplePattern);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public VkResult CreateAccelerationStructureKHR(VulkanHandle<VkDevice> device, VkAccelerationStructureCreateInfoKHR* pCreateInfo, VkAllocationCallbacks* pAllocator, VulkanHandle<VkAccelerationStructureKHR>* pAccelerationStructure)
	{
		if (vkCreateAccelerationStructureKHR == null) throw new VVK.FunctionNotLoadedException("vkCreateAccelerationStructureKHR");
		return vkCreateAccelerationStructureKHR(device, pCreateInfo, pAllocator, pAccelerationStructure);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void CmdBuildAccelerationStructureKHR(VulkanHandle<VkCommandBuffer> commandBuffer, uint infoCount, VkAccelerationStructureBuildGeometryInfoKHR* pInfos, VkAccelerationStructureBuildOffsetInfoKHR** ppOffsetInfos)
	{
		if (vkCmdBuildAccelerationStructureKHR == null) throw new VVK.FunctionNotLoadedException("vkCmdBuildAccelerationStructureKHR");
		vkCmdBuildAccelerationStructureKHR(commandBuffer, infoCount, pInfos, ppOffsetInfos);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void CmdBuildAccelerationStructureIndirectKHR(VulkanHandle<VkCommandBuffer> commandBuffer, VkAccelerationStructureBuildGeometryInfoKHR* pInfo, VulkanHandle<VkBuffer> indirectBuffer, ulong indirectOffset, uint indirectStride)
	{
		if (vkCmdBuildAccelerationStructureIndirectKHR == null) throw new VVK.FunctionNotLoadedException("vkCmdBuildAccelerationStructureIndirectKHR");
		vkCmdBuildAccelerationStructureIndirectKHR(commandBuffer, pInfo, indirectBuffer, indirectOffset, indirectStride);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public VkResult BuildAccelerationStructureKHR(VulkanHandle<VkDevice> device, uint infoCount, VkAccelerationStructureBuildGeometryInfoKHR* pInfos, VkAccelerationStructureBuildOffsetInfoKHR** ppOffsetInfos)
	{
		if (vkBuildAccelerationStructureKHR == null) throw new VVK.FunctionNotLoadedException("vkBuildAccelerationStructureKHR");
		return vkBuildAccelerationStructureKHR(device, infoCount, pInfos, ppOffsetInfos);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public ulong GetAccelerationStructureDeviceAddressKHR(VulkanHandle<VkDevice> device, VkAccelerationStructureDeviceAddressInfoKHR* pInfo)
	{
		if (vkGetAccelerationStructureDeviceAddressKHR == null) throw new VVK.FunctionNotLoadedException("vkGetAccelerationStructureDeviceAddressKHR");
		return vkGetAccelerationStructureDeviceAddressKHR(device, pInfo);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public VkResult CreateDeferredOperationKHR(VulkanHandle<VkDevice> device, VkAllocationCallbacks* pAllocator, VulkanHandle<VkDeferredOperationKHR>* pDeferredOperation)
	{
		if (vkCreateDeferredOperationKHR == null) throw new VVK.FunctionNotLoadedException("vkCreateDeferredOperationKHR");
		return vkCreateDeferredOperationKHR(device, pAllocator, pDeferredOperation);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void DestroyDeferredOperationKHR(VulkanHandle<VkDevice> device, VulkanHandle<VkDeferredOperationKHR> operation, VkAllocationCallbacks* pAllocator)
	{
		if (vkDestroyDeferredOperationKHR == null) throw new VVK.FunctionNotLoadedException("vkDestroyDeferredOperationKHR");
		vkDestroyDeferredOperationKHR(device, operation, pAllocator);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public uint GetDeferredOperationMaxConcurrencyKHR(VulkanHandle<VkDevice> device, VulkanHandle<VkDeferredOperationKHR> operation)
	{
		if (vkGetDeferredOperationMaxConcurrencyKHR == null) throw new VVK.FunctionNotLoadedException("vkGetDeferredOperationMaxConcurrencyKHR");
		return vkGetDeferredOperationMaxConcurrencyKHR(device, operation);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public VkResult GetDeferredOperationResultKHR(VulkanHandle<VkDevice> device, VulkanHandle<VkDeferredOperationKHR> operation)
	{
		if (vkGetDeferredOperationResultKHR == null) throw new VVK.FunctionNotLoadedException("vkGetDeferredOperationResultKHR");
		return vkGetDeferredOperationResultKHR(device, operation);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public VkResult DeferredOperationJoinKHR(VulkanHandle<VkDevice> device, VulkanHandle<VkDeferredOperationKHR> operation)
	{
		if (vkDeferredOperationJoinKHR == null) throw new VVK.FunctionNotLoadedException("vkDeferredOperationJoinKHR");
		return vkDeferredOperationJoinKHR(device, operation);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void CmdSetCullModeEXT(VulkanHandle<VkCommandBuffer> commandBuffer, VkCullModeFlags cullMode)
	{
		if (vkCmdSetCullModeEXT == null) throw new VVK.FunctionNotLoadedException("vkCmdSetCullModeEXT");
		vkCmdSetCullModeEXT(commandBuffer, cullMode);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void CmdSetFrontFaceEXT(VulkanHandle<VkCommandBuffer> commandBuffer, VkFrontFace frontFace)
	{
		if (vkCmdSetFrontFaceEXT == null) throw new VVK.FunctionNotLoadedException("vkCmdSetFrontFaceEXT");
		vkCmdSetFrontFaceEXT(commandBuffer, frontFace);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void CmdSetPrimitiveTopologyEXT(VulkanHandle<VkCommandBuffer> commandBuffer, VkPrimitiveTopology primitiveTopology)
	{
		if (vkCmdSetPrimitiveTopologyEXT == null) throw new VVK.FunctionNotLoadedException("vkCmdSetPrimitiveTopologyEXT");
		vkCmdSetPrimitiveTopologyEXT(commandBuffer, primitiveTopology);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void CmdSetViewportWithCountEXT(VulkanHandle<VkCommandBuffer> commandBuffer, uint viewportCount, VkViewport* pViewports)
	{
		if (vkCmdSetViewportWithCountEXT == null) throw new VVK.FunctionNotLoadedException("vkCmdSetViewportWithCountEXT");
		vkCmdSetViewportWithCountEXT(commandBuffer, viewportCount, pViewports);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void CmdSetScissorWithCountEXT(VulkanHandle<VkCommandBuffer> commandBuffer, uint scissorCount, VkRect2D* pScissors)
	{
		if (vkCmdSetScissorWithCountEXT == null) throw new VVK.FunctionNotLoadedException("vkCmdSetScissorWithCountEXT");
		vkCmdSetScissorWithCountEXT(commandBuffer, scissorCount, pScissors);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void CmdBindVertexBuffers2EXT(VulkanHandle<VkCommandBuffer> commandBuffer, uint firstBinding, uint bindingCount, VulkanHandle<VkBuffer>* pBuffers, ulong* pOffsets, ulong* pSizes, ulong* pStrides)
	{
		if (vkCmdBindVertexBuffers2EXT == null) throw new VVK.FunctionNotLoadedException("vkCmdBindVertexBuffers2EXT");
		vkCmdBindVertexBuffers2EXT(commandBuffer, firstBinding, bindingCount, pBuffers, pOffsets, pSizes, pStrides);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void CmdSetDepthTestEnableEXT(VulkanHandle<VkCommandBuffer> commandBuffer, VkBool32 depthTestEnable)
	{
		if (vkCmdSetDepthTestEnableEXT == null) throw new VVK.FunctionNotLoadedException("vkCmdSetDepthTestEnableEXT");
		vkCmdSetDepthTestEnableEXT(commandBuffer, depthTestEnable);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void CmdSetDepthWriteEnableEXT(VulkanHandle<VkCommandBuffer> commandBuffer, VkBool32 depthWriteEnable)
	{
		if (vkCmdSetDepthWriteEnableEXT == null) throw new VVK.FunctionNotLoadedException("vkCmdSetDepthWriteEnableEXT");
		vkCmdSetDepthWriteEnableEXT(commandBuffer, depthWriteEnable);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void CmdSetDepthCompareOpEXT(VulkanHandle<VkCommandBuffer> commandBuffer, VkCompareOp depthCompareOp)
	{
		if (vkCmdSetDepthCompareOpEXT == null) throw new VVK.FunctionNotLoadedException("vkCmdSetDepthCompareOpEXT");
		vkCmdSetDepthCompareOpEXT(commandBuffer, depthCompareOp);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void CmdSetDepthBoundsTestEnableEXT(VulkanHandle<VkCommandBuffer> commandBuffer, VkBool32 depthBoundsTestEnable)
	{
		if (vkCmdSetDepthBoundsTestEnableEXT == null) throw new VVK.FunctionNotLoadedException("vkCmdSetDepthBoundsTestEnableEXT");
		vkCmdSetDepthBoundsTestEnableEXT(commandBuffer, depthBoundsTestEnable);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void CmdSetStencilTestEnableEXT(VulkanHandle<VkCommandBuffer> commandBuffer, VkBool32 stencilTestEnable)
	{
		if (vkCmdSetStencilTestEnableEXT == null) throw new VVK.FunctionNotLoadedException("vkCmdSetStencilTestEnableEXT");
		vkCmdSetStencilTestEnableEXT(commandBuffer, stencilTestEnable);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void CmdSetStencilOpEXT(VulkanHandle<VkCommandBuffer> commandBuffer, VkStencilFaceFlags faceMask, VkStencilOp failOp, VkStencilOp passOp, VkStencilOp depthFailOp, VkCompareOp compareOp)
	{
		if (vkCmdSetStencilOpEXT == null) throw new VVK.FunctionNotLoadedException("vkCmdSetStencilOpEXT");
		vkCmdSetStencilOpEXT(commandBuffer, faceMask, failOp, passOp, depthFailOp, compareOp);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public VkResult CreatePrivateDataSlotEXT(VulkanHandle<VkDevice> device, VkPrivateDataSlotCreateInfoEXT* pCreateInfo, VkAllocationCallbacks* pAllocator, VulkanHandle<VkPrivateDataSlotEXT>* pPrivateDataSlot)
	{
		if (vkCreatePrivateDataSlotEXT == null) throw new VVK.FunctionNotLoadedException("vkCreatePrivateDataSlotEXT");
		return vkCreatePrivateDataSlotEXT(device, pCreateInfo, pAllocator, pPrivateDataSlot);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void DestroyPrivateDataSlotEXT(VulkanHandle<VkDevice> device, VulkanHandle<VkPrivateDataSlotEXT> privateDataSlot, VkAllocationCallbacks* pAllocator)
	{
		if (vkDestroyPrivateDataSlotEXT == null) throw new VVK.FunctionNotLoadedException("vkDestroyPrivateDataSlotEXT");
		vkDestroyPrivateDataSlotEXT(device, privateDataSlot, pAllocator);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public VkResult SetPrivateDataEXT(VulkanHandle<VkDevice> device, VkObjectType objectType, ulong objectHandle, VulkanHandle<VkPrivateDataSlotEXT> privateDataSlot, ulong data)
	{
		if (vkSetPrivateDataEXT == null) throw new VVK.FunctionNotLoadedException("vkSetPrivateDataEXT");
		return vkSetPrivateDataEXT(device, objectType, objectHandle, privateDataSlot, data);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void GetPrivateDataEXT(VulkanHandle<VkDevice> device, VkObjectType objectType, ulong objectHandle, VulkanHandle<VkPrivateDataSlotEXT> privateDataSlot, ulong* pData)
	{
		if (vkGetPrivateDataEXT == null) throw new VVK.FunctionNotLoadedException("vkGetPrivateDataEXT");
		vkGetPrivateDataEXT(device, objectType, objectHandle, privateDataSlot, pData);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void CmdCopyBuffer2KHR(VulkanHandle<VkCommandBuffer> commandBuffer, VkCopyBufferInfo2KHR* pCopyBufferInfo)
	{
		if (vkCmdCopyBuffer2KHR == null) throw new VVK.FunctionNotLoadedException("vkCmdCopyBuffer2KHR");
		vkCmdCopyBuffer2KHR(commandBuffer, pCopyBufferInfo);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void CmdCopyImage2KHR(VulkanHandle<VkCommandBuffer> commandBuffer, VkCopyImageInfo2KHR* pCopyImageInfo)
	{
		if (vkCmdCopyImage2KHR == null) throw new VVK.FunctionNotLoadedException("vkCmdCopyImage2KHR");
		vkCmdCopyImage2KHR(commandBuffer, pCopyImageInfo);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void CmdBlitImage2KHR(VulkanHandle<VkCommandBuffer> commandBuffer, VkBlitImageInfo2KHR* pBlitImageInfo)
	{
		if (vkCmdBlitImage2KHR == null) throw new VVK.FunctionNotLoadedException("vkCmdBlitImage2KHR");
		vkCmdBlitImage2KHR(commandBuffer, pBlitImageInfo);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void CmdCopyBufferToImage2KHR(VulkanHandle<VkCommandBuffer> commandBuffer, VkCopyBufferToImageInfo2KHR* pCopyBufferToImageInfo)
	{
		if (vkCmdCopyBufferToImage2KHR == null) throw new VVK.FunctionNotLoadedException("vkCmdCopyBufferToImage2KHR");
		vkCmdCopyBufferToImage2KHR(commandBuffer, pCopyBufferToImageInfo);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void CmdCopyImageToBuffer2KHR(VulkanHandle<VkCommandBuffer> commandBuffer, VkCopyImageToBufferInfo2KHR* pCopyImageToBufferInfo)
	{
		if (vkCmdCopyImageToBuffer2KHR == null) throw new VVK.FunctionNotLoadedException("vkCmdCopyImageToBuffer2KHR");
		vkCmdCopyImageToBuffer2KHR(commandBuffer, pCopyImageToBufferInfo);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void CmdResolveImage2KHR(VulkanHandle<VkCommandBuffer> commandBuffer, VkResolveImageInfo2KHR* pResolveImageInfo)
	{
		if (vkCmdResolveImage2KHR == null) throw new VVK.FunctionNotLoadedException("vkCmdResolveImage2KHR");
		vkCmdResolveImage2KHR(commandBuffer, pResolveImageInfo);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void CmdSetFragmentShadingRateKHR(VulkanHandle<VkCommandBuffer> commandBuffer, VkExtent2D* pFragmentSize, VkFragmentShadingRateCombinerOpKHR* combinerOps)
	{
		if (vkCmdSetFragmentShadingRateKHR == null) throw new VVK.FunctionNotLoadedException("vkCmdSetFragmentShadingRateKHR");
		vkCmdSetFragmentShadingRateKHR(commandBuffer, pFragmentSize, combinerOps);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void CmdSetFragmentShadingRateEnumNV(VulkanHandle<VkCommandBuffer> commandBuffer, VkFragmentShadingRateNV shadingRate, VkFragmentShadingRateCombinerOpKHR* combinerOps)
	{
		if (vkCmdSetFragmentShadingRateEnumNV == null) throw new VVK.FunctionNotLoadedException("vkCmdSetFragmentShadingRateEnumNV");
		vkCmdSetFragmentShadingRateEnumNV(commandBuffer, shadingRate, combinerOps);
	}

}


} // namespace Vulkan

