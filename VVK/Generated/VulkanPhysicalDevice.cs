/*
 * MIT License - Copyright(c) 2020 Sean Moss
 * This file is subject to the terms and conditions of the MIT License, the text of which can be found in the 'LICENSE'
 * file at the root of this repository, or online at<https://opensource.org/licenses/MIT>.
 */

/// This file was generated by VVKGen. Edits to this file will be lost on next generation.

using System;
using System.Runtime.InteropServices;
using System.Runtime.CompilerServices;


namespace VVK
{

public unsafe sealed partial class VulkanPhysicalDevice
{
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void GetProperties(Vk.PhysicalDeviceProperties* pProperties)
		=> Parent.Functions.vkGetPhysicalDeviceProperties(Handle, pProperties);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void GetQueueFamilyProperties(uint* pQueueFamilyPropertyCount, Vk.QueueFamilyProperties* pQueueFamilyProperties)
		=> Parent.Functions.vkGetPhysicalDeviceQueueFamilyProperties(Handle, pQueueFamilyPropertyCount, pQueueFamilyProperties);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void GetMemoryProperties(Vk.PhysicalDeviceMemoryProperties* pMemoryProperties)
		=> Parent.Functions.vkGetPhysicalDeviceMemoryProperties(Handle, pMemoryProperties);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void GetFeatures(Vk.PhysicalDeviceFeatures* pFeatures)
		=> Parent.Functions.vkGetPhysicalDeviceFeatures(Handle, pFeatures);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void GetFormatProperties(Vk.Format format, Vk.FormatProperties* pFormatProperties)
		=> Parent.Functions.vkGetPhysicalDeviceFormatProperties(Handle, format, pFormatProperties);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result GetImageFormatProperties(Vk.Format format, Vk.ImageType type, Vk.ImageTiling tiling, Vk.ImageUsageFlags usage, Vk.ImageCreateFlags flags, Vk.ImageFormatProperties* pImageFormatProperties)
		=> Parent.Functions.vkGetPhysicalDeviceImageFormatProperties(Handle, format, type, tiling, usage, flags, pImageFormatProperties);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result CreateDevice(Vk.DeviceCreateInfo* pCreateInfo, Vk.AllocationCallbacks* pAllocator, Vk.Device* pDevice)
		=> Parent.Functions.vkCreateDevice(Handle, pCreateInfo, pAllocator, pDevice);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result EnumerateDeviceLayerProperties(uint* pPropertyCount, Vk.LayerProperties* pProperties)
		=> Parent.Functions.vkEnumerateDeviceLayerProperties(Handle, pPropertyCount, pProperties);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result EnumerateDeviceExtensionProperties(byte* pLayerName, uint* pPropertyCount, Vk.ExtensionProperties* pProperties)
		=> Parent.Functions.vkEnumerateDeviceExtensionProperties(Handle, pLayerName, pPropertyCount, pProperties);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void GetSparseImageFormatProperties(Vk.Format format, Vk.ImageType type, Vk.SampleCountFlags samples, Vk.ImageUsageFlags usage, Vk.ImageTiling tiling, uint* pPropertyCount, Vk.SparseImageFormatProperties* pProperties)
		=> Parent.Functions.vkGetPhysicalDeviceSparseImageFormatProperties(Handle, format, type, samples, usage, tiling, pPropertyCount, pProperties);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result GetDisplayPropertiesKHR(uint* pPropertyCount, Vk.KHR.DisplayProperties* pProperties)
		=> Parent.Functions.vkGetPhysicalDeviceDisplayPropertiesKHR(Handle, pPropertyCount, pProperties);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result GetDisplayPlanePropertiesKHR(uint* pPropertyCount, Vk.KHR.DisplayPlaneProperties* pProperties)
		=> Parent.Functions.vkGetPhysicalDeviceDisplayPlanePropertiesKHR(Handle, pPropertyCount, pProperties);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result GetDisplayPlaneSupportedDisplaysKHR(uint planeIndex, uint* pDisplayCount, Vk.KHR.Display* pDisplays)
		=> Parent.Functions.vkGetDisplayPlaneSupportedDisplaysKHR(Handle, planeIndex, pDisplayCount, pDisplays);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result GetDisplayModePropertiesKHR(Vk.KHR.Display display, uint* pPropertyCount, Vk.KHR.DisplayModeProperties* pProperties)
		=> Parent.Functions.vkGetDisplayModePropertiesKHR(Handle, display, pPropertyCount, pProperties);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result CreateDisplayModeKHR(Vk.KHR.Display display, Vk.KHR.DisplayModeCreateInfo* pCreateInfo, Vk.AllocationCallbacks* pAllocator, Vk.KHR.DisplayMode* pMode)
		=> Parent.Functions.vkCreateDisplayModeKHR(Handle, display, pCreateInfo, pAllocator, pMode);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result GetDisplayPlaneCapabilitiesKHR(Vk.KHR.DisplayMode mode, uint planeIndex, Vk.KHR.DisplayPlaneCapabilities* pCapabilities)
		=> Parent.Functions.vkGetDisplayPlaneCapabilitiesKHR(Handle, mode, planeIndex, pCapabilities);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result GetSurfaceSupportKHR(uint queueFamilyIndex, Vk.KHR.Surface surface, Vk.Bool32* pSupported)
		=> Parent.Functions.vkGetPhysicalDeviceSurfaceSupportKHR(Handle, queueFamilyIndex, surface, pSupported);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result GetSurfaceCapabilitiesKHR(Vk.KHR.Surface surface, Vk.KHR.SurfaceCapabilities* pSurfaceCapabilities)
		=> Parent.Functions.vkGetPhysicalDeviceSurfaceCapabilitiesKHR(Handle, surface, pSurfaceCapabilities);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result GetSurfaceFormatsKHR(Vk.KHR.Surface surface, uint* pSurfaceFormatCount, Vk.KHR.SurfaceFormat* pSurfaceFormats)
		=> Parent.Functions.vkGetPhysicalDeviceSurfaceFormatsKHR(Handle, surface, pSurfaceFormatCount, pSurfaceFormats);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result GetSurfacePresentModesKHR(Vk.KHR.Surface surface, uint* pPresentModeCount, Vk.KHR.PresentMode* pPresentModes)
		=> Parent.Functions.vkGetPhysicalDeviceSurfacePresentModesKHR(Handle, surface, pPresentModeCount, pPresentModes);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Bool32 GetWaylandPresentationSupportKHR(uint queueFamilyIndex, void* display)
		=> Parent.Functions.vkGetPhysicalDeviceWaylandPresentationSupportKHR(Handle, queueFamilyIndex, display);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Bool32 GetWin32PresentationSupportKHR(uint queueFamilyIndex)
		=> Parent.Functions.vkGetPhysicalDeviceWin32PresentationSupportKHR(Handle, queueFamilyIndex);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Bool32 GetXlibPresentationSupportKHR(uint queueFamilyIndex, void* dpy, ulong visualID)
		=> Parent.Functions.vkGetPhysicalDeviceXlibPresentationSupportKHR(Handle, queueFamilyIndex, dpy, visualID);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Bool32 GetXcbPresentationSupportKHR(uint queueFamilyIndex, void* connection, uint visual_id)
		=> Parent.Functions.vkGetPhysicalDeviceXcbPresentationSupportKHR(Handle, queueFamilyIndex, connection, visual_id);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Bool32 GetDirectFBPresentationSupportEXT(uint queueFamilyIndex, void* dfb)
		=> Parent.Functions.vkGetPhysicalDeviceDirectFBPresentationSupportEXT(Handle, queueFamilyIndex, dfb);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result GetExternalImageFormatPropertiesNV(Vk.Format format, Vk.ImageType type, Vk.ImageTiling tiling, Vk.ImageUsageFlags usage, Vk.ImageCreateFlags flags, Vk.NV.ExternalMemoryHandleTypeFlags externalHandleType, Vk.NV.ExternalImageFormatProperties* pExternalImageFormatProperties)
		=> Parent.Functions.vkGetPhysicalDeviceExternalImageFormatPropertiesNV(Handle, format, type, tiling, usage, flags, externalHandleType, pExternalImageFormatProperties);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void GetFeatures2(Vk.PhysicalDeviceFeatures2* pFeatures)
		=> Parent.Functions.vkGetPhysicalDeviceFeatures2(Handle, pFeatures);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void GetFeatures2KHR(Vk.PhysicalDeviceFeatures2* pFeatures)
		=> Parent.Functions.vkGetPhysicalDeviceFeatures2KHR(Handle, pFeatures);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void GetProperties2(Vk.PhysicalDeviceProperties2* pProperties)
		=> Parent.Functions.vkGetPhysicalDeviceProperties2(Handle, pProperties);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void GetProperties2KHR(Vk.PhysicalDeviceProperties2* pProperties)
		=> Parent.Functions.vkGetPhysicalDeviceProperties2KHR(Handle, pProperties);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void GetFormatProperties2(Vk.Format format, Vk.FormatProperties2* pFormatProperties)
		=> Parent.Functions.vkGetPhysicalDeviceFormatProperties2(Handle, format, pFormatProperties);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void GetFormatProperties2KHR(Vk.Format format, Vk.FormatProperties2* pFormatProperties)
		=> Parent.Functions.vkGetPhysicalDeviceFormatProperties2KHR(Handle, format, pFormatProperties);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result GetImageFormatProperties2(Vk.PhysicalDeviceImageFormatInfo2* pImageFormatInfo, Vk.ImageFormatProperties2* pImageFormatProperties)
		=> Parent.Functions.vkGetPhysicalDeviceImageFormatProperties2(Handle, pImageFormatInfo, pImageFormatProperties);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result GetImageFormatProperties2KHR(Vk.PhysicalDeviceImageFormatInfo2* pImageFormatInfo, Vk.ImageFormatProperties2* pImageFormatProperties)
		=> Parent.Functions.vkGetPhysicalDeviceImageFormatProperties2KHR(Handle, pImageFormatInfo, pImageFormatProperties);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void GetQueueFamilyProperties2(uint* pQueueFamilyPropertyCount, Vk.QueueFamilyProperties2* pQueueFamilyProperties)
		=> Parent.Functions.vkGetPhysicalDeviceQueueFamilyProperties2(Handle, pQueueFamilyPropertyCount, pQueueFamilyProperties);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void GetQueueFamilyProperties2KHR(uint* pQueueFamilyPropertyCount, Vk.QueueFamilyProperties2* pQueueFamilyProperties)
		=> Parent.Functions.vkGetPhysicalDeviceQueueFamilyProperties2KHR(Handle, pQueueFamilyPropertyCount, pQueueFamilyProperties);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void GetMemoryProperties2(Vk.PhysicalDeviceMemoryProperties2* pMemoryProperties)
		=> Parent.Functions.vkGetPhysicalDeviceMemoryProperties2(Handle, pMemoryProperties);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void GetMemoryProperties2KHR(Vk.PhysicalDeviceMemoryProperties2* pMemoryProperties)
		=> Parent.Functions.vkGetPhysicalDeviceMemoryProperties2KHR(Handle, pMemoryProperties);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void GetSparseImageFormatProperties2(Vk.PhysicalDeviceSparseImageFormatInfo2* pFormatInfo, uint* pPropertyCount, Vk.SparseImageFormatProperties2* pProperties)
		=> Parent.Functions.vkGetPhysicalDeviceSparseImageFormatProperties2(Handle, pFormatInfo, pPropertyCount, pProperties);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void GetSparseImageFormatProperties2KHR(Vk.PhysicalDeviceSparseImageFormatInfo2* pFormatInfo, uint* pPropertyCount, Vk.SparseImageFormatProperties2* pProperties)
		=> Parent.Functions.vkGetPhysicalDeviceSparseImageFormatProperties2KHR(Handle, pFormatInfo, pPropertyCount, pProperties);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void GetExternalBufferProperties(Vk.PhysicalDeviceExternalBufferInfo* pExternalBufferInfo, Vk.ExternalBufferProperties* pExternalBufferProperties)
		=> Parent.Functions.vkGetPhysicalDeviceExternalBufferProperties(Handle, pExternalBufferInfo, pExternalBufferProperties);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void GetExternalBufferPropertiesKHR(Vk.PhysicalDeviceExternalBufferInfo* pExternalBufferInfo, Vk.ExternalBufferProperties* pExternalBufferProperties)
		=> Parent.Functions.vkGetPhysicalDeviceExternalBufferPropertiesKHR(Handle, pExternalBufferInfo, pExternalBufferProperties);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void GetExternalSemaphoreProperties(Vk.PhysicalDeviceExternalSemaphoreInfo* pExternalSemaphoreInfo, Vk.ExternalSemaphoreProperties* pExternalSemaphoreProperties)
		=> Parent.Functions.vkGetPhysicalDeviceExternalSemaphoreProperties(Handle, pExternalSemaphoreInfo, pExternalSemaphoreProperties);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void GetExternalSemaphorePropertiesKHR(Vk.PhysicalDeviceExternalSemaphoreInfo* pExternalSemaphoreInfo, Vk.ExternalSemaphoreProperties* pExternalSemaphoreProperties)
		=> Parent.Functions.vkGetPhysicalDeviceExternalSemaphorePropertiesKHR(Handle, pExternalSemaphoreInfo, pExternalSemaphoreProperties);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void GetExternalFenceProperties(Vk.PhysicalDeviceExternalFenceInfo* pExternalFenceInfo, Vk.ExternalFenceProperties* pExternalFenceProperties)
		=> Parent.Functions.vkGetPhysicalDeviceExternalFenceProperties(Handle, pExternalFenceInfo, pExternalFenceProperties);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void GetExternalFencePropertiesKHR(Vk.PhysicalDeviceExternalFenceInfo* pExternalFenceInfo, Vk.ExternalFenceProperties* pExternalFenceProperties)
		=> Parent.Functions.vkGetPhysicalDeviceExternalFencePropertiesKHR(Handle, pExternalFenceInfo, pExternalFenceProperties);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result ReleaseDisplayEXT(Vk.KHR.Display display)
		=> Parent.Functions.vkReleaseDisplayEXT(Handle, display);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result AcquireXlibDisplayEXT(void* dpy, Vk.KHR.Display display)
		=> Parent.Functions.vkAcquireXlibDisplayEXT(Handle, dpy, display);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result GetRandROutputDisplayEXT(void* dpy, ulong rrOutput, Vk.KHR.Display* pDisplay)
		=> Parent.Functions.vkGetRandROutputDisplayEXT(Handle, dpy, rrOutput, pDisplay);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result GetSurfaceCapabilities2EXT(Vk.KHR.Surface surface, Vk.EXT.SurfaceCapabilities2* pSurfaceCapabilities)
		=> Parent.Functions.vkGetPhysicalDeviceSurfaceCapabilities2EXT(Handle, surface, pSurfaceCapabilities);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result GetPresentRectanglesKHR(Vk.KHR.Surface surface, uint* pRectCount, Vk.Rect2D* pRects)
		=> Parent.Functions.vkGetPhysicalDevicePresentRectanglesKHR(Handle, surface, pRectCount, pRects);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void GetMultisamplePropertiesEXT(Vk.SampleCountFlags samples, Vk.EXT.MultisampleProperties* pMultisampleProperties)
		=> Parent.Functions.vkGetPhysicalDeviceMultisamplePropertiesEXT(Handle, samples, pMultisampleProperties);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result GetSurfaceCapabilities2KHR(Vk.KHR.PhysicalDeviceSurfaceInfo2* pSurfaceInfo, Vk.KHR.SurfaceCapabilities2* pSurfaceCapabilities)
		=> Parent.Functions.vkGetPhysicalDeviceSurfaceCapabilities2KHR(Handle, pSurfaceInfo, pSurfaceCapabilities);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result GetSurfaceFormats2KHR(Vk.KHR.PhysicalDeviceSurfaceInfo2* pSurfaceInfo, uint* pSurfaceFormatCount, Vk.KHR.SurfaceFormat2* pSurfaceFormats)
		=> Parent.Functions.vkGetPhysicalDeviceSurfaceFormats2KHR(Handle, pSurfaceInfo, pSurfaceFormatCount, pSurfaceFormats);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result GetDisplayProperties2KHR(uint* pPropertyCount, Vk.KHR.DisplayProperties2* pProperties)
		=> Parent.Functions.vkGetPhysicalDeviceDisplayProperties2KHR(Handle, pPropertyCount, pProperties);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result GetDisplayPlaneProperties2KHR(uint* pPropertyCount, Vk.KHR.DisplayPlaneProperties2* pProperties)
		=> Parent.Functions.vkGetPhysicalDeviceDisplayPlaneProperties2KHR(Handle, pPropertyCount, pProperties);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result GetDisplayModeProperties2KHR(Vk.KHR.Display display, uint* pPropertyCount, Vk.KHR.DisplayModeProperties2* pProperties)
		=> Parent.Functions.vkGetDisplayModeProperties2KHR(Handle, display, pPropertyCount, pProperties);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result GetDisplayPlaneCapabilities2KHR(Vk.KHR.DisplayPlaneInfo2* pDisplayPlaneInfo, Vk.KHR.DisplayPlaneCapabilities2* pCapabilities)
		=> Parent.Functions.vkGetDisplayPlaneCapabilities2KHR(Handle, pDisplayPlaneInfo, pCapabilities);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result GetCalibrateableTimeDomainsEXT(uint* pTimeDomainCount, Vk.EXT.TimeDomain* pTimeDomains)
		=> Parent.Functions.vkGetPhysicalDeviceCalibrateableTimeDomainsEXT(Handle, pTimeDomainCount, pTimeDomains);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result GetCooperativeMatrixPropertiesNV(uint* pPropertyCount, Vk.NV.CooperativeMatrixProperties* pProperties)
		=> Parent.Functions.vkGetPhysicalDeviceCooperativeMatrixPropertiesNV(Handle, pPropertyCount, pProperties);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result GetSurfacePresentModes2EXT(Vk.KHR.PhysicalDeviceSurfaceInfo2* pSurfaceInfo, uint* pPresentModeCount, Vk.KHR.PresentMode* pPresentModes)
		=> Parent.Functions.vkGetPhysicalDeviceSurfacePresentModes2EXT(Handle, pSurfaceInfo, pPresentModeCount, pPresentModes);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result EnumeratePhysicalDeviceQueueFamilyPerformanceQueryCountersKHR(uint queueFamilyIndex, uint* pCounterCount, Vk.KHR.PerformanceCounter* pCounters, Vk.KHR.PerformanceCounterDescription* pCounterDescriptions)
		=> Parent.Functions.vkEnumeratePhysicalDeviceQueueFamilyPerformanceQueryCountersKHR(Handle, queueFamilyIndex, pCounterCount, pCounters, pCounterDescriptions);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void GetQueueFamilyPerformanceQueryPassesKHR(Vk.KHR.QueryPoolPerformanceCreateInfo* pPerformanceQueryCreateInfo, uint* pNumPasses)
		=> Parent.Functions.vkGetPhysicalDeviceQueueFamilyPerformanceQueryPassesKHR(Handle, pPerformanceQueryCreateInfo, pNumPasses);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result GetSupportedFramebufferMixedSamplesCombinationsNV(uint* pCombinationCount, Vk.NV.FramebufferMixedSamplesCombination* pCombinations)
		=> Parent.Functions.vkGetPhysicalDeviceSupportedFramebufferMixedSamplesCombinationsNV(Handle, pCombinationCount, pCombinations);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result GetToolPropertiesEXT(uint* pToolCount, Vk.EXT.PhysicalDeviceToolProperties* pToolProperties)
		=> Parent.Functions.vkGetPhysicalDeviceToolPropertiesEXT(Handle, pToolCount, pToolProperties);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result GetFragmentShadingRatesKHR(uint* pFragmentShadingRateCount, Vk.KHR.PhysicalDeviceFragmentShadingRate* pFragmentShadingRates)
		=> Parent.Functions.vkGetPhysicalDeviceFragmentShadingRatesKHR(Handle, pFragmentShadingRateCount, pFragmentShadingRates);

}

} // namespace VVK
