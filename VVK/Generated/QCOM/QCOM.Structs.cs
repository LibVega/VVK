/*
 * MIT License - Copyright(c) 2020 Sean Moss
 * This file is subject to the terms and conditions of the MIT License, the text of which can be found in the 'LICENSE'
 * file at the root of this repository, or online at<https://opensource.org/licenses/MIT>.
 */

/// This file was generated by VVKGen. Edits to this file will be lost on next generation.

using System;
using System.Runtime.InteropServices;
using System.Runtime.CompilerServices;


namespace Vk.QCOM
{

[StructLayout(LayoutKind.Sequential)]
public unsafe partial struct RenderPassTransformBeginInfo : IEquatable<RenderPassTransformBeginInfo>
{
	public const Vk.StructureType TYPE = Vk.StructureType.RenderPassTransformBeginInfoQCOM;

	public Vk.StructureType sType;
	public void* pNext;
	public Vk.KHR.SurfaceTransformFlags Transform;
	public RenderPassTransformBeginInfo(
		in Vk.KHR.SurfaceTransformFlags transform = default
	) {
		sType = TYPE;
		pNext = null;
		Transform = transform;
	}


	public readonly override bool Equals(object? obj) => (obj is RenderPassTransformBeginInfo o) && (this == o);
	readonly bool IEquatable<RenderPassTransformBeginInfo>.Equals(RenderPassTransformBeginInfo obj) => (this == obj);
	[MethodImpl(MethodImplOptions.AggressiveOptimization)]
	public readonly override int GetHashCode()
	{
		return
			sType.GetHashCode() ^ ((ulong)pNext).GetHashCode() ^ Transform.GetHashCode()
			;
	}

	[MethodImpl(MethodImplOptions.AggressiveOptimization)]
	public static bool operator == (in RenderPassTransformBeginInfo l, in RenderPassTransformBeginInfo r)
	{
		return
			(l.sType == r.sType) && (l.pNext == r.pNext) && (l.Transform == r.Transform)
			;
	}

	[MethodImpl(MethodImplOptions.AggressiveOptimization)]
	public static bool operator != (in RenderPassTransformBeginInfo l, in RenderPassTransformBeginInfo r)
	{
		return
			(l.sType != r.sType) || (l.pNext != r.pNext) || (l.Transform != r.Transform)
			;
	}


	/// <summary>Creates a new RenderPassTransformBeginInfo value with the correct default fields.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void New(out RenderPassTransformBeginInfo value) => value = new() { sType = TYPE };
}

[StructLayout(LayoutKind.Sequential)]
public unsafe partial struct CommandBufferInheritanceRenderPassTransformInfo : IEquatable<CommandBufferInheritanceRenderPassTransformInfo>
{
	public const Vk.StructureType TYPE = Vk.StructureType.CommandBufferInheritanceRenderPassTransformInfoQCOM;

	public Vk.StructureType sType;
	public void* pNext;
	public Vk.KHR.SurfaceTransformFlags Transform;
	public Vk.Rect2D RenderArea;
	public CommandBufferInheritanceRenderPassTransformInfo(
		in Vk.KHR.SurfaceTransformFlags transform = default,
		in Vk.Rect2D renderArea = default
	) {
		sType = TYPE;
		pNext = null;
		Transform = transform;
		RenderArea = renderArea;
	}


	public readonly override bool Equals(object? obj) => (obj is CommandBufferInheritanceRenderPassTransformInfo o) && (this == o);
	readonly bool IEquatable<CommandBufferInheritanceRenderPassTransformInfo>.Equals(CommandBufferInheritanceRenderPassTransformInfo obj) => (this == obj);
	[MethodImpl(MethodImplOptions.AggressiveOptimization)]
	public readonly override int GetHashCode()
	{
		return
			sType.GetHashCode() ^ ((ulong)pNext).GetHashCode() ^ Transform.GetHashCode() ^ RenderArea.GetHashCode()
			;
	}

	[MethodImpl(MethodImplOptions.AggressiveOptimization)]
	public static bool operator == (in CommandBufferInheritanceRenderPassTransformInfo l, in CommandBufferInheritanceRenderPassTransformInfo r)
	{
		return
			(l.sType == r.sType) && (l.pNext == r.pNext) && (l.Transform == r.Transform) && (l.RenderArea == r.RenderArea)
			;
	}

	[MethodImpl(MethodImplOptions.AggressiveOptimization)]
	public static bool operator != (in CommandBufferInheritanceRenderPassTransformInfo l, in CommandBufferInheritanceRenderPassTransformInfo r)
	{
		return
			(l.sType != r.sType) || (l.pNext != r.pNext) || (l.Transform != r.Transform) || (l.RenderArea != r.RenderArea)
			;
	}


	/// <summary>Creates a new CommandBufferInheritanceRenderPassTransformInfo value with the correct default fields.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void New(out CommandBufferInheritanceRenderPassTransformInfo value) => value = new() { sType = TYPE };
}

} // namespace Vk.QCOM
