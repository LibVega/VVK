/*
 * MIT License - Copyright(c) 2020 Sean Moss
 * This file is subject to the terms and conditions of the MIT License, the text of which can be found in the 'LICENSE'
 * file at the root of this repository, or online at<https://opensource.org/licenses/MIT>.
 */

/// This file was generated by VVKGen. Edits to this file will be lost on next generation.

using System;
using System.Runtime.InteropServices;
using System.Runtime.CompilerServices;


namespace VVK.Vk
{

[StructLayout(LayoutKind.Explicit, Size = 8)]
public unsafe partial struct Instance
{
	public static readonly Instance Null = new(0);

	[FieldOffset(0)] public readonly void* Handle;
	public readonly ulong LongHandle => (ulong)Handle;

	public Instance(void* handle) => Handle = handle;
	public Instance(ulong handle) => Handle = (void*)handle;
	public Instance(IntPtr handle) => Handle = handle.ToPointer();
}

[StructLayout(LayoutKind.Explicit, Size = 8)]
public unsafe partial struct PhysicalDevice
{
	public static readonly PhysicalDevice Null = new(0);

	[FieldOffset(0)] public readonly void* Handle;
	public readonly ulong LongHandle => (ulong)Handle;

	public PhysicalDevice(void* handle) => Handle = handle;
	public PhysicalDevice(ulong handle) => Handle = (void*)handle;
	public PhysicalDevice(IntPtr handle) => Handle = handle.ToPointer();
}

[StructLayout(LayoutKind.Explicit, Size = 8)]
public unsafe partial struct Device
{
	public static readonly Device Null = new(0);

	[FieldOffset(0)] public readonly void* Handle;
	public readonly ulong LongHandle => (ulong)Handle;

	public Device(void* handle) => Handle = handle;
	public Device(ulong handle) => Handle = (void*)handle;
	public Device(IntPtr handle) => Handle = handle.ToPointer();
}

[StructLayout(LayoutKind.Explicit, Size = 8)]
public unsafe partial struct Queue
{
	public static readonly Queue Null = new(0);

	[FieldOffset(0)] public readonly void* Handle;
	public readonly ulong LongHandle => (ulong)Handle;

	public Queue(void* handle) => Handle = handle;
	public Queue(ulong handle) => Handle = (void*)handle;
	public Queue(IntPtr handle) => Handle = handle.ToPointer();
}

[StructLayout(LayoutKind.Explicit, Size = 8)]
public unsafe partial struct CommandBuffer
{
	public static readonly CommandBuffer Null = new(0);

	[FieldOffset(0)] public readonly void* Handle;
	public readonly ulong LongHandle => (ulong)Handle;

	public CommandBuffer(void* handle) => Handle = handle;
	public CommandBuffer(ulong handle) => Handle = (void*)handle;
	public CommandBuffer(IntPtr handle) => Handle = handle.ToPointer();
}

[StructLayout(LayoutKind.Explicit, Size = 8)]
public unsafe partial struct DeviceMemory
{
	public static readonly DeviceMemory Null = new(0);

	[FieldOffset(0)] public readonly void* Handle;
	public readonly ulong LongHandle => (ulong)Handle;

	public DeviceMemory(void* handle) => Handle = handle;
	public DeviceMemory(ulong handle) => Handle = (void*)handle;
	public DeviceMemory(IntPtr handle) => Handle = handle.ToPointer();
}

[StructLayout(LayoutKind.Explicit, Size = 8)]
public unsafe partial struct CommandPool
{
	public static readonly CommandPool Null = new(0);

	[FieldOffset(0)] public readonly void* Handle;
	public readonly ulong LongHandle => (ulong)Handle;

	public CommandPool(void* handle) => Handle = handle;
	public CommandPool(ulong handle) => Handle = (void*)handle;
	public CommandPool(IntPtr handle) => Handle = handle.ToPointer();
}

[StructLayout(LayoutKind.Explicit, Size = 8)]
public unsafe partial struct Buffer
{
	public static readonly Buffer Null = new(0);

	[FieldOffset(0)] public readonly void* Handle;
	public readonly ulong LongHandle => (ulong)Handle;

	public Buffer(void* handle) => Handle = handle;
	public Buffer(ulong handle) => Handle = (void*)handle;
	public Buffer(IntPtr handle) => Handle = handle.ToPointer();
}

[StructLayout(LayoutKind.Explicit, Size = 8)]
public unsafe partial struct BufferView
{
	public static readonly BufferView Null = new(0);

	[FieldOffset(0)] public readonly void* Handle;
	public readonly ulong LongHandle => (ulong)Handle;

	public BufferView(void* handle) => Handle = handle;
	public BufferView(ulong handle) => Handle = (void*)handle;
	public BufferView(IntPtr handle) => Handle = handle.ToPointer();
}

[StructLayout(LayoutKind.Explicit, Size = 8)]
public unsafe partial struct Image
{
	public static readonly Image Null = new(0);

	[FieldOffset(0)] public readonly void* Handle;
	public readonly ulong LongHandle => (ulong)Handle;

	public Image(void* handle) => Handle = handle;
	public Image(ulong handle) => Handle = (void*)handle;
	public Image(IntPtr handle) => Handle = handle.ToPointer();
}

[StructLayout(LayoutKind.Explicit, Size = 8)]
public unsafe partial struct ImageView
{
	public static readonly ImageView Null = new(0);

	[FieldOffset(0)] public readonly void* Handle;
	public readonly ulong LongHandle => (ulong)Handle;

	public ImageView(void* handle) => Handle = handle;
	public ImageView(ulong handle) => Handle = (void*)handle;
	public ImageView(IntPtr handle) => Handle = handle.ToPointer();
}

[StructLayout(LayoutKind.Explicit, Size = 8)]
public unsafe partial struct ShaderModule
{
	public static readonly ShaderModule Null = new(0);

	[FieldOffset(0)] public readonly void* Handle;
	public readonly ulong LongHandle => (ulong)Handle;

	public ShaderModule(void* handle) => Handle = handle;
	public ShaderModule(ulong handle) => Handle = (void*)handle;
	public ShaderModule(IntPtr handle) => Handle = handle.ToPointer();
}

[StructLayout(LayoutKind.Explicit, Size = 8)]
public unsafe partial struct Pipeline
{
	public static readonly Pipeline Null = new(0);

	[FieldOffset(0)] public readonly void* Handle;
	public readonly ulong LongHandle => (ulong)Handle;

	public Pipeline(void* handle) => Handle = handle;
	public Pipeline(ulong handle) => Handle = (void*)handle;
	public Pipeline(IntPtr handle) => Handle = handle.ToPointer();
}

[StructLayout(LayoutKind.Explicit, Size = 8)]
public unsafe partial struct PipelineLayout
{
	public static readonly PipelineLayout Null = new(0);

	[FieldOffset(0)] public readonly void* Handle;
	public readonly ulong LongHandle => (ulong)Handle;

	public PipelineLayout(void* handle) => Handle = handle;
	public PipelineLayout(ulong handle) => Handle = (void*)handle;
	public PipelineLayout(IntPtr handle) => Handle = handle.ToPointer();
}

[StructLayout(LayoutKind.Explicit, Size = 8)]
public unsafe partial struct Sampler
{
	public static readonly Sampler Null = new(0);

	[FieldOffset(0)] public readonly void* Handle;
	public readonly ulong LongHandle => (ulong)Handle;

	public Sampler(void* handle) => Handle = handle;
	public Sampler(ulong handle) => Handle = (void*)handle;
	public Sampler(IntPtr handle) => Handle = handle.ToPointer();
}

[StructLayout(LayoutKind.Explicit, Size = 8)]
public unsafe partial struct DescriptorSet
{
	public static readonly DescriptorSet Null = new(0);

	[FieldOffset(0)] public readonly void* Handle;
	public readonly ulong LongHandle => (ulong)Handle;

	public DescriptorSet(void* handle) => Handle = handle;
	public DescriptorSet(ulong handle) => Handle = (void*)handle;
	public DescriptorSet(IntPtr handle) => Handle = handle.ToPointer();
}

[StructLayout(LayoutKind.Explicit, Size = 8)]
public unsafe partial struct DescriptorSetLayout
{
	public static readonly DescriptorSetLayout Null = new(0);

	[FieldOffset(0)] public readonly void* Handle;
	public readonly ulong LongHandle => (ulong)Handle;

	public DescriptorSetLayout(void* handle) => Handle = handle;
	public DescriptorSetLayout(ulong handle) => Handle = (void*)handle;
	public DescriptorSetLayout(IntPtr handle) => Handle = handle.ToPointer();
}

[StructLayout(LayoutKind.Explicit, Size = 8)]
public unsafe partial struct DescriptorPool
{
	public static readonly DescriptorPool Null = new(0);

	[FieldOffset(0)] public readonly void* Handle;
	public readonly ulong LongHandle => (ulong)Handle;

	public DescriptorPool(void* handle) => Handle = handle;
	public DescriptorPool(ulong handle) => Handle = (void*)handle;
	public DescriptorPool(IntPtr handle) => Handle = handle.ToPointer();
}

[StructLayout(LayoutKind.Explicit, Size = 8)]
public unsafe partial struct Fence
{
	public static readonly Fence Null = new(0);

	[FieldOffset(0)] public readonly void* Handle;
	public readonly ulong LongHandle => (ulong)Handle;

	public Fence(void* handle) => Handle = handle;
	public Fence(ulong handle) => Handle = (void*)handle;
	public Fence(IntPtr handle) => Handle = handle.ToPointer();
}

[StructLayout(LayoutKind.Explicit, Size = 8)]
public unsafe partial struct Semaphore
{
	public static readonly Semaphore Null = new(0);

	[FieldOffset(0)] public readonly void* Handle;
	public readonly ulong LongHandle => (ulong)Handle;

	public Semaphore(void* handle) => Handle = handle;
	public Semaphore(ulong handle) => Handle = (void*)handle;
	public Semaphore(IntPtr handle) => Handle = handle.ToPointer();
}

[StructLayout(LayoutKind.Explicit, Size = 8)]
public unsafe partial struct Event
{
	public static readonly Event Null = new(0);

	[FieldOffset(0)] public readonly void* Handle;
	public readonly ulong LongHandle => (ulong)Handle;

	public Event(void* handle) => Handle = handle;
	public Event(ulong handle) => Handle = (void*)handle;
	public Event(IntPtr handle) => Handle = handle.ToPointer();
}

[StructLayout(LayoutKind.Explicit, Size = 8)]
public unsafe partial struct QueryPool
{
	public static readonly QueryPool Null = new(0);

	[FieldOffset(0)] public readonly void* Handle;
	public readonly ulong LongHandle => (ulong)Handle;

	public QueryPool(void* handle) => Handle = handle;
	public QueryPool(ulong handle) => Handle = (void*)handle;
	public QueryPool(IntPtr handle) => Handle = handle.ToPointer();
}

[StructLayout(LayoutKind.Explicit, Size = 8)]
public unsafe partial struct Framebuffer
{
	public static readonly Framebuffer Null = new(0);

	[FieldOffset(0)] public readonly void* Handle;
	public readonly ulong LongHandle => (ulong)Handle;

	public Framebuffer(void* handle) => Handle = handle;
	public Framebuffer(ulong handle) => Handle = (void*)handle;
	public Framebuffer(IntPtr handle) => Handle = handle.ToPointer();
}

[StructLayout(LayoutKind.Explicit, Size = 8)]
public unsafe partial struct RenderPass
{
	public static readonly RenderPass Null = new(0);

	[FieldOffset(0)] public readonly void* Handle;
	public readonly ulong LongHandle => (ulong)Handle;

	public RenderPass(void* handle) => Handle = handle;
	public RenderPass(ulong handle) => Handle = (void*)handle;
	public RenderPass(IntPtr handle) => Handle = handle.ToPointer();
}

[StructLayout(LayoutKind.Explicit, Size = 8)]
public unsafe partial struct PipelineCache
{
	public static readonly PipelineCache Null = new(0);

	[FieldOffset(0)] public readonly void* Handle;
	public readonly ulong LongHandle => (ulong)Handle;

	public PipelineCache(void* handle) => Handle = handle;
	public PipelineCache(ulong handle) => Handle = (void*)handle;
	public PipelineCache(IntPtr handle) => Handle = handle.ToPointer();
}

[StructLayout(LayoutKind.Explicit, Size = 8)]
public unsafe partial struct DescriptorUpdateTemplate
{
	public static readonly DescriptorUpdateTemplate Null = new(0);

	[FieldOffset(0)] public readonly void* Handle;
	public readonly ulong LongHandle => (ulong)Handle;

	public DescriptorUpdateTemplate(void* handle) => Handle = handle;
	public DescriptorUpdateTemplate(ulong handle) => Handle = (void*)handle;
	public DescriptorUpdateTemplate(IntPtr handle) => Handle = handle.ToPointer();
}

[StructLayout(LayoutKind.Explicit, Size = 8)]
public unsafe partial struct SamplerYcbcrConversion
{
	public static readonly SamplerYcbcrConversion Null = new(0);

	[FieldOffset(0)] public readonly void* Handle;
	public readonly ulong LongHandle => (ulong)Handle;

	public SamplerYcbcrConversion(void* handle) => Handle = handle;
	public SamplerYcbcrConversion(ulong handle) => Handle = (void*)handle;
	public SamplerYcbcrConversion(IntPtr handle) => Handle = handle.ToPointer();
}

} // namespace VVK.Vk
