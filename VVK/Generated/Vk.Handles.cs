/*
 * MIT License - Copyright(c) 2020 Sean Moss
 * This file is subject to the terms and conditions of the MIT License, the text of which can be found in the 'LICENSE'
 * file at the root of this repository, or online at<https://opensource.org/licenses/MIT>.
 */

/// This file was generated by VVKGen. Edits to this file will be lost on next generation.

using System;
using System.Runtime.InteropServices;
using System.Runtime.CompilerServices;


namespace Vk
{

public unsafe partial class Instance : IHandleType<Instance>
{
	public static readonly Instance Null = new(Vk.Handle<Instance>.Null, default);

	public readonly Vk.InstanceFunctionTable Functions;
	public readonly Handle<Instance> Handle;
	public bool IsValid => Handle.IsValid;

	public Instance(Vk.Handle<Instance> handle, Vk.Version apiVersion)
	{
		Functions = handle ? new(handle, apiVersion) : new();
		Handle = handle;
	}

	public override int GetHashCode() => Handle.GetHashCode();
	public override string? ToString() => $"[Instance 0x{(ulong)Handle:X16}]";
	public override bool Equals(object? o) => (o is Instance t) && (t.Handle == Handle);
	bool IEquatable<Instance>.Equals(Instance? other) => (other?.Handle ?? new()) == Handle;

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static implicit operator Vk.Handle<Instance> (Instance? handle) => handle?.Handle ?? new();
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static bool operator == (Instance? l, Instance? r) => (l?.Handle ?? new()) == (r?.Handle ?? new());
	public static bool operator != (Instance? l, Instance? r) => (l?.Handle ?? new()) == (r?.Handle ?? new());
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static implicit operator bool (Instance? handle) => handle?.Handle.IsValid ?? false;

	/// <summary>vkCreateInstance</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static Vk.Result CreateInstance(Vk.InstanceCreateInfo* pCreateInfo, Vk.AllocationCallbacks* pAllocator, Vk.Handle<Vk.Instance>* pInstance)
	{
		if (InstanceFunctionTable.vkCreateInstance == null) throw new Vk.Extras.FunctionNotLoadedException("vkCreateInstance");
		return InstanceFunctionTable.vkCreateInstance(pCreateInfo, pAllocator, pInstance);
	}

	/// <summary>vkCreateInstance</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static Vk.Result CreateInstance(Vk.InstanceCreateInfo* pCreateInfo, Vk.AllocationCallbacks* pAllocator, out Vk.Instance pInstance)
	{
		if (InstanceFunctionTable.vkCreateInstance == null) throw new Vk.Extras.FunctionNotLoadedException("vkCreateInstance");
		Vk.Version APIV = new(pCreateInfo->ApplicationInfo->ApiVersion);
		Vk.Handle<Vk.Instance> HANDLE;
		var RESULT = InstanceFunctionTable.vkCreateInstance(pCreateInfo, pAllocator, &HANDLE);
		pInstance = (RESULT == Result.Success) ? new(HANDLE, APIV) : Vk.Instance.Null;
		return RESULT;
	}

	/// <summary>vkCreateInstance</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static Vk.Result CreateInstance(in Vk.InstanceCreateInfo createInfo, in Vk.AllocationCallbacks allocator, out Vk.Handle<Vk.Instance> instance)
	{
		if (InstanceFunctionTable.vkCreateInstance == null) throw new Vk.Extras.FunctionNotLoadedException("vkCreateInstance");
		return InstanceFunctionTable.CreateInstance(createInfo, allocator, out instance);
	}

	/// <summary>vkCreateInstance</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static Vk.Result CreateInstance(in Vk.InstanceCreateInfo createInfo, in Vk.AllocationCallbacks allocator, out Vk.Instance pInstance)
	{
		if (InstanceFunctionTable.vkCreateInstance == null) throw new Vk.Extras.FunctionNotLoadedException("vkCreateInstance");
		Vk.Version APIV = new(createInfo.ApplicationInfo->ApiVersion);
		Vk.Handle<Vk.Instance> HANDLE;
		var RESULT = InstanceFunctionTable.CreateInstance(createInfo, allocator, out HANDLE);
		pInstance = (RESULT == Result.Success) ? new(HANDLE, APIV) : Vk.Instance.Null;
		return RESULT;
	}

	/// <summary>vkDestroyInstance</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void DestroyInstance(Vk.AllocationCallbacks* pAllocator)
	{
		if (Functions.vkDestroyInstance == null) throw new Vk.Extras.FunctionNotLoadedException("vkDestroyInstance");
		Functions.vkDestroyInstance(Handle, pAllocator);
	}

	/// <summary>vkDestroyInstance</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void DestroyInstance(in Vk.AllocationCallbacks allocator)
	{
		if (Functions.vkDestroyInstance == null) throw new Vk.Extras.FunctionNotLoadedException("vkDestroyInstance");
		Functions.DestroyInstance(Handle, allocator);
	}

	/// <summary>vkEnumeratePhysicalDevices</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result EnumeratePhysicalDevices(uint* pPhysicalDeviceCount, Vk.Handle<Vk.PhysicalDevice>* pPhysicalDevices)
	{
		if (Functions.vkEnumeratePhysicalDevices == null) throw new Vk.Extras.FunctionNotLoadedException("vkEnumeratePhysicalDevices");
		return Functions.vkEnumeratePhysicalDevices(Handle, pPhysicalDeviceCount, pPhysicalDevices);
	}

	/// <summary>vkEnumeratePhysicalDevices</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result EnumeratePhysicalDevices(out uint physicalDeviceCount, in Span<Vk.Handle<Vk.PhysicalDevice>> physicalDevices)
	{
		if (Functions.vkEnumeratePhysicalDevices == null) throw new Vk.Extras.FunctionNotLoadedException("vkEnumeratePhysicalDevices");
		return Functions.EnumeratePhysicalDevices(Handle, out physicalDeviceCount, physicalDevices);
	}

	/// <summary>vkGetDeviceProcAddr</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static delegate* unmanaged<void> GetDeviceProcAddr(Vk.Handle<Vk.Device> device, byte* pName)
	{
		if (InstanceFunctionTable.vkGetDeviceProcAddr == null) throw new Vk.Extras.FunctionNotLoadedException("vkGetDeviceProcAddr");
		return InstanceFunctionTable.vkGetDeviceProcAddr(device, pName);
	}

	/// <summary>vkGetDeviceProcAddr</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static delegate* unmanaged<void> GetDeviceProcAddr(Vk.Handle<Vk.Device> device, Vk.NativeString name)
	{
		if (InstanceFunctionTable.vkGetDeviceProcAddr == null) throw new Vk.Extras.FunctionNotLoadedException("vkGetDeviceProcAddr");
		return InstanceFunctionTable.GetDeviceProcAddr(device, name);
	}

	/// <summary>vkGetInstanceProcAddr</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static delegate* unmanaged<void> GetInstanceProcAddr(Vk.Handle<Vk.Instance> instance, byte* pName)
	{
		if (InstanceFunctionTable.vkGetInstanceProcAddr == null) throw new Vk.Extras.FunctionNotLoadedException("vkGetInstanceProcAddr");
		return InstanceFunctionTable.vkGetInstanceProcAddr(instance, pName);
	}

	/// <summary>vkGetInstanceProcAddr</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static delegate* unmanaged<void> GetInstanceProcAddr(Vk.Handle<Vk.Instance> instance, Vk.NativeString name)
	{
		if (InstanceFunctionTable.vkGetInstanceProcAddr == null) throw new Vk.Extras.FunctionNotLoadedException("vkGetInstanceProcAddr");
		return InstanceFunctionTable.GetInstanceProcAddr(instance, name);
	}

	/// <summary>vkEnumerateInstanceVersion</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static Vk.Result EnumerateInstanceVersion(uint* pApiVersion)
	{
		if (InstanceFunctionTable.vkEnumerateInstanceVersion == null) throw new Vk.Extras.FunctionNotLoadedException("vkEnumerateInstanceVersion");
		return InstanceFunctionTable.vkEnumerateInstanceVersion(pApiVersion);
	}

	/// <summary>vkEnumerateInstanceVersion</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static Vk.Result EnumerateInstanceVersion(out uint apiVersion)
	{
		if (InstanceFunctionTable.vkEnumerateInstanceVersion == null) throw new Vk.Extras.FunctionNotLoadedException("vkEnumerateInstanceVersion");
		return InstanceFunctionTable.EnumerateInstanceVersion(out apiVersion);
	}

	/// <summary>vkEnumerateInstanceLayerProperties</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static Vk.Result EnumerateInstanceLayerProperties(uint* pPropertyCount, Vk.LayerProperties* pProperties)
	{
		if (InstanceFunctionTable.vkEnumerateInstanceLayerProperties == null) throw new Vk.Extras.FunctionNotLoadedException("vkEnumerateInstanceLayerProperties");
		return InstanceFunctionTable.vkEnumerateInstanceLayerProperties(pPropertyCount, pProperties);
	}

	/// <summary>vkEnumerateInstanceLayerProperties</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static Vk.Result EnumerateInstanceLayerProperties(out uint propertyCount, in Span<Vk.LayerProperties> properties)
	{
		if (InstanceFunctionTable.vkEnumerateInstanceLayerProperties == null) throw new Vk.Extras.FunctionNotLoadedException("vkEnumerateInstanceLayerProperties");
		return InstanceFunctionTable.EnumerateInstanceLayerProperties(out propertyCount, properties);
	}

	/// <summary>vkEnumerateInstanceExtensionProperties</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static Vk.Result EnumerateInstanceExtensionProperties(byte* pLayerName, uint* pPropertyCount, Vk.ExtensionProperties* pProperties)
	{
		if (InstanceFunctionTable.vkEnumerateInstanceExtensionProperties == null) throw new Vk.Extras.FunctionNotLoadedException("vkEnumerateInstanceExtensionProperties");
		return InstanceFunctionTable.vkEnumerateInstanceExtensionProperties(pLayerName, pPropertyCount, pProperties);
	}

	/// <summary>vkEnumerateInstanceExtensionProperties</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static Vk.Result EnumerateInstanceExtensionProperties(Vk.NativeString layerName, out uint propertyCount, in Span<Vk.ExtensionProperties> properties)
	{
		if (InstanceFunctionTable.vkEnumerateInstanceExtensionProperties == null) throw new Vk.Extras.FunctionNotLoadedException("vkEnumerateInstanceExtensionProperties");
		return InstanceFunctionTable.EnumerateInstanceExtensionProperties(layerName, out propertyCount, properties);
	}

	/// <summary>vkCreateAndroidSurfaceKHR</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result CreateAndroidSurfaceKHR(Vk.KHR.AndroidSurfaceCreateInfo* pCreateInfo, Vk.AllocationCallbacks* pAllocator, Vk.Handle<Vk.KHR.Surface>* pSurface)
	{
		if (Functions.vkCreateAndroidSurfaceKHR == null) throw new Vk.Extras.FunctionNotLoadedException("vkCreateAndroidSurfaceKHR");
		return Functions.vkCreateAndroidSurfaceKHR(Handle, pCreateInfo, pAllocator, pSurface);
	}

	/// <summary>vkCreateAndroidSurfaceKHR</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result CreateAndroidSurfaceKHR(Vk.KHR.AndroidSurfaceCreateInfo* pCreateInfo, Vk.AllocationCallbacks* pAllocator, out Vk.KHR.Surface pSurface)
	{
		if (Functions.vkCreateAndroidSurfaceKHR == null) throw new Vk.Extras.FunctionNotLoadedException("vkCreateAndroidSurfaceKHR");
		Vk.Handle<Vk.KHR.Surface> HANDLE;
		var RESULT = Functions.vkCreateAndroidSurfaceKHR(Handle, pCreateInfo, pAllocator, &HANDLE);
		pSurface = (RESULT == Result.Success) ? new(this, HANDLE) : Vk.KHR.Surface.Null;
		return RESULT;
	}

	/// <summary>vkCreateAndroidSurfaceKHR</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result CreateAndroidSurfaceKHR(in Vk.KHR.AndroidSurfaceCreateInfo createInfo, in Vk.AllocationCallbacks allocator, out Vk.Handle<Vk.KHR.Surface> surface)
	{
		if (Functions.vkCreateAndroidSurfaceKHR == null) throw new Vk.Extras.FunctionNotLoadedException("vkCreateAndroidSurfaceKHR");
		return Functions.CreateAndroidSurfaceKHR(Handle, createInfo, allocator, out surface);
	}

	/// <summary>vkCreateAndroidSurfaceKHR</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result CreateAndroidSurfaceKHR(in Vk.KHR.AndroidSurfaceCreateInfo createInfo, in Vk.AllocationCallbacks allocator, out Vk.KHR.Surface pSurface)
	{
		if (Functions.vkCreateAndroidSurfaceKHR == null) throw new Vk.Extras.FunctionNotLoadedException("vkCreateAndroidSurfaceKHR");
		Vk.Handle<Vk.KHR.Surface> HANDLE;
		var RESULT = Functions.CreateAndroidSurfaceKHR(Handle, createInfo, allocator, out HANDLE);
		pSurface = (RESULT == Result.Success) ? new(this, HANDLE) : Vk.KHR.Surface.Null;
		return RESULT;
	}

	/// <summary>vkCreateDisplayPlaneSurfaceKHR</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result CreateDisplayPlaneSurfaceKHR(Vk.KHR.DisplaySurfaceCreateInfo* pCreateInfo, Vk.AllocationCallbacks* pAllocator, Vk.Handle<Vk.KHR.Surface>* pSurface)
	{
		if (Functions.vkCreateDisplayPlaneSurfaceKHR == null) throw new Vk.Extras.FunctionNotLoadedException("vkCreateDisplayPlaneSurfaceKHR");
		return Functions.vkCreateDisplayPlaneSurfaceKHR(Handle, pCreateInfo, pAllocator, pSurface);
	}

	/// <summary>vkCreateDisplayPlaneSurfaceKHR</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result CreateDisplayPlaneSurfaceKHR(Vk.KHR.DisplaySurfaceCreateInfo* pCreateInfo, Vk.AllocationCallbacks* pAllocator, out Vk.KHR.Surface pSurface)
	{
		if (Functions.vkCreateDisplayPlaneSurfaceKHR == null) throw new Vk.Extras.FunctionNotLoadedException("vkCreateDisplayPlaneSurfaceKHR");
		Vk.Handle<Vk.KHR.Surface> HANDLE;
		var RESULT = Functions.vkCreateDisplayPlaneSurfaceKHR(Handle, pCreateInfo, pAllocator, &HANDLE);
		pSurface = (RESULT == Result.Success) ? new(this, HANDLE) : Vk.KHR.Surface.Null;
		return RESULT;
	}

	/// <summary>vkCreateDisplayPlaneSurfaceKHR</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result CreateDisplayPlaneSurfaceKHR(in Vk.KHR.DisplaySurfaceCreateInfo createInfo, in Vk.AllocationCallbacks allocator, out Vk.Handle<Vk.KHR.Surface> surface)
	{
		if (Functions.vkCreateDisplayPlaneSurfaceKHR == null) throw new Vk.Extras.FunctionNotLoadedException("vkCreateDisplayPlaneSurfaceKHR");
		return Functions.CreateDisplayPlaneSurfaceKHR(Handle, createInfo, allocator, out surface);
	}

	/// <summary>vkCreateDisplayPlaneSurfaceKHR</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result CreateDisplayPlaneSurfaceKHR(in Vk.KHR.DisplaySurfaceCreateInfo createInfo, in Vk.AllocationCallbacks allocator, out Vk.KHR.Surface pSurface)
	{
		if (Functions.vkCreateDisplayPlaneSurfaceKHR == null) throw new Vk.Extras.FunctionNotLoadedException("vkCreateDisplayPlaneSurfaceKHR");
		Vk.Handle<Vk.KHR.Surface> HANDLE;
		var RESULT = Functions.CreateDisplayPlaneSurfaceKHR(Handle, createInfo, allocator, out HANDLE);
		pSurface = (RESULT == Result.Success) ? new(this, HANDLE) : Vk.KHR.Surface.Null;
		return RESULT;
	}

	/// <summary>vkCreateViSurfaceNN</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result CreateViSurfaceNN(Vk.NN.ViSurfaceCreateInfo* pCreateInfo, Vk.AllocationCallbacks* pAllocator, Vk.Handle<Vk.KHR.Surface>* pSurface)
	{
		if (Functions.vkCreateViSurfaceNN == null) throw new Vk.Extras.FunctionNotLoadedException("vkCreateViSurfaceNN");
		return Functions.vkCreateViSurfaceNN(Handle, pCreateInfo, pAllocator, pSurface);
	}

	/// <summary>vkCreateViSurfaceNN</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result CreateViSurfaceNN(Vk.NN.ViSurfaceCreateInfo* pCreateInfo, Vk.AllocationCallbacks* pAllocator, out Vk.KHR.Surface pSurface)
	{
		if (Functions.vkCreateViSurfaceNN == null) throw new Vk.Extras.FunctionNotLoadedException("vkCreateViSurfaceNN");
		Vk.Handle<Vk.KHR.Surface> HANDLE;
		var RESULT = Functions.vkCreateViSurfaceNN(Handle, pCreateInfo, pAllocator, &HANDLE);
		pSurface = (RESULT == Result.Success) ? new(this, HANDLE) : Vk.KHR.Surface.Null;
		return RESULT;
	}

	/// <summary>vkCreateViSurfaceNN</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result CreateViSurfaceNN(in Vk.NN.ViSurfaceCreateInfo createInfo, in Vk.AllocationCallbacks allocator, out Vk.Handle<Vk.KHR.Surface> surface)
	{
		if (Functions.vkCreateViSurfaceNN == null) throw new Vk.Extras.FunctionNotLoadedException("vkCreateViSurfaceNN");
		return Functions.CreateViSurfaceNN(Handle, createInfo, allocator, out surface);
	}

	/// <summary>vkCreateViSurfaceNN</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result CreateViSurfaceNN(in Vk.NN.ViSurfaceCreateInfo createInfo, in Vk.AllocationCallbacks allocator, out Vk.KHR.Surface pSurface)
	{
		if (Functions.vkCreateViSurfaceNN == null) throw new Vk.Extras.FunctionNotLoadedException("vkCreateViSurfaceNN");
		Vk.Handle<Vk.KHR.Surface> HANDLE;
		var RESULT = Functions.CreateViSurfaceNN(Handle, createInfo, allocator, out HANDLE);
		pSurface = (RESULT == Result.Success) ? new(this, HANDLE) : Vk.KHR.Surface.Null;
		return RESULT;
	}

	/// <summary>vkCreateWaylandSurfaceKHR</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result CreateWaylandSurfaceKHR(Vk.KHR.WaylandSurfaceCreateInfo* pCreateInfo, Vk.AllocationCallbacks* pAllocator, Vk.Handle<Vk.KHR.Surface>* pSurface)
	{
		if (Functions.vkCreateWaylandSurfaceKHR == null) throw new Vk.Extras.FunctionNotLoadedException("vkCreateWaylandSurfaceKHR");
		return Functions.vkCreateWaylandSurfaceKHR(Handle, pCreateInfo, pAllocator, pSurface);
	}

	/// <summary>vkCreateWaylandSurfaceKHR</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result CreateWaylandSurfaceKHR(Vk.KHR.WaylandSurfaceCreateInfo* pCreateInfo, Vk.AllocationCallbacks* pAllocator, out Vk.KHR.Surface pSurface)
	{
		if (Functions.vkCreateWaylandSurfaceKHR == null) throw new Vk.Extras.FunctionNotLoadedException("vkCreateWaylandSurfaceKHR");
		Vk.Handle<Vk.KHR.Surface> HANDLE;
		var RESULT = Functions.vkCreateWaylandSurfaceKHR(Handle, pCreateInfo, pAllocator, &HANDLE);
		pSurface = (RESULT == Result.Success) ? new(this, HANDLE) : Vk.KHR.Surface.Null;
		return RESULT;
	}

	/// <summary>vkCreateWaylandSurfaceKHR</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result CreateWaylandSurfaceKHR(in Vk.KHR.WaylandSurfaceCreateInfo createInfo, in Vk.AllocationCallbacks allocator, out Vk.Handle<Vk.KHR.Surface> surface)
	{
		if (Functions.vkCreateWaylandSurfaceKHR == null) throw new Vk.Extras.FunctionNotLoadedException("vkCreateWaylandSurfaceKHR");
		return Functions.CreateWaylandSurfaceKHR(Handle, createInfo, allocator, out surface);
	}

	/// <summary>vkCreateWaylandSurfaceKHR</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result CreateWaylandSurfaceKHR(in Vk.KHR.WaylandSurfaceCreateInfo createInfo, in Vk.AllocationCallbacks allocator, out Vk.KHR.Surface pSurface)
	{
		if (Functions.vkCreateWaylandSurfaceKHR == null) throw new Vk.Extras.FunctionNotLoadedException("vkCreateWaylandSurfaceKHR");
		Vk.Handle<Vk.KHR.Surface> HANDLE;
		var RESULT = Functions.CreateWaylandSurfaceKHR(Handle, createInfo, allocator, out HANDLE);
		pSurface = (RESULT == Result.Success) ? new(this, HANDLE) : Vk.KHR.Surface.Null;
		return RESULT;
	}

	/// <summary>vkCreateWin32SurfaceKHR</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result CreateWin32SurfaceKHR(Vk.KHR.Win32SurfaceCreateInfo* pCreateInfo, Vk.AllocationCallbacks* pAllocator, Vk.Handle<Vk.KHR.Surface>* pSurface)
	{
		if (Functions.vkCreateWin32SurfaceKHR == null) throw new Vk.Extras.FunctionNotLoadedException("vkCreateWin32SurfaceKHR");
		return Functions.vkCreateWin32SurfaceKHR(Handle, pCreateInfo, pAllocator, pSurface);
	}

	/// <summary>vkCreateWin32SurfaceKHR</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result CreateWin32SurfaceKHR(Vk.KHR.Win32SurfaceCreateInfo* pCreateInfo, Vk.AllocationCallbacks* pAllocator, out Vk.KHR.Surface pSurface)
	{
		if (Functions.vkCreateWin32SurfaceKHR == null) throw new Vk.Extras.FunctionNotLoadedException("vkCreateWin32SurfaceKHR");
		Vk.Handle<Vk.KHR.Surface> HANDLE;
		var RESULT = Functions.vkCreateWin32SurfaceKHR(Handle, pCreateInfo, pAllocator, &HANDLE);
		pSurface = (RESULT == Result.Success) ? new(this, HANDLE) : Vk.KHR.Surface.Null;
		return RESULT;
	}

	/// <summary>vkCreateWin32SurfaceKHR</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result CreateWin32SurfaceKHR(in Vk.KHR.Win32SurfaceCreateInfo createInfo, in Vk.AllocationCallbacks allocator, out Vk.Handle<Vk.KHR.Surface> surface)
	{
		if (Functions.vkCreateWin32SurfaceKHR == null) throw new Vk.Extras.FunctionNotLoadedException("vkCreateWin32SurfaceKHR");
		return Functions.CreateWin32SurfaceKHR(Handle, createInfo, allocator, out surface);
	}

	/// <summary>vkCreateWin32SurfaceKHR</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result CreateWin32SurfaceKHR(in Vk.KHR.Win32SurfaceCreateInfo createInfo, in Vk.AllocationCallbacks allocator, out Vk.KHR.Surface pSurface)
	{
		if (Functions.vkCreateWin32SurfaceKHR == null) throw new Vk.Extras.FunctionNotLoadedException("vkCreateWin32SurfaceKHR");
		Vk.Handle<Vk.KHR.Surface> HANDLE;
		var RESULT = Functions.CreateWin32SurfaceKHR(Handle, createInfo, allocator, out HANDLE);
		pSurface = (RESULT == Result.Success) ? new(this, HANDLE) : Vk.KHR.Surface.Null;
		return RESULT;
	}

	/// <summary>vkCreateXlibSurfaceKHR</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result CreateXlibSurfaceKHR(Vk.KHR.XlibSurfaceCreateInfo* pCreateInfo, Vk.AllocationCallbacks* pAllocator, Vk.Handle<Vk.KHR.Surface>* pSurface)
	{
		if (Functions.vkCreateXlibSurfaceKHR == null) throw new Vk.Extras.FunctionNotLoadedException("vkCreateXlibSurfaceKHR");
		return Functions.vkCreateXlibSurfaceKHR(Handle, pCreateInfo, pAllocator, pSurface);
	}

	/// <summary>vkCreateXlibSurfaceKHR</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result CreateXlibSurfaceKHR(Vk.KHR.XlibSurfaceCreateInfo* pCreateInfo, Vk.AllocationCallbacks* pAllocator, out Vk.KHR.Surface pSurface)
	{
		if (Functions.vkCreateXlibSurfaceKHR == null) throw new Vk.Extras.FunctionNotLoadedException("vkCreateXlibSurfaceKHR");
		Vk.Handle<Vk.KHR.Surface> HANDLE;
		var RESULT = Functions.vkCreateXlibSurfaceKHR(Handle, pCreateInfo, pAllocator, &HANDLE);
		pSurface = (RESULT == Result.Success) ? new(this, HANDLE) : Vk.KHR.Surface.Null;
		return RESULT;
	}

	/// <summary>vkCreateXlibSurfaceKHR</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result CreateXlibSurfaceKHR(in Vk.KHR.XlibSurfaceCreateInfo createInfo, in Vk.AllocationCallbacks allocator, out Vk.Handle<Vk.KHR.Surface> surface)
	{
		if (Functions.vkCreateXlibSurfaceKHR == null) throw new Vk.Extras.FunctionNotLoadedException("vkCreateXlibSurfaceKHR");
		return Functions.CreateXlibSurfaceKHR(Handle, createInfo, allocator, out surface);
	}

	/// <summary>vkCreateXlibSurfaceKHR</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result CreateXlibSurfaceKHR(in Vk.KHR.XlibSurfaceCreateInfo createInfo, in Vk.AllocationCallbacks allocator, out Vk.KHR.Surface pSurface)
	{
		if (Functions.vkCreateXlibSurfaceKHR == null) throw new Vk.Extras.FunctionNotLoadedException("vkCreateXlibSurfaceKHR");
		Vk.Handle<Vk.KHR.Surface> HANDLE;
		var RESULT = Functions.CreateXlibSurfaceKHR(Handle, createInfo, allocator, out HANDLE);
		pSurface = (RESULT == Result.Success) ? new(this, HANDLE) : Vk.KHR.Surface.Null;
		return RESULT;
	}

	/// <summary>vkCreateXcbSurfaceKHR</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result CreateXcbSurfaceKHR(Vk.KHR.XcbSurfaceCreateInfo* pCreateInfo, Vk.AllocationCallbacks* pAllocator, Vk.Handle<Vk.KHR.Surface>* pSurface)
	{
		if (Functions.vkCreateXcbSurfaceKHR == null) throw new Vk.Extras.FunctionNotLoadedException("vkCreateXcbSurfaceKHR");
		return Functions.vkCreateXcbSurfaceKHR(Handle, pCreateInfo, pAllocator, pSurface);
	}

	/// <summary>vkCreateXcbSurfaceKHR</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result CreateXcbSurfaceKHR(Vk.KHR.XcbSurfaceCreateInfo* pCreateInfo, Vk.AllocationCallbacks* pAllocator, out Vk.KHR.Surface pSurface)
	{
		if (Functions.vkCreateXcbSurfaceKHR == null) throw new Vk.Extras.FunctionNotLoadedException("vkCreateXcbSurfaceKHR");
		Vk.Handle<Vk.KHR.Surface> HANDLE;
		var RESULT = Functions.vkCreateXcbSurfaceKHR(Handle, pCreateInfo, pAllocator, &HANDLE);
		pSurface = (RESULT == Result.Success) ? new(this, HANDLE) : Vk.KHR.Surface.Null;
		return RESULT;
	}

	/// <summary>vkCreateXcbSurfaceKHR</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result CreateXcbSurfaceKHR(in Vk.KHR.XcbSurfaceCreateInfo createInfo, in Vk.AllocationCallbacks allocator, out Vk.Handle<Vk.KHR.Surface> surface)
	{
		if (Functions.vkCreateXcbSurfaceKHR == null) throw new Vk.Extras.FunctionNotLoadedException("vkCreateXcbSurfaceKHR");
		return Functions.CreateXcbSurfaceKHR(Handle, createInfo, allocator, out surface);
	}

	/// <summary>vkCreateXcbSurfaceKHR</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result CreateXcbSurfaceKHR(in Vk.KHR.XcbSurfaceCreateInfo createInfo, in Vk.AllocationCallbacks allocator, out Vk.KHR.Surface pSurface)
	{
		if (Functions.vkCreateXcbSurfaceKHR == null) throw new Vk.Extras.FunctionNotLoadedException("vkCreateXcbSurfaceKHR");
		Vk.Handle<Vk.KHR.Surface> HANDLE;
		var RESULT = Functions.CreateXcbSurfaceKHR(Handle, createInfo, allocator, out HANDLE);
		pSurface = (RESULT == Result.Success) ? new(this, HANDLE) : Vk.KHR.Surface.Null;
		return RESULT;
	}

	/// <summary>vkCreateDirectFBSurfaceEXT</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result CreateDirectFBSurfaceEXT(Vk.EXT.DirectFBSurfaceCreateInfo* pCreateInfo, Vk.AllocationCallbacks* pAllocator, Vk.Handle<Vk.KHR.Surface>* pSurface)
	{
		if (Functions.vkCreateDirectFBSurfaceEXT == null) throw new Vk.Extras.FunctionNotLoadedException("vkCreateDirectFBSurfaceEXT");
		return Functions.vkCreateDirectFBSurfaceEXT(Handle, pCreateInfo, pAllocator, pSurface);
	}

	/// <summary>vkCreateDirectFBSurfaceEXT</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result CreateDirectFBSurfaceEXT(Vk.EXT.DirectFBSurfaceCreateInfo* pCreateInfo, Vk.AllocationCallbacks* pAllocator, out Vk.KHR.Surface pSurface)
	{
		if (Functions.vkCreateDirectFBSurfaceEXT == null) throw new Vk.Extras.FunctionNotLoadedException("vkCreateDirectFBSurfaceEXT");
		Vk.Handle<Vk.KHR.Surface> HANDLE;
		var RESULT = Functions.vkCreateDirectFBSurfaceEXT(Handle, pCreateInfo, pAllocator, &HANDLE);
		pSurface = (RESULT == Result.Success) ? new(this, HANDLE) : Vk.KHR.Surface.Null;
		return RESULT;
	}

	/// <summary>vkCreateDirectFBSurfaceEXT</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result CreateDirectFBSurfaceEXT(in Vk.EXT.DirectFBSurfaceCreateInfo createInfo, in Vk.AllocationCallbacks allocator, out Vk.Handle<Vk.KHR.Surface> surface)
	{
		if (Functions.vkCreateDirectFBSurfaceEXT == null) throw new Vk.Extras.FunctionNotLoadedException("vkCreateDirectFBSurfaceEXT");
		return Functions.CreateDirectFBSurfaceEXT(Handle, createInfo, allocator, out surface);
	}

	/// <summary>vkCreateDirectFBSurfaceEXT</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result CreateDirectFBSurfaceEXT(in Vk.EXT.DirectFBSurfaceCreateInfo createInfo, in Vk.AllocationCallbacks allocator, out Vk.KHR.Surface pSurface)
	{
		if (Functions.vkCreateDirectFBSurfaceEXT == null) throw new Vk.Extras.FunctionNotLoadedException("vkCreateDirectFBSurfaceEXT");
		Vk.Handle<Vk.KHR.Surface> HANDLE;
		var RESULT = Functions.CreateDirectFBSurfaceEXT(Handle, createInfo, allocator, out HANDLE);
		pSurface = (RESULT == Result.Success) ? new(this, HANDLE) : Vk.KHR.Surface.Null;
		return RESULT;
	}

	/// <summary>vkCreateImagePipeSurfaceFUCHSIA</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result CreateImagePipeSurfaceFUCHSIA(Vk.FUCHSIA.ImagePipeSurfaceCreateInfo* pCreateInfo, Vk.AllocationCallbacks* pAllocator, Vk.Handle<Vk.KHR.Surface>* pSurface)
	{
		if (Functions.vkCreateImagePipeSurfaceFUCHSIA == null) throw new Vk.Extras.FunctionNotLoadedException("vkCreateImagePipeSurfaceFUCHSIA");
		return Functions.vkCreateImagePipeSurfaceFUCHSIA(Handle, pCreateInfo, pAllocator, pSurface);
	}

	/// <summary>vkCreateImagePipeSurfaceFUCHSIA</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result CreateImagePipeSurfaceFUCHSIA(Vk.FUCHSIA.ImagePipeSurfaceCreateInfo* pCreateInfo, Vk.AllocationCallbacks* pAllocator, out Vk.KHR.Surface pSurface)
	{
		if (Functions.vkCreateImagePipeSurfaceFUCHSIA == null) throw new Vk.Extras.FunctionNotLoadedException("vkCreateImagePipeSurfaceFUCHSIA");
		Vk.Handle<Vk.KHR.Surface> HANDLE;
		var RESULT = Functions.vkCreateImagePipeSurfaceFUCHSIA(Handle, pCreateInfo, pAllocator, &HANDLE);
		pSurface = (RESULT == Result.Success) ? new(this, HANDLE) : Vk.KHR.Surface.Null;
		return RESULT;
	}

	/// <summary>vkCreateImagePipeSurfaceFUCHSIA</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result CreateImagePipeSurfaceFUCHSIA(in Vk.FUCHSIA.ImagePipeSurfaceCreateInfo createInfo, in Vk.AllocationCallbacks allocator, out Vk.Handle<Vk.KHR.Surface> surface)
	{
		if (Functions.vkCreateImagePipeSurfaceFUCHSIA == null) throw new Vk.Extras.FunctionNotLoadedException("vkCreateImagePipeSurfaceFUCHSIA");
		return Functions.CreateImagePipeSurfaceFUCHSIA(Handle, createInfo, allocator, out surface);
	}

	/// <summary>vkCreateImagePipeSurfaceFUCHSIA</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result CreateImagePipeSurfaceFUCHSIA(in Vk.FUCHSIA.ImagePipeSurfaceCreateInfo createInfo, in Vk.AllocationCallbacks allocator, out Vk.KHR.Surface pSurface)
	{
		if (Functions.vkCreateImagePipeSurfaceFUCHSIA == null) throw new Vk.Extras.FunctionNotLoadedException("vkCreateImagePipeSurfaceFUCHSIA");
		Vk.Handle<Vk.KHR.Surface> HANDLE;
		var RESULT = Functions.CreateImagePipeSurfaceFUCHSIA(Handle, createInfo, allocator, out HANDLE);
		pSurface = (RESULT == Result.Success) ? new(this, HANDLE) : Vk.KHR.Surface.Null;
		return RESULT;
	}

	/// <summary>vkCreateStreamDescriptorSurfaceGGP</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result CreateStreamDescriptorSurfaceGGP(Vk.GGP.StreamDescriptorSurfaceCreateInfo* pCreateInfo, Vk.AllocationCallbacks* pAllocator, Vk.Handle<Vk.KHR.Surface>* pSurface)
	{
		if (Functions.vkCreateStreamDescriptorSurfaceGGP == null) throw new Vk.Extras.FunctionNotLoadedException("vkCreateStreamDescriptorSurfaceGGP");
		return Functions.vkCreateStreamDescriptorSurfaceGGP(Handle, pCreateInfo, pAllocator, pSurface);
	}

	/// <summary>vkCreateStreamDescriptorSurfaceGGP</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result CreateStreamDescriptorSurfaceGGP(Vk.GGP.StreamDescriptorSurfaceCreateInfo* pCreateInfo, Vk.AllocationCallbacks* pAllocator, out Vk.KHR.Surface pSurface)
	{
		if (Functions.vkCreateStreamDescriptorSurfaceGGP == null) throw new Vk.Extras.FunctionNotLoadedException("vkCreateStreamDescriptorSurfaceGGP");
		Vk.Handle<Vk.KHR.Surface> HANDLE;
		var RESULT = Functions.vkCreateStreamDescriptorSurfaceGGP(Handle, pCreateInfo, pAllocator, &HANDLE);
		pSurface = (RESULT == Result.Success) ? new(this, HANDLE) : Vk.KHR.Surface.Null;
		return RESULT;
	}

	/// <summary>vkCreateStreamDescriptorSurfaceGGP</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result CreateStreamDescriptorSurfaceGGP(in Vk.GGP.StreamDescriptorSurfaceCreateInfo createInfo, in Vk.AllocationCallbacks allocator, out Vk.Handle<Vk.KHR.Surface> surface)
	{
		if (Functions.vkCreateStreamDescriptorSurfaceGGP == null) throw new Vk.Extras.FunctionNotLoadedException("vkCreateStreamDescriptorSurfaceGGP");
		return Functions.CreateStreamDescriptorSurfaceGGP(Handle, createInfo, allocator, out surface);
	}

	/// <summary>vkCreateStreamDescriptorSurfaceGGP</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result CreateStreamDescriptorSurfaceGGP(in Vk.GGP.StreamDescriptorSurfaceCreateInfo createInfo, in Vk.AllocationCallbacks allocator, out Vk.KHR.Surface pSurface)
	{
		if (Functions.vkCreateStreamDescriptorSurfaceGGP == null) throw new Vk.Extras.FunctionNotLoadedException("vkCreateStreamDescriptorSurfaceGGP");
		Vk.Handle<Vk.KHR.Surface> HANDLE;
		var RESULT = Functions.CreateStreamDescriptorSurfaceGGP(Handle, createInfo, allocator, out HANDLE);
		pSurface = (RESULT == Result.Success) ? new(this, HANDLE) : Vk.KHR.Surface.Null;
		return RESULT;
	}

	/// <summary>vkCreateDebugReportCallbackEXT</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result CreateDebugReportCallbackEXT(Vk.EXT.DebugReportCallbackCreateInfo* pCreateInfo, Vk.AllocationCallbacks* pAllocator, Vk.Handle<Vk.EXT.DebugReportCallback>* pCallback)
	{
		if (Functions.vkCreateDebugReportCallbackEXT == null) throw new Vk.Extras.FunctionNotLoadedException("vkCreateDebugReportCallbackEXT");
		return Functions.vkCreateDebugReportCallbackEXT(Handle, pCreateInfo, pAllocator, pCallback);
	}

	/// <summary>vkCreateDebugReportCallbackEXT</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result CreateDebugReportCallbackEXT(Vk.EXT.DebugReportCallbackCreateInfo* pCreateInfo, Vk.AllocationCallbacks* pAllocator, out Vk.EXT.DebugReportCallback pCallback)
	{
		if (Functions.vkCreateDebugReportCallbackEXT == null) throw new Vk.Extras.FunctionNotLoadedException("vkCreateDebugReportCallbackEXT");
		Vk.Handle<Vk.EXT.DebugReportCallback> HANDLE;
		var RESULT = Functions.vkCreateDebugReportCallbackEXT(Handle, pCreateInfo, pAllocator, &HANDLE);
		pCallback = (RESULT == Result.Success) ? new(this, HANDLE) : Vk.EXT.DebugReportCallback.Null;
		return RESULT;
	}

	/// <summary>vkCreateDebugReportCallbackEXT</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result CreateDebugReportCallbackEXT(in Vk.EXT.DebugReportCallbackCreateInfo createInfo, in Vk.AllocationCallbacks allocator, out Vk.Handle<Vk.EXT.DebugReportCallback> callback)
	{
		if (Functions.vkCreateDebugReportCallbackEXT == null) throw new Vk.Extras.FunctionNotLoadedException("vkCreateDebugReportCallbackEXT");
		return Functions.CreateDebugReportCallbackEXT(Handle, createInfo, allocator, out callback);
	}

	/// <summary>vkCreateDebugReportCallbackEXT</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result CreateDebugReportCallbackEXT(in Vk.EXT.DebugReportCallbackCreateInfo createInfo, in Vk.AllocationCallbacks allocator, out Vk.EXT.DebugReportCallback pCallback)
	{
		if (Functions.vkCreateDebugReportCallbackEXT == null) throw new Vk.Extras.FunctionNotLoadedException("vkCreateDebugReportCallbackEXT");
		Vk.Handle<Vk.EXT.DebugReportCallback> HANDLE;
		var RESULT = Functions.CreateDebugReportCallbackEXT(Handle, createInfo, allocator, out HANDLE);
		pCallback = (RESULT == Result.Success) ? new(this, HANDLE) : Vk.EXT.DebugReportCallback.Null;
		return RESULT;
	}

	/// <summary>vkDebugReportMessageEXT</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void DebugReportMessageEXT(Vk.EXT.DebugReportFlags flags, Vk.EXT.DebugReportObjectType objectType, ulong @object, ulong location, int messageCode, byte* pLayerPrefix, byte* pMessage)
	{
		if (Functions.vkDebugReportMessageEXT == null) throw new Vk.Extras.FunctionNotLoadedException("vkDebugReportMessageEXT");
		Functions.vkDebugReportMessageEXT(Handle, flags, objectType, @object, location, messageCode, pLayerPrefix, pMessage);
	}

	/// <summary>vkDebugReportMessageEXT</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void DebugReportMessageEXT(Vk.EXT.DebugReportFlags flags, Vk.EXT.DebugReportObjectType objectType, ulong @object, ulong location, int messageCode, Vk.NativeString layerPrefix, Vk.NativeString message)
	{
		if (Functions.vkDebugReportMessageEXT == null) throw new Vk.Extras.FunctionNotLoadedException("vkDebugReportMessageEXT");
		Functions.DebugReportMessageEXT(Handle, flags, objectType, @object, location, messageCode, layerPrefix, message);
	}

	/// <summary>vkEnumeratePhysicalDeviceGroups</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result EnumeratePhysicalDeviceGroups(uint* pPhysicalDeviceGroupCount, Vk.PhysicalDeviceGroupProperties* pPhysicalDeviceGroupProperties)
	{
		if (Functions.vkEnumeratePhysicalDeviceGroups == null) throw new Vk.Extras.FunctionNotLoadedException("vkEnumeratePhysicalDeviceGroups");
		return Functions.vkEnumeratePhysicalDeviceGroups(Handle, pPhysicalDeviceGroupCount, pPhysicalDeviceGroupProperties);
	}

	/// <summary>vkEnumeratePhysicalDeviceGroups</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result EnumeratePhysicalDeviceGroups(out uint physicalDeviceGroupCount, in Span<Vk.PhysicalDeviceGroupProperties> physicalDeviceGroupProperties)
	{
		if (Functions.vkEnumeratePhysicalDeviceGroups == null) throw new Vk.Extras.FunctionNotLoadedException("vkEnumeratePhysicalDeviceGroups");
		return Functions.EnumeratePhysicalDeviceGroups(Handle, out physicalDeviceGroupCount, physicalDeviceGroupProperties);
	}

	/// <summary>vkEnumeratePhysicalDeviceGroupsKHR</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result EnumeratePhysicalDeviceGroupsKHR(uint* pPhysicalDeviceGroupCount, Vk.PhysicalDeviceGroupProperties* pPhysicalDeviceGroupProperties)
	{
		if (Functions.vkEnumeratePhysicalDeviceGroupsKHR == null) throw new Vk.Extras.FunctionNotLoadedException("vkEnumeratePhysicalDeviceGroupsKHR");
		return Functions.vkEnumeratePhysicalDeviceGroupsKHR(Handle, pPhysicalDeviceGroupCount, pPhysicalDeviceGroupProperties);
	}

	/// <summary>vkEnumeratePhysicalDeviceGroupsKHR</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result EnumeratePhysicalDeviceGroupsKHR(out uint physicalDeviceGroupCount, in Span<Vk.PhysicalDeviceGroupProperties> physicalDeviceGroupProperties)
	{
		if (Functions.vkEnumeratePhysicalDeviceGroupsKHR == null) throw new Vk.Extras.FunctionNotLoadedException("vkEnumeratePhysicalDeviceGroupsKHR");
		return Functions.EnumeratePhysicalDeviceGroupsKHR(Handle, out physicalDeviceGroupCount, physicalDeviceGroupProperties);
	}

	/// <summary>vkCreateIOSSurfaceMVK</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result CreateIOSSurfaceMVK(Vk.MVK.IOSSurfaceCreateInfo* pCreateInfo, Vk.AllocationCallbacks* pAllocator, Vk.Handle<Vk.KHR.Surface>* pSurface)
	{
		if (Functions.vkCreateIOSSurfaceMVK == null) throw new Vk.Extras.FunctionNotLoadedException("vkCreateIOSSurfaceMVK");
		return Functions.vkCreateIOSSurfaceMVK(Handle, pCreateInfo, pAllocator, pSurface);
	}

	/// <summary>vkCreateIOSSurfaceMVK</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result CreateIOSSurfaceMVK(Vk.MVK.IOSSurfaceCreateInfo* pCreateInfo, Vk.AllocationCallbacks* pAllocator, out Vk.KHR.Surface pSurface)
	{
		if (Functions.vkCreateIOSSurfaceMVK == null) throw new Vk.Extras.FunctionNotLoadedException("vkCreateIOSSurfaceMVK");
		Vk.Handle<Vk.KHR.Surface> HANDLE;
		var RESULT = Functions.vkCreateIOSSurfaceMVK(Handle, pCreateInfo, pAllocator, &HANDLE);
		pSurface = (RESULT == Result.Success) ? new(this, HANDLE) : Vk.KHR.Surface.Null;
		return RESULT;
	}

	/// <summary>vkCreateIOSSurfaceMVK</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result CreateIOSSurfaceMVK(in Vk.MVK.IOSSurfaceCreateInfo createInfo, in Vk.AllocationCallbacks allocator, out Vk.Handle<Vk.KHR.Surface> surface)
	{
		if (Functions.vkCreateIOSSurfaceMVK == null) throw new Vk.Extras.FunctionNotLoadedException("vkCreateIOSSurfaceMVK");
		return Functions.CreateIOSSurfaceMVK(Handle, createInfo, allocator, out surface);
	}

	/// <summary>vkCreateIOSSurfaceMVK</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result CreateIOSSurfaceMVK(in Vk.MVK.IOSSurfaceCreateInfo createInfo, in Vk.AllocationCallbacks allocator, out Vk.KHR.Surface pSurface)
	{
		if (Functions.vkCreateIOSSurfaceMVK == null) throw new Vk.Extras.FunctionNotLoadedException("vkCreateIOSSurfaceMVK");
		Vk.Handle<Vk.KHR.Surface> HANDLE;
		var RESULT = Functions.CreateIOSSurfaceMVK(Handle, createInfo, allocator, out HANDLE);
		pSurface = (RESULT == Result.Success) ? new(this, HANDLE) : Vk.KHR.Surface.Null;
		return RESULT;
	}

	/// <summary>vkCreateMacOSSurfaceMVK</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result CreateMacOSSurfaceMVK(Vk.MVK.MacOSSurfaceCreateInfo* pCreateInfo, Vk.AllocationCallbacks* pAllocator, Vk.Handle<Vk.KHR.Surface>* pSurface)
	{
		if (Functions.vkCreateMacOSSurfaceMVK == null) throw new Vk.Extras.FunctionNotLoadedException("vkCreateMacOSSurfaceMVK");
		return Functions.vkCreateMacOSSurfaceMVK(Handle, pCreateInfo, pAllocator, pSurface);
	}

	/// <summary>vkCreateMacOSSurfaceMVK</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result CreateMacOSSurfaceMVK(Vk.MVK.MacOSSurfaceCreateInfo* pCreateInfo, Vk.AllocationCallbacks* pAllocator, out Vk.KHR.Surface pSurface)
	{
		if (Functions.vkCreateMacOSSurfaceMVK == null) throw new Vk.Extras.FunctionNotLoadedException("vkCreateMacOSSurfaceMVK");
		Vk.Handle<Vk.KHR.Surface> HANDLE;
		var RESULT = Functions.vkCreateMacOSSurfaceMVK(Handle, pCreateInfo, pAllocator, &HANDLE);
		pSurface = (RESULT == Result.Success) ? new(this, HANDLE) : Vk.KHR.Surface.Null;
		return RESULT;
	}

	/// <summary>vkCreateMacOSSurfaceMVK</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result CreateMacOSSurfaceMVK(in Vk.MVK.MacOSSurfaceCreateInfo createInfo, in Vk.AllocationCallbacks allocator, out Vk.Handle<Vk.KHR.Surface> surface)
	{
		if (Functions.vkCreateMacOSSurfaceMVK == null) throw new Vk.Extras.FunctionNotLoadedException("vkCreateMacOSSurfaceMVK");
		return Functions.CreateMacOSSurfaceMVK(Handle, createInfo, allocator, out surface);
	}

	/// <summary>vkCreateMacOSSurfaceMVK</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result CreateMacOSSurfaceMVK(in Vk.MVK.MacOSSurfaceCreateInfo createInfo, in Vk.AllocationCallbacks allocator, out Vk.KHR.Surface pSurface)
	{
		if (Functions.vkCreateMacOSSurfaceMVK == null) throw new Vk.Extras.FunctionNotLoadedException("vkCreateMacOSSurfaceMVK");
		Vk.Handle<Vk.KHR.Surface> HANDLE;
		var RESULT = Functions.CreateMacOSSurfaceMVK(Handle, createInfo, allocator, out HANDLE);
		pSurface = (RESULT == Result.Success) ? new(this, HANDLE) : Vk.KHR.Surface.Null;
		return RESULT;
	}

	/// <summary>vkCreateMetalSurfaceEXT</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result CreateMetalSurfaceEXT(Vk.EXT.MetalSurfaceCreateInfo* pCreateInfo, Vk.AllocationCallbacks* pAllocator, Vk.Handle<Vk.KHR.Surface>* pSurface)
	{
		if (Functions.vkCreateMetalSurfaceEXT == null) throw new Vk.Extras.FunctionNotLoadedException("vkCreateMetalSurfaceEXT");
		return Functions.vkCreateMetalSurfaceEXT(Handle, pCreateInfo, pAllocator, pSurface);
	}

	/// <summary>vkCreateMetalSurfaceEXT</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result CreateMetalSurfaceEXT(Vk.EXT.MetalSurfaceCreateInfo* pCreateInfo, Vk.AllocationCallbacks* pAllocator, out Vk.KHR.Surface pSurface)
	{
		if (Functions.vkCreateMetalSurfaceEXT == null) throw new Vk.Extras.FunctionNotLoadedException("vkCreateMetalSurfaceEXT");
		Vk.Handle<Vk.KHR.Surface> HANDLE;
		var RESULT = Functions.vkCreateMetalSurfaceEXT(Handle, pCreateInfo, pAllocator, &HANDLE);
		pSurface = (RESULT == Result.Success) ? new(this, HANDLE) : Vk.KHR.Surface.Null;
		return RESULT;
	}

	/// <summary>vkCreateMetalSurfaceEXT</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result CreateMetalSurfaceEXT(in Vk.EXT.MetalSurfaceCreateInfo createInfo, in Vk.AllocationCallbacks allocator, out Vk.Handle<Vk.KHR.Surface> surface)
	{
		if (Functions.vkCreateMetalSurfaceEXT == null) throw new Vk.Extras.FunctionNotLoadedException("vkCreateMetalSurfaceEXT");
		return Functions.CreateMetalSurfaceEXT(Handle, createInfo, allocator, out surface);
	}

	/// <summary>vkCreateMetalSurfaceEXT</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result CreateMetalSurfaceEXT(in Vk.EXT.MetalSurfaceCreateInfo createInfo, in Vk.AllocationCallbacks allocator, out Vk.KHR.Surface pSurface)
	{
		if (Functions.vkCreateMetalSurfaceEXT == null) throw new Vk.Extras.FunctionNotLoadedException("vkCreateMetalSurfaceEXT");
		Vk.Handle<Vk.KHR.Surface> HANDLE;
		var RESULT = Functions.CreateMetalSurfaceEXT(Handle, createInfo, allocator, out HANDLE);
		pSurface = (RESULT == Result.Success) ? new(this, HANDLE) : Vk.KHR.Surface.Null;
		return RESULT;
	}

	/// <summary>vkCreateDebugUtilsMessengerEXT</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result CreateDebugUtilsMessengerEXT(Vk.EXT.DebugUtilsMessengerCreateInfo* pCreateInfo, Vk.AllocationCallbacks* pAllocator, Vk.Handle<Vk.EXT.DebugUtilsMessenger>* pMessenger)
	{
		if (Functions.vkCreateDebugUtilsMessengerEXT == null) throw new Vk.Extras.FunctionNotLoadedException("vkCreateDebugUtilsMessengerEXT");
		return Functions.vkCreateDebugUtilsMessengerEXT(Handle, pCreateInfo, pAllocator, pMessenger);
	}

	/// <summary>vkCreateDebugUtilsMessengerEXT</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result CreateDebugUtilsMessengerEXT(Vk.EXT.DebugUtilsMessengerCreateInfo* pCreateInfo, Vk.AllocationCallbacks* pAllocator, out Vk.EXT.DebugUtilsMessenger pMessenger)
	{
		if (Functions.vkCreateDebugUtilsMessengerEXT == null) throw new Vk.Extras.FunctionNotLoadedException("vkCreateDebugUtilsMessengerEXT");
		Vk.Handle<Vk.EXT.DebugUtilsMessenger> HANDLE;
		var RESULT = Functions.vkCreateDebugUtilsMessengerEXT(Handle, pCreateInfo, pAllocator, &HANDLE);
		pMessenger = (RESULT == Result.Success) ? new(this, HANDLE) : Vk.EXT.DebugUtilsMessenger.Null;
		return RESULT;
	}

	/// <summary>vkCreateDebugUtilsMessengerEXT</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result CreateDebugUtilsMessengerEXT(in Vk.EXT.DebugUtilsMessengerCreateInfo createInfo, in Vk.AllocationCallbacks allocator, out Vk.Handle<Vk.EXT.DebugUtilsMessenger> messenger)
	{
		if (Functions.vkCreateDebugUtilsMessengerEXT == null) throw new Vk.Extras.FunctionNotLoadedException("vkCreateDebugUtilsMessengerEXT");
		return Functions.CreateDebugUtilsMessengerEXT(Handle, createInfo, allocator, out messenger);
	}

	/// <summary>vkCreateDebugUtilsMessengerEXT</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result CreateDebugUtilsMessengerEXT(in Vk.EXT.DebugUtilsMessengerCreateInfo createInfo, in Vk.AllocationCallbacks allocator, out Vk.EXT.DebugUtilsMessenger pMessenger)
	{
		if (Functions.vkCreateDebugUtilsMessengerEXT == null) throw new Vk.Extras.FunctionNotLoadedException("vkCreateDebugUtilsMessengerEXT");
		Vk.Handle<Vk.EXT.DebugUtilsMessenger> HANDLE;
		var RESULT = Functions.CreateDebugUtilsMessengerEXT(Handle, createInfo, allocator, out HANDLE);
		pMessenger = (RESULT == Result.Success) ? new(this, HANDLE) : Vk.EXT.DebugUtilsMessenger.Null;
		return RESULT;
	}

	/// <summary>vkSubmitDebugUtilsMessageEXT</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void SubmitDebugUtilsMessageEXT(Vk.EXT.DebugUtilsMessageSeverityFlags messageSeverity, Vk.EXT.DebugUtilsMessageTypeFlags messageTypes, Vk.EXT.DebugUtilsMessengerCallbackData* pCallbackData)
	{
		if (Functions.vkSubmitDebugUtilsMessageEXT == null) throw new Vk.Extras.FunctionNotLoadedException("vkSubmitDebugUtilsMessageEXT");
		Functions.vkSubmitDebugUtilsMessageEXT(Handle, messageSeverity, messageTypes, pCallbackData);
	}

	/// <summary>vkSubmitDebugUtilsMessageEXT</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void SubmitDebugUtilsMessageEXT(Vk.EXT.DebugUtilsMessageSeverityFlags messageSeverity, Vk.EXT.DebugUtilsMessageTypeFlags messageTypes, in Vk.EXT.DebugUtilsMessengerCallbackData callbackData)
	{
		if (Functions.vkSubmitDebugUtilsMessageEXT == null) throw new Vk.Extras.FunctionNotLoadedException("vkSubmitDebugUtilsMessageEXT");
		Functions.SubmitDebugUtilsMessageEXT(Handle, messageSeverity, messageTypes, callbackData);
	}

	/// <summary>vkCreateHeadlessSurfaceEXT</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result CreateHeadlessSurfaceEXT(Vk.EXT.HeadlessSurfaceCreateInfo* pCreateInfo, Vk.AllocationCallbacks* pAllocator, Vk.Handle<Vk.KHR.Surface>* pSurface)
	{
		if (Functions.vkCreateHeadlessSurfaceEXT == null) throw new Vk.Extras.FunctionNotLoadedException("vkCreateHeadlessSurfaceEXT");
		return Functions.vkCreateHeadlessSurfaceEXT(Handle, pCreateInfo, pAllocator, pSurface);
	}

	/// <summary>vkCreateHeadlessSurfaceEXT</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result CreateHeadlessSurfaceEXT(Vk.EXT.HeadlessSurfaceCreateInfo* pCreateInfo, Vk.AllocationCallbacks* pAllocator, out Vk.KHR.Surface pSurface)
	{
		if (Functions.vkCreateHeadlessSurfaceEXT == null) throw new Vk.Extras.FunctionNotLoadedException("vkCreateHeadlessSurfaceEXT");
		Vk.Handle<Vk.KHR.Surface> HANDLE;
		var RESULT = Functions.vkCreateHeadlessSurfaceEXT(Handle, pCreateInfo, pAllocator, &HANDLE);
		pSurface = (RESULT == Result.Success) ? new(this, HANDLE) : Vk.KHR.Surface.Null;
		return RESULT;
	}

	/// <summary>vkCreateHeadlessSurfaceEXT</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result CreateHeadlessSurfaceEXT(in Vk.EXT.HeadlessSurfaceCreateInfo createInfo, in Vk.AllocationCallbacks allocator, out Vk.Handle<Vk.KHR.Surface> surface)
	{
		if (Functions.vkCreateHeadlessSurfaceEXT == null) throw new Vk.Extras.FunctionNotLoadedException("vkCreateHeadlessSurfaceEXT");
		return Functions.CreateHeadlessSurfaceEXT(Handle, createInfo, allocator, out surface);
	}

	/// <summary>vkCreateHeadlessSurfaceEXT</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result CreateHeadlessSurfaceEXT(in Vk.EXT.HeadlessSurfaceCreateInfo createInfo, in Vk.AllocationCallbacks allocator, out Vk.KHR.Surface pSurface)
	{
		if (Functions.vkCreateHeadlessSurfaceEXT == null) throw new Vk.Extras.FunctionNotLoadedException("vkCreateHeadlessSurfaceEXT");
		Vk.Handle<Vk.KHR.Surface> HANDLE;
		var RESULT = Functions.CreateHeadlessSurfaceEXT(Handle, createInfo, allocator, out HANDLE);
		pSurface = (RESULT == Result.Success) ? new(this, HANDLE) : Vk.KHR.Surface.Null;
		return RESULT;
	}

}

public unsafe partial class PhysicalDevice : IHandleType<PhysicalDevice>
{
	public static readonly PhysicalDevice Null = new(Instance.Null, Vk.Handle<PhysicalDevice>.Null);

	public readonly Vk.Instance Parent;
	public readonly Vk.InstanceFunctionTable Functions;
	public readonly Vk.Instance Instance;
	public readonly Handle<PhysicalDevice> Handle;
	public bool IsValid => Handle.IsValid;

	public PhysicalDevice(in Vk.Instance parent, Vk.Handle<PhysicalDevice> handle)
	{
		Parent = parent;
		Functions = parent.Functions;
		Instance = parent;
		Handle = handle;
	}

	public override int GetHashCode() => Handle.GetHashCode();
	public override string? ToString() => $"[PhysicalDevice 0x{(ulong)Handle:X16}]";
	public override bool Equals(object? o) => (o is PhysicalDevice t) && (t.Handle == Handle);
	bool IEquatable<PhysicalDevice>.Equals(PhysicalDevice? other) => (other?.Handle ?? new()) == Handle;

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static implicit operator Vk.Handle<PhysicalDevice> (PhysicalDevice? handle) => handle?.Handle ?? new();
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static bool operator == (PhysicalDevice? l, PhysicalDevice? r) => (l?.Handle ?? new()) == (r?.Handle ?? new());
	public static bool operator != (PhysicalDevice? l, PhysicalDevice? r) => (l?.Handle ?? new()) == (r?.Handle ?? new());
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static implicit operator bool (PhysicalDevice? handle) => handle?.Handle.IsValid ?? false;

	/// <summary>vkGetPhysicalDeviceProperties</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void GetPhysicalDeviceProperties(Vk.PhysicalDeviceProperties* pProperties)
	{
		if (Functions.vkGetPhysicalDeviceProperties == null) throw new Vk.Extras.FunctionNotLoadedException("vkGetPhysicalDeviceProperties");
		Functions.vkGetPhysicalDeviceProperties(Handle, pProperties);
	}

	/// <summary>vkGetPhysicalDeviceProperties</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void GetPhysicalDeviceProperties(out Vk.PhysicalDeviceProperties properties)
	{
		if (Functions.vkGetPhysicalDeviceProperties == null) throw new Vk.Extras.FunctionNotLoadedException("vkGetPhysicalDeviceProperties");
		Functions.GetPhysicalDeviceProperties(Handle, out properties);
	}

	/// <summary>vkGetPhysicalDeviceQueueFamilyProperties</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void GetPhysicalDeviceQueueFamilyProperties(uint* pQueueFamilyPropertyCount, Vk.QueueFamilyProperties* pQueueFamilyProperties)
	{
		if (Functions.vkGetPhysicalDeviceQueueFamilyProperties == null) throw new Vk.Extras.FunctionNotLoadedException("vkGetPhysicalDeviceQueueFamilyProperties");
		Functions.vkGetPhysicalDeviceQueueFamilyProperties(Handle, pQueueFamilyPropertyCount, pQueueFamilyProperties);
	}

	/// <summary>vkGetPhysicalDeviceQueueFamilyProperties</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void GetPhysicalDeviceQueueFamilyProperties(out uint queueFamilyPropertyCount, in Span<Vk.QueueFamilyProperties> queueFamilyProperties)
	{
		if (Functions.vkGetPhysicalDeviceQueueFamilyProperties == null) throw new Vk.Extras.FunctionNotLoadedException("vkGetPhysicalDeviceQueueFamilyProperties");
		Functions.GetPhysicalDeviceQueueFamilyProperties(Handle, out queueFamilyPropertyCount, queueFamilyProperties);
	}

	/// <summary>vkGetPhysicalDeviceMemoryProperties</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void GetPhysicalDeviceMemoryProperties(Vk.PhysicalDeviceMemoryProperties* pMemoryProperties)
	{
		if (Functions.vkGetPhysicalDeviceMemoryProperties == null) throw new Vk.Extras.FunctionNotLoadedException("vkGetPhysicalDeviceMemoryProperties");
		Functions.vkGetPhysicalDeviceMemoryProperties(Handle, pMemoryProperties);
	}

	/// <summary>vkGetPhysicalDeviceMemoryProperties</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void GetPhysicalDeviceMemoryProperties(out Vk.PhysicalDeviceMemoryProperties memoryProperties)
	{
		if (Functions.vkGetPhysicalDeviceMemoryProperties == null) throw new Vk.Extras.FunctionNotLoadedException("vkGetPhysicalDeviceMemoryProperties");
		Functions.GetPhysicalDeviceMemoryProperties(Handle, out memoryProperties);
	}

	/// <summary>vkGetPhysicalDeviceFeatures</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void GetPhysicalDeviceFeatures(Vk.PhysicalDeviceFeatures* pFeatures)
	{
		if (Functions.vkGetPhysicalDeviceFeatures == null) throw new Vk.Extras.FunctionNotLoadedException("vkGetPhysicalDeviceFeatures");
		Functions.vkGetPhysicalDeviceFeatures(Handle, pFeatures);
	}

	/// <summary>vkGetPhysicalDeviceFeatures</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void GetPhysicalDeviceFeatures(out Vk.PhysicalDeviceFeatures features)
	{
		if (Functions.vkGetPhysicalDeviceFeatures == null) throw new Vk.Extras.FunctionNotLoadedException("vkGetPhysicalDeviceFeatures");
		Functions.GetPhysicalDeviceFeatures(Handle, out features);
	}

	/// <summary>vkGetPhysicalDeviceFormatProperties</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void GetPhysicalDeviceFormatProperties(Vk.Format format, Vk.FormatProperties* pFormatProperties)
	{
		if (Functions.vkGetPhysicalDeviceFormatProperties == null) throw new Vk.Extras.FunctionNotLoadedException("vkGetPhysicalDeviceFormatProperties");
		Functions.vkGetPhysicalDeviceFormatProperties(Handle, format, pFormatProperties);
	}

	/// <summary>vkGetPhysicalDeviceFormatProperties</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void GetPhysicalDeviceFormatProperties(Vk.Format format, out Vk.FormatProperties formatProperties)
	{
		if (Functions.vkGetPhysicalDeviceFormatProperties == null) throw new Vk.Extras.FunctionNotLoadedException("vkGetPhysicalDeviceFormatProperties");
		Functions.GetPhysicalDeviceFormatProperties(Handle, format, out formatProperties);
	}

	/// <summary>vkGetPhysicalDeviceImageFormatProperties</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result GetPhysicalDeviceImageFormatProperties(Vk.Format format, Vk.ImageType type, Vk.ImageTiling tiling, Vk.ImageUsageFlags usage, Vk.ImageCreateFlags flags, Vk.ImageFormatProperties* pImageFormatProperties)
	{
		if (Functions.vkGetPhysicalDeviceImageFormatProperties == null) throw new Vk.Extras.FunctionNotLoadedException("vkGetPhysicalDeviceImageFormatProperties");
		return Functions.vkGetPhysicalDeviceImageFormatProperties(Handle, format, type, tiling, usage, flags, pImageFormatProperties);
	}

	/// <summary>vkGetPhysicalDeviceImageFormatProperties</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result GetPhysicalDeviceImageFormatProperties(Vk.Format format, Vk.ImageType type, Vk.ImageTiling tiling, Vk.ImageUsageFlags usage, Vk.ImageCreateFlags flags, out Vk.ImageFormatProperties imageFormatProperties)
	{
		if (Functions.vkGetPhysicalDeviceImageFormatProperties == null) throw new Vk.Extras.FunctionNotLoadedException("vkGetPhysicalDeviceImageFormatProperties");
		return Functions.GetPhysicalDeviceImageFormatProperties(Handle, format, type, tiling, usage, flags, out imageFormatProperties);
	}

	/// <summary>vkCreateDevice</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result CreateDevice(Vk.DeviceCreateInfo* pCreateInfo, Vk.AllocationCallbacks* pAllocator, Vk.Handle<Vk.Device>* pDevice)
	{
		if (Functions.vkCreateDevice == null) throw new Vk.Extras.FunctionNotLoadedException("vkCreateDevice");
		return Functions.vkCreateDevice(Handle, pCreateInfo, pAllocator, pDevice);
	}

	/// <summary>vkCreateDevice</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result CreateDevice(Vk.DeviceCreateInfo* pCreateInfo, Vk.AllocationCallbacks* pAllocator, out Vk.Device pDevice)
	{
		if (Functions.vkCreateDevice == null) throw new Vk.Extras.FunctionNotLoadedException("vkCreateDevice");
		Vk.Handle<Vk.Device> HANDLE;
		var RESULT = Functions.vkCreateDevice(Handle, pCreateInfo, pAllocator, &HANDLE);
		pDevice = (RESULT == Result.Success) ? new(this, HANDLE) : Vk.Device.Null;
		return RESULT;
	}

	/// <summary>vkCreateDevice</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result CreateDevice(in Vk.DeviceCreateInfo createInfo, in Vk.AllocationCallbacks allocator, out Vk.Handle<Vk.Device> device)
	{
		if (Functions.vkCreateDevice == null) throw new Vk.Extras.FunctionNotLoadedException("vkCreateDevice");
		return Functions.CreateDevice(Handle, createInfo, allocator, out device);
	}

	/// <summary>vkCreateDevice</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result CreateDevice(in Vk.DeviceCreateInfo createInfo, in Vk.AllocationCallbacks allocator, out Vk.Device pDevice)
	{
		if (Functions.vkCreateDevice == null) throw new Vk.Extras.FunctionNotLoadedException("vkCreateDevice");
		Vk.Handle<Vk.Device> HANDLE;
		var RESULT = Functions.CreateDevice(Handle, createInfo, allocator, out HANDLE);
		pDevice = (RESULT == Result.Success) ? new(this, HANDLE) : Vk.Device.Null;
		return RESULT;
	}

	/// <summary>vkEnumerateDeviceLayerProperties</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result EnumerateDeviceLayerProperties(uint* pPropertyCount, Vk.LayerProperties* pProperties)
	{
		if (Functions.vkEnumerateDeviceLayerProperties == null) throw new Vk.Extras.FunctionNotLoadedException("vkEnumerateDeviceLayerProperties");
		return Functions.vkEnumerateDeviceLayerProperties(Handle, pPropertyCount, pProperties);
	}

	/// <summary>vkEnumerateDeviceLayerProperties</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result EnumerateDeviceLayerProperties(out uint propertyCount, in Span<Vk.LayerProperties> properties)
	{
		if (Functions.vkEnumerateDeviceLayerProperties == null) throw new Vk.Extras.FunctionNotLoadedException("vkEnumerateDeviceLayerProperties");
		return Functions.EnumerateDeviceLayerProperties(Handle, out propertyCount, properties);
	}

	/// <summary>vkEnumerateDeviceExtensionProperties</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result EnumerateDeviceExtensionProperties(byte* pLayerName, uint* pPropertyCount, Vk.ExtensionProperties* pProperties)
	{
		if (Functions.vkEnumerateDeviceExtensionProperties == null) throw new Vk.Extras.FunctionNotLoadedException("vkEnumerateDeviceExtensionProperties");
		return Functions.vkEnumerateDeviceExtensionProperties(Handle, pLayerName, pPropertyCount, pProperties);
	}

	/// <summary>vkEnumerateDeviceExtensionProperties</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result EnumerateDeviceExtensionProperties(Vk.NativeString layerName, out uint propertyCount, in Span<Vk.ExtensionProperties> properties)
	{
		if (Functions.vkEnumerateDeviceExtensionProperties == null) throw new Vk.Extras.FunctionNotLoadedException("vkEnumerateDeviceExtensionProperties");
		return Functions.EnumerateDeviceExtensionProperties(Handle, layerName, out propertyCount, properties);
	}

	/// <summary>vkGetPhysicalDeviceSparseImageFormatProperties</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void GetPhysicalDeviceSparseImageFormatProperties(Vk.Format format, Vk.ImageType type, Vk.SampleCountFlags samples, Vk.ImageUsageFlags usage, Vk.ImageTiling tiling, uint* pPropertyCount, Vk.SparseImageFormatProperties* pProperties)
	{
		if (Functions.vkGetPhysicalDeviceSparseImageFormatProperties == null) throw new Vk.Extras.FunctionNotLoadedException("vkGetPhysicalDeviceSparseImageFormatProperties");
		Functions.vkGetPhysicalDeviceSparseImageFormatProperties(Handle, format, type, samples, usage, tiling, pPropertyCount, pProperties);
	}

	/// <summary>vkGetPhysicalDeviceSparseImageFormatProperties</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void GetPhysicalDeviceSparseImageFormatProperties(Vk.Format format, Vk.ImageType type, Vk.SampleCountFlags samples, Vk.ImageUsageFlags usage, Vk.ImageTiling tiling, out uint propertyCount, in Span<Vk.SparseImageFormatProperties> properties)
	{
		if (Functions.vkGetPhysicalDeviceSparseImageFormatProperties == null) throw new Vk.Extras.FunctionNotLoadedException("vkGetPhysicalDeviceSparseImageFormatProperties");
		Functions.GetPhysicalDeviceSparseImageFormatProperties(Handle, format, type, samples, usage, tiling, out propertyCount, properties);
	}

	/// <summary>vkGetPhysicalDeviceDisplayPropertiesKHR</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result GetPhysicalDeviceDisplayPropertiesKHR(uint* pPropertyCount, Vk.KHR.DisplayProperties* pProperties)
	{
		if (Functions.vkGetPhysicalDeviceDisplayPropertiesKHR == null) throw new Vk.Extras.FunctionNotLoadedException("vkGetPhysicalDeviceDisplayPropertiesKHR");
		return Functions.vkGetPhysicalDeviceDisplayPropertiesKHR(Handle, pPropertyCount, pProperties);
	}

	/// <summary>vkGetPhysicalDeviceDisplayPropertiesKHR</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result GetPhysicalDeviceDisplayPropertiesKHR(out uint propertyCount, in Span<Vk.KHR.DisplayProperties> properties)
	{
		if (Functions.vkGetPhysicalDeviceDisplayPropertiesKHR == null) throw new Vk.Extras.FunctionNotLoadedException("vkGetPhysicalDeviceDisplayPropertiesKHR");
		return Functions.GetPhysicalDeviceDisplayPropertiesKHR(Handle, out propertyCount, properties);
	}

	/// <summary>vkGetPhysicalDeviceDisplayPlanePropertiesKHR</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result GetPhysicalDeviceDisplayPlanePropertiesKHR(uint* pPropertyCount, Vk.KHR.DisplayPlaneProperties* pProperties)
	{
		if (Functions.vkGetPhysicalDeviceDisplayPlanePropertiesKHR == null) throw new Vk.Extras.FunctionNotLoadedException("vkGetPhysicalDeviceDisplayPlanePropertiesKHR");
		return Functions.vkGetPhysicalDeviceDisplayPlanePropertiesKHR(Handle, pPropertyCount, pProperties);
	}

	/// <summary>vkGetPhysicalDeviceDisplayPlanePropertiesKHR</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result GetPhysicalDeviceDisplayPlanePropertiesKHR(out uint propertyCount, in Span<Vk.KHR.DisplayPlaneProperties> properties)
	{
		if (Functions.vkGetPhysicalDeviceDisplayPlanePropertiesKHR == null) throw new Vk.Extras.FunctionNotLoadedException("vkGetPhysicalDeviceDisplayPlanePropertiesKHR");
		return Functions.GetPhysicalDeviceDisplayPlanePropertiesKHR(Handle, out propertyCount, properties);
	}

	/// <summary>vkGetDisplayPlaneSupportedDisplaysKHR</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result GetDisplayPlaneSupportedDisplaysKHR(uint planeIndex, uint* pDisplayCount, Vk.Handle<Vk.KHR.Display>* pDisplays)
	{
		if (Functions.vkGetDisplayPlaneSupportedDisplaysKHR == null) throw new Vk.Extras.FunctionNotLoadedException("vkGetDisplayPlaneSupportedDisplaysKHR");
		return Functions.vkGetDisplayPlaneSupportedDisplaysKHR(Handle, planeIndex, pDisplayCount, pDisplays);
	}

	/// <summary>vkGetDisplayPlaneSupportedDisplaysKHR</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result GetDisplayPlaneSupportedDisplaysKHR(uint planeIndex, out uint displayCount, in Span<Vk.Handle<Vk.KHR.Display>> displays)
	{
		if (Functions.vkGetDisplayPlaneSupportedDisplaysKHR == null) throw new Vk.Extras.FunctionNotLoadedException("vkGetDisplayPlaneSupportedDisplaysKHR");
		return Functions.GetDisplayPlaneSupportedDisplaysKHR(Handle, planeIndex, out displayCount, displays);
	}

	/// <summary>vkGetDisplayPlaneCapabilitiesKHR</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result GetDisplayPlaneCapabilitiesKHR(Vk.Handle<Vk.KHR.DisplayMode> mode, uint planeIndex, Vk.KHR.DisplayPlaneCapabilities* pCapabilities)
	{
		if (Functions.vkGetDisplayPlaneCapabilitiesKHR == null) throw new Vk.Extras.FunctionNotLoadedException("vkGetDisplayPlaneCapabilitiesKHR");
		return Functions.vkGetDisplayPlaneCapabilitiesKHR(Handle, mode, planeIndex, pCapabilities);
	}

	/// <summary>vkGetDisplayPlaneCapabilitiesKHR</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result GetDisplayPlaneCapabilitiesKHR(Vk.Handle<Vk.KHR.DisplayMode> mode, uint planeIndex, out Vk.KHR.DisplayPlaneCapabilities capabilities)
	{
		if (Functions.vkGetDisplayPlaneCapabilitiesKHR == null) throw new Vk.Extras.FunctionNotLoadedException("vkGetDisplayPlaneCapabilitiesKHR");
		return Functions.GetDisplayPlaneCapabilitiesKHR(Handle, mode, planeIndex, out capabilities);
	}

	/// <summary>vkGetPhysicalDeviceSurfaceSupportKHR</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result GetPhysicalDeviceSurfaceSupportKHR(uint queueFamilyIndex, Vk.Handle<Vk.KHR.Surface> surface, Vk.Bool32* pSupported)
	{
		if (Functions.vkGetPhysicalDeviceSurfaceSupportKHR == null) throw new Vk.Extras.FunctionNotLoadedException("vkGetPhysicalDeviceSurfaceSupportKHR");
		return Functions.vkGetPhysicalDeviceSurfaceSupportKHR(Handle, queueFamilyIndex, surface, pSupported);
	}

	/// <summary>vkGetPhysicalDeviceSurfaceSupportKHR</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result GetPhysicalDeviceSurfaceSupportKHR(uint queueFamilyIndex, Vk.Handle<Vk.KHR.Surface> surface, out Vk.Bool32 supported)
	{
		if (Functions.vkGetPhysicalDeviceSurfaceSupportKHR == null) throw new Vk.Extras.FunctionNotLoadedException("vkGetPhysicalDeviceSurfaceSupportKHR");
		return Functions.GetPhysicalDeviceSurfaceSupportKHR(Handle, queueFamilyIndex, surface, out supported);
	}

	/// <summary>vkGetPhysicalDeviceSurfaceCapabilitiesKHR</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result GetPhysicalDeviceSurfaceCapabilitiesKHR(Vk.Handle<Vk.KHR.Surface> surface, Vk.KHR.SurfaceCapabilities* pSurfaceCapabilities)
	{
		if (Functions.vkGetPhysicalDeviceSurfaceCapabilitiesKHR == null) throw new Vk.Extras.FunctionNotLoadedException("vkGetPhysicalDeviceSurfaceCapabilitiesKHR");
		return Functions.vkGetPhysicalDeviceSurfaceCapabilitiesKHR(Handle, surface, pSurfaceCapabilities);
	}

	/// <summary>vkGetPhysicalDeviceSurfaceCapabilitiesKHR</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result GetPhysicalDeviceSurfaceCapabilitiesKHR(Vk.Handle<Vk.KHR.Surface> surface, out Vk.KHR.SurfaceCapabilities surfaceCapabilities)
	{
		if (Functions.vkGetPhysicalDeviceSurfaceCapabilitiesKHR == null) throw new Vk.Extras.FunctionNotLoadedException("vkGetPhysicalDeviceSurfaceCapabilitiesKHR");
		return Functions.GetPhysicalDeviceSurfaceCapabilitiesKHR(Handle, surface, out surfaceCapabilities);
	}

	/// <summary>vkGetPhysicalDeviceSurfaceFormatsKHR</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result GetPhysicalDeviceSurfaceFormatsKHR(Vk.Handle<Vk.KHR.Surface> surface, uint* pSurfaceFormatCount, Vk.KHR.SurfaceFormat* pSurfaceFormats)
	{
		if (Functions.vkGetPhysicalDeviceSurfaceFormatsKHR == null) throw new Vk.Extras.FunctionNotLoadedException("vkGetPhysicalDeviceSurfaceFormatsKHR");
		return Functions.vkGetPhysicalDeviceSurfaceFormatsKHR(Handle, surface, pSurfaceFormatCount, pSurfaceFormats);
	}

	/// <summary>vkGetPhysicalDeviceSurfaceFormatsKHR</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result GetPhysicalDeviceSurfaceFormatsKHR(Vk.Handle<Vk.KHR.Surface> surface, out uint surfaceFormatCount, in Span<Vk.KHR.SurfaceFormat> surfaceFormats)
	{
		if (Functions.vkGetPhysicalDeviceSurfaceFormatsKHR == null) throw new Vk.Extras.FunctionNotLoadedException("vkGetPhysicalDeviceSurfaceFormatsKHR");
		return Functions.GetPhysicalDeviceSurfaceFormatsKHR(Handle, surface, out surfaceFormatCount, surfaceFormats);
	}

	/// <summary>vkGetPhysicalDeviceSurfacePresentModesKHR</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result GetPhysicalDeviceSurfacePresentModesKHR(Vk.Handle<Vk.KHR.Surface> surface, uint* pPresentModeCount, Vk.KHR.PresentMode* pPresentModes)
	{
		if (Functions.vkGetPhysicalDeviceSurfacePresentModesKHR == null) throw new Vk.Extras.FunctionNotLoadedException("vkGetPhysicalDeviceSurfacePresentModesKHR");
		return Functions.vkGetPhysicalDeviceSurfacePresentModesKHR(Handle, surface, pPresentModeCount, pPresentModes);
	}

	/// <summary>vkGetPhysicalDeviceSurfacePresentModesKHR</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result GetPhysicalDeviceSurfacePresentModesKHR(Vk.Handle<Vk.KHR.Surface> surface, out uint presentModeCount, in Span<Vk.KHR.PresentMode> presentModes)
	{
		if (Functions.vkGetPhysicalDeviceSurfacePresentModesKHR == null) throw new Vk.Extras.FunctionNotLoadedException("vkGetPhysicalDeviceSurfacePresentModesKHR");
		return Functions.GetPhysicalDeviceSurfacePresentModesKHR(Handle, surface, out presentModeCount, presentModes);
	}

	/// <summary>vkGetPhysicalDeviceWaylandPresentationSupportKHR</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Bool32 GetPhysicalDeviceWaylandPresentationSupportKHR(uint queueFamilyIndex, void* display)
	{
		if (Functions.vkGetPhysicalDeviceWaylandPresentationSupportKHR == null) throw new Vk.Extras.FunctionNotLoadedException("vkGetPhysicalDeviceWaylandPresentationSupportKHR");
		return Functions.vkGetPhysicalDeviceWaylandPresentationSupportKHR(Handle, queueFamilyIndex, display);
	}

	/// <summary>vkGetPhysicalDeviceWin32PresentationSupportKHR</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Bool32 GetPhysicalDeviceWin32PresentationSupportKHR(uint queueFamilyIndex)
	{
		if (Functions.vkGetPhysicalDeviceWin32PresentationSupportKHR == null) throw new Vk.Extras.FunctionNotLoadedException("vkGetPhysicalDeviceWin32PresentationSupportKHR");
		return Functions.vkGetPhysicalDeviceWin32PresentationSupportKHR(Handle, queueFamilyIndex);
	}

	/// <summary>vkGetPhysicalDeviceXlibPresentationSupportKHR</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Bool32 GetPhysicalDeviceXlibPresentationSupportKHR(uint queueFamilyIndex, void* dpy, ulong visualID)
	{
		if (Functions.vkGetPhysicalDeviceXlibPresentationSupportKHR == null) throw new Vk.Extras.FunctionNotLoadedException("vkGetPhysicalDeviceXlibPresentationSupportKHR");
		return Functions.vkGetPhysicalDeviceXlibPresentationSupportKHR(Handle, queueFamilyIndex, dpy, visualID);
	}

	/// <summary>vkGetPhysicalDeviceXcbPresentationSupportKHR</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Bool32 GetPhysicalDeviceXcbPresentationSupportKHR(uint queueFamilyIndex, void* connection, uint visual_id)
	{
		if (Functions.vkGetPhysicalDeviceXcbPresentationSupportKHR == null) throw new Vk.Extras.FunctionNotLoadedException("vkGetPhysicalDeviceXcbPresentationSupportKHR");
		return Functions.vkGetPhysicalDeviceXcbPresentationSupportKHR(Handle, queueFamilyIndex, connection, visual_id);
	}

	/// <summary>vkGetPhysicalDeviceDirectFBPresentationSupportEXT</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Bool32 GetPhysicalDeviceDirectFBPresentationSupportEXT(uint queueFamilyIndex, void* dfb)
	{
		if (Functions.vkGetPhysicalDeviceDirectFBPresentationSupportEXT == null) throw new Vk.Extras.FunctionNotLoadedException("vkGetPhysicalDeviceDirectFBPresentationSupportEXT");
		return Functions.vkGetPhysicalDeviceDirectFBPresentationSupportEXT(Handle, queueFamilyIndex, dfb);
	}

	/// <summary>vkGetPhysicalDeviceExternalImageFormatPropertiesNV</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result GetPhysicalDeviceExternalImageFormatPropertiesNV(Vk.Format format, Vk.ImageType type, Vk.ImageTiling tiling, Vk.ImageUsageFlags usage, Vk.ImageCreateFlags flags, Vk.NV.ExternalMemoryHandleTypeFlags externalHandleType, Vk.NV.ExternalImageFormatProperties* pExternalImageFormatProperties)
	{
		if (Functions.vkGetPhysicalDeviceExternalImageFormatPropertiesNV == null) throw new Vk.Extras.FunctionNotLoadedException("vkGetPhysicalDeviceExternalImageFormatPropertiesNV");
		return Functions.vkGetPhysicalDeviceExternalImageFormatPropertiesNV(Handle, format, type, tiling, usage, flags, externalHandleType, pExternalImageFormatProperties);
	}

	/// <summary>vkGetPhysicalDeviceExternalImageFormatPropertiesNV</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result GetPhysicalDeviceExternalImageFormatPropertiesNV(Vk.Format format, Vk.ImageType type, Vk.ImageTiling tiling, Vk.ImageUsageFlags usage, Vk.ImageCreateFlags flags, Vk.NV.ExternalMemoryHandleTypeFlags externalHandleType, out Vk.NV.ExternalImageFormatProperties externalImageFormatProperties)
	{
		if (Functions.vkGetPhysicalDeviceExternalImageFormatPropertiesNV == null) throw new Vk.Extras.FunctionNotLoadedException("vkGetPhysicalDeviceExternalImageFormatPropertiesNV");
		return Functions.GetPhysicalDeviceExternalImageFormatPropertiesNV(Handle, format, type, tiling, usage, flags, externalHandleType, out externalImageFormatProperties);
	}

	/// <summary>vkGetPhysicalDeviceFeatures2</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void GetPhysicalDeviceFeatures2(Vk.PhysicalDeviceFeatures2* pFeatures)
	{
		if (Functions.vkGetPhysicalDeviceFeatures2 == null) throw new Vk.Extras.FunctionNotLoadedException("vkGetPhysicalDeviceFeatures2");
		Functions.vkGetPhysicalDeviceFeatures2(Handle, pFeatures);
	}

	/// <summary>vkGetPhysicalDeviceFeatures2</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void GetPhysicalDeviceFeatures2(out Vk.PhysicalDeviceFeatures2 features)
	{
		if (Functions.vkGetPhysicalDeviceFeatures2 == null) throw new Vk.Extras.FunctionNotLoadedException("vkGetPhysicalDeviceFeatures2");
		Functions.GetPhysicalDeviceFeatures2(Handle, out features);
	}

	/// <summary>vkGetPhysicalDeviceFeatures2KHR</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void GetPhysicalDeviceFeatures2KHR(Vk.PhysicalDeviceFeatures2* pFeatures)
	{
		if (Functions.vkGetPhysicalDeviceFeatures2KHR == null) throw new Vk.Extras.FunctionNotLoadedException("vkGetPhysicalDeviceFeatures2KHR");
		Functions.vkGetPhysicalDeviceFeatures2KHR(Handle, pFeatures);
	}

	/// <summary>vkGetPhysicalDeviceFeatures2KHR</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void GetPhysicalDeviceFeatures2KHR(out Vk.PhysicalDeviceFeatures2 features)
	{
		if (Functions.vkGetPhysicalDeviceFeatures2KHR == null) throw new Vk.Extras.FunctionNotLoadedException("vkGetPhysicalDeviceFeatures2KHR");
		Functions.GetPhysicalDeviceFeatures2KHR(Handle, out features);
	}

	/// <summary>vkGetPhysicalDeviceProperties2</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void GetPhysicalDeviceProperties2(Vk.PhysicalDeviceProperties2* pProperties)
	{
		if (Functions.vkGetPhysicalDeviceProperties2 == null) throw new Vk.Extras.FunctionNotLoadedException("vkGetPhysicalDeviceProperties2");
		Functions.vkGetPhysicalDeviceProperties2(Handle, pProperties);
	}

	/// <summary>vkGetPhysicalDeviceProperties2</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void GetPhysicalDeviceProperties2(out Vk.PhysicalDeviceProperties2 properties)
	{
		if (Functions.vkGetPhysicalDeviceProperties2 == null) throw new Vk.Extras.FunctionNotLoadedException("vkGetPhysicalDeviceProperties2");
		Functions.GetPhysicalDeviceProperties2(Handle, out properties);
	}

	/// <summary>vkGetPhysicalDeviceProperties2KHR</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void GetPhysicalDeviceProperties2KHR(Vk.PhysicalDeviceProperties2* pProperties)
	{
		if (Functions.vkGetPhysicalDeviceProperties2KHR == null) throw new Vk.Extras.FunctionNotLoadedException("vkGetPhysicalDeviceProperties2KHR");
		Functions.vkGetPhysicalDeviceProperties2KHR(Handle, pProperties);
	}

	/// <summary>vkGetPhysicalDeviceProperties2KHR</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void GetPhysicalDeviceProperties2KHR(out Vk.PhysicalDeviceProperties2 properties)
	{
		if (Functions.vkGetPhysicalDeviceProperties2KHR == null) throw new Vk.Extras.FunctionNotLoadedException("vkGetPhysicalDeviceProperties2KHR");
		Functions.GetPhysicalDeviceProperties2KHR(Handle, out properties);
	}

	/// <summary>vkGetPhysicalDeviceFormatProperties2</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void GetPhysicalDeviceFormatProperties2(Vk.Format format, Vk.FormatProperties2* pFormatProperties)
	{
		if (Functions.vkGetPhysicalDeviceFormatProperties2 == null) throw new Vk.Extras.FunctionNotLoadedException("vkGetPhysicalDeviceFormatProperties2");
		Functions.vkGetPhysicalDeviceFormatProperties2(Handle, format, pFormatProperties);
	}

	/// <summary>vkGetPhysicalDeviceFormatProperties2</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void GetPhysicalDeviceFormatProperties2(Vk.Format format, out Vk.FormatProperties2 formatProperties)
	{
		if (Functions.vkGetPhysicalDeviceFormatProperties2 == null) throw new Vk.Extras.FunctionNotLoadedException("vkGetPhysicalDeviceFormatProperties2");
		Functions.GetPhysicalDeviceFormatProperties2(Handle, format, out formatProperties);
	}

	/// <summary>vkGetPhysicalDeviceFormatProperties2KHR</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void GetPhysicalDeviceFormatProperties2KHR(Vk.Format format, Vk.FormatProperties2* pFormatProperties)
	{
		if (Functions.vkGetPhysicalDeviceFormatProperties2KHR == null) throw new Vk.Extras.FunctionNotLoadedException("vkGetPhysicalDeviceFormatProperties2KHR");
		Functions.vkGetPhysicalDeviceFormatProperties2KHR(Handle, format, pFormatProperties);
	}

	/// <summary>vkGetPhysicalDeviceFormatProperties2KHR</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void GetPhysicalDeviceFormatProperties2KHR(Vk.Format format, out Vk.FormatProperties2 formatProperties)
	{
		if (Functions.vkGetPhysicalDeviceFormatProperties2KHR == null) throw new Vk.Extras.FunctionNotLoadedException("vkGetPhysicalDeviceFormatProperties2KHR");
		Functions.GetPhysicalDeviceFormatProperties2KHR(Handle, format, out formatProperties);
	}

	/// <summary>vkGetPhysicalDeviceImageFormatProperties2</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result GetPhysicalDeviceImageFormatProperties2(Vk.PhysicalDeviceImageFormatInfo2* pImageFormatInfo, Vk.ImageFormatProperties2* pImageFormatProperties)
	{
		if (Functions.vkGetPhysicalDeviceImageFormatProperties2 == null) throw new Vk.Extras.FunctionNotLoadedException("vkGetPhysicalDeviceImageFormatProperties2");
		return Functions.vkGetPhysicalDeviceImageFormatProperties2(Handle, pImageFormatInfo, pImageFormatProperties);
	}

	/// <summary>vkGetPhysicalDeviceImageFormatProperties2</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result GetPhysicalDeviceImageFormatProperties2(in Vk.PhysicalDeviceImageFormatInfo2 imageFormatInfo, out Vk.ImageFormatProperties2 imageFormatProperties)
	{
		if (Functions.vkGetPhysicalDeviceImageFormatProperties2 == null) throw new Vk.Extras.FunctionNotLoadedException("vkGetPhysicalDeviceImageFormatProperties2");
		return Functions.GetPhysicalDeviceImageFormatProperties2(Handle, imageFormatInfo, out imageFormatProperties);
	}

	/// <summary>vkGetPhysicalDeviceImageFormatProperties2KHR</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result GetPhysicalDeviceImageFormatProperties2KHR(Vk.PhysicalDeviceImageFormatInfo2* pImageFormatInfo, Vk.ImageFormatProperties2* pImageFormatProperties)
	{
		if (Functions.vkGetPhysicalDeviceImageFormatProperties2KHR == null) throw new Vk.Extras.FunctionNotLoadedException("vkGetPhysicalDeviceImageFormatProperties2KHR");
		return Functions.vkGetPhysicalDeviceImageFormatProperties2KHR(Handle, pImageFormatInfo, pImageFormatProperties);
	}

	/// <summary>vkGetPhysicalDeviceImageFormatProperties2KHR</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result GetPhysicalDeviceImageFormatProperties2KHR(in Vk.PhysicalDeviceImageFormatInfo2 imageFormatInfo, out Vk.ImageFormatProperties2 imageFormatProperties)
	{
		if (Functions.vkGetPhysicalDeviceImageFormatProperties2KHR == null) throw new Vk.Extras.FunctionNotLoadedException("vkGetPhysicalDeviceImageFormatProperties2KHR");
		return Functions.GetPhysicalDeviceImageFormatProperties2KHR(Handle, imageFormatInfo, out imageFormatProperties);
	}

	/// <summary>vkGetPhysicalDeviceQueueFamilyProperties2</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void GetPhysicalDeviceQueueFamilyProperties2(uint* pQueueFamilyPropertyCount, Vk.QueueFamilyProperties2* pQueueFamilyProperties)
	{
		if (Functions.vkGetPhysicalDeviceQueueFamilyProperties2 == null) throw new Vk.Extras.FunctionNotLoadedException("vkGetPhysicalDeviceQueueFamilyProperties2");
		Functions.vkGetPhysicalDeviceQueueFamilyProperties2(Handle, pQueueFamilyPropertyCount, pQueueFamilyProperties);
	}

	/// <summary>vkGetPhysicalDeviceQueueFamilyProperties2</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void GetPhysicalDeviceQueueFamilyProperties2(out uint queueFamilyPropertyCount, in Span<Vk.QueueFamilyProperties2> queueFamilyProperties)
	{
		if (Functions.vkGetPhysicalDeviceQueueFamilyProperties2 == null) throw new Vk.Extras.FunctionNotLoadedException("vkGetPhysicalDeviceQueueFamilyProperties2");
		Functions.GetPhysicalDeviceQueueFamilyProperties2(Handle, out queueFamilyPropertyCount, queueFamilyProperties);
	}

	/// <summary>vkGetPhysicalDeviceQueueFamilyProperties2KHR</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void GetPhysicalDeviceQueueFamilyProperties2KHR(uint* pQueueFamilyPropertyCount, Vk.QueueFamilyProperties2* pQueueFamilyProperties)
	{
		if (Functions.vkGetPhysicalDeviceQueueFamilyProperties2KHR == null) throw new Vk.Extras.FunctionNotLoadedException("vkGetPhysicalDeviceQueueFamilyProperties2KHR");
		Functions.vkGetPhysicalDeviceQueueFamilyProperties2KHR(Handle, pQueueFamilyPropertyCount, pQueueFamilyProperties);
	}

	/// <summary>vkGetPhysicalDeviceQueueFamilyProperties2KHR</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void GetPhysicalDeviceQueueFamilyProperties2KHR(out uint queueFamilyPropertyCount, in Span<Vk.QueueFamilyProperties2> queueFamilyProperties)
	{
		if (Functions.vkGetPhysicalDeviceQueueFamilyProperties2KHR == null) throw new Vk.Extras.FunctionNotLoadedException("vkGetPhysicalDeviceQueueFamilyProperties2KHR");
		Functions.GetPhysicalDeviceQueueFamilyProperties2KHR(Handle, out queueFamilyPropertyCount, queueFamilyProperties);
	}

	/// <summary>vkGetPhysicalDeviceMemoryProperties2</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void GetPhysicalDeviceMemoryProperties2(Vk.PhysicalDeviceMemoryProperties2* pMemoryProperties)
	{
		if (Functions.vkGetPhysicalDeviceMemoryProperties2 == null) throw new Vk.Extras.FunctionNotLoadedException("vkGetPhysicalDeviceMemoryProperties2");
		Functions.vkGetPhysicalDeviceMemoryProperties2(Handle, pMemoryProperties);
	}

	/// <summary>vkGetPhysicalDeviceMemoryProperties2</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void GetPhysicalDeviceMemoryProperties2(out Vk.PhysicalDeviceMemoryProperties2 memoryProperties)
	{
		if (Functions.vkGetPhysicalDeviceMemoryProperties2 == null) throw new Vk.Extras.FunctionNotLoadedException("vkGetPhysicalDeviceMemoryProperties2");
		Functions.GetPhysicalDeviceMemoryProperties2(Handle, out memoryProperties);
	}

	/// <summary>vkGetPhysicalDeviceMemoryProperties2KHR</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void GetPhysicalDeviceMemoryProperties2KHR(Vk.PhysicalDeviceMemoryProperties2* pMemoryProperties)
	{
		if (Functions.vkGetPhysicalDeviceMemoryProperties2KHR == null) throw new Vk.Extras.FunctionNotLoadedException("vkGetPhysicalDeviceMemoryProperties2KHR");
		Functions.vkGetPhysicalDeviceMemoryProperties2KHR(Handle, pMemoryProperties);
	}

	/// <summary>vkGetPhysicalDeviceMemoryProperties2KHR</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void GetPhysicalDeviceMemoryProperties2KHR(out Vk.PhysicalDeviceMemoryProperties2 memoryProperties)
	{
		if (Functions.vkGetPhysicalDeviceMemoryProperties2KHR == null) throw new Vk.Extras.FunctionNotLoadedException("vkGetPhysicalDeviceMemoryProperties2KHR");
		Functions.GetPhysicalDeviceMemoryProperties2KHR(Handle, out memoryProperties);
	}

	/// <summary>vkGetPhysicalDeviceSparseImageFormatProperties2</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void GetPhysicalDeviceSparseImageFormatProperties2(Vk.PhysicalDeviceSparseImageFormatInfo2* pFormatInfo, uint* pPropertyCount, Vk.SparseImageFormatProperties2* pProperties)
	{
		if (Functions.vkGetPhysicalDeviceSparseImageFormatProperties2 == null) throw new Vk.Extras.FunctionNotLoadedException("vkGetPhysicalDeviceSparseImageFormatProperties2");
		Functions.vkGetPhysicalDeviceSparseImageFormatProperties2(Handle, pFormatInfo, pPropertyCount, pProperties);
	}

	/// <summary>vkGetPhysicalDeviceSparseImageFormatProperties2</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void GetPhysicalDeviceSparseImageFormatProperties2(in Vk.PhysicalDeviceSparseImageFormatInfo2 formatInfo, out uint propertyCount, in Span<Vk.SparseImageFormatProperties2> properties)
	{
		if (Functions.vkGetPhysicalDeviceSparseImageFormatProperties2 == null) throw new Vk.Extras.FunctionNotLoadedException("vkGetPhysicalDeviceSparseImageFormatProperties2");
		Functions.GetPhysicalDeviceSparseImageFormatProperties2(Handle, formatInfo, out propertyCount, properties);
	}

	/// <summary>vkGetPhysicalDeviceSparseImageFormatProperties2KHR</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void GetPhysicalDeviceSparseImageFormatProperties2KHR(Vk.PhysicalDeviceSparseImageFormatInfo2* pFormatInfo, uint* pPropertyCount, Vk.SparseImageFormatProperties2* pProperties)
	{
		if (Functions.vkGetPhysicalDeviceSparseImageFormatProperties2KHR == null) throw new Vk.Extras.FunctionNotLoadedException("vkGetPhysicalDeviceSparseImageFormatProperties2KHR");
		Functions.vkGetPhysicalDeviceSparseImageFormatProperties2KHR(Handle, pFormatInfo, pPropertyCount, pProperties);
	}

	/// <summary>vkGetPhysicalDeviceSparseImageFormatProperties2KHR</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void GetPhysicalDeviceSparseImageFormatProperties2KHR(in Vk.PhysicalDeviceSparseImageFormatInfo2 formatInfo, out uint propertyCount, in Span<Vk.SparseImageFormatProperties2> properties)
	{
		if (Functions.vkGetPhysicalDeviceSparseImageFormatProperties2KHR == null) throw new Vk.Extras.FunctionNotLoadedException("vkGetPhysicalDeviceSparseImageFormatProperties2KHR");
		Functions.GetPhysicalDeviceSparseImageFormatProperties2KHR(Handle, formatInfo, out propertyCount, properties);
	}

	/// <summary>vkGetPhysicalDeviceExternalBufferProperties</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void GetPhysicalDeviceExternalBufferProperties(Vk.PhysicalDeviceExternalBufferInfo* pExternalBufferInfo, Vk.ExternalBufferProperties* pExternalBufferProperties)
	{
		if (Functions.vkGetPhysicalDeviceExternalBufferProperties == null) throw new Vk.Extras.FunctionNotLoadedException("vkGetPhysicalDeviceExternalBufferProperties");
		Functions.vkGetPhysicalDeviceExternalBufferProperties(Handle, pExternalBufferInfo, pExternalBufferProperties);
	}

	/// <summary>vkGetPhysicalDeviceExternalBufferProperties</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void GetPhysicalDeviceExternalBufferProperties(in Vk.PhysicalDeviceExternalBufferInfo externalBufferInfo, out Vk.ExternalBufferProperties externalBufferProperties)
	{
		if (Functions.vkGetPhysicalDeviceExternalBufferProperties == null) throw new Vk.Extras.FunctionNotLoadedException("vkGetPhysicalDeviceExternalBufferProperties");
		Functions.GetPhysicalDeviceExternalBufferProperties(Handle, externalBufferInfo, out externalBufferProperties);
	}

	/// <summary>vkGetPhysicalDeviceExternalBufferPropertiesKHR</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void GetPhysicalDeviceExternalBufferPropertiesKHR(Vk.PhysicalDeviceExternalBufferInfo* pExternalBufferInfo, Vk.ExternalBufferProperties* pExternalBufferProperties)
	{
		if (Functions.vkGetPhysicalDeviceExternalBufferPropertiesKHR == null) throw new Vk.Extras.FunctionNotLoadedException("vkGetPhysicalDeviceExternalBufferPropertiesKHR");
		Functions.vkGetPhysicalDeviceExternalBufferPropertiesKHR(Handle, pExternalBufferInfo, pExternalBufferProperties);
	}

	/// <summary>vkGetPhysicalDeviceExternalBufferPropertiesKHR</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void GetPhysicalDeviceExternalBufferPropertiesKHR(in Vk.PhysicalDeviceExternalBufferInfo externalBufferInfo, out Vk.ExternalBufferProperties externalBufferProperties)
	{
		if (Functions.vkGetPhysicalDeviceExternalBufferPropertiesKHR == null) throw new Vk.Extras.FunctionNotLoadedException("vkGetPhysicalDeviceExternalBufferPropertiesKHR");
		Functions.GetPhysicalDeviceExternalBufferPropertiesKHR(Handle, externalBufferInfo, out externalBufferProperties);
	}

	/// <summary>vkGetPhysicalDeviceExternalSemaphoreProperties</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void GetPhysicalDeviceExternalSemaphoreProperties(Vk.PhysicalDeviceExternalSemaphoreInfo* pExternalSemaphoreInfo, Vk.ExternalSemaphoreProperties* pExternalSemaphoreProperties)
	{
		if (Functions.vkGetPhysicalDeviceExternalSemaphoreProperties == null) throw new Vk.Extras.FunctionNotLoadedException("vkGetPhysicalDeviceExternalSemaphoreProperties");
		Functions.vkGetPhysicalDeviceExternalSemaphoreProperties(Handle, pExternalSemaphoreInfo, pExternalSemaphoreProperties);
	}

	/// <summary>vkGetPhysicalDeviceExternalSemaphoreProperties</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void GetPhysicalDeviceExternalSemaphoreProperties(in Vk.PhysicalDeviceExternalSemaphoreInfo externalSemaphoreInfo, out Vk.ExternalSemaphoreProperties externalSemaphoreProperties)
	{
		if (Functions.vkGetPhysicalDeviceExternalSemaphoreProperties == null) throw new Vk.Extras.FunctionNotLoadedException("vkGetPhysicalDeviceExternalSemaphoreProperties");
		Functions.GetPhysicalDeviceExternalSemaphoreProperties(Handle, externalSemaphoreInfo, out externalSemaphoreProperties);
	}

	/// <summary>vkGetPhysicalDeviceExternalSemaphorePropertiesKHR</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void GetPhysicalDeviceExternalSemaphorePropertiesKHR(Vk.PhysicalDeviceExternalSemaphoreInfo* pExternalSemaphoreInfo, Vk.ExternalSemaphoreProperties* pExternalSemaphoreProperties)
	{
		if (Functions.vkGetPhysicalDeviceExternalSemaphorePropertiesKHR == null) throw new Vk.Extras.FunctionNotLoadedException("vkGetPhysicalDeviceExternalSemaphorePropertiesKHR");
		Functions.vkGetPhysicalDeviceExternalSemaphorePropertiesKHR(Handle, pExternalSemaphoreInfo, pExternalSemaphoreProperties);
	}

	/// <summary>vkGetPhysicalDeviceExternalSemaphorePropertiesKHR</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void GetPhysicalDeviceExternalSemaphorePropertiesKHR(in Vk.PhysicalDeviceExternalSemaphoreInfo externalSemaphoreInfo, out Vk.ExternalSemaphoreProperties externalSemaphoreProperties)
	{
		if (Functions.vkGetPhysicalDeviceExternalSemaphorePropertiesKHR == null) throw new Vk.Extras.FunctionNotLoadedException("vkGetPhysicalDeviceExternalSemaphorePropertiesKHR");
		Functions.GetPhysicalDeviceExternalSemaphorePropertiesKHR(Handle, externalSemaphoreInfo, out externalSemaphoreProperties);
	}

	/// <summary>vkGetPhysicalDeviceExternalFenceProperties</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void GetPhysicalDeviceExternalFenceProperties(Vk.PhysicalDeviceExternalFenceInfo* pExternalFenceInfo, Vk.ExternalFenceProperties* pExternalFenceProperties)
	{
		if (Functions.vkGetPhysicalDeviceExternalFenceProperties == null) throw new Vk.Extras.FunctionNotLoadedException("vkGetPhysicalDeviceExternalFenceProperties");
		Functions.vkGetPhysicalDeviceExternalFenceProperties(Handle, pExternalFenceInfo, pExternalFenceProperties);
	}

	/// <summary>vkGetPhysicalDeviceExternalFenceProperties</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void GetPhysicalDeviceExternalFenceProperties(in Vk.PhysicalDeviceExternalFenceInfo externalFenceInfo, out Vk.ExternalFenceProperties externalFenceProperties)
	{
		if (Functions.vkGetPhysicalDeviceExternalFenceProperties == null) throw new Vk.Extras.FunctionNotLoadedException("vkGetPhysicalDeviceExternalFenceProperties");
		Functions.GetPhysicalDeviceExternalFenceProperties(Handle, externalFenceInfo, out externalFenceProperties);
	}

	/// <summary>vkGetPhysicalDeviceExternalFencePropertiesKHR</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void GetPhysicalDeviceExternalFencePropertiesKHR(Vk.PhysicalDeviceExternalFenceInfo* pExternalFenceInfo, Vk.ExternalFenceProperties* pExternalFenceProperties)
	{
		if (Functions.vkGetPhysicalDeviceExternalFencePropertiesKHR == null) throw new Vk.Extras.FunctionNotLoadedException("vkGetPhysicalDeviceExternalFencePropertiesKHR");
		Functions.vkGetPhysicalDeviceExternalFencePropertiesKHR(Handle, pExternalFenceInfo, pExternalFenceProperties);
	}

	/// <summary>vkGetPhysicalDeviceExternalFencePropertiesKHR</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void GetPhysicalDeviceExternalFencePropertiesKHR(in Vk.PhysicalDeviceExternalFenceInfo externalFenceInfo, out Vk.ExternalFenceProperties externalFenceProperties)
	{
		if (Functions.vkGetPhysicalDeviceExternalFencePropertiesKHR == null) throw new Vk.Extras.FunctionNotLoadedException("vkGetPhysicalDeviceExternalFencePropertiesKHR");
		Functions.GetPhysicalDeviceExternalFencePropertiesKHR(Handle, externalFenceInfo, out externalFenceProperties);
	}

	/// <summary>vkAcquireXlibDisplayEXT</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result AcquireXlibDisplayEXT(void* dpy, Vk.Handle<Vk.KHR.Display> display)
	{
		if (Functions.vkAcquireXlibDisplayEXT == null) throw new Vk.Extras.FunctionNotLoadedException("vkAcquireXlibDisplayEXT");
		return Functions.vkAcquireXlibDisplayEXT(Handle, dpy, display);
	}

	/// <summary>vkGetRandROutputDisplayEXT</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result GetRandROutputDisplayEXT(void* dpy, ulong rrOutput, Vk.Handle<Vk.KHR.Display>* pDisplay)
	{
		if (Functions.vkGetRandROutputDisplayEXT == null) throw new Vk.Extras.FunctionNotLoadedException("vkGetRandROutputDisplayEXT");
		return Functions.vkGetRandROutputDisplayEXT(Handle, dpy, rrOutput, pDisplay);
	}

	/// <summary>vkGetRandROutputDisplayEXT</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result GetRandROutputDisplayEXT(void* dpy, ulong rrOutput, out Vk.KHR.Display pDisplay)
	{
		if (Functions.vkGetRandROutputDisplayEXT == null) throw new Vk.Extras.FunctionNotLoadedException("vkGetRandROutputDisplayEXT");
		Vk.Handle<Vk.KHR.Display> HANDLE;
		var RESULT = Functions.vkGetRandROutputDisplayEXT(Handle, dpy, rrOutput, &HANDLE);
		pDisplay = (RESULT == Result.Success) ? new(this, HANDLE) : Vk.KHR.Display.Null;
		return RESULT;
	}

	/// <summary>vkGetRandROutputDisplayEXT</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result GetRandROutputDisplayEXT(void* dpy, ulong rrOutput, out Vk.Handle<Vk.KHR.Display> display)
	{
		if (Functions.vkGetRandROutputDisplayEXT == null) throw new Vk.Extras.FunctionNotLoadedException("vkGetRandROutputDisplayEXT");
		return Functions.GetRandROutputDisplayEXT(Handle, dpy, rrOutput, out display);
	}

	/// <summary>vkGetPhysicalDeviceSurfaceCapabilities2EXT</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result GetPhysicalDeviceSurfaceCapabilities2EXT(Vk.Handle<Vk.KHR.Surface> surface, Vk.EXT.SurfaceCapabilities2* pSurfaceCapabilities)
	{
		if (Functions.vkGetPhysicalDeviceSurfaceCapabilities2EXT == null) throw new Vk.Extras.FunctionNotLoadedException("vkGetPhysicalDeviceSurfaceCapabilities2EXT");
		return Functions.vkGetPhysicalDeviceSurfaceCapabilities2EXT(Handle, surface, pSurfaceCapabilities);
	}

	/// <summary>vkGetPhysicalDeviceSurfaceCapabilities2EXT</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result GetPhysicalDeviceSurfaceCapabilities2EXT(Vk.Handle<Vk.KHR.Surface> surface, out Vk.EXT.SurfaceCapabilities2 surfaceCapabilities)
	{
		if (Functions.vkGetPhysicalDeviceSurfaceCapabilities2EXT == null) throw new Vk.Extras.FunctionNotLoadedException("vkGetPhysicalDeviceSurfaceCapabilities2EXT");
		return Functions.GetPhysicalDeviceSurfaceCapabilities2EXT(Handle, surface, out surfaceCapabilities);
	}

	/// <summary>vkGetPhysicalDevicePresentRectanglesKHR</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result GetPhysicalDevicePresentRectanglesKHR(Vk.Handle<Vk.KHR.Surface> surface, uint* pRectCount, Vk.Rect2D* pRects)
	{
		if (Functions.vkGetPhysicalDevicePresentRectanglesKHR == null) throw new Vk.Extras.FunctionNotLoadedException("vkGetPhysicalDevicePresentRectanglesKHR");
		return Functions.vkGetPhysicalDevicePresentRectanglesKHR(Handle, surface, pRectCount, pRects);
	}

	/// <summary>vkGetPhysicalDevicePresentRectanglesKHR</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result GetPhysicalDevicePresentRectanglesKHR(Vk.Handle<Vk.KHR.Surface> surface, out uint rectCount, in Span<Vk.Rect2D> rects)
	{
		if (Functions.vkGetPhysicalDevicePresentRectanglesKHR == null) throw new Vk.Extras.FunctionNotLoadedException("vkGetPhysicalDevicePresentRectanglesKHR");
		return Functions.GetPhysicalDevicePresentRectanglesKHR(Handle, surface, out rectCount, rects);
	}

	/// <summary>vkGetPhysicalDeviceMultisamplePropertiesEXT</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void GetPhysicalDeviceMultisamplePropertiesEXT(Vk.SampleCountFlags samples, Vk.EXT.MultisampleProperties* pMultisampleProperties)
	{
		if (Functions.vkGetPhysicalDeviceMultisamplePropertiesEXT == null) throw new Vk.Extras.FunctionNotLoadedException("vkGetPhysicalDeviceMultisamplePropertiesEXT");
		Functions.vkGetPhysicalDeviceMultisamplePropertiesEXT(Handle, samples, pMultisampleProperties);
	}

	/// <summary>vkGetPhysicalDeviceMultisamplePropertiesEXT</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void GetPhysicalDeviceMultisamplePropertiesEXT(Vk.SampleCountFlags samples, out Vk.EXT.MultisampleProperties multisampleProperties)
	{
		if (Functions.vkGetPhysicalDeviceMultisamplePropertiesEXT == null) throw new Vk.Extras.FunctionNotLoadedException("vkGetPhysicalDeviceMultisamplePropertiesEXT");
		Functions.GetPhysicalDeviceMultisamplePropertiesEXT(Handle, samples, out multisampleProperties);
	}

	/// <summary>vkGetPhysicalDeviceSurfaceCapabilities2KHR</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result GetPhysicalDeviceSurfaceCapabilities2KHR(Vk.KHR.PhysicalDeviceSurfaceInfo2* pSurfaceInfo, Vk.KHR.SurfaceCapabilities2* pSurfaceCapabilities)
	{
		if (Functions.vkGetPhysicalDeviceSurfaceCapabilities2KHR == null) throw new Vk.Extras.FunctionNotLoadedException("vkGetPhysicalDeviceSurfaceCapabilities2KHR");
		return Functions.vkGetPhysicalDeviceSurfaceCapabilities2KHR(Handle, pSurfaceInfo, pSurfaceCapabilities);
	}

	/// <summary>vkGetPhysicalDeviceSurfaceCapabilities2KHR</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result GetPhysicalDeviceSurfaceCapabilities2KHR(in Vk.KHR.PhysicalDeviceSurfaceInfo2 surfaceInfo, out Vk.KHR.SurfaceCapabilities2 surfaceCapabilities)
	{
		if (Functions.vkGetPhysicalDeviceSurfaceCapabilities2KHR == null) throw new Vk.Extras.FunctionNotLoadedException("vkGetPhysicalDeviceSurfaceCapabilities2KHR");
		return Functions.GetPhysicalDeviceSurfaceCapabilities2KHR(Handle, surfaceInfo, out surfaceCapabilities);
	}

	/// <summary>vkGetPhysicalDeviceSurfaceFormats2KHR</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result GetPhysicalDeviceSurfaceFormats2KHR(Vk.KHR.PhysicalDeviceSurfaceInfo2* pSurfaceInfo, uint* pSurfaceFormatCount, Vk.KHR.SurfaceFormat2* pSurfaceFormats)
	{
		if (Functions.vkGetPhysicalDeviceSurfaceFormats2KHR == null) throw new Vk.Extras.FunctionNotLoadedException("vkGetPhysicalDeviceSurfaceFormats2KHR");
		return Functions.vkGetPhysicalDeviceSurfaceFormats2KHR(Handle, pSurfaceInfo, pSurfaceFormatCount, pSurfaceFormats);
	}

	/// <summary>vkGetPhysicalDeviceSurfaceFormats2KHR</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result GetPhysicalDeviceSurfaceFormats2KHR(in Vk.KHR.PhysicalDeviceSurfaceInfo2 surfaceInfo, out uint surfaceFormatCount, in Span<Vk.KHR.SurfaceFormat2> surfaceFormats)
	{
		if (Functions.vkGetPhysicalDeviceSurfaceFormats2KHR == null) throw new Vk.Extras.FunctionNotLoadedException("vkGetPhysicalDeviceSurfaceFormats2KHR");
		return Functions.GetPhysicalDeviceSurfaceFormats2KHR(Handle, surfaceInfo, out surfaceFormatCount, surfaceFormats);
	}

	/// <summary>vkGetPhysicalDeviceDisplayProperties2KHR</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result GetPhysicalDeviceDisplayProperties2KHR(uint* pPropertyCount, Vk.KHR.DisplayProperties2* pProperties)
	{
		if (Functions.vkGetPhysicalDeviceDisplayProperties2KHR == null) throw new Vk.Extras.FunctionNotLoadedException("vkGetPhysicalDeviceDisplayProperties2KHR");
		return Functions.vkGetPhysicalDeviceDisplayProperties2KHR(Handle, pPropertyCount, pProperties);
	}

	/// <summary>vkGetPhysicalDeviceDisplayProperties2KHR</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result GetPhysicalDeviceDisplayProperties2KHR(out uint propertyCount, in Span<Vk.KHR.DisplayProperties2> properties)
	{
		if (Functions.vkGetPhysicalDeviceDisplayProperties2KHR == null) throw new Vk.Extras.FunctionNotLoadedException("vkGetPhysicalDeviceDisplayProperties2KHR");
		return Functions.GetPhysicalDeviceDisplayProperties2KHR(Handle, out propertyCount, properties);
	}

	/// <summary>vkGetPhysicalDeviceDisplayPlaneProperties2KHR</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result GetPhysicalDeviceDisplayPlaneProperties2KHR(uint* pPropertyCount, Vk.KHR.DisplayPlaneProperties2* pProperties)
	{
		if (Functions.vkGetPhysicalDeviceDisplayPlaneProperties2KHR == null) throw new Vk.Extras.FunctionNotLoadedException("vkGetPhysicalDeviceDisplayPlaneProperties2KHR");
		return Functions.vkGetPhysicalDeviceDisplayPlaneProperties2KHR(Handle, pPropertyCount, pProperties);
	}

	/// <summary>vkGetPhysicalDeviceDisplayPlaneProperties2KHR</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result GetPhysicalDeviceDisplayPlaneProperties2KHR(out uint propertyCount, in Span<Vk.KHR.DisplayPlaneProperties2> properties)
	{
		if (Functions.vkGetPhysicalDeviceDisplayPlaneProperties2KHR == null) throw new Vk.Extras.FunctionNotLoadedException("vkGetPhysicalDeviceDisplayPlaneProperties2KHR");
		return Functions.GetPhysicalDeviceDisplayPlaneProperties2KHR(Handle, out propertyCount, properties);
	}

	/// <summary>vkGetDisplayPlaneCapabilities2KHR</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result GetDisplayPlaneCapabilities2KHR(Vk.KHR.DisplayPlaneInfo2* pDisplayPlaneInfo, Vk.KHR.DisplayPlaneCapabilities2* pCapabilities)
	{
		if (Functions.vkGetDisplayPlaneCapabilities2KHR == null) throw new Vk.Extras.FunctionNotLoadedException("vkGetDisplayPlaneCapabilities2KHR");
		return Functions.vkGetDisplayPlaneCapabilities2KHR(Handle, pDisplayPlaneInfo, pCapabilities);
	}

	/// <summary>vkGetDisplayPlaneCapabilities2KHR</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result GetDisplayPlaneCapabilities2KHR(in Vk.KHR.DisplayPlaneInfo2 displayPlaneInfo, out Vk.KHR.DisplayPlaneCapabilities2 capabilities)
	{
		if (Functions.vkGetDisplayPlaneCapabilities2KHR == null) throw new Vk.Extras.FunctionNotLoadedException("vkGetDisplayPlaneCapabilities2KHR");
		return Functions.GetDisplayPlaneCapabilities2KHR(Handle, displayPlaneInfo, out capabilities);
	}

	/// <summary>vkGetPhysicalDeviceCalibrateableTimeDomainsEXT</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result GetPhysicalDeviceCalibrateableTimeDomainsEXT(uint* pTimeDomainCount, Vk.EXT.TimeDomain* pTimeDomains)
	{
		if (Functions.vkGetPhysicalDeviceCalibrateableTimeDomainsEXT == null) throw new Vk.Extras.FunctionNotLoadedException("vkGetPhysicalDeviceCalibrateableTimeDomainsEXT");
		return Functions.vkGetPhysicalDeviceCalibrateableTimeDomainsEXT(Handle, pTimeDomainCount, pTimeDomains);
	}

	/// <summary>vkGetPhysicalDeviceCalibrateableTimeDomainsEXT</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result GetPhysicalDeviceCalibrateableTimeDomainsEXT(out uint timeDomainCount, in Span<Vk.EXT.TimeDomain> timeDomains)
	{
		if (Functions.vkGetPhysicalDeviceCalibrateableTimeDomainsEXT == null) throw new Vk.Extras.FunctionNotLoadedException("vkGetPhysicalDeviceCalibrateableTimeDomainsEXT");
		return Functions.GetPhysicalDeviceCalibrateableTimeDomainsEXT(Handle, out timeDomainCount, timeDomains);
	}

	/// <summary>vkGetPhysicalDeviceCooperativeMatrixPropertiesNV</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result GetPhysicalDeviceCooperativeMatrixPropertiesNV(uint* pPropertyCount, Vk.NV.CooperativeMatrixProperties* pProperties)
	{
		if (Functions.vkGetPhysicalDeviceCooperativeMatrixPropertiesNV == null) throw new Vk.Extras.FunctionNotLoadedException("vkGetPhysicalDeviceCooperativeMatrixPropertiesNV");
		return Functions.vkGetPhysicalDeviceCooperativeMatrixPropertiesNV(Handle, pPropertyCount, pProperties);
	}

	/// <summary>vkGetPhysicalDeviceCooperativeMatrixPropertiesNV</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result GetPhysicalDeviceCooperativeMatrixPropertiesNV(out uint propertyCount, in Span<Vk.NV.CooperativeMatrixProperties> properties)
	{
		if (Functions.vkGetPhysicalDeviceCooperativeMatrixPropertiesNV == null) throw new Vk.Extras.FunctionNotLoadedException("vkGetPhysicalDeviceCooperativeMatrixPropertiesNV");
		return Functions.GetPhysicalDeviceCooperativeMatrixPropertiesNV(Handle, out propertyCount, properties);
	}

	/// <summary>vkGetPhysicalDeviceSurfacePresentModes2EXT</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result GetPhysicalDeviceSurfacePresentModes2EXT(Vk.KHR.PhysicalDeviceSurfaceInfo2* pSurfaceInfo, uint* pPresentModeCount, Vk.KHR.PresentMode* pPresentModes)
	{
		if (Functions.vkGetPhysicalDeviceSurfacePresentModes2EXT == null) throw new Vk.Extras.FunctionNotLoadedException("vkGetPhysicalDeviceSurfacePresentModes2EXT");
		return Functions.vkGetPhysicalDeviceSurfacePresentModes2EXT(Handle, pSurfaceInfo, pPresentModeCount, pPresentModes);
	}

	/// <summary>vkGetPhysicalDeviceSurfacePresentModes2EXT</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result GetPhysicalDeviceSurfacePresentModes2EXT(in Vk.KHR.PhysicalDeviceSurfaceInfo2 surfaceInfo, out uint presentModeCount, in Span<Vk.KHR.PresentMode> presentModes)
	{
		if (Functions.vkGetPhysicalDeviceSurfacePresentModes2EXT == null) throw new Vk.Extras.FunctionNotLoadedException("vkGetPhysicalDeviceSurfacePresentModes2EXT");
		return Functions.GetPhysicalDeviceSurfacePresentModes2EXT(Handle, surfaceInfo, out presentModeCount, presentModes);
	}

	/// <summary>vkEnumeratePhysicalDeviceQueueFamilyPerformanceQueryCountersKHR</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result EnumeratePhysicalDeviceQueueFamilyPerformanceQueryCountersKHR(uint queueFamilyIndex, uint* pCounterCount, Vk.KHR.PerformanceCounter* pCounters, Vk.KHR.PerformanceCounterDescription* pCounterDescriptions)
	{
		if (Functions.vkEnumeratePhysicalDeviceQueueFamilyPerformanceQueryCountersKHR == null) throw new Vk.Extras.FunctionNotLoadedException("vkEnumeratePhysicalDeviceQueueFamilyPerformanceQueryCountersKHR");
		return Functions.vkEnumeratePhysicalDeviceQueueFamilyPerformanceQueryCountersKHR(Handle, queueFamilyIndex, pCounterCount, pCounters, pCounterDescriptions);
	}

	/// <summary>vkEnumeratePhysicalDeviceQueueFamilyPerformanceQueryCountersKHR</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result EnumeratePhysicalDeviceQueueFamilyPerformanceQueryCountersKHR(uint queueFamilyIndex, out uint counterCount, in Span<Vk.KHR.PerformanceCounter> counters, in Span<Vk.KHR.PerformanceCounterDescription> counterDescriptions)
	{
		if (Functions.vkEnumeratePhysicalDeviceQueueFamilyPerformanceQueryCountersKHR == null) throw new Vk.Extras.FunctionNotLoadedException("vkEnumeratePhysicalDeviceQueueFamilyPerformanceQueryCountersKHR");
		return Functions.EnumeratePhysicalDeviceQueueFamilyPerformanceQueryCountersKHR(Handle, queueFamilyIndex, out counterCount, counters, counterDescriptions);
	}

	/// <summary>vkGetPhysicalDeviceQueueFamilyPerformanceQueryPassesKHR</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void GetPhysicalDeviceQueueFamilyPerformanceQueryPassesKHR(Vk.KHR.QueryPoolPerformanceCreateInfo* pPerformanceQueryCreateInfo, uint* pNumPasses)
	{
		if (Functions.vkGetPhysicalDeviceQueueFamilyPerformanceQueryPassesKHR == null) throw new Vk.Extras.FunctionNotLoadedException("vkGetPhysicalDeviceQueueFamilyPerformanceQueryPassesKHR");
		Functions.vkGetPhysicalDeviceQueueFamilyPerformanceQueryPassesKHR(Handle, pPerformanceQueryCreateInfo, pNumPasses);
	}

	/// <summary>vkGetPhysicalDeviceQueueFamilyPerformanceQueryPassesKHR</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void GetPhysicalDeviceQueueFamilyPerformanceQueryPassesKHR(in Vk.KHR.QueryPoolPerformanceCreateInfo performanceQueryCreateInfo, out uint numPasses)
	{
		if (Functions.vkGetPhysicalDeviceQueueFamilyPerformanceQueryPassesKHR == null) throw new Vk.Extras.FunctionNotLoadedException("vkGetPhysicalDeviceQueueFamilyPerformanceQueryPassesKHR");
		Functions.GetPhysicalDeviceQueueFamilyPerformanceQueryPassesKHR(Handle, performanceQueryCreateInfo, out numPasses);
	}

	/// <summary>vkGetPhysicalDeviceSupportedFramebufferMixedSamplesCombinationsNV</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result GetPhysicalDeviceSupportedFramebufferMixedSamplesCombinationsNV(uint* pCombinationCount, Vk.NV.FramebufferMixedSamplesCombination* pCombinations)
	{
		if (Functions.vkGetPhysicalDeviceSupportedFramebufferMixedSamplesCombinationsNV == null) throw new Vk.Extras.FunctionNotLoadedException("vkGetPhysicalDeviceSupportedFramebufferMixedSamplesCombinationsNV");
		return Functions.vkGetPhysicalDeviceSupportedFramebufferMixedSamplesCombinationsNV(Handle, pCombinationCount, pCombinations);
	}

	/// <summary>vkGetPhysicalDeviceSupportedFramebufferMixedSamplesCombinationsNV</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result GetPhysicalDeviceSupportedFramebufferMixedSamplesCombinationsNV(out uint combinationCount, in Span<Vk.NV.FramebufferMixedSamplesCombination> combinations)
	{
		if (Functions.vkGetPhysicalDeviceSupportedFramebufferMixedSamplesCombinationsNV == null) throw new Vk.Extras.FunctionNotLoadedException("vkGetPhysicalDeviceSupportedFramebufferMixedSamplesCombinationsNV");
		return Functions.GetPhysicalDeviceSupportedFramebufferMixedSamplesCombinationsNV(Handle, out combinationCount, combinations);
	}

	/// <summary>vkGetPhysicalDeviceToolPropertiesEXT</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result GetPhysicalDeviceToolPropertiesEXT(uint* pToolCount, Vk.EXT.PhysicalDeviceToolProperties* pToolProperties)
	{
		if (Functions.vkGetPhysicalDeviceToolPropertiesEXT == null) throw new Vk.Extras.FunctionNotLoadedException("vkGetPhysicalDeviceToolPropertiesEXT");
		return Functions.vkGetPhysicalDeviceToolPropertiesEXT(Handle, pToolCount, pToolProperties);
	}

	/// <summary>vkGetPhysicalDeviceToolPropertiesEXT</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result GetPhysicalDeviceToolPropertiesEXT(out uint toolCount, in Span<Vk.EXT.PhysicalDeviceToolProperties> toolProperties)
	{
		if (Functions.vkGetPhysicalDeviceToolPropertiesEXT == null) throw new Vk.Extras.FunctionNotLoadedException("vkGetPhysicalDeviceToolPropertiesEXT");
		return Functions.GetPhysicalDeviceToolPropertiesEXT(Handle, out toolCount, toolProperties);
	}

	/// <summary>vkGetPhysicalDeviceFragmentShadingRatesKHR</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result GetPhysicalDeviceFragmentShadingRatesKHR(uint* pFragmentShadingRateCount, Vk.KHR.PhysicalDeviceFragmentShadingRate* pFragmentShadingRates)
	{
		if (Functions.vkGetPhysicalDeviceFragmentShadingRatesKHR == null) throw new Vk.Extras.FunctionNotLoadedException("vkGetPhysicalDeviceFragmentShadingRatesKHR");
		return Functions.vkGetPhysicalDeviceFragmentShadingRatesKHR(Handle, pFragmentShadingRateCount, pFragmentShadingRates);
	}

	/// <summary>vkGetPhysicalDeviceFragmentShadingRatesKHR</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result GetPhysicalDeviceFragmentShadingRatesKHR(out uint fragmentShadingRateCount, in Span<Vk.KHR.PhysicalDeviceFragmentShadingRate> fragmentShadingRates)
	{
		if (Functions.vkGetPhysicalDeviceFragmentShadingRatesKHR == null) throw new Vk.Extras.FunctionNotLoadedException("vkGetPhysicalDeviceFragmentShadingRatesKHR");
		return Functions.GetPhysicalDeviceFragmentShadingRatesKHR(Handle, out fragmentShadingRateCount, fragmentShadingRates);
	}

}

public unsafe partial class Device : IHandleType<Device>
{
	public static readonly Device Null = new(PhysicalDevice.Null, Vk.Handle<Device>.Null);

	public readonly Vk.PhysicalDevice Parent;
	public readonly Vk.DeviceFunctionTable Functions;
	public readonly Vk.Instance Instance;
	public readonly Handle<Device> Handle;
	public bool IsValid => Handle.IsValid;

	public Device(in Vk.PhysicalDevice parent, Vk.Handle<Device> handle)
	{
		Parent = parent;
		Functions = handle ? new(handle, parent.Instance.Functions.CoreVersion) : new();
		Instance = parent.Instance;
		Handle = handle;
	}

	public override int GetHashCode() => Handle.GetHashCode();
	public override string? ToString() => $"[Device 0x{(ulong)Handle:X16}]";
	public override bool Equals(object? o) => (o is Device t) && (t.Handle == Handle);
	bool IEquatable<Device>.Equals(Device? other) => (other?.Handle ?? new()) == Handle;

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static implicit operator Vk.Handle<Device> (Device? handle) => handle?.Handle ?? new();
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static bool operator == (Device? l, Device? r) => (l?.Handle ?? new()) == (r?.Handle ?? new());
	public static bool operator != (Device? l, Device? r) => (l?.Handle ?? new()) == (r?.Handle ?? new());
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static implicit operator bool (Device? handle) => handle?.Handle.IsValid ?? false;

	/// <summary>vkDestroyDevice</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void DestroyDevice(Vk.AllocationCallbacks* pAllocator)
	{
		if (Functions.vkDestroyDevice == null) throw new Vk.Extras.FunctionNotLoadedException("vkDestroyDevice");
		Functions.vkDestroyDevice(Handle, pAllocator);
	}

	/// <summary>vkDestroyDevice</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void DestroyDevice(in Vk.AllocationCallbacks allocator)
	{
		if (Functions.vkDestroyDevice == null) throw new Vk.Extras.FunctionNotLoadedException("vkDestroyDevice");
		Functions.DestroyDevice(Handle, allocator);
	}

	/// <summary>vkGetDeviceQueue</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void GetDeviceQueue(uint queueFamilyIndex, uint queueIndex, Vk.Handle<Vk.Queue>* pQueue)
	{
		if (Functions.vkGetDeviceQueue == null) throw new Vk.Extras.FunctionNotLoadedException("vkGetDeviceQueue");
		Functions.vkGetDeviceQueue(Handle, queueFamilyIndex, queueIndex, pQueue);
	}

	/// <summary>vkGetDeviceQueue</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void GetDeviceQueue(uint queueFamilyIndex, uint queueIndex, out Vk.Queue pQueue)
	{
		if (Functions.vkGetDeviceQueue == null) throw new Vk.Extras.FunctionNotLoadedException("vkGetDeviceQueue");
		Vk.Handle<Vk.Queue> HANDLE;
		Functions.vkGetDeviceQueue(Handle, queueFamilyIndex, queueIndex, &HANDLE);
		pQueue = new(this, HANDLE);
	}

	/// <summary>vkGetDeviceQueue</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void GetDeviceQueue(uint queueFamilyIndex, uint queueIndex, out Vk.Handle<Vk.Queue> queue)
	{
		if (Functions.vkGetDeviceQueue == null) throw new Vk.Extras.FunctionNotLoadedException("vkGetDeviceQueue");
		Functions.GetDeviceQueue(Handle, queueFamilyIndex, queueIndex, out queue);
	}

	/// <summary>vkDeviceWaitIdle</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result DeviceWaitIdle()
	{
		if (Functions.vkDeviceWaitIdle == null) throw new Vk.Extras.FunctionNotLoadedException("vkDeviceWaitIdle");
		return Functions.vkDeviceWaitIdle(Handle);
	}

	/// <summary>vkAllocateMemory</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result AllocateMemory(Vk.MemoryAllocateInfo* pAllocateInfo, Vk.AllocationCallbacks* pAllocator, Vk.Handle<Vk.DeviceMemory>* pMemory)
	{
		if (Functions.vkAllocateMemory == null) throw new Vk.Extras.FunctionNotLoadedException("vkAllocateMemory");
		return Functions.vkAllocateMemory(Handle, pAllocateInfo, pAllocator, pMemory);
	}

	/// <summary>vkAllocateMemory</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result AllocateMemory(Vk.MemoryAllocateInfo* pAllocateInfo, Vk.AllocationCallbacks* pAllocator, out Vk.DeviceMemory pMemory)
	{
		if (Functions.vkAllocateMemory == null) throw new Vk.Extras.FunctionNotLoadedException("vkAllocateMemory");
		Vk.Handle<Vk.DeviceMemory> HANDLE;
		var RESULT = Functions.vkAllocateMemory(Handle, pAllocateInfo, pAllocator, &HANDLE);
		pMemory = (RESULT == Result.Success) ? new(this, HANDLE) : Vk.DeviceMemory.Null;
		return RESULT;
	}

	/// <summary>vkAllocateMemory</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result AllocateMemory(in Vk.MemoryAllocateInfo allocateInfo, in Vk.AllocationCallbacks allocator, out Vk.Handle<Vk.DeviceMemory> memory)
	{
		if (Functions.vkAllocateMemory == null) throw new Vk.Extras.FunctionNotLoadedException("vkAllocateMemory");
		return Functions.AllocateMemory(Handle, allocateInfo, allocator, out memory);
	}

	/// <summary>vkAllocateMemory</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result AllocateMemory(in Vk.MemoryAllocateInfo allocateInfo, in Vk.AllocationCallbacks allocator, out Vk.DeviceMemory pMemory)
	{
		if (Functions.vkAllocateMemory == null) throw new Vk.Extras.FunctionNotLoadedException("vkAllocateMemory");
		Vk.Handle<Vk.DeviceMemory> HANDLE;
		var RESULT = Functions.AllocateMemory(Handle, allocateInfo, allocator, out HANDLE);
		pMemory = (RESULT == Result.Success) ? new(this, HANDLE) : Vk.DeviceMemory.Null;
		return RESULT;
	}

	/// <summary>vkFlushMappedMemoryRanges</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result FlushMappedMemoryRanges(uint memoryRangeCount, Vk.MappedMemoryRange* pMemoryRanges)
	{
		if (Functions.vkFlushMappedMemoryRanges == null) throw new Vk.Extras.FunctionNotLoadedException("vkFlushMappedMemoryRanges");
		return Functions.vkFlushMappedMemoryRanges(Handle, memoryRangeCount, pMemoryRanges);
	}

	/// <summary>vkFlushMappedMemoryRanges</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result FlushMappedMemoryRanges(in ReadOnlySpan<Vk.MappedMemoryRange> memoryRanges)
	{
		if (Functions.vkFlushMappedMemoryRanges == null) throw new Vk.Extras.FunctionNotLoadedException("vkFlushMappedMemoryRanges");
		return Functions.FlushMappedMemoryRanges(Handle, memoryRanges);
	}

	/// <summary>vkInvalidateMappedMemoryRanges</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result InvalidateMappedMemoryRanges(uint memoryRangeCount, Vk.MappedMemoryRange* pMemoryRanges)
	{
		if (Functions.vkInvalidateMappedMemoryRanges == null) throw new Vk.Extras.FunctionNotLoadedException("vkInvalidateMappedMemoryRanges");
		return Functions.vkInvalidateMappedMemoryRanges(Handle, memoryRangeCount, pMemoryRanges);
	}

	/// <summary>vkInvalidateMappedMemoryRanges</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result InvalidateMappedMemoryRanges(in ReadOnlySpan<Vk.MappedMemoryRange> memoryRanges)
	{
		if (Functions.vkInvalidateMappedMemoryRanges == null) throw new Vk.Extras.FunctionNotLoadedException("vkInvalidateMappedMemoryRanges");
		return Functions.InvalidateMappedMemoryRanges(Handle, memoryRanges);
	}

	/// <summary>vkCreateFence</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result CreateFence(Vk.FenceCreateInfo* pCreateInfo, Vk.AllocationCallbacks* pAllocator, Vk.Handle<Vk.Fence>* pFence)
	{
		if (Functions.vkCreateFence == null) throw new Vk.Extras.FunctionNotLoadedException("vkCreateFence");
		return Functions.vkCreateFence(Handle, pCreateInfo, pAllocator, pFence);
	}

	/// <summary>vkCreateFence</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result CreateFence(Vk.FenceCreateInfo* pCreateInfo, Vk.AllocationCallbacks* pAllocator, out Vk.Fence pFence)
	{
		if (Functions.vkCreateFence == null) throw new Vk.Extras.FunctionNotLoadedException("vkCreateFence");
		Vk.Handle<Vk.Fence> HANDLE;
		var RESULT = Functions.vkCreateFence(Handle, pCreateInfo, pAllocator, &HANDLE);
		pFence = (RESULT == Result.Success) ? new(this, HANDLE) : Vk.Fence.Null;
		return RESULT;
	}

	/// <summary>vkCreateFence</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result CreateFence(in Vk.FenceCreateInfo createInfo, in Vk.AllocationCallbacks allocator, out Vk.Handle<Vk.Fence> fence)
	{
		if (Functions.vkCreateFence == null) throw new Vk.Extras.FunctionNotLoadedException("vkCreateFence");
		return Functions.CreateFence(Handle, createInfo, allocator, out fence);
	}

	/// <summary>vkCreateFence</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result CreateFence(in Vk.FenceCreateInfo createInfo, in Vk.AllocationCallbacks allocator, out Vk.Fence pFence)
	{
		if (Functions.vkCreateFence == null) throw new Vk.Extras.FunctionNotLoadedException("vkCreateFence");
		Vk.Handle<Vk.Fence> HANDLE;
		var RESULT = Functions.CreateFence(Handle, createInfo, allocator, out HANDLE);
		pFence = (RESULT == Result.Success) ? new(this, HANDLE) : Vk.Fence.Null;
		return RESULT;
	}

	/// <summary>vkResetFences</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result ResetFences(uint fenceCount, Vk.Handle<Vk.Fence>* pFences)
	{
		if (Functions.vkResetFences == null) throw new Vk.Extras.FunctionNotLoadedException("vkResetFences");
		return Functions.vkResetFences(Handle, fenceCount, pFences);
	}

	/// <summary>vkResetFences</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result ResetFences(in ReadOnlySpan<Vk.Handle<Vk.Fence>> fences)
	{
		if (Functions.vkResetFences == null) throw new Vk.Extras.FunctionNotLoadedException("vkResetFences");
		return Functions.ResetFences(Handle, fences);
	}

	/// <summary>vkWaitForFences</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result WaitForFences(uint fenceCount, Vk.Handle<Vk.Fence>* pFences, Vk.Bool32 waitAll, ulong timeout)
	{
		if (Functions.vkWaitForFences == null) throw new Vk.Extras.FunctionNotLoadedException("vkWaitForFences");
		return Functions.vkWaitForFences(Handle, fenceCount, pFences, waitAll, timeout);
	}

	/// <summary>vkWaitForFences</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result WaitForFences(in ReadOnlySpan<Vk.Handle<Vk.Fence>> fences, Vk.Bool32 waitAll, ulong timeout)
	{
		if (Functions.vkWaitForFences == null) throw new Vk.Extras.FunctionNotLoadedException("vkWaitForFences");
		return Functions.WaitForFences(Handle, fences, waitAll, timeout);
	}

	/// <summary>vkCreateSemaphore</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result CreateSemaphore(Vk.SemaphoreCreateInfo* pCreateInfo, Vk.AllocationCallbacks* pAllocator, Vk.Handle<Vk.Semaphore>* pSemaphore)
	{
		if (Functions.vkCreateSemaphore == null) throw new Vk.Extras.FunctionNotLoadedException("vkCreateSemaphore");
		return Functions.vkCreateSemaphore(Handle, pCreateInfo, pAllocator, pSemaphore);
	}

	/// <summary>vkCreateSemaphore</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result CreateSemaphore(Vk.SemaphoreCreateInfo* pCreateInfo, Vk.AllocationCallbacks* pAllocator, out Vk.Semaphore pSemaphore)
	{
		if (Functions.vkCreateSemaphore == null) throw new Vk.Extras.FunctionNotLoadedException("vkCreateSemaphore");
		Vk.Handle<Vk.Semaphore> HANDLE;
		var RESULT = Functions.vkCreateSemaphore(Handle, pCreateInfo, pAllocator, &HANDLE);
		pSemaphore = (RESULT == Result.Success) ? new(this, HANDLE) : Vk.Semaphore.Null;
		return RESULT;
	}

	/// <summary>vkCreateSemaphore</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result CreateSemaphore(in Vk.SemaphoreCreateInfo createInfo, in Vk.AllocationCallbacks allocator, out Vk.Handle<Vk.Semaphore> semaphore)
	{
		if (Functions.vkCreateSemaphore == null) throw new Vk.Extras.FunctionNotLoadedException("vkCreateSemaphore");
		return Functions.CreateSemaphore(Handle, createInfo, allocator, out semaphore);
	}

	/// <summary>vkCreateSemaphore</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result CreateSemaphore(in Vk.SemaphoreCreateInfo createInfo, in Vk.AllocationCallbacks allocator, out Vk.Semaphore pSemaphore)
	{
		if (Functions.vkCreateSemaphore == null) throw new Vk.Extras.FunctionNotLoadedException("vkCreateSemaphore");
		Vk.Handle<Vk.Semaphore> HANDLE;
		var RESULT = Functions.CreateSemaphore(Handle, createInfo, allocator, out HANDLE);
		pSemaphore = (RESULT == Result.Success) ? new(this, HANDLE) : Vk.Semaphore.Null;
		return RESULT;
	}

	/// <summary>vkCreateEvent</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result CreateEvent(Vk.EventCreateInfo* pCreateInfo, Vk.AllocationCallbacks* pAllocator, Vk.Handle<Vk.Event>* pEvent)
	{
		if (Functions.vkCreateEvent == null) throw new Vk.Extras.FunctionNotLoadedException("vkCreateEvent");
		return Functions.vkCreateEvent(Handle, pCreateInfo, pAllocator, pEvent);
	}

	/// <summary>vkCreateEvent</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result CreateEvent(Vk.EventCreateInfo* pCreateInfo, Vk.AllocationCallbacks* pAllocator, out Vk.Event pEvent)
	{
		if (Functions.vkCreateEvent == null) throw new Vk.Extras.FunctionNotLoadedException("vkCreateEvent");
		Vk.Handle<Vk.Event> HANDLE;
		var RESULT = Functions.vkCreateEvent(Handle, pCreateInfo, pAllocator, &HANDLE);
		pEvent = (RESULT == Result.Success) ? new(this, HANDLE) : Vk.Event.Null;
		return RESULT;
	}

	/// <summary>vkCreateEvent</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result CreateEvent(in Vk.EventCreateInfo createInfo, in Vk.AllocationCallbacks allocator, out Vk.Handle<Vk.Event> @event)
	{
		if (Functions.vkCreateEvent == null) throw new Vk.Extras.FunctionNotLoadedException("vkCreateEvent");
		return Functions.CreateEvent(Handle, createInfo, allocator, out @event);
	}

	/// <summary>vkCreateEvent</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result CreateEvent(in Vk.EventCreateInfo createInfo, in Vk.AllocationCallbacks allocator, out Vk.Event pEvent)
	{
		if (Functions.vkCreateEvent == null) throw new Vk.Extras.FunctionNotLoadedException("vkCreateEvent");
		Vk.Handle<Vk.Event> HANDLE;
		var RESULT = Functions.CreateEvent(Handle, createInfo, allocator, out HANDLE);
		pEvent = (RESULT == Result.Success) ? new(this, HANDLE) : Vk.Event.Null;
		return RESULT;
	}

	/// <summary>vkCreateQueryPool</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result CreateQueryPool(Vk.QueryPoolCreateInfo* pCreateInfo, Vk.AllocationCallbacks* pAllocator, Vk.Handle<Vk.QueryPool>* pQueryPool)
	{
		if (Functions.vkCreateQueryPool == null) throw new Vk.Extras.FunctionNotLoadedException("vkCreateQueryPool");
		return Functions.vkCreateQueryPool(Handle, pCreateInfo, pAllocator, pQueryPool);
	}

	/// <summary>vkCreateQueryPool</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result CreateQueryPool(Vk.QueryPoolCreateInfo* pCreateInfo, Vk.AllocationCallbacks* pAllocator, out Vk.QueryPool pQueryPool)
	{
		if (Functions.vkCreateQueryPool == null) throw new Vk.Extras.FunctionNotLoadedException("vkCreateQueryPool");
		Vk.Handle<Vk.QueryPool> HANDLE;
		var RESULT = Functions.vkCreateQueryPool(Handle, pCreateInfo, pAllocator, &HANDLE);
		pQueryPool = (RESULT == Result.Success) ? new(this, HANDLE) : Vk.QueryPool.Null;
		return RESULT;
	}

	/// <summary>vkCreateQueryPool</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result CreateQueryPool(in Vk.QueryPoolCreateInfo createInfo, in Vk.AllocationCallbacks allocator, out Vk.Handle<Vk.QueryPool> queryPool)
	{
		if (Functions.vkCreateQueryPool == null) throw new Vk.Extras.FunctionNotLoadedException("vkCreateQueryPool");
		return Functions.CreateQueryPool(Handle, createInfo, allocator, out queryPool);
	}

	/// <summary>vkCreateQueryPool</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result CreateQueryPool(in Vk.QueryPoolCreateInfo createInfo, in Vk.AllocationCallbacks allocator, out Vk.QueryPool pQueryPool)
	{
		if (Functions.vkCreateQueryPool == null) throw new Vk.Extras.FunctionNotLoadedException("vkCreateQueryPool");
		Vk.Handle<Vk.QueryPool> HANDLE;
		var RESULT = Functions.CreateQueryPool(Handle, createInfo, allocator, out HANDLE);
		pQueryPool = (RESULT == Result.Success) ? new(this, HANDLE) : Vk.QueryPool.Null;
		return RESULT;
	}

	/// <summary>vkCreateBuffer</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result CreateBuffer(Vk.BufferCreateInfo* pCreateInfo, Vk.AllocationCallbacks* pAllocator, Vk.Handle<Vk.Buffer>* pBuffer)
	{
		if (Functions.vkCreateBuffer == null) throw new Vk.Extras.FunctionNotLoadedException("vkCreateBuffer");
		return Functions.vkCreateBuffer(Handle, pCreateInfo, pAllocator, pBuffer);
	}

	/// <summary>vkCreateBuffer</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result CreateBuffer(Vk.BufferCreateInfo* pCreateInfo, Vk.AllocationCallbacks* pAllocator, out Vk.Buffer pBuffer)
	{
		if (Functions.vkCreateBuffer == null) throw new Vk.Extras.FunctionNotLoadedException("vkCreateBuffer");
		Vk.Handle<Vk.Buffer> HANDLE;
		var RESULT = Functions.vkCreateBuffer(Handle, pCreateInfo, pAllocator, &HANDLE);
		pBuffer = (RESULT == Result.Success) ? new(this, HANDLE) : Vk.Buffer.Null;
		return RESULT;
	}

	/// <summary>vkCreateBuffer</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result CreateBuffer(in Vk.BufferCreateInfo createInfo, in Vk.AllocationCallbacks allocator, out Vk.Handle<Vk.Buffer> buffer)
	{
		if (Functions.vkCreateBuffer == null) throw new Vk.Extras.FunctionNotLoadedException("vkCreateBuffer");
		return Functions.CreateBuffer(Handle, createInfo, allocator, out buffer);
	}

	/// <summary>vkCreateBuffer</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result CreateBuffer(in Vk.BufferCreateInfo createInfo, in Vk.AllocationCallbacks allocator, out Vk.Buffer pBuffer)
	{
		if (Functions.vkCreateBuffer == null) throw new Vk.Extras.FunctionNotLoadedException("vkCreateBuffer");
		Vk.Handle<Vk.Buffer> HANDLE;
		var RESULT = Functions.CreateBuffer(Handle, createInfo, allocator, out HANDLE);
		pBuffer = (RESULT == Result.Success) ? new(this, HANDLE) : Vk.Buffer.Null;
		return RESULT;
	}

	/// <summary>vkCreateBufferView</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result CreateBufferView(Vk.BufferViewCreateInfo* pCreateInfo, Vk.AllocationCallbacks* pAllocator, Vk.Handle<Vk.BufferView>* pView)
	{
		if (Functions.vkCreateBufferView == null) throw new Vk.Extras.FunctionNotLoadedException("vkCreateBufferView");
		return Functions.vkCreateBufferView(Handle, pCreateInfo, pAllocator, pView);
	}

	/// <summary>vkCreateBufferView</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result CreateBufferView(Vk.BufferViewCreateInfo* pCreateInfo, Vk.AllocationCallbacks* pAllocator, out Vk.BufferView pView)
	{
		if (Functions.vkCreateBufferView == null) throw new Vk.Extras.FunctionNotLoadedException("vkCreateBufferView");
		Vk.Handle<Vk.BufferView> HANDLE;
		var RESULT = Functions.vkCreateBufferView(Handle, pCreateInfo, pAllocator, &HANDLE);
		pView = (RESULT == Result.Success) ? new(this, HANDLE) : Vk.BufferView.Null;
		return RESULT;
	}

	/// <summary>vkCreateBufferView</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result CreateBufferView(in Vk.BufferViewCreateInfo createInfo, in Vk.AllocationCallbacks allocator, out Vk.Handle<Vk.BufferView> view)
	{
		if (Functions.vkCreateBufferView == null) throw new Vk.Extras.FunctionNotLoadedException("vkCreateBufferView");
		return Functions.CreateBufferView(Handle, createInfo, allocator, out view);
	}

	/// <summary>vkCreateBufferView</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result CreateBufferView(in Vk.BufferViewCreateInfo createInfo, in Vk.AllocationCallbacks allocator, out Vk.BufferView pView)
	{
		if (Functions.vkCreateBufferView == null) throw new Vk.Extras.FunctionNotLoadedException("vkCreateBufferView");
		Vk.Handle<Vk.BufferView> HANDLE;
		var RESULT = Functions.CreateBufferView(Handle, createInfo, allocator, out HANDLE);
		pView = (RESULT == Result.Success) ? new(this, HANDLE) : Vk.BufferView.Null;
		return RESULT;
	}

	/// <summary>vkCreateImage</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result CreateImage(Vk.ImageCreateInfo* pCreateInfo, Vk.AllocationCallbacks* pAllocator, Vk.Handle<Vk.Image>* pImage)
	{
		if (Functions.vkCreateImage == null) throw new Vk.Extras.FunctionNotLoadedException("vkCreateImage");
		return Functions.vkCreateImage(Handle, pCreateInfo, pAllocator, pImage);
	}

	/// <summary>vkCreateImage</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result CreateImage(Vk.ImageCreateInfo* pCreateInfo, Vk.AllocationCallbacks* pAllocator, out Vk.Image pImage)
	{
		if (Functions.vkCreateImage == null) throw new Vk.Extras.FunctionNotLoadedException("vkCreateImage");
		Vk.Handle<Vk.Image> HANDLE;
		var RESULT = Functions.vkCreateImage(Handle, pCreateInfo, pAllocator, &HANDLE);
		pImage = (RESULT == Result.Success) ? new(this, HANDLE) : Vk.Image.Null;
		return RESULT;
	}

	/// <summary>vkCreateImage</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result CreateImage(in Vk.ImageCreateInfo createInfo, in Vk.AllocationCallbacks allocator, out Vk.Handle<Vk.Image> image)
	{
		if (Functions.vkCreateImage == null) throw new Vk.Extras.FunctionNotLoadedException("vkCreateImage");
		return Functions.CreateImage(Handle, createInfo, allocator, out image);
	}

	/// <summary>vkCreateImage</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result CreateImage(in Vk.ImageCreateInfo createInfo, in Vk.AllocationCallbacks allocator, out Vk.Image pImage)
	{
		if (Functions.vkCreateImage == null) throw new Vk.Extras.FunctionNotLoadedException("vkCreateImage");
		Vk.Handle<Vk.Image> HANDLE;
		var RESULT = Functions.CreateImage(Handle, createInfo, allocator, out HANDLE);
		pImage = (RESULT == Result.Success) ? new(this, HANDLE) : Vk.Image.Null;
		return RESULT;
	}

	/// <summary>vkCreateImageView</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result CreateImageView(Vk.ImageViewCreateInfo* pCreateInfo, Vk.AllocationCallbacks* pAllocator, Vk.Handle<Vk.ImageView>* pView)
	{
		if (Functions.vkCreateImageView == null) throw new Vk.Extras.FunctionNotLoadedException("vkCreateImageView");
		return Functions.vkCreateImageView(Handle, pCreateInfo, pAllocator, pView);
	}

	/// <summary>vkCreateImageView</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result CreateImageView(Vk.ImageViewCreateInfo* pCreateInfo, Vk.AllocationCallbacks* pAllocator, out Vk.ImageView pView)
	{
		if (Functions.vkCreateImageView == null) throw new Vk.Extras.FunctionNotLoadedException("vkCreateImageView");
		Vk.Handle<Vk.ImageView> HANDLE;
		var RESULT = Functions.vkCreateImageView(Handle, pCreateInfo, pAllocator, &HANDLE);
		pView = (RESULT == Result.Success) ? new(this, HANDLE) : Vk.ImageView.Null;
		return RESULT;
	}

	/// <summary>vkCreateImageView</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result CreateImageView(in Vk.ImageViewCreateInfo createInfo, in Vk.AllocationCallbacks allocator, out Vk.Handle<Vk.ImageView> view)
	{
		if (Functions.vkCreateImageView == null) throw new Vk.Extras.FunctionNotLoadedException("vkCreateImageView");
		return Functions.CreateImageView(Handle, createInfo, allocator, out view);
	}

	/// <summary>vkCreateImageView</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result CreateImageView(in Vk.ImageViewCreateInfo createInfo, in Vk.AllocationCallbacks allocator, out Vk.ImageView pView)
	{
		if (Functions.vkCreateImageView == null) throw new Vk.Extras.FunctionNotLoadedException("vkCreateImageView");
		Vk.Handle<Vk.ImageView> HANDLE;
		var RESULT = Functions.CreateImageView(Handle, createInfo, allocator, out HANDLE);
		pView = (RESULT == Result.Success) ? new(this, HANDLE) : Vk.ImageView.Null;
		return RESULT;
	}

	/// <summary>vkCreateShaderModule</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result CreateShaderModule(Vk.ShaderModuleCreateInfo* pCreateInfo, Vk.AllocationCallbacks* pAllocator, Vk.Handle<Vk.ShaderModule>* pShaderModule)
	{
		if (Functions.vkCreateShaderModule == null) throw new Vk.Extras.FunctionNotLoadedException("vkCreateShaderModule");
		return Functions.vkCreateShaderModule(Handle, pCreateInfo, pAllocator, pShaderModule);
	}

	/// <summary>vkCreateShaderModule</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result CreateShaderModule(Vk.ShaderModuleCreateInfo* pCreateInfo, Vk.AllocationCallbacks* pAllocator, out Vk.ShaderModule pShaderModule)
	{
		if (Functions.vkCreateShaderModule == null) throw new Vk.Extras.FunctionNotLoadedException("vkCreateShaderModule");
		Vk.Handle<Vk.ShaderModule> HANDLE;
		var RESULT = Functions.vkCreateShaderModule(Handle, pCreateInfo, pAllocator, &HANDLE);
		pShaderModule = (RESULT == Result.Success) ? new(this, HANDLE) : Vk.ShaderModule.Null;
		return RESULT;
	}

	/// <summary>vkCreateShaderModule</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result CreateShaderModule(in Vk.ShaderModuleCreateInfo createInfo, in Vk.AllocationCallbacks allocator, out Vk.Handle<Vk.ShaderModule> shaderModule)
	{
		if (Functions.vkCreateShaderModule == null) throw new Vk.Extras.FunctionNotLoadedException("vkCreateShaderModule");
		return Functions.CreateShaderModule(Handle, createInfo, allocator, out shaderModule);
	}

	/// <summary>vkCreateShaderModule</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result CreateShaderModule(in Vk.ShaderModuleCreateInfo createInfo, in Vk.AllocationCallbacks allocator, out Vk.ShaderModule pShaderModule)
	{
		if (Functions.vkCreateShaderModule == null) throw new Vk.Extras.FunctionNotLoadedException("vkCreateShaderModule");
		Vk.Handle<Vk.ShaderModule> HANDLE;
		var RESULT = Functions.CreateShaderModule(Handle, createInfo, allocator, out HANDLE);
		pShaderModule = (RESULT == Result.Success) ? new(this, HANDLE) : Vk.ShaderModule.Null;
		return RESULT;
	}

	/// <summary>vkCreatePipelineCache</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result CreatePipelineCache(Vk.PipelineCacheCreateInfo* pCreateInfo, Vk.AllocationCallbacks* pAllocator, Vk.Handle<Vk.PipelineCache>* pPipelineCache)
	{
		if (Functions.vkCreatePipelineCache == null) throw new Vk.Extras.FunctionNotLoadedException("vkCreatePipelineCache");
		return Functions.vkCreatePipelineCache(Handle, pCreateInfo, pAllocator, pPipelineCache);
	}

	/// <summary>vkCreatePipelineCache</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result CreatePipelineCache(Vk.PipelineCacheCreateInfo* pCreateInfo, Vk.AllocationCallbacks* pAllocator, out Vk.PipelineCache pPipelineCache)
	{
		if (Functions.vkCreatePipelineCache == null) throw new Vk.Extras.FunctionNotLoadedException("vkCreatePipelineCache");
		Vk.Handle<Vk.PipelineCache> HANDLE;
		var RESULT = Functions.vkCreatePipelineCache(Handle, pCreateInfo, pAllocator, &HANDLE);
		pPipelineCache = (RESULT == Result.Success) ? new(this, HANDLE) : Vk.PipelineCache.Null;
		return RESULT;
	}

	/// <summary>vkCreatePipelineCache</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result CreatePipelineCache(in Vk.PipelineCacheCreateInfo createInfo, in Vk.AllocationCallbacks allocator, out Vk.Handle<Vk.PipelineCache> pipelineCache)
	{
		if (Functions.vkCreatePipelineCache == null) throw new Vk.Extras.FunctionNotLoadedException("vkCreatePipelineCache");
		return Functions.CreatePipelineCache(Handle, createInfo, allocator, out pipelineCache);
	}

	/// <summary>vkCreatePipelineCache</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result CreatePipelineCache(in Vk.PipelineCacheCreateInfo createInfo, in Vk.AllocationCallbacks allocator, out Vk.PipelineCache pPipelineCache)
	{
		if (Functions.vkCreatePipelineCache == null) throw new Vk.Extras.FunctionNotLoadedException("vkCreatePipelineCache");
		Vk.Handle<Vk.PipelineCache> HANDLE;
		var RESULT = Functions.CreatePipelineCache(Handle, createInfo, allocator, out HANDLE);
		pPipelineCache = (RESULT == Result.Success) ? new(this, HANDLE) : Vk.PipelineCache.Null;
		return RESULT;
	}

	/// <summary>vkCreateGraphicsPipelines</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result CreateGraphicsPipelines(Vk.Handle<Vk.PipelineCache> pipelineCache, uint createInfoCount, Vk.GraphicsPipelineCreateInfo* pCreateInfos, Vk.AllocationCallbacks* pAllocator, Vk.Handle<Vk.Pipeline>* pPipelines)
	{
		if (Functions.vkCreateGraphicsPipelines == null) throw new Vk.Extras.FunctionNotLoadedException("vkCreateGraphicsPipelines");
		return Functions.vkCreateGraphicsPipelines(Handle, pipelineCache, createInfoCount, pCreateInfos, pAllocator, pPipelines);
	}

	/// <summary>vkCreateGraphicsPipelines</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result CreateGraphicsPipelines(Vk.Handle<Vk.PipelineCache> pipelineCache, in ReadOnlySpan<Vk.GraphicsPipelineCreateInfo> createInfos, in Vk.AllocationCallbacks allocator, in Span<Vk.Handle<Vk.Pipeline>> pipelines)
	{
		if (Functions.vkCreateGraphicsPipelines == null) throw new Vk.Extras.FunctionNotLoadedException("vkCreateGraphicsPipelines");
		return Functions.CreateGraphicsPipelines(Handle, pipelineCache, createInfos, allocator, pipelines);
	}

	/// <summary>vkCreateComputePipelines</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result CreateComputePipelines(Vk.Handle<Vk.PipelineCache> pipelineCache, uint createInfoCount, Vk.ComputePipelineCreateInfo* pCreateInfos, Vk.AllocationCallbacks* pAllocator, Vk.Handle<Vk.Pipeline>* pPipelines)
	{
		if (Functions.vkCreateComputePipelines == null) throw new Vk.Extras.FunctionNotLoadedException("vkCreateComputePipelines");
		return Functions.vkCreateComputePipelines(Handle, pipelineCache, createInfoCount, pCreateInfos, pAllocator, pPipelines);
	}

	/// <summary>vkCreateComputePipelines</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result CreateComputePipelines(Vk.Handle<Vk.PipelineCache> pipelineCache, in ReadOnlySpan<Vk.ComputePipelineCreateInfo> createInfos, in Vk.AllocationCallbacks allocator, in Span<Vk.Handle<Vk.Pipeline>> pipelines)
	{
		if (Functions.vkCreateComputePipelines == null) throw new Vk.Extras.FunctionNotLoadedException("vkCreateComputePipelines");
		return Functions.CreateComputePipelines(Handle, pipelineCache, createInfos, allocator, pipelines);
	}

	/// <summary>vkCreatePipelineLayout</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result CreatePipelineLayout(Vk.PipelineLayoutCreateInfo* pCreateInfo, Vk.AllocationCallbacks* pAllocator, Vk.Handle<Vk.PipelineLayout>* pPipelineLayout)
	{
		if (Functions.vkCreatePipelineLayout == null) throw new Vk.Extras.FunctionNotLoadedException("vkCreatePipelineLayout");
		return Functions.vkCreatePipelineLayout(Handle, pCreateInfo, pAllocator, pPipelineLayout);
	}

	/// <summary>vkCreatePipelineLayout</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result CreatePipelineLayout(Vk.PipelineLayoutCreateInfo* pCreateInfo, Vk.AllocationCallbacks* pAllocator, out Vk.PipelineLayout pPipelineLayout)
	{
		if (Functions.vkCreatePipelineLayout == null) throw new Vk.Extras.FunctionNotLoadedException("vkCreatePipelineLayout");
		Vk.Handle<Vk.PipelineLayout> HANDLE;
		var RESULT = Functions.vkCreatePipelineLayout(Handle, pCreateInfo, pAllocator, &HANDLE);
		pPipelineLayout = (RESULT == Result.Success) ? new(this, HANDLE) : Vk.PipelineLayout.Null;
		return RESULT;
	}

	/// <summary>vkCreatePipelineLayout</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result CreatePipelineLayout(in Vk.PipelineLayoutCreateInfo createInfo, in Vk.AllocationCallbacks allocator, out Vk.Handle<Vk.PipelineLayout> pipelineLayout)
	{
		if (Functions.vkCreatePipelineLayout == null) throw new Vk.Extras.FunctionNotLoadedException("vkCreatePipelineLayout");
		return Functions.CreatePipelineLayout(Handle, createInfo, allocator, out pipelineLayout);
	}

	/// <summary>vkCreatePipelineLayout</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result CreatePipelineLayout(in Vk.PipelineLayoutCreateInfo createInfo, in Vk.AllocationCallbacks allocator, out Vk.PipelineLayout pPipelineLayout)
	{
		if (Functions.vkCreatePipelineLayout == null) throw new Vk.Extras.FunctionNotLoadedException("vkCreatePipelineLayout");
		Vk.Handle<Vk.PipelineLayout> HANDLE;
		var RESULT = Functions.CreatePipelineLayout(Handle, createInfo, allocator, out HANDLE);
		pPipelineLayout = (RESULT == Result.Success) ? new(this, HANDLE) : Vk.PipelineLayout.Null;
		return RESULT;
	}

	/// <summary>vkCreateSampler</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result CreateSampler(Vk.SamplerCreateInfo* pCreateInfo, Vk.AllocationCallbacks* pAllocator, Vk.Handle<Vk.Sampler>* pSampler)
	{
		if (Functions.vkCreateSampler == null) throw new Vk.Extras.FunctionNotLoadedException("vkCreateSampler");
		return Functions.vkCreateSampler(Handle, pCreateInfo, pAllocator, pSampler);
	}

	/// <summary>vkCreateSampler</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result CreateSampler(Vk.SamplerCreateInfo* pCreateInfo, Vk.AllocationCallbacks* pAllocator, out Vk.Sampler pSampler)
	{
		if (Functions.vkCreateSampler == null) throw new Vk.Extras.FunctionNotLoadedException("vkCreateSampler");
		Vk.Handle<Vk.Sampler> HANDLE;
		var RESULT = Functions.vkCreateSampler(Handle, pCreateInfo, pAllocator, &HANDLE);
		pSampler = (RESULT == Result.Success) ? new(this, HANDLE) : Vk.Sampler.Null;
		return RESULT;
	}

	/// <summary>vkCreateSampler</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result CreateSampler(in Vk.SamplerCreateInfo createInfo, in Vk.AllocationCallbacks allocator, out Vk.Handle<Vk.Sampler> sampler)
	{
		if (Functions.vkCreateSampler == null) throw new Vk.Extras.FunctionNotLoadedException("vkCreateSampler");
		return Functions.CreateSampler(Handle, createInfo, allocator, out sampler);
	}

	/// <summary>vkCreateSampler</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result CreateSampler(in Vk.SamplerCreateInfo createInfo, in Vk.AllocationCallbacks allocator, out Vk.Sampler pSampler)
	{
		if (Functions.vkCreateSampler == null) throw new Vk.Extras.FunctionNotLoadedException("vkCreateSampler");
		Vk.Handle<Vk.Sampler> HANDLE;
		var RESULT = Functions.CreateSampler(Handle, createInfo, allocator, out HANDLE);
		pSampler = (RESULT == Result.Success) ? new(this, HANDLE) : Vk.Sampler.Null;
		return RESULT;
	}

	/// <summary>vkCreateDescriptorSetLayout</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result CreateDescriptorSetLayout(Vk.DescriptorSetLayoutCreateInfo* pCreateInfo, Vk.AllocationCallbacks* pAllocator, Vk.Handle<Vk.DescriptorSetLayout>* pSetLayout)
	{
		if (Functions.vkCreateDescriptorSetLayout == null) throw new Vk.Extras.FunctionNotLoadedException("vkCreateDescriptorSetLayout");
		return Functions.vkCreateDescriptorSetLayout(Handle, pCreateInfo, pAllocator, pSetLayout);
	}

	/// <summary>vkCreateDescriptorSetLayout</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result CreateDescriptorSetLayout(Vk.DescriptorSetLayoutCreateInfo* pCreateInfo, Vk.AllocationCallbacks* pAllocator, out Vk.DescriptorSetLayout pSetLayout)
	{
		if (Functions.vkCreateDescriptorSetLayout == null) throw new Vk.Extras.FunctionNotLoadedException("vkCreateDescriptorSetLayout");
		Vk.Handle<Vk.DescriptorSetLayout> HANDLE;
		var RESULT = Functions.vkCreateDescriptorSetLayout(Handle, pCreateInfo, pAllocator, &HANDLE);
		pSetLayout = (RESULT == Result.Success) ? new(this, HANDLE) : Vk.DescriptorSetLayout.Null;
		return RESULT;
	}

	/// <summary>vkCreateDescriptorSetLayout</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result CreateDescriptorSetLayout(in Vk.DescriptorSetLayoutCreateInfo createInfo, in Vk.AllocationCallbacks allocator, out Vk.Handle<Vk.DescriptorSetLayout> setLayout)
	{
		if (Functions.vkCreateDescriptorSetLayout == null) throw new Vk.Extras.FunctionNotLoadedException("vkCreateDescriptorSetLayout");
		return Functions.CreateDescriptorSetLayout(Handle, createInfo, allocator, out setLayout);
	}

	/// <summary>vkCreateDescriptorSetLayout</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result CreateDescriptorSetLayout(in Vk.DescriptorSetLayoutCreateInfo createInfo, in Vk.AllocationCallbacks allocator, out Vk.DescriptorSetLayout pSetLayout)
	{
		if (Functions.vkCreateDescriptorSetLayout == null) throw new Vk.Extras.FunctionNotLoadedException("vkCreateDescriptorSetLayout");
		Vk.Handle<Vk.DescriptorSetLayout> HANDLE;
		var RESULT = Functions.CreateDescriptorSetLayout(Handle, createInfo, allocator, out HANDLE);
		pSetLayout = (RESULT == Result.Success) ? new(this, HANDLE) : Vk.DescriptorSetLayout.Null;
		return RESULT;
	}

	/// <summary>vkCreateDescriptorPool</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result CreateDescriptorPool(Vk.DescriptorPoolCreateInfo* pCreateInfo, Vk.AllocationCallbacks* pAllocator, Vk.Handle<Vk.DescriptorPool>* pDescriptorPool)
	{
		if (Functions.vkCreateDescriptorPool == null) throw new Vk.Extras.FunctionNotLoadedException("vkCreateDescriptorPool");
		return Functions.vkCreateDescriptorPool(Handle, pCreateInfo, pAllocator, pDescriptorPool);
	}

	/// <summary>vkCreateDescriptorPool</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result CreateDescriptorPool(Vk.DescriptorPoolCreateInfo* pCreateInfo, Vk.AllocationCallbacks* pAllocator, out Vk.DescriptorPool pDescriptorPool)
	{
		if (Functions.vkCreateDescriptorPool == null) throw new Vk.Extras.FunctionNotLoadedException("vkCreateDescriptorPool");
		Vk.Handle<Vk.DescriptorPool> HANDLE;
		var RESULT = Functions.vkCreateDescriptorPool(Handle, pCreateInfo, pAllocator, &HANDLE);
		pDescriptorPool = (RESULT == Result.Success) ? new(this, HANDLE) : Vk.DescriptorPool.Null;
		return RESULT;
	}

	/// <summary>vkCreateDescriptorPool</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result CreateDescriptorPool(in Vk.DescriptorPoolCreateInfo createInfo, in Vk.AllocationCallbacks allocator, out Vk.Handle<Vk.DescriptorPool> descriptorPool)
	{
		if (Functions.vkCreateDescriptorPool == null) throw new Vk.Extras.FunctionNotLoadedException("vkCreateDescriptorPool");
		return Functions.CreateDescriptorPool(Handle, createInfo, allocator, out descriptorPool);
	}

	/// <summary>vkCreateDescriptorPool</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result CreateDescriptorPool(in Vk.DescriptorPoolCreateInfo createInfo, in Vk.AllocationCallbacks allocator, out Vk.DescriptorPool pDescriptorPool)
	{
		if (Functions.vkCreateDescriptorPool == null) throw new Vk.Extras.FunctionNotLoadedException("vkCreateDescriptorPool");
		Vk.Handle<Vk.DescriptorPool> HANDLE;
		var RESULT = Functions.CreateDescriptorPool(Handle, createInfo, allocator, out HANDLE);
		pDescriptorPool = (RESULT == Result.Success) ? new(this, HANDLE) : Vk.DescriptorPool.Null;
		return RESULT;
	}

	/// <summary>vkAllocateDescriptorSets</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result AllocateDescriptorSets(Vk.DescriptorSetAllocateInfo* pAllocateInfo, Vk.Handle<Vk.DescriptorSet>* pDescriptorSets)
	{
		if (Functions.vkAllocateDescriptorSets == null) throw new Vk.Extras.FunctionNotLoadedException("vkAllocateDescriptorSets");
		return Functions.vkAllocateDescriptorSets(Handle, pAllocateInfo, pDescriptorSets);
	}

	/// <summary>vkAllocateDescriptorSets</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result AllocateDescriptorSets(in Vk.DescriptorSetAllocateInfo allocateInfo, in Span<Vk.Handle<Vk.DescriptorSet>> descriptorSets)
	{
		if (Functions.vkAllocateDescriptorSets == null) throw new Vk.Extras.FunctionNotLoadedException("vkAllocateDescriptorSets");
		return Functions.AllocateDescriptorSets(Handle, allocateInfo, descriptorSets);
	}

	/// <summary>vkUpdateDescriptorSets</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void UpdateDescriptorSets(uint descriptorWriteCount, Vk.WriteDescriptorSet* pDescriptorWrites, uint descriptorCopyCount, Vk.CopyDescriptorSet* pDescriptorCopies)
	{
		if (Functions.vkUpdateDescriptorSets == null) throw new Vk.Extras.FunctionNotLoadedException("vkUpdateDescriptorSets");
		Functions.vkUpdateDescriptorSets(Handle, descriptorWriteCount, pDescriptorWrites, descriptorCopyCount, pDescriptorCopies);
	}

	/// <summary>vkUpdateDescriptorSets</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void UpdateDescriptorSets(in ReadOnlySpan<Vk.WriteDescriptorSet> descriptorWrites, in ReadOnlySpan<Vk.CopyDescriptorSet> descriptorCopies)
	{
		if (Functions.vkUpdateDescriptorSets == null) throw new Vk.Extras.FunctionNotLoadedException("vkUpdateDescriptorSets");
		Functions.UpdateDescriptorSets(Handle, descriptorWrites, descriptorCopies);
	}

	/// <summary>vkCreateFramebuffer</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result CreateFramebuffer(Vk.FramebufferCreateInfo* pCreateInfo, Vk.AllocationCallbacks* pAllocator, Vk.Handle<Vk.Framebuffer>* pFramebuffer)
	{
		if (Functions.vkCreateFramebuffer == null) throw new Vk.Extras.FunctionNotLoadedException("vkCreateFramebuffer");
		return Functions.vkCreateFramebuffer(Handle, pCreateInfo, pAllocator, pFramebuffer);
	}

	/// <summary>vkCreateFramebuffer</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result CreateFramebuffer(Vk.FramebufferCreateInfo* pCreateInfo, Vk.AllocationCallbacks* pAllocator, out Vk.Framebuffer pFramebuffer)
	{
		if (Functions.vkCreateFramebuffer == null) throw new Vk.Extras.FunctionNotLoadedException("vkCreateFramebuffer");
		Vk.Handle<Vk.Framebuffer> HANDLE;
		var RESULT = Functions.vkCreateFramebuffer(Handle, pCreateInfo, pAllocator, &HANDLE);
		pFramebuffer = (RESULT == Result.Success) ? new(this, HANDLE) : Vk.Framebuffer.Null;
		return RESULT;
	}

	/// <summary>vkCreateFramebuffer</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result CreateFramebuffer(in Vk.FramebufferCreateInfo createInfo, in Vk.AllocationCallbacks allocator, out Vk.Handle<Vk.Framebuffer> framebuffer)
	{
		if (Functions.vkCreateFramebuffer == null) throw new Vk.Extras.FunctionNotLoadedException("vkCreateFramebuffer");
		return Functions.CreateFramebuffer(Handle, createInfo, allocator, out framebuffer);
	}

	/// <summary>vkCreateFramebuffer</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result CreateFramebuffer(in Vk.FramebufferCreateInfo createInfo, in Vk.AllocationCallbacks allocator, out Vk.Framebuffer pFramebuffer)
	{
		if (Functions.vkCreateFramebuffer == null) throw new Vk.Extras.FunctionNotLoadedException("vkCreateFramebuffer");
		Vk.Handle<Vk.Framebuffer> HANDLE;
		var RESULT = Functions.CreateFramebuffer(Handle, createInfo, allocator, out HANDLE);
		pFramebuffer = (RESULT == Result.Success) ? new(this, HANDLE) : Vk.Framebuffer.Null;
		return RESULT;
	}

	/// <summary>vkCreateRenderPass</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result CreateRenderPass(Vk.RenderPassCreateInfo* pCreateInfo, Vk.AllocationCallbacks* pAllocator, Vk.Handle<Vk.RenderPass>* pRenderPass)
	{
		if (Functions.vkCreateRenderPass == null) throw new Vk.Extras.FunctionNotLoadedException("vkCreateRenderPass");
		return Functions.vkCreateRenderPass(Handle, pCreateInfo, pAllocator, pRenderPass);
	}

	/// <summary>vkCreateRenderPass</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result CreateRenderPass(Vk.RenderPassCreateInfo* pCreateInfo, Vk.AllocationCallbacks* pAllocator, out Vk.RenderPass pRenderPass)
	{
		if (Functions.vkCreateRenderPass == null) throw new Vk.Extras.FunctionNotLoadedException("vkCreateRenderPass");
		Vk.Handle<Vk.RenderPass> HANDLE;
		var RESULT = Functions.vkCreateRenderPass(Handle, pCreateInfo, pAllocator, &HANDLE);
		pRenderPass = (RESULT == Result.Success) ? new(this, HANDLE) : Vk.RenderPass.Null;
		return RESULT;
	}

	/// <summary>vkCreateRenderPass</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result CreateRenderPass(in Vk.RenderPassCreateInfo createInfo, in Vk.AllocationCallbacks allocator, out Vk.Handle<Vk.RenderPass> renderPass)
	{
		if (Functions.vkCreateRenderPass == null) throw new Vk.Extras.FunctionNotLoadedException("vkCreateRenderPass");
		return Functions.CreateRenderPass(Handle, createInfo, allocator, out renderPass);
	}

	/// <summary>vkCreateRenderPass</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result CreateRenderPass(in Vk.RenderPassCreateInfo createInfo, in Vk.AllocationCallbacks allocator, out Vk.RenderPass pRenderPass)
	{
		if (Functions.vkCreateRenderPass == null) throw new Vk.Extras.FunctionNotLoadedException("vkCreateRenderPass");
		Vk.Handle<Vk.RenderPass> HANDLE;
		var RESULT = Functions.CreateRenderPass(Handle, createInfo, allocator, out HANDLE);
		pRenderPass = (RESULT == Result.Success) ? new(this, HANDLE) : Vk.RenderPass.Null;
		return RESULT;
	}

	/// <summary>vkCreateCommandPool</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result CreateCommandPool(Vk.CommandPoolCreateInfo* pCreateInfo, Vk.AllocationCallbacks* pAllocator, Vk.Handle<Vk.CommandPool>* pCommandPool)
	{
		if (Functions.vkCreateCommandPool == null) throw new Vk.Extras.FunctionNotLoadedException("vkCreateCommandPool");
		return Functions.vkCreateCommandPool(Handle, pCreateInfo, pAllocator, pCommandPool);
	}

	/// <summary>vkCreateCommandPool</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result CreateCommandPool(Vk.CommandPoolCreateInfo* pCreateInfo, Vk.AllocationCallbacks* pAllocator, out Vk.CommandPool pCommandPool)
	{
		if (Functions.vkCreateCommandPool == null) throw new Vk.Extras.FunctionNotLoadedException("vkCreateCommandPool");
		Vk.Handle<Vk.CommandPool> HANDLE;
		var RESULT = Functions.vkCreateCommandPool(Handle, pCreateInfo, pAllocator, &HANDLE);
		pCommandPool = (RESULT == Result.Success) ? new(this, HANDLE) : Vk.CommandPool.Null;
		return RESULT;
	}

	/// <summary>vkCreateCommandPool</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result CreateCommandPool(in Vk.CommandPoolCreateInfo createInfo, in Vk.AllocationCallbacks allocator, out Vk.Handle<Vk.CommandPool> commandPool)
	{
		if (Functions.vkCreateCommandPool == null) throw new Vk.Extras.FunctionNotLoadedException("vkCreateCommandPool");
		return Functions.CreateCommandPool(Handle, createInfo, allocator, out commandPool);
	}

	/// <summary>vkCreateCommandPool</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result CreateCommandPool(in Vk.CommandPoolCreateInfo createInfo, in Vk.AllocationCallbacks allocator, out Vk.CommandPool pCommandPool)
	{
		if (Functions.vkCreateCommandPool == null) throw new Vk.Extras.FunctionNotLoadedException("vkCreateCommandPool");
		Vk.Handle<Vk.CommandPool> HANDLE;
		var RESULT = Functions.CreateCommandPool(Handle, createInfo, allocator, out HANDLE);
		pCommandPool = (RESULT == Result.Success) ? new(this, HANDLE) : Vk.CommandPool.Null;
		return RESULT;
	}

	/// <summary>vkAllocateCommandBuffers</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result AllocateCommandBuffers(Vk.CommandBufferAllocateInfo* pAllocateInfo, Vk.Handle<Vk.CommandBuffer>* pCommandBuffers)
	{
		if (Functions.vkAllocateCommandBuffers == null) throw new Vk.Extras.FunctionNotLoadedException("vkAllocateCommandBuffers");
		return Functions.vkAllocateCommandBuffers(Handle, pAllocateInfo, pCommandBuffers);
	}

	/// <summary>vkAllocateCommandBuffers</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result AllocateCommandBuffers(in Vk.CommandBufferAllocateInfo allocateInfo, in Span<Vk.Handle<Vk.CommandBuffer>> commandBuffers)
	{
		if (Functions.vkAllocateCommandBuffers == null) throw new Vk.Extras.FunctionNotLoadedException("vkAllocateCommandBuffers");
		return Functions.AllocateCommandBuffers(Handle, allocateInfo, commandBuffers);
	}

	/// <summary>vkCreateSharedSwapchainsKHR</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result CreateSharedSwapchainsKHR(uint swapchainCount, Vk.KHR.SwapchainCreateInfo* pCreateInfos, Vk.AllocationCallbacks* pAllocator, Vk.Handle<Vk.KHR.Swapchain>* pSwapchains)
	{
		if (Functions.vkCreateSharedSwapchainsKHR == null) throw new Vk.Extras.FunctionNotLoadedException("vkCreateSharedSwapchainsKHR");
		return Functions.vkCreateSharedSwapchainsKHR(Handle, swapchainCount, pCreateInfos, pAllocator, pSwapchains);
	}

	/// <summary>vkCreateSharedSwapchainsKHR</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result CreateSharedSwapchainsKHR(in ReadOnlySpan<Vk.KHR.SwapchainCreateInfo> createInfos, in Vk.AllocationCallbacks allocator, in Span<Vk.Handle<Vk.KHR.Swapchain>> swapchains)
	{
		if (Functions.vkCreateSharedSwapchainsKHR == null) throw new Vk.Extras.FunctionNotLoadedException("vkCreateSharedSwapchainsKHR");
		return Functions.CreateSharedSwapchainsKHR(Handle, createInfos, allocator, swapchains);
	}

	/// <summary>vkCreateSwapchainKHR</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result CreateSwapchainKHR(Vk.KHR.SwapchainCreateInfo* pCreateInfo, Vk.AllocationCallbacks* pAllocator, Vk.Handle<Vk.KHR.Swapchain>* pSwapchain)
	{
		if (Functions.vkCreateSwapchainKHR == null) throw new Vk.Extras.FunctionNotLoadedException("vkCreateSwapchainKHR");
		return Functions.vkCreateSwapchainKHR(Handle, pCreateInfo, pAllocator, pSwapchain);
	}

	/// <summary>vkCreateSwapchainKHR</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result CreateSwapchainKHR(Vk.KHR.SwapchainCreateInfo* pCreateInfo, Vk.AllocationCallbacks* pAllocator, out Vk.KHR.Swapchain pSwapchain)
	{
		if (Functions.vkCreateSwapchainKHR == null) throw new Vk.Extras.FunctionNotLoadedException("vkCreateSwapchainKHR");
		Vk.Handle<Vk.KHR.Swapchain> HANDLE;
		var RESULT = Functions.vkCreateSwapchainKHR(Handle, pCreateInfo, pAllocator, &HANDLE);
		pSwapchain = (RESULT == Result.Success) ? new(this, HANDLE) : Vk.KHR.Swapchain.Null;
		return RESULT;
	}

	/// <summary>vkCreateSwapchainKHR</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result CreateSwapchainKHR(in Vk.KHR.SwapchainCreateInfo createInfo, in Vk.AllocationCallbacks allocator, out Vk.Handle<Vk.KHR.Swapchain> swapchain)
	{
		if (Functions.vkCreateSwapchainKHR == null) throw new Vk.Extras.FunctionNotLoadedException("vkCreateSwapchainKHR");
		return Functions.CreateSwapchainKHR(Handle, createInfo, allocator, out swapchain);
	}

	/// <summary>vkCreateSwapchainKHR</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result CreateSwapchainKHR(in Vk.KHR.SwapchainCreateInfo createInfo, in Vk.AllocationCallbacks allocator, out Vk.KHR.Swapchain pSwapchain)
	{
		if (Functions.vkCreateSwapchainKHR == null) throw new Vk.Extras.FunctionNotLoadedException("vkCreateSwapchainKHR");
		Vk.Handle<Vk.KHR.Swapchain> HANDLE;
		var RESULT = Functions.CreateSwapchainKHR(Handle, createInfo, allocator, out HANDLE);
		pSwapchain = (RESULT == Result.Success) ? new(this, HANDLE) : Vk.KHR.Swapchain.Null;
		return RESULT;
	}

	/// <summary>vkDebugMarkerSetObjectNameEXT</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result DebugMarkerSetObjectNameEXT(Vk.EXT.DebugMarkerObjectNameInfo* pNameInfo)
	{
		if (Functions.vkDebugMarkerSetObjectNameEXT == null) throw new Vk.Extras.FunctionNotLoadedException("vkDebugMarkerSetObjectNameEXT");
		return Functions.vkDebugMarkerSetObjectNameEXT(Handle, pNameInfo);
	}

	/// <summary>vkDebugMarkerSetObjectNameEXT</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result DebugMarkerSetObjectNameEXT(in Vk.EXT.DebugMarkerObjectNameInfo nameInfo)
	{
		if (Functions.vkDebugMarkerSetObjectNameEXT == null) throw new Vk.Extras.FunctionNotLoadedException("vkDebugMarkerSetObjectNameEXT");
		return Functions.DebugMarkerSetObjectNameEXT(Handle, nameInfo);
	}

	/// <summary>vkDebugMarkerSetObjectTagEXT</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result DebugMarkerSetObjectTagEXT(Vk.EXT.DebugMarkerObjectTagInfo* pTagInfo)
	{
		if (Functions.vkDebugMarkerSetObjectTagEXT == null) throw new Vk.Extras.FunctionNotLoadedException("vkDebugMarkerSetObjectTagEXT");
		return Functions.vkDebugMarkerSetObjectTagEXT(Handle, pTagInfo);
	}

	/// <summary>vkDebugMarkerSetObjectTagEXT</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result DebugMarkerSetObjectTagEXT(in Vk.EXT.DebugMarkerObjectTagInfo tagInfo)
	{
		if (Functions.vkDebugMarkerSetObjectTagEXT == null) throw new Vk.Extras.FunctionNotLoadedException("vkDebugMarkerSetObjectTagEXT");
		return Functions.DebugMarkerSetObjectTagEXT(Handle, tagInfo);
	}

	/// <summary>vkGetGeneratedCommandsMemoryRequirementsNV</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void GetGeneratedCommandsMemoryRequirementsNV(Vk.NV.GeneratedCommandsMemoryRequirementsInfo* pInfo, Vk.MemoryRequirements2* pMemoryRequirements)
	{
		if (Functions.vkGetGeneratedCommandsMemoryRequirementsNV == null) throw new Vk.Extras.FunctionNotLoadedException("vkGetGeneratedCommandsMemoryRequirementsNV");
		Functions.vkGetGeneratedCommandsMemoryRequirementsNV(Handle, pInfo, pMemoryRequirements);
	}

	/// <summary>vkGetGeneratedCommandsMemoryRequirementsNV</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void GetGeneratedCommandsMemoryRequirementsNV(in Vk.NV.GeneratedCommandsMemoryRequirementsInfo info, out Vk.MemoryRequirements2 memoryRequirements)
	{
		if (Functions.vkGetGeneratedCommandsMemoryRequirementsNV == null) throw new Vk.Extras.FunctionNotLoadedException("vkGetGeneratedCommandsMemoryRequirementsNV");
		Functions.GetGeneratedCommandsMemoryRequirementsNV(Handle, info, out memoryRequirements);
	}

	/// <summary>vkCreateIndirectCommandsLayoutNV</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result CreateIndirectCommandsLayoutNV(Vk.NV.IndirectCommandsLayoutCreateInfo* pCreateInfo, Vk.AllocationCallbacks* pAllocator, Vk.Handle<Vk.NV.IndirectCommandsLayout>* pIndirectCommandsLayout)
	{
		if (Functions.vkCreateIndirectCommandsLayoutNV == null) throw new Vk.Extras.FunctionNotLoadedException("vkCreateIndirectCommandsLayoutNV");
		return Functions.vkCreateIndirectCommandsLayoutNV(Handle, pCreateInfo, pAllocator, pIndirectCommandsLayout);
	}

	/// <summary>vkCreateIndirectCommandsLayoutNV</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result CreateIndirectCommandsLayoutNV(Vk.NV.IndirectCommandsLayoutCreateInfo* pCreateInfo, Vk.AllocationCallbacks* pAllocator, out Vk.NV.IndirectCommandsLayout pIndirectCommandsLayout)
	{
		if (Functions.vkCreateIndirectCommandsLayoutNV == null) throw new Vk.Extras.FunctionNotLoadedException("vkCreateIndirectCommandsLayoutNV");
		Vk.Handle<Vk.NV.IndirectCommandsLayout> HANDLE;
		var RESULT = Functions.vkCreateIndirectCommandsLayoutNV(Handle, pCreateInfo, pAllocator, &HANDLE);
		pIndirectCommandsLayout = (RESULT == Result.Success) ? new(this, HANDLE) : Vk.NV.IndirectCommandsLayout.Null;
		return RESULT;
	}

	/// <summary>vkCreateIndirectCommandsLayoutNV</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result CreateIndirectCommandsLayoutNV(in Vk.NV.IndirectCommandsLayoutCreateInfo createInfo, in Vk.AllocationCallbacks allocator, out Vk.Handle<Vk.NV.IndirectCommandsLayout> indirectCommandsLayout)
	{
		if (Functions.vkCreateIndirectCommandsLayoutNV == null) throw new Vk.Extras.FunctionNotLoadedException("vkCreateIndirectCommandsLayoutNV");
		return Functions.CreateIndirectCommandsLayoutNV(Handle, createInfo, allocator, out indirectCommandsLayout);
	}

	/// <summary>vkCreateIndirectCommandsLayoutNV</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result CreateIndirectCommandsLayoutNV(in Vk.NV.IndirectCommandsLayoutCreateInfo createInfo, in Vk.AllocationCallbacks allocator, out Vk.NV.IndirectCommandsLayout pIndirectCommandsLayout)
	{
		if (Functions.vkCreateIndirectCommandsLayoutNV == null) throw new Vk.Extras.FunctionNotLoadedException("vkCreateIndirectCommandsLayoutNV");
		Vk.Handle<Vk.NV.IndirectCommandsLayout> HANDLE;
		var RESULT = Functions.CreateIndirectCommandsLayoutNV(Handle, createInfo, allocator, out HANDLE);
		pIndirectCommandsLayout = (RESULT == Result.Success) ? new(this, HANDLE) : Vk.NV.IndirectCommandsLayout.Null;
		return RESULT;
	}

	/// <summary>vkGetMemoryWin32HandleKHR</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result GetMemoryWin32HandleKHR(Vk.KHR.MemoryGetWin32HandleInfo* pGetWin32HandleInfo, void** pHandle)
	{
		if (Functions.vkGetMemoryWin32HandleKHR == null) throw new Vk.Extras.FunctionNotLoadedException("vkGetMemoryWin32HandleKHR");
		return Functions.vkGetMemoryWin32HandleKHR(Handle, pGetWin32HandleInfo, pHandle);
	}

	/// <summary>vkGetMemoryWin32HandleKHR</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result GetMemoryWin32HandleKHR(in Vk.KHR.MemoryGetWin32HandleInfo getWin32HandleInfo, void** pHandle)
	{
		if (Functions.vkGetMemoryWin32HandleKHR == null) throw new Vk.Extras.FunctionNotLoadedException("vkGetMemoryWin32HandleKHR");
		return Functions.GetMemoryWin32HandleKHR(Handle, getWin32HandleInfo, pHandle);
	}

	/// <summary>vkGetMemoryWin32HandlePropertiesKHR</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result GetMemoryWin32HandlePropertiesKHR(Vk.ExternalMemoryHandleTypeFlags handleType, void* handle, Vk.KHR.MemoryWin32HandleProperties* pMemoryWin32HandleProperties)
	{
		if (Functions.vkGetMemoryWin32HandlePropertiesKHR == null) throw new Vk.Extras.FunctionNotLoadedException("vkGetMemoryWin32HandlePropertiesKHR");
		return Functions.vkGetMemoryWin32HandlePropertiesKHR(Handle, handleType, handle, pMemoryWin32HandleProperties);
	}

	/// <summary>vkGetMemoryWin32HandlePropertiesKHR</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result GetMemoryWin32HandlePropertiesKHR(Vk.ExternalMemoryHandleTypeFlags handleType, void* handle, out Vk.KHR.MemoryWin32HandleProperties memoryWin32HandleProperties)
	{
		if (Functions.vkGetMemoryWin32HandlePropertiesKHR == null) throw new Vk.Extras.FunctionNotLoadedException("vkGetMemoryWin32HandlePropertiesKHR");
		return Functions.GetMemoryWin32HandlePropertiesKHR(Handle, handleType, handle, out memoryWin32HandleProperties);
	}

	/// <summary>vkGetMemoryFdKHR</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result GetMemoryFdKHR(Vk.KHR.MemoryGetFdInfo* pGetFdInfo, int* pFd)
	{
		if (Functions.vkGetMemoryFdKHR == null) throw new Vk.Extras.FunctionNotLoadedException("vkGetMemoryFdKHR");
		return Functions.vkGetMemoryFdKHR(Handle, pGetFdInfo, pFd);
	}

	/// <summary>vkGetMemoryFdKHR</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result GetMemoryFdKHR(in Vk.KHR.MemoryGetFdInfo getFdInfo, out int fd)
	{
		if (Functions.vkGetMemoryFdKHR == null) throw new Vk.Extras.FunctionNotLoadedException("vkGetMemoryFdKHR");
		return Functions.GetMemoryFdKHR(Handle, getFdInfo, out fd);
	}

	/// <summary>vkGetMemoryFdPropertiesKHR</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result GetMemoryFdPropertiesKHR(Vk.ExternalMemoryHandleTypeFlags handleType, int fd, Vk.KHR.MemoryFdProperties* pMemoryFdProperties)
	{
		if (Functions.vkGetMemoryFdPropertiesKHR == null) throw new Vk.Extras.FunctionNotLoadedException("vkGetMemoryFdPropertiesKHR");
		return Functions.vkGetMemoryFdPropertiesKHR(Handle, handleType, fd, pMemoryFdProperties);
	}

	/// <summary>vkGetMemoryFdPropertiesKHR</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result GetMemoryFdPropertiesKHR(Vk.ExternalMemoryHandleTypeFlags handleType, int fd, out Vk.KHR.MemoryFdProperties memoryFdProperties)
	{
		if (Functions.vkGetMemoryFdPropertiesKHR == null) throw new Vk.Extras.FunctionNotLoadedException("vkGetMemoryFdPropertiesKHR");
		return Functions.GetMemoryFdPropertiesKHR(Handle, handleType, fd, out memoryFdProperties);
	}

	/// <summary>vkGetSemaphoreWin32HandleKHR</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result GetSemaphoreWin32HandleKHR(Vk.KHR.SemaphoreGetWin32HandleInfo* pGetWin32HandleInfo, void** pHandle)
	{
		if (Functions.vkGetSemaphoreWin32HandleKHR == null) throw new Vk.Extras.FunctionNotLoadedException("vkGetSemaphoreWin32HandleKHR");
		return Functions.vkGetSemaphoreWin32HandleKHR(Handle, pGetWin32HandleInfo, pHandle);
	}

	/// <summary>vkGetSemaphoreWin32HandleKHR</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result GetSemaphoreWin32HandleKHR(in Vk.KHR.SemaphoreGetWin32HandleInfo getWin32HandleInfo, void** pHandle)
	{
		if (Functions.vkGetSemaphoreWin32HandleKHR == null) throw new Vk.Extras.FunctionNotLoadedException("vkGetSemaphoreWin32HandleKHR");
		return Functions.GetSemaphoreWin32HandleKHR(Handle, getWin32HandleInfo, pHandle);
	}

	/// <summary>vkImportSemaphoreWin32HandleKHR</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result ImportSemaphoreWin32HandleKHR(Vk.KHR.ImportSemaphoreWin32HandleInfo* pImportSemaphoreWin32HandleInfo)
	{
		if (Functions.vkImportSemaphoreWin32HandleKHR == null) throw new Vk.Extras.FunctionNotLoadedException("vkImportSemaphoreWin32HandleKHR");
		return Functions.vkImportSemaphoreWin32HandleKHR(Handle, pImportSemaphoreWin32HandleInfo);
	}

	/// <summary>vkImportSemaphoreWin32HandleKHR</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result ImportSemaphoreWin32HandleKHR(in Vk.KHR.ImportSemaphoreWin32HandleInfo importSemaphoreWin32HandleInfo)
	{
		if (Functions.vkImportSemaphoreWin32HandleKHR == null) throw new Vk.Extras.FunctionNotLoadedException("vkImportSemaphoreWin32HandleKHR");
		return Functions.ImportSemaphoreWin32HandleKHR(Handle, importSemaphoreWin32HandleInfo);
	}

	/// <summary>vkGetSemaphoreFdKHR</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result GetSemaphoreFdKHR(Vk.KHR.SemaphoreGetFdInfo* pGetFdInfo, int* pFd)
	{
		if (Functions.vkGetSemaphoreFdKHR == null) throw new Vk.Extras.FunctionNotLoadedException("vkGetSemaphoreFdKHR");
		return Functions.vkGetSemaphoreFdKHR(Handle, pGetFdInfo, pFd);
	}

	/// <summary>vkGetSemaphoreFdKHR</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result GetSemaphoreFdKHR(in Vk.KHR.SemaphoreGetFdInfo getFdInfo, out int fd)
	{
		if (Functions.vkGetSemaphoreFdKHR == null) throw new Vk.Extras.FunctionNotLoadedException("vkGetSemaphoreFdKHR");
		return Functions.GetSemaphoreFdKHR(Handle, getFdInfo, out fd);
	}

	/// <summary>vkImportSemaphoreFdKHR</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result ImportSemaphoreFdKHR(Vk.KHR.ImportSemaphoreFdInfo* pImportSemaphoreFdInfo)
	{
		if (Functions.vkImportSemaphoreFdKHR == null) throw new Vk.Extras.FunctionNotLoadedException("vkImportSemaphoreFdKHR");
		return Functions.vkImportSemaphoreFdKHR(Handle, pImportSemaphoreFdInfo);
	}

	/// <summary>vkImportSemaphoreFdKHR</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result ImportSemaphoreFdKHR(in Vk.KHR.ImportSemaphoreFdInfo importSemaphoreFdInfo)
	{
		if (Functions.vkImportSemaphoreFdKHR == null) throw new Vk.Extras.FunctionNotLoadedException("vkImportSemaphoreFdKHR");
		return Functions.ImportSemaphoreFdKHR(Handle, importSemaphoreFdInfo);
	}

	/// <summary>vkGetFenceWin32HandleKHR</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result GetFenceWin32HandleKHR(Vk.KHR.FenceGetWin32HandleInfo* pGetWin32HandleInfo, void** pHandle)
	{
		if (Functions.vkGetFenceWin32HandleKHR == null) throw new Vk.Extras.FunctionNotLoadedException("vkGetFenceWin32HandleKHR");
		return Functions.vkGetFenceWin32HandleKHR(Handle, pGetWin32HandleInfo, pHandle);
	}

	/// <summary>vkGetFenceWin32HandleKHR</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result GetFenceWin32HandleKHR(in Vk.KHR.FenceGetWin32HandleInfo getWin32HandleInfo, void** pHandle)
	{
		if (Functions.vkGetFenceWin32HandleKHR == null) throw new Vk.Extras.FunctionNotLoadedException("vkGetFenceWin32HandleKHR");
		return Functions.GetFenceWin32HandleKHR(Handle, getWin32HandleInfo, pHandle);
	}

	/// <summary>vkImportFenceWin32HandleKHR</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result ImportFenceWin32HandleKHR(Vk.KHR.ImportFenceWin32HandleInfo* pImportFenceWin32HandleInfo)
	{
		if (Functions.vkImportFenceWin32HandleKHR == null) throw new Vk.Extras.FunctionNotLoadedException("vkImportFenceWin32HandleKHR");
		return Functions.vkImportFenceWin32HandleKHR(Handle, pImportFenceWin32HandleInfo);
	}

	/// <summary>vkImportFenceWin32HandleKHR</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result ImportFenceWin32HandleKHR(in Vk.KHR.ImportFenceWin32HandleInfo importFenceWin32HandleInfo)
	{
		if (Functions.vkImportFenceWin32HandleKHR == null) throw new Vk.Extras.FunctionNotLoadedException("vkImportFenceWin32HandleKHR");
		return Functions.ImportFenceWin32HandleKHR(Handle, importFenceWin32HandleInfo);
	}

	/// <summary>vkGetFenceFdKHR</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result GetFenceFdKHR(Vk.KHR.FenceGetFdInfo* pGetFdInfo, int* pFd)
	{
		if (Functions.vkGetFenceFdKHR == null) throw new Vk.Extras.FunctionNotLoadedException("vkGetFenceFdKHR");
		return Functions.vkGetFenceFdKHR(Handle, pGetFdInfo, pFd);
	}

	/// <summary>vkGetFenceFdKHR</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result GetFenceFdKHR(in Vk.KHR.FenceGetFdInfo getFdInfo, out int fd)
	{
		if (Functions.vkGetFenceFdKHR == null) throw new Vk.Extras.FunctionNotLoadedException("vkGetFenceFdKHR");
		return Functions.GetFenceFdKHR(Handle, getFdInfo, out fd);
	}

	/// <summary>vkImportFenceFdKHR</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result ImportFenceFdKHR(Vk.KHR.ImportFenceFdInfo* pImportFenceFdInfo)
	{
		if (Functions.vkImportFenceFdKHR == null) throw new Vk.Extras.FunctionNotLoadedException("vkImportFenceFdKHR");
		return Functions.vkImportFenceFdKHR(Handle, pImportFenceFdInfo);
	}

	/// <summary>vkImportFenceFdKHR</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result ImportFenceFdKHR(in Vk.KHR.ImportFenceFdInfo importFenceFdInfo)
	{
		if (Functions.vkImportFenceFdKHR == null) throw new Vk.Extras.FunctionNotLoadedException("vkImportFenceFdKHR");
		return Functions.ImportFenceFdKHR(Handle, importFenceFdInfo);
	}

	/// <summary>vkDisplayPowerControlEXT</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result DisplayPowerControlEXT(Vk.Handle<Vk.KHR.Display> display, Vk.EXT.DisplayPowerInfo* pDisplayPowerInfo)
	{
		if (Functions.vkDisplayPowerControlEXT == null) throw new Vk.Extras.FunctionNotLoadedException("vkDisplayPowerControlEXT");
		return Functions.vkDisplayPowerControlEXT(Handle, display, pDisplayPowerInfo);
	}

	/// <summary>vkDisplayPowerControlEXT</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result DisplayPowerControlEXT(Vk.Handle<Vk.KHR.Display> display, in Vk.EXT.DisplayPowerInfo displayPowerInfo)
	{
		if (Functions.vkDisplayPowerControlEXT == null) throw new Vk.Extras.FunctionNotLoadedException("vkDisplayPowerControlEXT");
		return Functions.DisplayPowerControlEXT(Handle, display, displayPowerInfo);
	}

	/// <summary>vkRegisterDeviceEventEXT</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result RegisterDeviceEventEXT(Vk.EXT.DeviceEventInfo* pDeviceEventInfo, Vk.AllocationCallbacks* pAllocator, Vk.Handle<Vk.Fence>* pFence)
	{
		if (Functions.vkRegisterDeviceEventEXT == null) throw new Vk.Extras.FunctionNotLoadedException("vkRegisterDeviceEventEXT");
		return Functions.vkRegisterDeviceEventEXT(Handle, pDeviceEventInfo, pAllocator, pFence);
	}

	/// <summary>vkRegisterDeviceEventEXT</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result RegisterDeviceEventEXT(Vk.EXT.DeviceEventInfo* pDeviceEventInfo, Vk.AllocationCallbacks* pAllocator, out Vk.Fence pFence)
	{
		if (Functions.vkRegisterDeviceEventEXT == null) throw new Vk.Extras.FunctionNotLoadedException("vkRegisterDeviceEventEXT");
		Vk.Handle<Vk.Fence> HANDLE;
		var RESULT = Functions.vkRegisterDeviceEventEXT(Handle, pDeviceEventInfo, pAllocator, &HANDLE);
		pFence = (RESULT == Result.Success) ? new(this, HANDLE) : Vk.Fence.Null;
		return RESULT;
	}

	/// <summary>vkRegisterDeviceEventEXT</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result RegisterDeviceEventEXT(in Vk.EXT.DeviceEventInfo deviceEventInfo, in Vk.AllocationCallbacks allocator, out Vk.Handle<Vk.Fence> fence)
	{
		if (Functions.vkRegisterDeviceEventEXT == null) throw new Vk.Extras.FunctionNotLoadedException("vkRegisterDeviceEventEXT");
		return Functions.RegisterDeviceEventEXT(Handle, deviceEventInfo, allocator, out fence);
	}

	/// <summary>vkRegisterDeviceEventEXT</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result RegisterDeviceEventEXT(in Vk.EXT.DeviceEventInfo deviceEventInfo, in Vk.AllocationCallbacks allocator, out Vk.Fence pFence)
	{
		if (Functions.vkRegisterDeviceEventEXT == null) throw new Vk.Extras.FunctionNotLoadedException("vkRegisterDeviceEventEXT");
		Vk.Handle<Vk.Fence> HANDLE;
		var RESULT = Functions.RegisterDeviceEventEXT(Handle, deviceEventInfo, allocator, out HANDLE);
		pFence = (RESULT == Result.Success) ? new(this, HANDLE) : Vk.Fence.Null;
		return RESULT;
	}

	/// <summary>vkRegisterDisplayEventEXT</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result RegisterDisplayEventEXT(Vk.Handle<Vk.KHR.Display> display, Vk.EXT.DisplayEventInfo* pDisplayEventInfo, Vk.AllocationCallbacks* pAllocator, Vk.Handle<Vk.Fence>* pFence)
	{
		if (Functions.vkRegisterDisplayEventEXT == null) throw new Vk.Extras.FunctionNotLoadedException("vkRegisterDisplayEventEXT");
		return Functions.vkRegisterDisplayEventEXT(Handle, display, pDisplayEventInfo, pAllocator, pFence);
	}

	/// <summary>vkRegisterDisplayEventEXT</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result RegisterDisplayEventEXT(Vk.Handle<Vk.KHR.Display> display, Vk.EXT.DisplayEventInfo* pDisplayEventInfo, Vk.AllocationCallbacks* pAllocator, out Vk.Fence pFence)
	{
		if (Functions.vkRegisterDisplayEventEXT == null) throw new Vk.Extras.FunctionNotLoadedException("vkRegisterDisplayEventEXT");
		Vk.Handle<Vk.Fence> HANDLE;
		var RESULT = Functions.vkRegisterDisplayEventEXT(Handle, display, pDisplayEventInfo, pAllocator, &HANDLE);
		pFence = (RESULT == Result.Success) ? new(this, HANDLE) : Vk.Fence.Null;
		return RESULT;
	}

	/// <summary>vkRegisterDisplayEventEXT</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result RegisterDisplayEventEXT(Vk.Handle<Vk.KHR.Display> display, in Vk.EXT.DisplayEventInfo displayEventInfo, in Vk.AllocationCallbacks allocator, out Vk.Handle<Vk.Fence> fence)
	{
		if (Functions.vkRegisterDisplayEventEXT == null) throw new Vk.Extras.FunctionNotLoadedException("vkRegisterDisplayEventEXT");
		return Functions.RegisterDisplayEventEXT(Handle, display, displayEventInfo, allocator, out fence);
	}

	/// <summary>vkRegisterDisplayEventEXT</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result RegisterDisplayEventEXT(Vk.Handle<Vk.KHR.Display> display, in Vk.EXT.DisplayEventInfo displayEventInfo, in Vk.AllocationCallbacks allocator, out Vk.Fence pFence)
	{
		if (Functions.vkRegisterDisplayEventEXT == null) throw new Vk.Extras.FunctionNotLoadedException("vkRegisterDisplayEventEXT");
		Vk.Handle<Vk.Fence> HANDLE;
		var RESULT = Functions.RegisterDisplayEventEXT(Handle, display, displayEventInfo, allocator, out HANDLE);
		pFence = (RESULT == Result.Success) ? new(this, HANDLE) : Vk.Fence.Null;
		return RESULT;
	}

	/// <summary>vkGetDeviceGroupPeerMemoryFeatures</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void GetDeviceGroupPeerMemoryFeatures(uint heapIndex, uint localDeviceIndex, uint remoteDeviceIndex, Vk.PeerMemoryFeatureFlags* pPeerMemoryFeatures)
	{
		if (Functions.vkGetDeviceGroupPeerMemoryFeatures == null) throw new Vk.Extras.FunctionNotLoadedException("vkGetDeviceGroupPeerMemoryFeatures");
		Functions.vkGetDeviceGroupPeerMemoryFeatures(Handle, heapIndex, localDeviceIndex, remoteDeviceIndex, pPeerMemoryFeatures);
	}

	/// <summary>vkGetDeviceGroupPeerMemoryFeatures</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void GetDeviceGroupPeerMemoryFeatures(uint heapIndex, uint localDeviceIndex, uint remoteDeviceIndex, out Vk.PeerMemoryFeatureFlags peerMemoryFeatures)
	{
		if (Functions.vkGetDeviceGroupPeerMemoryFeatures == null) throw new Vk.Extras.FunctionNotLoadedException("vkGetDeviceGroupPeerMemoryFeatures");
		Functions.GetDeviceGroupPeerMemoryFeatures(Handle, heapIndex, localDeviceIndex, remoteDeviceIndex, out peerMemoryFeatures);
	}

	/// <summary>vkGetDeviceGroupPeerMemoryFeaturesKHR</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void GetDeviceGroupPeerMemoryFeaturesKHR(uint heapIndex, uint localDeviceIndex, uint remoteDeviceIndex, Vk.PeerMemoryFeatureFlags* pPeerMemoryFeatures)
	{
		if (Functions.vkGetDeviceGroupPeerMemoryFeaturesKHR == null) throw new Vk.Extras.FunctionNotLoadedException("vkGetDeviceGroupPeerMemoryFeaturesKHR");
		Functions.vkGetDeviceGroupPeerMemoryFeaturesKHR(Handle, heapIndex, localDeviceIndex, remoteDeviceIndex, pPeerMemoryFeatures);
	}

	/// <summary>vkGetDeviceGroupPeerMemoryFeaturesKHR</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void GetDeviceGroupPeerMemoryFeaturesKHR(uint heapIndex, uint localDeviceIndex, uint remoteDeviceIndex, out Vk.PeerMemoryFeatureFlags peerMemoryFeatures)
	{
		if (Functions.vkGetDeviceGroupPeerMemoryFeaturesKHR == null) throw new Vk.Extras.FunctionNotLoadedException("vkGetDeviceGroupPeerMemoryFeaturesKHR");
		Functions.GetDeviceGroupPeerMemoryFeaturesKHR(Handle, heapIndex, localDeviceIndex, remoteDeviceIndex, out peerMemoryFeatures);
	}

	/// <summary>vkBindBufferMemory2</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result BindBufferMemory2(uint bindInfoCount, Vk.BindBufferMemoryInfo* pBindInfos)
	{
		if (Functions.vkBindBufferMemory2 == null) throw new Vk.Extras.FunctionNotLoadedException("vkBindBufferMemory2");
		return Functions.vkBindBufferMemory2(Handle, bindInfoCount, pBindInfos);
	}

	/// <summary>vkBindBufferMemory2</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result BindBufferMemory2(in ReadOnlySpan<Vk.BindBufferMemoryInfo> bindInfos)
	{
		if (Functions.vkBindBufferMemory2 == null) throw new Vk.Extras.FunctionNotLoadedException("vkBindBufferMemory2");
		return Functions.BindBufferMemory2(Handle, bindInfos);
	}

	/// <summary>vkBindBufferMemory2KHR</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result BindBufferMemory2KHR(uint bindInfoCount, Vk.BindBufferMemoryInfo* pBindInfos)
	{
		if (Functions.vkBindBufferMemory2KHR == null) throw new Vk.Extras.FunctionNotLoadedException("vkBindBufferMemory2KHR");
		return Functions.vkBindBufferMemory2KHR(Handle, bindInfoCount, pBindInfos);
	}

	/// <summary>vkBindBufferMemory2KHR</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result BindBufferMemory2KHR(in ReadOnlySpan<Vk.BindBufferMemoryInfo> bindInfos)
	{
		if (Functions.vkBindBufferMemory2KHR == null) throw new Vk.Extras.FunctionNotLoadedException("vkBindBufferMemory2KHR");
		return Functions.BindBufferMemory2KHR(Handle, bindInfos);
	}

	/// <summary>vkBindImageMemory2</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result BindImageMemory2(uint bindInfoCount, Vk.BindImageMemoryInfo* pBindInfos)
	{
		if (Functions.vkBindImageMemory2 == null) throw new Vk.Extras.FunctionNotLoadedException("vkBindImageMemory2");
		return Functions.vkBindImageMemory2(Handle, bindInfoCount, pBindInfos);
	}

	/// <summary>vkBindImageMemory2</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result BindImageMemory2(in ReadOnlySpan<Vk.BindImageMemoryInfo> bindInfos)
	{
		if (Functions.vkBindImageMemory2 == null) throw new Vk.Extras.FunctionNotLoadedException("vkBindImageMemory2");
		return Functions.BindImageMemory2(Handle, bindInfos);
	}

	/// <summary>vkBindImageMemory2KHR</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result BindImageMemory2KHR(uint bindInfoCount, Vk.BindImageMemoryInfo* pBindInfos)
	{
		if (Functions.vkBindImageMemory2KHR == null) throw new Vk.Extras.FunctionNotLoadedException("vkBindImageMemory2KHR");
		return Functions.vkBindImageMemory2KHR(Handle, bindInfoCount, pBindInfos);
	}

	/// <summary>vkBindImageMemory2KHR</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result BindImageMemory2KHR(in ReadOnlySpan<Vk.BindImageMemoryInfo> bindInfos)
	{
		if (Functions.vkBindImageMemory2KHR == null) throw new Vk.Extras.FunctionNotLoadedException("vkBindImageMemory2KHR");
		return Functions.BindImageMemory2KHR(Handle, bindInfos);
	}

	/// <summary>vkGetDeviceGroupPresentCapabilitiesKHR</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result GetDeviceGroupPresentCapabilitiesKHR(Vk.KHR.DeviceGroupPresentCapabilities* pDeviceGroupPresentCapabilities)
	{
		if (Functions.vkGetDeviceGroupPresentCapabilitiesKHR == null) throw new Vk.Extras.FunctionNotLoadedException("vkGetDeviceGroupPresentCapabilitiesKHR");
		return Functions.vkGetDeviceGroupPresentCapabilitiesKHR(Handle, pDeviceGroupPresentCapabilities);
	}

	/// <summary>vkGetDeviceGroupPresentCapabilitiesKHR</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result GetDeviceGroupPresentCapabilitiesKHR(out Vk.KHR.DeviceGroupPresentCapabilities deviceGroupPresentCapabilities)
	{
		if (Functions.vkGetDeviceGroupPresentCapabilitiesKHR == null) throw new Vk.Extras.FunctionNotLoadedException("vkGetDeviceGroupPresentCapabilitiesKHR");
		return Functions.GetDeviceGroupPresentCapabilitiesKHR(Handle, out deviceGroupPresentCapabilities);
	}

	/// <summary>vkGetDeviceGroupSurfacePresentModesKHR</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result GetDeviceGroupSurfacePresentModesKHR(Vk.Handle<Vk.KHR.Surface> surface, Vk.KHR.DeviceGroupPresentModeFlags* pModes)
	{
		if (Functions.vkGetDeviceGroupSurfacePresentModesKHR == null) throw new Vk.Extras.FunctionNotLoadedException("vkGetDeviceGroupSurfacePresentModesKHR");
		return Functions.vkGetDeviceGroupSurfacePresentModesKHR(Handle, surface, pModes);
	}

	/// <summary>vkGetDeviceGroupSurfacePresentModesKHR</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result GetDeviceGroupSurfacePresentModesKHR(Vk.Handle<Vk.KHR.Surface> surface, out Vk.KHR.DeviceGroupPresentModeFlags modes)
	{
		if (Functions.vkGetDeviceGroupSurfacePresentModesKHR == null) throw new Vk.Extras.FunctionNotLoadedException("vkGetDeviceGroupSurfacePresentModesKHR");
		return Functions.GetDeviceGroupSurfacePresentModesKHR(Handle, surface, out modes);
	}

	/// <summary>vkAcquireNextImage2KHR</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result AcquireNextImage2KHR(Vk.KHR.AcquireNextImageInfo* pAcquireInfo, uint* pImageIndex)
	{
		if (Functions.vkAcquireNextImage2KHR == null) throw new Vk.Extras.FunctionNotLoadedException("vkAcquireNextImage2KHR");
		return Functions.vkAcquireNextImage2KHR(Handle, pAcquireInfo, pImageIndex);
	}

	/// <summary>vkAcquireNextImage2KHR</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result AcquireNextImage2KHR(in Vk.KHR.AcquireNextImageInfo acquireInfo, out uint imageIndex)
	{
		if (Functions.vkAcquireNextImage2KHR == null) throw new Vk.Extras.FunctionNotLoadedException("vkAcquireNextImage2KHR");
		return Functions.AcquireNextImage2KHR(Handle, acquireInfo, out imageIndex);
	}

	/// <summary>vkCreateDescriptorUpdateTemplate</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result CreateDescriptorUpdateTemplate(Vk.DescriptorUpdateTemplateCreateInfo* pCreateInfo, Vk.AllocationCallbacks* pAllocator, Vk.Handle<Vk.DescriptorUpdateTemplate>* pDescriptorUpdateTemplate)
	{
		if (Functions.vkCreateDescriptorUpdateTemplate == null) throw new Vk.Extras.FunctionNotLoadedException("vkCreateDescriptorUpdateTemplate");
		return Functions.vkCreateDescriptorUpdateTemplate(Handle, pCreateInfo, pAllocator, pDescriptorUpdateTemplate);
	}

	/// <summary>vkCreateDescriptorUpdateTemplate</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result CreateDescriptorUpdateTemplate(Vk.DescriptorUpdateTemplateCreateInfo* pCreateInfo, Vk.AllocationCallbacks* pAllocator, out Vk.DescriptorUpdateTemplate pDescriptorUpdateTemplate)
	{
		if (Functions.vkCreateDescriptorUpdateTemplate == null) throw new Vk.Extras.FunctionNotLoadedException("vkCreateDescriptorUpdateTemplate");
		Vk.Handle<Vk.DescriptorUpdateTemplate> HANDLE;
		var RESULT = Functions.vkCreateDescriptorUpdateTemplate(Handle, pCreateInfo, pAllocator, &HANDLE);
		pDescriptorUpdateTemplate = (RESULT == Result.Success) ? new(this, HANDLE) : Vk.DescriptorUpdateTemplate.Null;
		return RESULT;
	}

	/// <summary>vkCreateDescriptorUpdateTemplate</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result CreateDescriptorUpdateTemplate(in Vk.DescriptorUpdateTemplateCreateInfo createInfo, in Vk.AllocationCallbacks allocator, out Vk.Handle<Vk.DescriptorUpdateTemplate> descriptorUpdateTemplate)
	{
		if (Functions.vkCreateDescriptorUpdateTemplate == null) throw new Vk.Extras.FunctionNotLoadedException("vkCreateDescriptorUpdateTemplate");
		return Functions.CreateDescriptorUpdateTemplate(Handle, createInfo, allocator, out descriptorUpdateTemplate);
	}

	/// <summary>vkCreateDescriptorUpdateTemplate</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result CreateDescriptorUpdateTemplate(in Vk.DescriptorUpdateTemplateCreateInfo createInfo, in Vk.AllocationCallbacks allocator, out Vk.DescriptorUpdateTemplate pDescriptorUpdateTemplate)
	{
		if (Functions.vkCreateDescriptorUpdateTemplate == null) throw new Vk.Extras.FunctionNotLoadedException("vkCreateDescriptorUpdateTemplate");
		Vk.Handle<Vk.DescriptorUpdateTemplate> HANDLE;
		var RESULT = Functions.CreateDescriptorUpdateTemplate(Handle, createInfo, allocator, out HANDLE);
		pDescriptorUpdateTemplate = (RESULT == Result.Success) ? new(this, HANDLE) : Vk.DescriptorUpdateTemplate.Null;
		return RESULT;
	}

	/// <summary>vkCreateDescriptorUpdateTemplateKHR</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result CreateDescriptorUpdateTemplateKHR(Vk.DescriptorUpdateTemplateCreateInfo* pCreateInfo, Vk.AllocationCallbacks* pAllocator, Vk.Handle<Vk.DescriptorUpdateTemplate>* pDescriptorUpdateTemplate)
	{
		if (Functions.vkCreateDescriptorUpdateTemplateKHR == null) throw new Vk.Extras.FunctionNotLoadedException("vkCreateDescriptorUpdateTemplateKHR");
		return Functions.vkCreateDescriptorUpdateTemplateKHR(Handle, pCreateInfo, pAllocator, pDescriptorUpdateTemplate);
	}

	/// <summary>vkCreateDescriptorUpdateTemplateKHR</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result CreateDescriptorUpdateTemplateKHR(Vk.DescriptorUpdateTemplateCreateInfo* pCreateInfo, Vk.AllocationCallbacks* pAllocator, out Vk.DescriptorUpdateTemplate pDescriptorUpdateTemplate)
	{
		if (Functions.vkCreateDescriptorUpdateTemplateKHR == null) throw new Vk.Extras.FunctionNotLoadedException("vkCreateDescriptorUpdateTemplateKHR");
		Vk.Handle<Vk.DescriptorUpdateTemplate> HANDLE;
		var RESULT = Functions.vkCreateDescriptorUpdateTemplateKHR(Handle, pCreateInfo, pAllocator, &HANDLE);
		pDescriptorUpdateTemplate = (RESULT == Result.Success) ? new(this, HANDLE) : Vk.DescriptorUpdateTemplate.Null;
		return RESULT;
	}

	/// <summary>vkCreateDescriptorUpdateTemplateKHR</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result CreateDescriptorUpdateTemplateKHR(in Vk.DescriptorUpdateTemplateCreateInfo createInfo, in Vk.AllocationCallbacks allocator, out Vk.Handle<Vk.DescriptorUpdateTemplate> descriptorUpdateTemplate)
	{
		if (Functions.vkCreateDescriptorUpdateTemplateKHR == null) throw new Vk.Extras.FunctionNotLoadedException("vkCreateDescriptorUpdateTemplateKHR");
		return Functions.CreateDescriptorUpdateTemplateKHR(Handle, createInfo, allocator, out descriptorUpdateTemplate);
	}

	/// <summary>vkCreateDescriptorUpdateTemplateKHR</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result CreateDescriptorUpdateTemplateKHR(in Vk.DescriptorUpdateTemplateCreateInfo createInfo, in Vk.AllocationCallbacks allocator, out Vk.DescriptorUpdateTemplate pDescriptorUpdateTemplate)
	{
		if (Functions.vkCreateDescriptorUpdateTemplateKHR == null) throw new Vk.Extras.FunctionNotLoadedException("vkCreateDescriptorUpdateTemplateKHR");
		Vk.Handle<Vk.DescriptorUpdateTemplate> HANDLE;
		var RESULT = Functions.CreateDescriptorUpdateTemplateKHR(Handle, createInfo, allocator, out HANDLE);
		pDescriptorUpdateTemplate = (RESULT == Result.Success) ? new(this, HANDLE) : Vk.DescriptorUpdateTemplate.Null;
		return RESULT;
	}

	/// <summary>vkSetHdrMetadataEXT</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void SetHdrMetadataEXT(uint swapchainCount, Vk.Handle<Vk.KHR.Swapchain>* pSwapchains, Vk.EXT.HdrMetadata* pMetadata)
	{
		if (Functions.vkSetHdrMetadataEXT == null) throw new Vk.Extras.FunctionNotLoadedException("vkSetHdrMetadataEXT");
		Functions.vkSetHdrMetadataEXT(Handle, swapchainCount, pSwapchains, pMetadata);
	}

	/// <summary>vkSetHdrMetadataEXT</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void SetHdrMetadataEXT(in ReadOnlySpan<Vk.Handle<Vk.KHR.Swapchain>> swapchains, in ReadOnlySpan<Vk.EXT.HdrMetadata> metadata)
	{
		if (Functions.vkSetHdrMetadataEXT == null) throw new Vk.Extras.FunctionNotLoadedException("vkSetHdrMetadataEXT");
		Functions.SetHdrMetadataEXT(Handle, swapchains, metadata);
	}

	/// <summary>vkGetBufferMemoryRequirements2</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void GetBufferMemoryRequirements2(Vk.BufferMemoryRequirementsInfo2* pInfo, Vk.MemoryRequirements2* pMemoryRequirements)
	{
		if (Functions.vkGetBufferMemoryRequirements2 == null) throw new Vk.Extras.FunctionNotLoadedException("vkGetBufferMemoryRequirements2");
		Functions.vkGetBufferMemoryRequirements2(Handle, pInfo, pMemoryRequirements);
	}

	/// <summary>vkGetBufferMemoryRequirements2</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void GetBufferMemoryRequirements2(in Vk.BufferMemoryRequirementsInfo2 info, out Vk.MemoryRequirements2 memoryRequirements)
	{
		if (Functions.vkGetBufferMemoryRequirements2 == null) throw new Vk.Extras.FunctionNotLoadedException("vkGetBufferMemoryRequirements2");
		Functions.GetBufferMemoryRequirements2(Handle, info, out memoryRequirements);
	}

	/// <summary>vkGetBufferMemoryRequirements2KHR</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void GetBufferMemoryRequirements2KHR(Vk.BufferMemoryRequirementsInfo2* pInfo, Vk.MemoryRequirements2* pMemoryRequirements)
	{
		if (Functions.vkGetBufferMemoryRequirements2KHR == null) throw new Vk.Extras.FunctionNotLoadedException("vkGetBufferMemoryRequirements2KHR");
		Functions.vkGetBufferMemoryRequirements2KHR(Handle, pInfo, pMemoryRequirements);
	}

	/// <summary>vkGetBufferMemoryRequirements2KHR</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void GetBufferMemoryRequirements2KHR(in Vk.BufferMemoryRequirementsInfo2 info, out Vk.MemoryRequirements2 memoryRequirements)
	{
		if (Functions.vkGetBufferMemoryRequirements2KHR == null) throw new Vk.Extras.FunctionNotLoadedException("vkGetBufferMemoryRequirements2KHR");
		Functions.GetBufferMemoryRequirements2KHR(Handle, info, out memoryRequirements);
	}

	/// <summary>vkGetImageMemoryRequirements2</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void GetImageMemoryRequirements2(Vk.ImageMemoryRequirementsInfo2* pInfo, Vk.MemoryRequirements2* pMemoryRequirements)
	{
		if (Functions.vkGetImageMemoryRequirements2 == null) throw new Vk.Extras.FunctionNotLoadedException("vkGetImageMemoryRequirements2");
		Functions.vkGetImageMemoryRequirements2(Handle, pInfo, pMemoryRequirements);
	}

	/// <summary>vkGetImageMemoryRequirements2</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void GetImageMemoryRequirements2(in Vk.ImageMemoryRequirementsInfo2 info, out Vk.MemoryRequirements2 memoryRequirements)
	{
		if (Functions.vkGetImageMemoryRequirements2 == null) throw new Vk.Extras.FunctionNotLoadedException("vkGetImageMemoryRequirements2");
		Functions.GetImageMemoryRequirements2(Handle, info, out memoryRequirements);
	}

	/// <summary>vkGetImageMemoryRequirements2KHR</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void GetImageMemoryRequirements2KHR(Vk.ImageMemoryRequirementsInfo2* pInfo, Vk.MemoryRequirements2* pMemoryRequirements)
	{
		if (Functions.vkGetImageMemoryRequirements2KHR == null) throw new Vk.Extras.FunctionNotLoadedException("vkGetImageMemoryRequirements2KHR");
		Functions.vkGetImageMemoryRequirements2KHR(Handle, pInfo, pMemoryRequirements);
	}

	/// <summary>vkGetImageMemoryRequirements2KHR</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void GetImageMemoryRequirements2KHR(in Vk.ImageMemoryRequirementsInfo2 info, out Vk.MemoryRequirements2 memoryRequirements)
	{
		if (Functions.vkGetImageMemoryRequirements2KHR == null) throw new Vk.Extras.FunctionNotLoadedException("vkGetImageMemoryRequirements2KHR");
		Functions.GetImageMemoryRequirements2KHR(Handle, info, out memoryRequirements);
	}

	/// <summary>vkGetImageSparseMemoryRequirements2</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void GetImageSparseMemoryRequirements2(Vk.ImageSparseMemoryRequirementsInfo2* pInfo, uint* pSparseMemoryRequirementCount, Vk.SparseImageMemoryRequirements2* pSparseMemoryRequirements)
	{
		if (Functions.vkGetImageSparseMemoryRequirements2 == null) throw new Vk.Extras.FunctionNotLoadedException("vkGetImageSparseMemoryRequirements2");
		Functions.vkGetImageSparseMemoryRequirements2(Handle, pInfo, pSparseMemoryRequirementCount, pSparseMemoryRequirements);
	}

	/// <summary>vkGetImageSparseMemoryRequirements2</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void GetImageSparseMemoryRequirements2(in Vk.ImageSparseMemoryRequirementsInfo2 info, out uint sparseMemoryRequirementCount, in Span<Vk.SparseImageMemoryRequirements2> sparseMemoryRequirements)
	{
		if (Functions.vkGetImageSparseMemoryRequirements2 == null) throw new Vk.Extras.FunctionNotLoadedException("vkGetImageSparseMemoryRequirements2");
		Functions.GetImageSparseMemoryRequirements2(Handle, info, out sparseMemoryRequirementCount, sparseMemoryRequirements);
	}

	/// <summary>vkGetImageSparseMemoryRequirements2KHR</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void GetImageSparseMemoryRequirements2KHR(Vk.ImageSparseMemoryRequirementsInfo2* pInfo, uint* pSparseMemoryRequirementCount, Vk.SparseImageMemoryRequirements2* pSparseMemoryRequirements)
	{
		if (Functions.vkGetImageSparseMemoryRequirements2KHR == null) throw new Vk.Extras.FunctionNotLoadedException("vkGetImageSparseMemoryRequirements2KHR");
		Functions.vkGetImageSparseMemoryRequirements2KHR(Handle, pInfo, pSparseMemoryRequirementCount, pSparseMemoryRequirements);
	}

	/// <summary>vkGetImageSparseMemoryRequirements2KHR</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void GetImageSparseMemoryRequirements2KHR(in Vk.ImageSparseMemoryRequirementsInfo2 info, out uint sparseMemoryRequirementCount, in Span<Vk.SparseImageMemoryRequirements2> sparseMemoryRequirements)
	{
		if (Functions.vkGetImageSparseMemoryRequirements2KHR == null) throw new Vk.Extras.FunctionNotLoadedException("vkGetImageSparseMemoryRequirements2KHR");
		Functions.GetImageSparseMemoryRequirements2KHR(Handle, info, out sparseMemoryRequirementCount, sparseMemoryRequirements);
	}

	/// <summary>vkCreateSamplerYcbcrConversion</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result CreateSamplerYcbcrConversion(Vk.SamplerYcbcrConversionCreateInfo* pCreateInfo, Vk.AllocationCallbacks* pAllocator, Vk.Handle<Vk.SamplerYcbcrConversion>* pYcbcrConversion)
	{
		if (Functions.vkCreateSamplerYcbcrConversion == null) throw new Vk.Extras.FunctionNotLoadedException("vkCreateSamplerYcbcrConversion");
		return Functions.vkCreateSamplerYcbcrConversion(Handle, pCreateInfo, pAllocator, pYcbcrConversion);
	}

	/// <summary>vkCreateSamplerYcbcrConversion</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result CreateSamplerYcbcrConversion(Vk.SamplerYcbcrConversionCreateInfo* pCreateInfo, Vk.AllocationCallbacks* pAllocator, out Vk.SamplerYcbcrConversion pYcbcrConversion)
	{
		if (Functions.vkCreateSamplerYcbcrConversion == null) throw new Vk.Extras.FunctionNotLoadedException("vkCreateSamplerYcbcrConversion");
		Vk.Handle<Vk.SamplerYcbcrConversion> HANDLE;
		var RESULT = Functions.vkCreateSamplerYcbcrConversion(Handle, pCreateInfo, pAllocator, &HANDLE);
		pYcbcrConversion = (RESULT == Result.Success) ? new(this, HANDLE) : Vk.SamplerYcbcrConversion.Null;
		return RESULT;
	}

	/// <summary>vkCreateSamplerYcbcrConversion</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result CreateSamplerYcbcrConversion(in Vk.SamplerYcbcrConversionCreateInfo createInfo, in Vk.AllocationCallbacks allocator, out Vk.Handle<Vk.SamplerYcbcrConversion> ycbcrConversion)
	{
		if (Functions.vkCreateSamplerYcbcrConversion == null) throw new Vk.Extras.FunctionNotLoadedException("vkCreateSamplerYcbcrConversion");
		return Functions.CreateSamplerYcbcrConversion(Handle, createInfo, allocator, out ycbcrConversion);
	}

	/// <summary>vkCreateSamplerYcbcrConversion</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result CreateSamplerYcbcrConversion(in Vk.SamplerYcbcrConversionCreateInfo createInfo, in Vk.AllocationCallbacks allocator, out Vk.SamplerYcbcrConversion pYcbcrConversion)
	{
		if (Functions.vkCreateSamplerYcbcrConversion == null) throw new Vk.Extras.FunctionNotLoadedException("vkCreateSamplerYcbcrConversion");
		Vk.Handle<Vk.SamplerYcbcrConversion> HANDLE;
		var RESULT = Functions.CreateSamplerYcbcrConversion(Handle, createInfo, allocator, out HANDLE);
		pYcbcrConversion = (RESULT == Result.Success) ? new(this, HANDLE) : Vk.SamplerYcbcrConversion.Null;
		return RESULT;
	}

	/// <summary>vkCreateSamplerYcbcrConversionKHR</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result CreateSamplerYcbcrConversionKHR(Vk.SamplerYcbcrConversionCreateInfo* pCreateInfo, Vk.AllocationCallbacks* pAllocator, Vk.Handle<Vk.SamplerYcbcrConversion>* pYcbcrConversion)
	{
		if (Functions.vkCreateSamplerYcbcrConversionKHR == null) throw new Vk.Extras.FunctionNotLoadedException("vkCreateSamplerYcbcrConversionKHR");
		return Functions.vkCreateSamplerYcbcrConversionKHR(Handle, pCreateInfo, pAllocator, pYcbcrConversion);
	}

	/// <summary>vkCreateSamplerYcbcrConversionKHR</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result CreateSamplerYcbcrConversionKHR(Vk.SamplerYcbcrConversionCreateInfo* pCreateInfo, Vk.AllocationCallbacks* pAllocator, out Vk.SamplerYcbcrConversion pYcbcrConversion)
	{
		if (Functions.vkCreateSamplerYcbcrConversionKHR == null) throw new Vk.Extras.FunctionNotLoadedException("vkCreateSamplerYcbcrConversionKHR");
		Vk.Handle<Vk.SamplerYcbcrConversion> HANDLE;
		var RESULT = Functions.vkCreateSamplerYcbcrConversionKHR(Handle, pCreateInfo, pAllocator, &HANDLE);
		pYcbcrConversion = (RESULT == Result.Success) ? new(this, HANDLE) : Vk.SamplerYcbcrConversion.Null;
		return RESULT;
	}

	/// <summary>vkCreateSamplerYcbcrConversionKHR</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result CreateSamplerYcbcrConversionKHR(in Vk.SamplerYcbcrConversionCreateInfo createInfo, in Vk.AllocationCallbacks allocator, out Vk.Handle<Vk.SamplerYcbcrConversion> ycbcrConversion)
	{
		if (Functions.vkCreateSamplerYcbcrConversionKHR == null) throw new Vk.Extras.FunctionNotLoadedException("vkCreateSamplerYcbcrConversionKHR");
		return Functions.CreateSamplerYcbcrConversionKHR(Handle, createInfo, allocator, out ycbcrConversion);
	}

	/// <summary>vkCreateSamplerYcbcrConversionKHR</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result CreateSamplerYcbcrConversionKHR(in Vk.SamplerYcbcrConversionCreateInfo createInfo, in Vk.AllocationCallbacks allocator, out Vk.SamplerYcbcrConversion pYcbcrConversion)
	{
		if (Functions.vkCreateSamplerYcbcrConversionKHR == null) throw new Vk.Extras.FunctionNotLoadedException("vkCreateSamplerYcbcrConversionKHR");
		Vk.Handle<Vk.SamplerYcbcrConversion> HANDLE;
		var RESULT = Functions.CreateSamplerYcbcrConversionKHR(Handle, createInfo, allocator, out HANDLE);
		pYcbcrConversion = (RESULT == Result.Success) ? new(this, HANDLE) : Vk.SamplerYcbcrConversion.Null;
		return RESULT;
	}

	/// <summary>vkGetDeviceQueue2</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void GetDeviceQueue2(Vk.DeviceQueueInfo2* pQueueInfo, Vk.Handle<Vk.Queue>* pQueue)
	{
		if (Functions.vkGetDeviceQueue2 == null) throw new Vk.Extras.FunctionNotLoadedException("vkGetDeviceQueue2");
		Functions.vkGetDeviceQueue2(Handle, pQueueInfo, pQueue);
	}

	/// <summary>vkGetDeviceQueue2</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void GetDeviceQueue2(Vk.DeviceQueueInfo2* pQueueInfo, out Vk.Queue pQueue)
	{
		if (Functions.vkGetDeviceQueue2 == null) throw new Vk.Extras.FunctionNotLoadedException("vkGetDeviceQueue2");
		Vk.Handle<Vk.Queue> HANDLE;
		Functions.vkGetDeviceQueue2(Handle, pQueueInfo, &HANDLE);
		pQueue = new(this, HANDLE);
	}

	/// <summary>vkGetDeviceQueue2</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void GetDeviceQueue2(in Vk.DeviceQueueInfo2 queueInfo, out Vk.Handle<Vk.Queue> queue)
	{
		if (Functions.vkGetDeviceQueue2 == null) throw new Vk.Extras.FunctionNotLoadedException("vkGetDeviceQueue2");
		Functions.GetDeviceQueue2(Handle, queueInfo, out queue);
	}

	/// <summary>vkGetDeviceQueue2</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void GetDeviceQueue2(in Vk.DeviceQueueInfo2 queueInfo, out Vk.Queue pQueue)
	{
		if (Functions.vkGetDeviceQueue2 == null) throw new Vk.Extras.FunctionNotLoadedException("vkGetDeviceQueue2");
		Vk.Handle<Vk.Queue> HANDLE;
		Functions.GetDeviceQueue2(Handle, queueInfo, out HANDLE);
		pQueue = new(this, HANDLE);
	}

	/// <summary>vkCreateValidationCacheEXT</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result CreateValidationCacheEXT(Vk.EXT.ValidationCacheCreateInfo* pCreateInfo, Vk.AllocationCallbacks* pAllocator, Vk.Handle<Vk.EXT.ValidationCache>* pValidationCache)
	{
		if (Functions.vkCreateValidationCacheEXT == null) throw new Vk.Extras.FunctionNotLoadedException("vkCreateValidationCacheEXT");
		return Functions.vkCreateValidationCacheEXT(Handle, pCreateInfo, pAllocator, pValidationCache);
	}

	/// <summary>vkCreateValidationCacheEXT</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result CreateValidationCacheEXT(Vk.EXT.ValidationCacheCreateInfo* pCreateInfo, Vk.AllocationCallbacks* pAllocator, out Vk.EXT.ValidationCache pValidationCache)
	{
		if (Functions.vkCreateValidationCacheEXT == null) throw new Vk.Extras.FunctionNotLoadedException("vkCreateValidationCacheEXT");
		Vk.Handle<Vk.EXT.ValidationCache> HANDLE;
		var RESULT = Functions.vkCreateValidationCacheEXT(Handle, pCreateInfo, pAllocator, &HANDLE);
		pValidationCache = (RESULT == Result.Success) ? new(this, HANDLE) : Vk.EXT.ValidationCache.Null;
		return RESULT;
	}

	/// <summary>vkCreateValidationCacheEXT</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result CreateValidationCacheEXT(in Vk.EXT.ValidationCacheCreateInfo createInfo, in Vk.AllocationCallbacks allocator, out Vk.Handle<Vk.EXT.ValidationCache> validationCache)
	{
		if (Functions.vkCreateValidationCacheEXT == null) throw new Vk.Extras.FunctionNotLoadedException("vkCreateValidationCacheEXT");
		return Functions.CreateValidationCacheEXT(Handle, createInfo, allocator, out validationCache);
	}

	/// <summary>vkCreateValidationCacheEXT</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result CreateValidationCacheEXT(in Vk.EXT.ValidationCacheCreateInfo createInfo, in Vk.AllocationCallbacks allocator, out Vk.EXT.ValidationCache pValidationCache)
	{
		if (Functions.vkCreateValidationCacheEXT == null) throw new Vk.Extras.FunctionNotLoadedException("vkCreateValidationCacheEXT");
		Vk.Handle<Vk.EXT.ValidationCache> HANDLE;
		var RESULT = Functions.CreateValidationCacheEXT(Handle, createInfo, allocator, out HANDLE);
		pValidationCache = (RESULT == Result.Success) ? new(this, HANDLE) : Vk.EXT.ValidationCache.Null;
		return RESULT;
	}

	/// <summary>vkGetDescriptorSetLayoutSupport</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void GetDescriptorSetLayoutSupport(Vk.DescriptorSetLayoutCreateInfo* pCreateInfo, Vk.DescriptorSetLayoutSupport* pSupport)
	{
		if (Functions.vkGetDescriptorSetLayoutSupport == null) throw new Vk.Extras.FunctionNotLoadedException("vkGetDescriptorSetLayoutSupport");
		Functions.vkGetDescriptorSetLayoutSupport(Handle, pCreateInfo, pSupport);
	}

	/// <summary>vkGetDescriptorSetLayoutSupport</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void GetDescriptorSetLayoutSupport(in Vk.DescriptorSetLayoutCreateInfo createInfo, out Vk.DescriptorSetLayoutSupport support)
	{
		if (Functions.vkGetDescriptorSetLayoutSupport == null) throw new Vk.Extras.FunctionNotLoadedException("vkGetDescriptorSetLayoutSupport");
		Functions.GetDescriptorSetLayoutSupport(Handle, createInfo, out support);
	}

	/// <summary>vkGetDescriptorSetLayoutSupportKHR</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void GetDescriptorSetLayoutSupportKHR(Vk.DescriptorSetLayoutCreateInfo* pCreateInfo, Vk.DescriptorSetLayoutSupport* pSupport)
	{
		if (Functions.vkGetDescriptorSetLayoutSupportKHR == null) throw new Vk.Extras.FunctionNotLoadedException("vkGetDescriptorSetLayoutSupportKHR");
		Functions.vkGetDescriptorSetLayoutSupportKHR(Handle, pCreateInfo, pSupport);
	}

	/// <summary>vkGetDescriptorSetLayoutSupportKHR</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void GetDescriptorSetLayoutSupportKHR(in Vk.DescriptorSetLayoutCreateInfo createInfo, out Vk.DescriptorSetLayoutSupport support)
	{
		if (Functions.vkGetDescriptorSetLayoutSupportKHR == null) throw new Vk.Extras.FunctionNotLoadedException("vkGetDescriptorSetLayoutSupportKHR");
		Functions.GetDescriptorSetLayoutSupportKHR(Handle, createInfo, out support);
	}

	/// <summary>vkGetSwapchainGrallocUsageANDROID</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result GetSwapchainGrallocUsageANDROID(Vk.Format format, Vk.ImageUsageFlags imageUsage, int* grallocUsage)
	{
		if (Functions.vkGetSwapchainGrallocUsageANDROID == null) throw new Vk.Extras.FunctionNotLoadedException("vkGetSwapchainGrallocUsageANDROID");
		return Functions.vkGetSwapchainGrallocUsageANDROID(Handle, format, imageUsage, grallocUsage);
	}

	/// <summary>vkGetSwapchainGrallocUsageANDROID</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result GetSwapchainGrallocUsageANDROID(Vk.Format format, Vk.ImageUsageFlags imageUsage, out int grallocUsage)
	{
		if (Functions.vkGetSwapchainGrallocUsageANDROID == null) throw new Vk.Extras.FunctionNotLoadedException("vkGetSwapchainGrallocUsageANDROID");
		return Functions.GetSwapchainGrallocUsageANDROID(Handle, format, imageUsage, out grallocUsage);
	}

	/// <summary>vkGetSwapchainGrallocUsage2ANDROID</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result GetSwapchainGrallocUsage2ANDROID(Vk.Format format, Vk.ImageUsageFlags imageUsage, Vk.ANDROID.SwapchainImageUsageFlags swapchainImageUsage, ulong* grallocConsumerUsage, ulong* grallocProducerUsage)
	{
		if (Functions.vkGetSwapchainGrallocUsage2ANDROID == null) throw new Vk.Extras.FunctionNotLoadedException("vkGetSwapchainGrallocUsage2ANDROID");
		return Functions.vkGetSwapchainGrallocUsage2ANDROID(Handle, format, imageUsage, swapchainImageUsage, grallocConsumerUsage, grallocProducerUsage);
	}

	/// <summary>vkGetSwapchainGrallocUsage2ANDROID</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result GetSwapchainGrallocUsage2ANDROID(Vk.Format format, Vk.ImageUsageFlags imageUsage, Vk.ANDROID.SwapchainImageUsageFlags swapchainImageUsage, out ulong grallocConsumerUsage, out ulong grallocProducerUsage)
	{
		if (Functions.vkGetSwapchainGrallocUsage2ANDROID == null) throw new Vk.Extras.FunctionNotLoadedException("vkGetSwapchainGrallocUsage2ANDROID");
		return Functions.GetSwapchainGrallocUsage2ANDROID(Handle, format, imageUsage, swapchainImageUsage, out grallocConsumerUsage, out grallocProducerUsage);
	}

	/// <summary>vkGetCalibratedTimestampsEXT</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result GetCalibratedTimestampsEXT(uint timestampCount, Vk.EXT.CalibratedTimestampInfo* pTimestampInfos, ulong* pTimestamps, ulong* pMaxDeviation)
	{
		if (Functions.vkGetCalibratedTimestampsEXT == null) throw new Vk.Extras.FunctionNotLoadedException("vkGetCalibratedTimestampsEXT");
		return Functions.vkGetCalibratedTimestampsEXT(Handle, timestampCount, pTimestampInfos, pTimestamps, pMaxDeviation);
	}

	/// <summary>vkGetCalibratedTimestampsEXT</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result GetCalibratedTimestampsEXT(in ReadOnlySpan<Vk.EXT.CalibratedTimestampInfo> timestampInfos, in Span<ulong> timestamps, out ulong maxDeviation)
	{
		if (Functions.vkGetCalibratedTimestampsEXT == null) throw new Vk.Extras.FunctionNotLoadedException("vkGetCalibratedTimestampsEXT");
		return Functions.GetCalibratedTimestampsEXT(Handle, timestampInfos, timestamps, out maxDeviation);
	}

	/// <summary>vkSetDebugUtilsObjectNameEXT</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result SetDebugUtilsObjectNameEXT(Vk.EXT.DebugUtilsObjectNameInfo* pNameInfo)
	{
		if (Functions.vkSetDebugUtilsObjectNameEXT == null) throw new Vk.Extras.FunctionNotLoadedException("vkSetDebugUtilsObjectNameEXT");
		return Functions.vkSetDebugUtilsObjectNameEXT(Handle, pNameInfo);
	}

	/// <summary>vkSetDebugUtilsObjectNameEXT</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result SetDebugUtilsObjectNameEXT(in Vk.EXT.DebugUtilsObjectNameInfo nameInfo)
	{
		if (Functions.vkSetDebugUtilsObjectNameEXT == null) throw new Vk.Extras.FunctionNotLoadedException("vkSetDebugUtilsObjectNameEXT");
		return Functions.SetDebugUtilsObjectNameEXT(Handle, nameInfo);
	}

	/// <summary>vkSetDebugUtilsObjectTagEXT</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result SetDebugUtilsObjectTagEXT(Vk.EXT.DebugUtilsObjectTagInfo* pTagInfo)
	{
		if (Functions.vkSetDebugUtilsObjectTagEXT == null) throw new Vk.Extras.FunctionNotLoadedException("vkSetDebugUtilsObjectTagEXT");
		return Functions.vkSetDebugUtilsObjectTagEXT(Handle, pTagInfo);
	}

	/// <summary>vkSetDebugUtilsObjectTagEXT</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result SetDebugUtilsObjectTagEXT(in Vk.EXT.DebugUtilsObjectTagInfo tagInfo)
	{
		if (Functions.vkSetDebugUtilsObjectTagEXT == null) throw new Vk.Extras.FunctionNotLoadedException("vkSetDebugUtilsObjectTagEXT");
		return Functions.SetDebugUtilsObjectTagEXT(Handle, tagInfo);
	}

	/// <summary>vkGetMemoryHostPointerPropertiesEXT</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result GetMemoryHostPointerPropertiesEXT(Vk.ExternalMemoryHandleTypeFlags handleType, void* pHostPointer, Vk.EXT.MemoryHostPointerProperties* pMemoryHostPointerProperties)
	{
		if (Functions.vkGetMemoryHostPointerPropertiesEXT == null) throw new Vk.Extras.FunctionNotLoadedException("vkGetMemoryHostPointerPropertiesEXT");
		return Functions.vkGetMemoryHostPointerPropertiesEXT(Handle, handleType, pHostPointer, pMemoryHostPointerProperties);
	}

	/// <summary>vkGetMemoryHostPointerPropertiesEXT</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result GetMemoryHostPointerPropertiesEXT(Vk.ExternalMemoryHandleTypeFlags handleType, void* pHostPointer, out Vk.EXT.MemoryHostPointerProperties memoryHostPointerProperties)
	{
		if (Functions.vkGetMemoryHostPointerPropertiesEXT == null) throw new Vk.Extras.FunctionNotLoadedException("vkGetMemoryHostPointerPropertiesEXT");
		return Functions.GetMemoryHostPointerPropertiesEXT(Handle, handleType, pHostPointer, out memoryHostPointerProperties);
	}

	/// <summary>vkCreateRenderPass2</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result CreateRenderPass2(Vk.RenderPassCreateInfo2* pCreateInfo, Vk.AllocationCallbacks* pAllocator, Vk.Handle<Vk.RenderPass>* pRenderPass)
	{
		if (Functions.vkCreateRenderPass2 == null) throw new Vk.Extras.FunctionNotLoadedException("vkCreateRenderPass2");
		return Functions.vkCreateRenderPass2(Handle, pCreateInfo, pAllocator, pRenderPass);
	}

	/// <summary>vkCreateRenderPass2</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result CreateRenderPass2(Vk.RenderPassCreateInfo2* pCreateInfo, Vk.AllocationCallbacks* pAllocator, out Vk.RenderPass pRenderPass)
	{
		if (Functions.vkCreateRenderPass2 == null) throw new Vk.Extras.FunctionNotLoadedException("vkCreateRenderPass2");
		Vk.Handle<Vk.RenderPass> HANDLE;
		var RESULT = Functions.vkCreateRenderPass2(Handle, pCreateInfo, pAllocator, &HANDLE);
		pRenderPass = (RESULT == Result.Success) ? new(this, HANDLE) : Vk.RenderPass.Null;
		return RESULT;
	}

	/// <summary>vkCreateRenderPass2</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result CreateRenderPass2(in Vk.RenderPassCreateInfo2 createInfo, in Vk.AllocationCallbacks allocator, out Vk.Handle<Vk.RenderPass> renderPass)
	{
		if (Functions.vkCreateRenderPass2 == null) throw new Vk.Extras.FunctionNotLoadedException("vkCreateRenderPass2");
		return Functions.CreateRenderPass2(Handle, createInfo, allocator, out renderPass);
	}

	/// <summary>vkCreateRenderPass2</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result CreateRenderPass2(in Vk.RenderPassCreateInfo2 createInfo, in Vk.AllocationCallbacks allocator, out Vk.RenderPass pRenderPass)
	{
		if (Functions.vkCreateRenderPass2 == null) throw new Vk.Extras.FunctionNotLoadedException("vkCreateRenderPass2");
		Vk.Handle<Vk.RenderPass> HANDLE;
		var RESULT = Functions.CreateRenderPass2(Handle, createInfo, allocator, out HANDLE);
		pRenderPass = (RESULT == Result.Success) ? new(this, HANDLE) : Vk.RenderPass.Null;
		return RESULT;
	}

	/// <summary>vkCreateRenderPass2KHR</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result CreateRenderPass2KHR(Vk.RenderPassCreateInfo2* pCreateInfo, Vk.AllocationCallbacks* pAllocator, Vk.Handle<Vk.RenderPass>* pRenderPass)
	{
		if (Functions.vkCreateRenderPass2KHR == null) throw new Vk.Extras.FunctionNotLoadedException("vkCreateRenderPass2KHR");
		return Functions.vkCreateRenderPass2KHR(Handle, pCreateInfo, pAllocator, pRenderPass);
	}

	/// <summary>vkCreateRenderPass2KHR</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result CreateRenderPass2KHR(Vk.RenderPassCreateInfo2* pCreateInfo, Vk.AllocationCallbacks* pAllocator, out Vk.RenderPass pRenderPass)
	{
		if (Functions.vkCreateRenderPass2KHR == null) throw new Vk.Extras.FunctionNotLoadedException("vkCreateRenderPass2KHR");
		Vk.Handle<Vk.RenderPass> HANDLE;
		var RESULT = Functions.vkCreateRenderPass2KHR(Handle, pCreateInfo, pAllocator, &HANDLE);
		pRenderPass = (RESULT == Result.Success) ? new(this, HANDLE) : Vk.RenderPass.Null;
		return RESULT;
	}

	/// <summary>vkCreateRenderPass2KHR</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result CreateRenderPass2KHR(in Vk.RenderPassCreateInfo2 createInfo, in Vk.AllocationCallbacks allocator, out Vk.Handle<Vk.RenderPass> renderPass)
	{
		if (Functions.vkCreateRenderPass2KHR == null) throw new Vk.Extras.FunctionNotLoadedException("vkCreateRenderPass2KHR");
		return Functions.CreateRenderPass2KHR(Handle, createInfo, allocator, out renderPass);
	}

	/// <summary>vkCreateRenderPass2KHR</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result CreateRenderPass2KHR(in Vk.RenderPassCreateInfo2 createInfo, in Vk.AllocationCallbacks allocator, out Vk.RenderPass pRenderPass)
	{
		if (Functions.vkCreateRenderPass2KHR == null) throw new Vk.Extras.FunctionNotLoadedException("vkCreateRenderPass2KHR");
		Vk.Handle<Vk.RenderPass> HANDLE;
		var RESULT = Functions.CreateRenderPass2KHR(Handle, createInfo, allocator, out HANDLE);
		pRenderPass = (RESULT == Result.Success) ? new(this, HANDLE) : Vk.RenderPass.Null;
		return RESULT;
	}

	/// <summary>vkWaitSemaphores</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result WaitSemaphores(Vk.SemaphoreWaitInfo* pWaitInfo, ulong timeout)
	{
		if (Functions.vkWaitSemaphores == null) throw new Vk.Extras.FunctionNotLoadedException("vkWaitSemaphores");
		return Functions.vkWaitSemaphores(Handle, pWaitInfo, timeout);
	}

	/// <summary>vkWaitSemaphores</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result WaitSemaphores(in Vk.SemaphoreWaitInfo waitInfo, ulong timeout)
	{
		if (Functions.vkWaitSemaphores == null) throw new Vk.Extras.FunctionNotLoadedException("vkWaitSemaphores");
		return Functions.WaitSemaphores(Handle, waitInfo, timeout);
	}

	/// <summary>vkWaitSemaphoresKHR</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result WaitSemaphoresKHR(Vk.SemaphoreWaitInfo* pWaitInfo, ulong timeout)
	{
		if (Functions.vkWaitSemaphoresKHR == null) throw new Vk.Extras.FunctionNotLoadedException("vkWaitSemaphoresKHR");
		return Functions.vkWaitSemaphoresKHR(Handle, pWaitInfo, timeout);
	}

	/// <summary>vkWaitSemaphoresKHR</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result WaitSemaphoresKHR(in Vk.SemaphoreWaitInfo waitInfo, ulong timeout)
	{
		if (Functions.vkWaitSemaphoresKHR == null) throw new Vk.Extras.FunctionNotLoadedException("vkWaitSemaphoresKHR");
		return Functions.WaitSemaphoresKHR(Handle, waitInfo, timeout);
	}

	/// <summary>vkSignalSemaphore</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result SignalSemaphore(Vk.SemaphoreSignalInfo* pSignalInfo)
	{
		if (Functions.vkSignalSemaphore == null) throw new Vk.Extras.FunctionNotLoadedException("vkSignalSemaphore");
		return Functions.vkSignalSemaphore(Handle, pSignalInfo);
	}

	/// <summary>vkSignalSemaphore</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result SignalSemaphore(in Vk.SemaphoreSignalInfo signalInfo)
	{
		if (Functions.vkSignalSemaphore == null) throw new Vk.Extras.FunctionNotLoadedException("vkSignalSemaphore");
		return Functions.SignalSemaphore(Handle, signalInfo);
	}

	/// <summary>vkSignalSemaphoreKHR</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result SignalSemaphoreKHR(Vk.SemaphoreSignalInfo* pSignalInfo)
	{
		if (Functions.vkSignalSemaphoreKHR == null) throw new Vk.Extras.FunctionNotLoadedException("vkSignalSemaphoreKHR");
		return Functions.vkSignalSemaphoreKHR(Handle, pSignalInfo);
	}

	/// <summary>vkSignalSemaphoreKHR</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result SignalSemaphoreKHR(in Vk.SemaphoreSignalInfo signalInfo)
	{
		if (Functions.vkSignalSemaphoreKHR == null) throw new Vk.Extras.FunctionNotLoadedException("vkSignalSemaphoreKHR");
		return Functions.SignalSemaphoreKHR(Handle, signalInfo);
	}

	/// <summary>vkGetAndroidHardwareBufferPropertiesANDROID</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result GetAndroidHardwareBufferPropertiesANDROID(void* buffer, Vk.ANDROID.AndroidHardwareBufferProperties* pProperties)
	{
		if (Functions.vkGetAndroidHardwareBufferPropertiesANDROID == null) throw new Vk.Extras.FunctionNotLoadedException("vkGetAndroidHardwareBufferPropertiesANDROID");
		return Functions.vkGetAndroidHardwareBufferPropertiesANDROID(Handle, buffer, pProperties);
	}

	/// <summary>vkGetAndroidHardwareBufferPropertiesANDROID</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result GetAndroidHardwareBufferPropertiesANDROID(void* buffer, out Vk.ANDROID.AndroidHardwareBufferProperties properties)
	{
		if (Functions.vkGetAndroidHardwareBufferPropertiesANDROID == null) throw new Vk.Extras.FunctionNotLoadedException("vkGetAndroidHardwareBufferPropertiesANDROID");
		return Functions.GetAndroidHardwareBufferPropertiesANDROID(Handle, buffer, out properties);
	}

	/// <summary>vkGetMemoryAndroidHardwareBufferANDROID</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result GetMemoryAndroidHardwareBufferANDROID(Vk.ANDROID.MemoryGetAndroidHardwareBufferInfo* pInfo, void** pBuffer)
	{
		if (Functions.vkGetMemoryAndroidHardwareBufferANDROID == null) throw new Vk.Extras.FunctionNotLoadedException("vkGetMemoryAndroidHardwareBufferANDROID");
		return Functions.vkGetMemoryAndroidHardwareBufferANDROID(Handle, pInfo, pBuffer);
	}

	/// <summary>vkGetMemoryAndroidHardwareBufferANDROID</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result GetMemoryAndroidHardwareBufferANDROID(in Vk.ANDROID.MemoryGetAndroidHardwareBufferInfo info, void** pBuffer)
	{
		if (Functions.vkGetMemoryAndroidHardwareBufferANDROID == null) throw new Vk.Extras.FunctionNotLoadedException("vkGetMemoryAndroidHardwareBufferANDROID");
		return Functions.GetMemoryAndroidHardwareBufferANDROID(Handle, info, pBuffer);
	}

	/// <summary>vkCreateAccelerationStructureNV</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result CreateAccelerationStructureNV(Vk.NV.AccelerationStructureCreateInfo* pCreateInfo, Vk.AllocationCallbacks* pAllocator, Vk.Handle<Vk.NV.AccelerationStructure>* pAccelerationStructure)
	{
		if (Functions.vkCreateAccelerationStructureNV == null) throw new Vk.Extras.FunctionNotLoadedException("vkCreateAccelerationStructureNV");
		return Functions.vkCreateAccelerationStructureNV(Handle, pCreateInfo, pAllocator, pAccelerationStructure);
	}

	/// <summary>vkCreateAccelerationStructureNV</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result CreateAccelerationStructureNV(Vk.NV.AccelerationStructureCreateInfo* pCreateInfo, Vk.AllocationCallbacks* pAllocator, out Vk.NV.AccelerationStructure pAccelerationStructure)
	{
		if (Functions.vkCreateAccelerationStructureNV == null) throw new Vk.Extras.FunctionNotLoadedException("vkCreateAccelerationStructureNV");
		Vk.Handle<Vk.NV.AccelerationStructure> HANDLE;
		var RESULT = Functions.vkCreateAccelerationStructureNV(Handle, pCreateInfo, pAllocator, &HANDLE);
		pAccelerationStructure = (RESULT == Result.Success) ? new(this, HANDLE) : Vk.NV.AccelerationStructure.Null;
		return RESULT;
	}

	/// <summary>vkCreateAccelerationStructureNV</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result CreateAccelerationStructureNV(in Vk.NV.AccelerationStructureCreateInfo createInfo, in Vk.AllocationCallbacks allocator, out Vk.Handle<Vk.NV.AccelerationStructure> accelerationStructure)
	{
		if (Functions.vkCreateAccelerationStructureNV == null) throw new Vk.Extras.FunctionNotLoadedException("vkCreateAccelerationStructureNV");
		return Functions.CreateAccelerationStructureNV(Handle, createInfo, allocator, out accelerationStructure);
	}

	/// <summary>vkCreateAccelerationStructureNV</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result CreateAccelerationStructureNV(in Vk.NV.AccelerationStructureCreateInfo createInfo, in Vk.AllocationCallbacks allocator, out Vk.NV.AccelerationStructure pAccelerationStructure)
	{
		if (Functions.vkCreateAccelerationStructureNV == null) throw new Vk.Extras.FunctionNotLoadedException("vkCreateAccelerationStructureNV");
		Vk.Handle<Vk.NV.AccelerationStructure> HANDLE;
		var RESULT = Functions.CreateAccelerationStructureNV(Handle, createInfo, allocator, out HANDLE);
		pAccelerationStructure = (RESULT == Result.Success) ? new(this, HANDLE) : Vk.NV.AccelerationStructure.Null;
		return RESULT;
	}

	/// <summary>vkGetAccelerationStructureMemoryRequirementsKHR</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void GetAccelerationStructureMemoryRequirementsKHR(Vk.KHR.AccelerationStructureMemoryRequirementsInfo* pInfo, Vk.MemoryRequirements2* pMemoryRequirements)
	{
		if (Functions.vkGetAccelerationStructureMemoryRequirementsKHR == null) throw new Vk.Extras.FunctionNotLoadedException("vkGetAccelerationStructureMemoryRequirementsKHR");
		Functions.vkGetAccelerationStructureMemoryRequirementsKHR(Handle, pInfo, pMemoryRequirements);
	}

	/// <summary>vkGetAccelerationStructureMemoryRequirementsKHR</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void GetAccelerationStructureMemoryRequirementsKHR(in Vk.KHR.AccelerationStructureMemoryRequirementsInfo info, out Vk.MemoryRequirements2 memoryRequirements)
	{
		if (Functions.vkGetAccelerationStructureMemoryRequirementsKHR == null) throw new Vk.Extras.FunctionNotLoadedException("vkGetAccelerationStructureMemoryRequirementsKHR");
		Functions.GetAccelerationStructureMemoryRequirementsKHR(Handle, info, out memoryRequirements);
	}

	/// <summary>vkGetAccelerationStructureMemoryRequirementsNV</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void GetAccelerationStructureMemoryRequirementsNV(Vk.NV.AccelerationStructureMemoryRequirementsInfo* pInfo, Vk.KHR.MemoryRequirements2* pMemoryRequirements)
	{
		if (Functions.vkGetAccelerationStructureMemoryRequirementsNV == null) throw new Vk.Extras.FunctionNotLoadedException("vkGetAccelerationStructureMemoryRequirementsNV");
		Functions.vkGetAccelerationStructureMemoryRequirementsNV(Handle, pInfo, pMemoryRequirements);
	}

	/// <summary>vkGetAccelerationStructureMemoryRequirementsNV</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void GetAccelerationStructureMemoryRequirementsNV(in Vk.NV.AccelerationStructureMemoryRequirementsInfo info, out Vk.KHR.MemoryRequirements2 memoryRequirements)
	{
		if (Functions.vkGetAccelerationStructureMemoryRequirementsNV == null) throw new Vk.Extras.FunctionNotLoadedException("vkGetAccelerationStructureMemoryRequirementsNV");
		Functions.GetAccelerationStructureMemoryRequirementsNV(Handle, info, out memoryRequirements);
	}

	/// <summary>vkBindAccelerationStructureMemoryKHR</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result BindAccelerationStructureMemoryKHR(uint bindInfoCount, Vk.KHR.BindAccelerationStructureMemoryInfo* pBindInfos)
	{
		if (Functions.vkBindAccelerationStructureMemoryKHR == null) throw new Vk.Extras.FunctionNotLoadedException("vkBindAccelerationStructureMemoryKHR");
		return Functions.vkBindAccelerationStructureMemoryKHR(Handle, bindInfoCount, pBindInfos);
	}

	/// <summary>vkBindAccelerationStructureMemoryKHR</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result BindAccelerationStructureMemoryKHR(in ReadOnlySpan<Vk.KHR.BindAccelerationStructureMemoryInfo> bindInfos)
	{
		if (Functions.vkBindAccelerationStructureMemoryKHR == null) throw new Vk.Extras.FunctionNotLoadedException("vkBindAccelerationStructureMemoryKHR");
		return Functions.BindAccelerationStructureMemoryKHR(Handle, bindInfos);
	}

	/// <summary>vkBindAccelerationStructureMemoryNV</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result BindAccelerationStructureMemoryNV(uint bindInfoCount, Vk.KHR.BindAccelerationStructureMemoryInfo* pBindInfos)
	{
		if (Functions.vkBindAccelerationStructureMemoryNV == null) throw new Vk.Extras.FunctionNotLoadedException("vkBindAccelerationStructureMemoryNV");
		return Functions.vkBindAccelerationStructureMemoryNV(Handle, bindInfoCount, pBindInfos);
	}

	/// <summary>vkBindAccelerationStructureMemoryNV</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result BindAccelerationStructureMemoryNV(in ReadOnlySpan<Vk.KHR.BindAccelerationStructureMemoryInfo> bindInfos)
	{
		if (Functions.vkBindAccelerationStructureMemoryNV == null) throw new Vk.Extras.FunctionNotLoadedException("vkBindAccelerationStructureMemoryNV");
		return Functions.BindAccelerationStructureMemoryNV(Handle, bindInfos);
	}

	/// <summary>vkCopyAccelerationStructureKHR</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result CopyAccelerationStructureKHR(Vk.KHR.CopyAccelerationStructureInfo* pInfo)
	{
		if (Functions.vkCopyAccelerationStructureKHR == null) throw new Vk.Extras.FunctionNotLoadedException("vkCopyAccelerationStructureKHR");
		return Functions.vkCopyAccelerationStructureKHR(Handle, pInfo);
	}

	/// <summary>vkCopyAccelerationStructureKHR</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result CopyAccelerationStructureKHR(in Vk.KHR.CopyAccelerationStructureInfo info)
	{
		if (Functions.vkCopyAccelerationStructureKHR == null) throw new Vk.Extras.FunctionNotLoadedException("vkCopyAccelerationStructureKHR");
		return Functions.CopyAccelerationStructureKHR(Handle, info);
	}

	/// <summary>vkCopyAccelerationStructureToMemoryKHR</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result CopyAccelerationStructureToMemoryKHR(Vk.KHR.CopyAccelerationStructureToMemoryInfo* pInfo)
	{
		if (Functions.vkCopyAccelerationStructureToMemoryKHR == null) throw new Vk.Extras.FunctionNotLoadedException("vkCopyAccelerationStructureToMemoryKHR");
		return Functions.vkCopyAccelerationStructureToMemoryKHR(Handle, pInfo);
	}

	/// <summary>vkCopyAccelerationStructureToMemoryKHR</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result CopyAccelerationStructureToMemoryKHR(in Vk.KHR.CopyAccelerationStructureToMemoryInfo info)
	{
		if (Functions.vkCopyAccelerationStructureToMemoryKHR == null) throw new Vk.Extras.FunctionNotLoadedException("vkCopyAccelerationStructureToMemoryKHR");
		return Functions.CopyAccelerationStructureToMemoryKHR(Handle, info);
	}

	/// <summary>vkCopyMemoryToAccelerationStructureKHR</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result CopyMemoryToAccelerationStructureKHR(Vk.KHR.CopyMemoryToAccelerationStructureInfo* pInfo)
	{
		if (Functions.vkCopyMemoryToAccelerationStructureKHR == null) throw new Vk.Extras.FunctionNotLoadedException("vkCopyMemoryToAccelerationStructureKHR");
		return Functions.vkCopyMemoryToAccelerationStructureKHR(Handle, pInfo);
	}

	/// <summary>vkCopyMemoryToAccelerationStructureKHR</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result CopyMemoryToAccelerationStructureKHR(in Vk.KHR.CopyMemoryToAccelerationStructureInfo info)
	{
		if (Functions.vkCopyMemoryToAccelerationStructureKHR == null) throw new Vk.Extras.FunctionNotLoadedException("vkCopyMemoryToAccelerationStructureKHR");
		return Functions.CopyMemoryToAccelerationStructureKHR(Handle, info);
	}

	/// <summary>vkWriteAccelerationStructuresPropertiesKHR</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result WriteAccelerationStructuresPropertiesKHR(uint accelerationStructureCount, Vk.Handle<Vk.KHR.AccelerationStructure>* pAccelerationStructures, Vk.QueryType queryType, ulong dataSize, void* pData, ulong stride)
	{
		if (Functions.vkWriteAccelerationStructuresPropertiesKHR == null) throw new Vk.Extras.FunctionNotLoadedException("vkWriteAccelerationStructuresPropertiesKHR");
		return Functions.vkWriteAccelerationStructuresPropertiesKHR(Handle, accelerationStructureCount, pAccelerationStructures, queryType, dataSize, pData, stride);
	}

	/// <summary>vkWriteAccelerationStructuresPropertiesKHR</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result WriteAccelerationStructuresPropertiesKHR(in ReadOnlySpan<Vk.Handle<Vk.KHR.AccelerationStructure>> accelerationStructures, Vk.QueryType queryType, ulong dataSize, void* pData, ulong stride)
	{
		if (Functions.vkWriteAccelerationStructuresPropertiesKHR == null) throw new Vk.Extras.FunctionNotLoadedException("vkWriteAccelerationStructuresPropertiesKHR");
		return Functions.WriteAccelerationStructuresPropertiesKHR(Handle, accelerationStructures, queryType, dataSize, pData, stride);
	}

	/// <summary>vkCreateRayTracingPipelinesNV</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result CreateRayTracingPipelinesNV(Vk.Handle<Vk.PipelineCache> pipelineCache, uint createInfoCount, Vk.NV.RayTracingPipelineCreateInfo* pCreateInfos, Vk.AllocationCallbacks* pAllocator, Vk.Handle<Vk.Pipeline>* pPipelines)
	{
		if (Functions.vkCreateRayTracingPipelinesNV == null) throw new Vk.Extras.FunctionNotLoadedException("vkCreateRayTracingPipelinesNV");
		return Functions.vkCreateRayTracingPipelinesNV(Handle, pipelineCache, createInfoCount, pCreateInfos, pAllocator, pPipelines);
	}

	/// <summary>vkCreateRayTracingPipelinesNV</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result CreateRayTracingPipelinesNV(Vk.Handle<Vk.PipelineCache> pipelineCache, in ReadOnlySpan<Vk.NV.RayTracingPipelineCreateInfo> createInfos, in Vk.AllocationCallbacks allocator, in Span<Vk.Handle<Vk.Pipeline>> pipelines)
	{
		if (Functions.vkCreateRayTracingPipelinesNV == null) throw new Vk.Extras.FunctionNotLoadedException("vkCreateRayTracingPipelinesNV");
		return Functions.CreateRayTracingPipelinesNV(Handle, pipelineCache, createInfos, allocator, pipelines);
	}

	/// <summary>vkCreateRayTracingPipelinesKHR</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result CreateRayTracingPipelinesKHR(Vk.Handle<Vk.PipelineCache> pipelineCache, uint createInfoCount, Vk.KHR.RayTracingPipelineCreateInfo* pCreateInfos, Vk.AllocationCallbacks* pAllocator, Vk.Handle<Vk.Pipeline>* pPipelines)
	{
		if (Functions.vkCreateRayTracingPipelinesKHR == null) throw new Vk.Extras.FunctionNotLoadedException("vkCreateRayTracingPipelinesKHR");
		return Functions.vkCreateRayTracingPipelinesKHR(Handle, pipelineCache, createInfoCount, pCreateInfos, pAllocator, pPipelines);
	}

	/// <summary>vkCreateRayTracingPipelinesKHR</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result CreateRayTracingPipelinesKHR(Vk.Handle<Vk.PipelineCache> pipelineCache, in ReadOnlySpan<Vk.KHR.RayTracingPipelineCreateInfo> createInfos, in Vk.AllocationCallbacks allocator, in Span<Vk.Handle<Vk.Pipeline>> pipelines)
	{
		if (Functions.vkCreateRayTracingPipelinesKHR == null) throw new Vk.Extras.FunctionNotLoadedException("vkCreateRayTracingPipelinesKHR");
		return Functions.CreateRayTracingPipelinesKHR(Handle, pipelineCache, createInfos, allocator, pipelines);
	}

	/// <summary>vkGetDeviceAccelerationStructureCompatibilityKHR</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result GetDeviceAccelerationStructureCompatibilityKHR(Vk.KHR.AccelerationStructureVersion* version)
	{
		if (Functions.vkGetDeviceAccelerationStructureCompatibilityKHR == null) throw new Vk.Extras.FunctionNotLoadedException("vkGetDeviceAccelerationStructureCompatibilityKHR");
		return Functions.vkGetDeviceAccelerationStructureCompatibilityKHR(Handle, version);
	}

	/// <summary>vkGetDeviceAccelerationStructureCompatibilityKHR</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result GetDeviceAccelerationStructureCompatibilityKHR(in Vk.KHR.AccelerationStructureVersion version)
	{
		if (Functions.vkGetDeviceAccelerationStructureCompatibilityKHR == null) throw new Vk.Extras.FunctionNotLoadedException("vkGetDeviceAccelerationStructureCompatibilityKHR");
		return Functions.GetDeviceAccelerationStructureCompatibilityKHR(Handle, version);
	}

	/// <summary>vkGetImageViewHandleNVX</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public uint GetImageViewHandleNVX(Vk.NVX.ImageViewHandleInfo* pInfo)
	{
		if (Functions.vkGetImageViewHandleNVX == null) throw new Vk.Extras.FunctionNotLoadedException("vkGetImageViewHandleNVX");
		return Functions.vkGetImageViewHandleNVX(Handle, pInfo);
	}

	/// <summary>vkGetImageViewHandleNVX</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public uint GetImageViewHandleNVX(in Vk.NVX.ImageViewHandleInfo info)
	{
		if (Functions.vkGetImageViewHandleNVX == null) throw new Vk.Extras.FunctionNotLoadedException("vkGetImageViewHandleNVX");
		return Functions.GetImageViewHandleNVX(Handle, info);
	}

	/// <summary>vkGetDeviceGroupSurfacePresentModes2EXT</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result GetDeviceGroupSurfacePresentModes2EXT(Vk.KHR.PhysicalDeviceSurfaceInfo2* pSurfaceInfo, Vk.KHR.DeviceGroupPresentModeFlags* pModes)
	{
		if (Functions.vkGetDeviceGroupSurfacePresentModes2EXT == null) throw new Vk.Extras.FunctionNotLoadedException("vkGetDeviceGroupSurfacePresentModes2EXT");
		return Functions.vkGetDeviceGroupSurfacePresentModes2EXT(Handle, pSurfaceInfo, pModes);
	}

	/// <summary>vkGetDeviceGroupSurfacePresentModes2EXT</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result GetDeviceGroupSurfacePresentModes2EXT(in Vk.KHR.PhysicalDeviceSurfaceInfo2 surfaceInfo, out Vk.KHR.DeviceGroupPresentModeFlags modes)
	{
		if (Functions.vkGetDeviceGroupSurfacePresentModes2EXT == null) throw new Vk.Extras.FunctionNotLoadedException("vkGetDeviceGroupSurfacePresentModes2EXT");
		return Functions.GetDeviceGroupSurfacePresentModes2EXT(Handle, surfaceInfo, out modes);
	}

	/// <summary>vkAcquireProfilingLockKHR</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result AcquireProfilingLockKHR(Vk.KHR.AcquireProfilingLockInfo* pInfo)
	{
		if (Functions.vkAcquireProfilingLockKHR == null) throw new Vk.Extras.FunctionNotLoadedException("vkAcquireProfilingLockKHR");
		return Functions.vkAcquireProfilingLockKHR(Handle, pInfo);
	}

	/// <summary>vkAcquireProfilingLockKHR</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result AcquireProfilingLockKHR(in Vk.KHR.AcquireProfilingLockInfo info)
	{
		if (Functions.vkAcquireProfilingLockKHR == null) throw new Vk.Extras.FunctionNotLoadedException("vkAcquireProfilingLockKHR");
		return Functions.AcquireProfilingLockKHR(Handle, info);
	}

	/// <summary>vkReleaseProfilingLockKHR</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void ReleaseProfilingLockKHR()
	{
		if (Functions.vkReleaseProfilingLockKHR == null) throw new Vk.Extras.FunctionNotLoadedException("vkReleaseProfilingLockKHR");
		Functions.vkReleaseProfilingLockKHR(Handle);
	}

	/// <summary>vkGetBufferOpaqueCaptureAddress</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public ulong GetBufferOpaqueCaptureAddress(Vk.BufferDeviceAddressInfo* pInfo)
	{
		if (Functions.vkGetBufferOpaqueCaptureAddress == null) throw new Vk.Extras.FunctionNotLoadedException("vkGetBufferOpaqueCaptureAddress");
		return Functions.vkGetBufferOpaqueCaptureAddress(Handle, pInfo);
	}

	/// <summary>vkGetBufferOpaqueCaptureAddress</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public ulong GetBufferOpaqueCaptureAddress(in Vk.BufferDeviceAddressInfo info)
	{
		if (Functions.vkGetBufferOpaqueCaptureAddress == null) throw new Vk.Extras.FunctionNotLoadedException("vkGetBufferOpaqueCaptureAddress");
		return Functions.GetBufferOpaqueCaptureAddress(Handle, info);
	}

	/// <summary>vkGetBufferOpaqueCaptureAddressKHR</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public ulong GetBufferOpaqueCaptureAddressKHR(Vk.BufferDeviceAddressInfo* pInfo)
	{
		if (Functions.vkGetBufferOpaqueCaptureAddressKHR == null) throw new Vk.Extras.FunctionNotLoadedException("vkGetBufferOpaqueCaptureAddressKHR");
		return Functions.vkGetBufferOpaqueCaptureAddressKHR(Handle, pInfo);
	}

	/// <summary>vkGetBufferOpaqueCaptureAddressKHR</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public ulong GetBufferOpaqueCaptureAddressKHR(in Vk.BufferDeviceAddressInfo info)
	{
		if (Functions.vkGetBufferOpaqueCaptureAddressKHR == null) throw new Vk.Extras.FunctionNotLoadedException("vkGetBufferOpaqueCaptureAddressKHR");
		return Functions.GetBufferOpaqueCaptureAddressKHR(Handle, info);
	}

	/// <summary>vkGetBufferDeviceAddress</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public ulong GetBufferDeviceAddress(Vk.BufferDeviceAddressInfo* pInfo)
	{
		if (Functions.vkGetBufferDeviceAddress == null) throw new Vk.Extras.FunctionNotLoadedException("vkGetBufferDeviceAddress");
		return Functions.vkGetBufferDeviceAddress(Handle, pInfo);
	}

	/// <summary>vkGetBufferDeviceAddress</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public ulong GetBufferDeviceAddress(in Vk.BufferDeviceAddressInfo info)
	{
		if (Functions.vkGetBufferDeviceAddress == null) throw new Vk.Extras.FunctionNotLoadedException("vkGetBufferDeviceAddress");
		return Functions.GetBufferDeviceAddress(Handle, info);
	}

	/// <summary>vkGetBufferDeviceAddressKHR</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public ulong GetBufferDeviceAddressKHR(Vk.BufferDeviceAddressInfo* pInfo)
	{
		if (Functions.vkGetBufferDeviceAddressKHR == null) throw new Vk.Extras.FunctionNotLoadedException("vkGetBufferDeviceAddressKHR");
		return Functions.vkGetBufferDeviceAddressKHR(Handle, pInfo);
	}

	/// <summary>vkGetBufferDeviceAddressKHR</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public ulong GetBufferDeviceAddressKHR(in Vk.BufferDeviceAddressInfo info)
	{
		if (Functions.vkGetBufferDeviceAddressKHR == null) throw new Vk.Extras.FunctionNotLoadedException("vkGetBufferDeviceAddressKHR");
		return Functions.GetBufferDeviceAddressKHR(Handle, info);
	}

	/// <summary>vkGetBufferDeviceAddressEXT</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public ulong GetBufferDeviceAddressEXT(Vk.BufferDeviceAddressInfo* pInfo)
	{
		if (Functions.vkGetBufferDeviceAddressEXT == null) throw new Vk.Extras.FunctionNotLoadedException("vkGetBufferDeviceAddressEXT");
		return Functions.vkGetBufferDeviceAddressEXT(Handle, pInfo);
	}

	/// <summary>vkGetBufferDeviceAddressEXT</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public ulong GetBufferDeviceAddressEXT(in Vk.BufferDeviceAddressInfo info)
	{
		if (Functions.vkGetBufferDeviceAddressEXT == null) throw new Vk.Extras.FunctionNotLoadedException("vkGetBufferDeviceAddressEXT");
		return Functions.GetBufferDeviceAddressEXT(Handle, info);
	}

	/// <summary>vkInitializePerformanceApiINTEL</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result InitializePerformanceApiINTEL(Vk.INTEL.InitializePerformanceApiInfo* pInitializeInfo)
	{
		if (Functions.vkInitializePerformanceApiINTEL == null) throw new Vk.Extras.FunctionNotLoadedException("vkInitializePerformanceApiINTEL");
		return Functions.vkInitializePerformanceApiINTEL(Handle, pInitializeInfo);
	}

	/// <summary>vkInitializePerformanceApiINTEL</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result InitializePerformanceApiINTEL(in Vk.INTEL.InitializePerformanceApiInfo initializeInfo)
	{
		if (Functions.vkInitializePerformanceApiINTEL == null) throw new Vk.Extras.FunctionNotLoadedException("vkInitializePerformanceApiINTEL");
		return Functions.InitializePerformanceApiINTEL(Handle, initializeInfo);
	}

	/// <summary>vkUninitializePerformanceApiINTEL</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void UninitializePerformanceApiINTEL()
	{
		if (Functions.vkUninitializePerformanceApiINTEL == null) throw new Vk.Extras.FunctionNotLoadedException("vkUninitializePerformanceApiINTEL");
		Functions.vkUninitializePerformanceApiINTEL(Handle);
	}

	/// <summary>vkAcquirePerformanceConfigurationINTEL</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result AcquirePerformanceConfigurationINTEL(Vk.INTEL.PerformanceConfigurationAcquireInfo* pAcquireInfo, Vk.Handle<Vk.INTEL.PerformanceConfiguration>* pConfiguration)
	{
		if (Functions.vkAcquirePerformanceConfigurationINTEL == null) throw new Vk.Extras.FunctionNotLoadedException("vkAcquirePerformanceConfigurationINTEL");
		return Functions.vkAcquirePerformanceConfigurationINTEL(Handle, pAcquireInfo, pConfiguration);
	}

	/// <summary>vkAcquirePerformanceConfigurationINTEL</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result AcquirePerformanceConfigurationINTEL(Vk.INTEL.PerformanceConfigurationAcquireInfo* pAcquireInfo, out Vk.INTEL.PerformanceConfiguration pConfiguration)
	{
		if (Functions.vkAcquirePerformanceConfigurationINTEL == null) throw new Vk.Extras.FunctionNotLoadedException("vkAcquirePerformanceConfigurationINTEL");
		Vk.Handle<Vk.INTEL.PerformanceConfiguration> HANDLE;
		var RESULT = Functions.vkAcquirePerformanceConfigurationINTEL(Handle, pAcquireInfo, &HANDLE);
		pConfiguration = (RESULT == Result.Success) ? new(this, HANDLE) : Vk.INTEL.PerformanceConfiguration.Null;
		return RESULT;
	}

	/// <summary>vkAcquirePerformanceConfigurationINTEL</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result AcquirePerformanceConfigurationINTEL(in Vk.INTEL.PerformanceConfigurationAcquireInfo acquireInfo, out Vk.Handle<Vk.INTEL.PerformanceConfiguration> configuration)
	{
		if (Functions.vkAcquirePerformanceConfigurationINTEL == null) throw new Vk.Extras.FunctionNotLoadedException("vkAcquirePerformanceConfigurationINTEL");
		return Functions.AcquirePerformanceConfigurationINTEL(Handle, acquireInfo, out configuration);
	}

	/// <summary>vkAcquirePerformanceConfigurationINTEL</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result AcquirePerformanceConfigurationINTEL(in Vk.INTEL.PerformanceConfigurationAcquireInfo acquireInfo, out Vk.INTEL.PerformanceConfiguration pConfiguration)
	{
		if (Functions.vkAcquirePerformanceConfigurationINTEL == null) throw new Vk.Extras.FunctionNotLoadedException("vkAcquirePerformanceConfigurationINTEL");
		Vk.Handle<Vk.INTEL.PerformanceConfiguration> HANDLE;
		var RESULT = Functions.AcquirePerformanceConfigurationINTEL(Handle, acquireInfo, out HANDLE);
		pConfiguration = (RESULT == Result.Success) ? new(this, HANDLE) : Vk.INTEL.PerformanceConfiguration.Null;
		return RESULT;
	}

	/// <summary>vkGetPerformanceParameterINTEL</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result GetPerformanceParameterINTEL(Vk.INTEL.PerformanceParameterType parameter, Vk.INTEL.PerformanceValue* pValue)
	{
		if (Functions.vkGetPerformanceParameterINTEL == null) throw new Vk.Extras.FunctionNotLoadedException("vkGetPerformanceParameterINTEL");
		return Functions.vkGetPerformanceParameterINTEL(Handle, parameter, pValue);
	}

	/// <summary>vkGetPerformanceParameterINTEL</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result GetPerformanceParameterINTEL(Vk.INTEL.PerformanceParameterType parameter, out Vk.INTEL.PerformanceValue value)
	{
		if (Functions.vkGetPerformanceParameterINTEL == null) throw new Vk.Extras.FunctionNotLoadedException("vkGetPerformanceParameterINTEL");
		return Functions.GetPerformanceParameterINTEL(Handle, parameter, out value);
	}

	/// <summary>vkGetDeviceMemoryOpaqueCaptureAddress</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public ulong GetDeviceMemoryOpaqueCaptureAddress(Vk.DeviceMemoryOpaqueCaptureAddressInfo* pInfo)
	{
		if (Functions.vkGetDeviceMemoryOpaqueCaptureAddress == null) throw new Vk.Extras.FunctionNotLoadedException("vkGetDeviceMemoryOpaqueCaptureAddress");
		return Functions.vkGetDeviceMemoryOpaqueCaptureAddress(Handle, pInfo);
	}

	/// <summary>vkGetDeviceMemoryOpaqueCaptureAddress</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public ulong GetDeviceMemoryOpaqueCaptureAddress(in Vk.DeviceMemoryOpaqueCaptureAddressInfo info)
	{
		if (Functions.vkGetDeviceMemoryOpaqueCaptureAddress == null) throw new Vk.Extras.FunctionNotLoadedException("vkGetDeviceMemoryOpaqueCaptureAddress");
		return Functions.GetDeviceMemoryOpaqueCaptureAddress(Handle, info);
	}

	/// <summary>vkGetDeviceMemoryOpaqueCaptureAddressKHR</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public ulong GetDeviceMemoryOpaqueCaptureAddressKHR(Vk.DeviceMemoryOpaqueCaptureAddressInfo* pInfo)
	{
		if (Functions.vkGetDeviceMemoryOpaqueCaptureAddressKHR == null) throw new Vk.Extras.FunctionNotLoadedException("vkGetDeviceMemoryOpaqueCaptureAddressKHR");
		return Functions.vkGetDeviceMemoryOpaqueCaptureAddressKHR(Handle, pInfo);
	}

	/// <summary>vkGetDeviceMemoryOpaqueCaptureAddressKHR</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public ulong GetDeviceMemoryOpaqueCaptureAddressKHR(in Vk.DeviceMemoryOpaqueCaptureAddressInfo info)
	{
		if (Functions.vkGetDeviceMemoryOpaqueCaptureAddressKHR == null) throw new Vk.Extras.FunctionNotLoadedException("vkGetDeviceMemoryOpaqueCaptureAddressKHR");
		return Functions.GetDeviceMemoryOpaqueCaptureAddressKHR(Handle, info);
	}

	/// <summary>vkGetPipelineExecutablePropertiesKHR</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result GetPipelineExecutablePropertiesKHR(Vk.KHR.PipelineInfo* pPipelineInfo, uint* pExecutableCount, Vk.KHR.PipelineExecutableProperties* pProperties)
	{
		if (Functions.vkGetPipelineExecutablePropertiesKHR == null) throw new Vk.Extras.FunctionNotLoadedException("vkGetPipelineExecutablePropertiesKHR");
		return Functions.vkGetPipelineExecutablePropertiesKHR(Handle, pPipelineInfo, pExecutableCount, pProperties);
	}

	/// <summary>vkGetPipelineExecutablePropertiesKHR</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result GetPipelineExecutablePropertiesKHR(in Vk.KHR.PipelineInfo pipelineInfo, out uint executableCount, in Span<Vk.KHR.PipelineExecutableProperties> properties)
	{
		if (Functions.vkGetPipelineExecutablePropertiesKHR == null) throw new Vk.Extras.FunctionNotLoadedException("vkGetPipelineExecutablePropertiesKHR");
		return Functions.GetPipelineExecutablePropertiesKHR(Handle, pipelineInfo, out executableCount, properties);
	}

	/// <summary>vkGetPipelineExecutableStatisticsKHR</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result GetPipelineExecutableStatisticsKHR(Vk.KHR.PipelineExecutableInfo* pExecutableInfo, uint* pStatisticCount, Vk.KHR.PipelineExecutableStatistic* pStatistics)
	{
		if (Functions.vkGetPipelineExecutableStatisticsKHR == null) throw new Vk.Extras.FunctionNotLoadedException("vkGetPipelineExecutableStatisticsKHR");
		return Functions.vkGetPipelineExecutableStatisticsKHR(Handle, pExecutableInfo, pStatisticCount, pStatistics);
	}

	/// <summary>vkGetPipelineExecutableStatisticsKHR</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result GetPipelineExecutableStatisticsKHR(in Vk.KHR.PipelineExecutableInfo executableInfo, out uint statisticCount, in Span<Vk.KHR.PipelineExecutableStatistic> statistics)
	{
		if (Functions.vkGetPipelineExecutableStatisticsKHR == null) throw new Vk.Extras.FunctionNotLoadedException("vkGetPipelineExecutableStatisticsKHR");
		return Functions.GetPipelineExecutableStatisticsKHR(Handle, executableInfo, out statisticCount, statistics);
	}

	/// <summary>vkGetPipelineExecutableInternalRepresentationsKHR</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result GetPipelineExecutableInternalRepresentationsKHR(Vk.KHR.PipelineExecutableInfo* pExecutableInfo, uint* pInternalRepresentationCount, Vk.KHR.PipelineExecutableInternalRepresentation* pInternalRepresentations)
	{
		if (Functions.vkGetPipelineExecutableInternalRepresentationsKHR == null) throw new Vk.Extras.FunctionNotLoadedException("vkGetPipelineExecutableInternalRepresentationsKHR");
		return Functions.vkGetPipelineExecutableInternalRepresentationsKHR(Handle, pExecutableInfo, pInternalRepresentationCount, pInternalRepresentations);
	}

	/// <summary>vkGetPipelineExecutableInternalRepresentationsKHR</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result GetPipelineExecutableInternalRepresentationsKHR(in Vk.KHR.PipelineExecutableInfo executableInfo, out uint internalRepresentationCount, in Span<Vk.KHR.PipelineExecutableInternalRepresentation> internalRepresentations)
	{
		if (Functions.vkGetPipelineExecutableInternalRepresentationsKHR == null) throw new Vk.Extras.FunctionNotLoadedException("vkGetPipelineExecutableInternalRepresentationsKHR");
		return Functions.GetPipelineExecutableInternalRepresentationsKHR(Handle, executableInfo, out internalRepresentationCount, internalRepresentations);
	}

	/// <summary>vkCreateAccelerationStructureKHR</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result CreateAccelerationStructureKHR(Vk.KHR.AccelerationStructureCreateInfo* pCreateInfo, Vk.AllocationCallbacks* pAllocator, Vk.Handle<Vk.KHR.AccelerationStructure>* pAccelerationStructure)
	{
		if (Functions.vkCreateAccelerationStructureKHR == null) throw new Vk.Extras.FunctionNotLoadedException("vkCreateAccelerationStructureKHR");
		return Functions.vkCreateAccelerationStructureKHR(Handle, pCreateInfo, pAllocator, pAccelerationStructure);
	}

	/// <summary>vkCreateAccelerationStructureKHR</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result CreateAccelerationStructureKHR(Vk.KHR.AccelerationStructureCreateInfo* pCreateInfo, Vk.AllocationCallbacks* pAllocator, out Vk.KHR.AccelerationStructure pAccelerationStructure)
	{
		if (Functions.vkCreateAccelerationStructureKHR == null) throw new Vk.Extras.FunctionNotLoadedException("vkCreateAccelerationStructureKHR");
		Vk.Handle<Vk.KHR.AccelerationStructure> HANDLE;
		var RESULT = Functions.vkCreateAccelerationStructureKHR(Handle, pCreateInfo, pAllocator, &HANDLE);
		pAccelerationStructure = (RESULT == Result.Success) ? new(this, HANDLE) : Vk.KHR.AccelerationStructure.Null;
		return RESULT;
	}

	/// <summary>vkCreateAccelerationStructureKHR</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result CreateAccelerationStructureKHR(in Vk.KHR.AccelerationStructureCreateInfo createInfo, in Vk.AllocationCallbacks allocator, out Vk.Handle<Vk.KHR.AccelerationStructure> accelerationStructure)
	{
		if (Functions.vkCreateAccelerationStructureKHR == null) throw new Vk.Extras.FunctionNotLoadedException("vkCreateAccelerationStructureKHR");
		return Functions.CreateAccelerationStructureKHR(Handle, createInfo, allocator, out accelerationStructure);
	}

	/// <summary>vkCreateAccelerationStructureKHR</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result CreateAccelerationStructureKHR(in Vk.KHR.AccelerationStructureCreateInfo createInfo, in Vk.AllocationCallbacks allocator, out Vk.KHR.AccelerationStructure pAccelerationStructure)
	{
		if (Functions.vkCreateAccelerationStructureKHR == null) throw new Vk.Extras.FunctionNotLoadedException("vkCreateAccelerationStructureKHR");
		Vk.Handle<Vk.KHR.AccelerationStructure> HANDLE;
		var RESULT = Functions.CreateAccelerationStructureKHR(Handle, createInfo, allocator, out HANDLE);
		pAccelerationStructure = (RESULT == Result.Success) ? new(this, HANDLE) : Vk.KHR.AccelerationStructure.Null;
		return RESULT;
	}

	/// <summary>vkBuildAccelerationStructureKHR</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result BuildAccelerationStructureKHR(uint infoCount, Vk.KHR.AccelerationStructureBuildGeometryInfo* pInfos, Vk.KHR.AccelerationStructureBuildOffsetInfo** ppOffsetInfos)
	{
		if (Functions.vkBuildAccelerationStructureKHR == null) throw new Vk.Extras.FunctionNotLoadedException("vkBuildAccelerationStructureKHR");
		return Functions.vkBuildAccelerationStructureKHR(Handle, infoCount, pInfos, ppOffsetInfos);
	}

	/// <summary>vkBuildAccelerationStructureKHR</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result BuildAccelerationStructureKHR(in ReadOnlySpan<Vk.KHR.AccelerationStructureBuildGeometryInfo> infos, Vk.KHR.AccelerationStructureBuildOffsetInfo** ppOffsetInfos)
	{
		if (Functions.vkBuildAccelerationStructureKHR == null) throw new Vk.Extras.FunctionNotLoadedException("vkBuildAccelerationStructureKHR");
		return Functions.BuildAccelerationStructureKHR(Handle, infos, ppOffsetInfos);
	}

	/// <summary>vkGetAccelerationStructureDeviceAddressKHR</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public ulong GetAccelerationStructureDeviceAddressKHR(Vk.KHR.AccelerationStructureDeviceAddressInfo* pInfo)
	{
		if (Functions.vkGetAccelerationStructureDeviceAddressKHR == null) throw new Vk.Extras.FunctionNotLoadedException("vkGetAccelerationStructureDeviceAddressKHR");
		return Functions.vkGetAccelerationStructureDeviceAddressKHR(Handle, pInfo);
	}

	/// <summary>vkGetAccelerationStructureDeviceAddressKHR</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public ulong GetAccelerationStructureDeviceAddressKHR(in Vk.KHR.AccelerationStructureDeviceAddressInfo info)
	{
		if (Functions.vkGetAccelerationStructureDeviceAddressKHR == null) throw new Vk.Extras.FunctionNotLoadedException("vkGetAccelerationStructureDeviceAddressKHR");
		return Functions.GetAccelerationStructureDeviceAddressKHR(Handle, info);
	}

	/// <summary>vkCreateDeferredOperationKHR</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result CreateDeferredOperationKHR(Vk.AllocationCallbacks* pAllocator, Vk.Handle<Vk.KHR.DeferredOperation>* pDeferredOperation)
	{
		if (Functions.vkCreateDeferredOperationKHR == null) throw new Vk.Extras.FunctionNotLoadedException("vkCreateDeferredOperationKHR");
		return Functions.vkCreateDeferredOperationKHR(Handle, pAllocator, pDeferredOperation);
	}

	/// <summary>vkCreateDeferredOperationKHR</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result CreateDeferredOperationKHR(Vk.AllocationCallbacks* pAllocator, out Vk.KHR.DeferredOperation pDeferredOperation)
	{
		if (Functions.vkCreateDeferredOperationKHR == null) throw new Vk.Extras.FunctionNotLoadedException("vkCreateDeferredOperationKHR");
		Vk.Handle<Vk.KHR.DeferredOperation> HANDLE;
		var RESULT = Functions.vkCreateDeferredOperationKHR(Handle, pAllocator, &HANDLE);
		pDeferredOperation = (RESULT == Result.Success) ? new(this, HANDLE) : Vk.KHR.DeferredOperation.Null;
		return RESULT;
	}

	/// <summary>vkCreateDeferredOperationKHR</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result CreateDeferredOperationKHR(in Vk.AllocationCallbacks allocator, out Vk.Handle<Vk.KHR.DeferredOperation> deferredOperation)
	{
		if (Functions.vkCreateDeferredOperationKHR == null) throw new Vk.Extras.FunctionNotLoadedException("vkCreateDeferredOperationKHR");
		return Functions.CreateDeferredOperationKHR(Handle, allocator, out deferredOperation);
	}

	/// <summary>vkCreateDeferredOperationKHR</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result CreateDeferredOperationKHR(in Vk.AllocationCallbacks allocator, out Vk.KHR.DeferredOperation pDeferredOperation)
	{
		if (Functions.vkCreateDeferredOperationKHR == null) throw new Vk.Extras.FunctionNotLoadedException("vkCreateDeferredOperationKHR");
		Vk.Handle<Vk.KHR.DeferredOperation> HANDLE;
		var RESULT = Functions.CreateDeferredOperationKHR(Handle, allocator, out HANDLE);
		pDeferredOperation = (RESULT == Result.Success) ? new(this, HANDLE) : Vk.KHR.DeferredOperation.Null;
		return RESULT;
	}

	/// <summary>vkCreatePrivateDataSlotEXT</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result CreatePrivateDataSlotEXT(Vk.EXT.PrivateDataSlotCreateInfo* pCreateInfo, Vk.AllocationCallbacks* pAllocator, Vk.Handle<Vk.EXT.PrivateDataSlot>* pPrivateDataSlot)
	{
		if (Functions.vkCreatePrivateDataSlotEXT == null) throw new Vk.Extras.FunctionNotLoadedException("vkCreatePrivateDataSlotEXT");
		return Functions.vkCreatePrivateDataSlotEXT(Handle, pCreateInfo, pAllocator, pPrivateDataSlot);
	}

	/// <summary>vkCreatePrivateDataSlotEXT</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result CreatePrivateDataSlotEXT(Vk.EXT.PrivateDataSlotCreateInfo* pCreateInfo, Vk.AllocationCallbacks* pAllocator, out Vk.EXT.PrivateDataSlot pPrivateDataSlot)
	{
		if (Functions.vkCreatePrivateDataSlotEXT == null) throw new Vk.Extras.FunctionNotLoadedException("vkCreatePrivateDataSlotEXT");
		Vk.Handle<Vk.EXT.PrivateDataSlot> HANDLE;
		var RESULT = Functions.vkCreatePrivateDataSlotEXT(Handle, pCreateInfo, pAllocator, &HANDLE);
		pPrivateDataSlot = (RESULT == Result.Success) ? new(this, HANDLE) : Vk.EXT.PrivateDataSlot.Null;
		return RESULT;
	}

	/// <summary>vkCreatePrivateDataSlotEXT</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result CreatePrivateDataSlotEXT(in Vk.EXT.PrivateDataSlotCreateInfo createInfo, in Vk.AllocationCallbacks allocator, out Vk.Handle<Vk.EXT.PrivateDataSlot> privateDataSlot)
	{
		if (Functions.vkCreatePrivateDataSlotEXT == null) throw new Vk.Extras.FunctionNotLoadedException("vkCreatePrivateDataSlotEXT");
		return Functions.CreatePrivateDataSlotEXT(Handle, createInfo, allocator, out privateDataSlot);
	}

	/// <summary>vkCreatePrivateDataSlotEXT</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result CreatePrivateDataSlotEXT(in Vk.EXT.PrivateDataSlotCreateInfo createInfo, in Vk.AllocationCallbacks allocator, out Vk.EXT.PrivateDataSlot pPrivateDataSlot)
	{
		if (Functions.vkCreatePrivateDataSlotEXT == null) throw new Vk.Extras.FunctionNotLoadedException("vkCreatePrivateDataSlotEXT");
		Vk.Handle<Vk.EXT.PrivateDataSlot> HANDLE;
		var RESULT = Functions.CreatePrivateDataSlotEXT(Handle, createInfo, allocator, out HANDLE);
		pPrivateDataSlot = (RESULT == Result.Success) ? new(this, HANDLE) : Vk.EXT.PrivateDataSlot.Null;
		return RESULT;
	}

	/// <summary>vkSetPrivateDataEXT</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result SetPrivateDataEXT(Vk.ObjectType objectType, ulong objectHandle, Vk.Handle<Vk.EXT.PrivateDataSlot> privateDataSlot, ulong data)
	{
		if (Functions.vkSetPrivateDataEXT == null) throw new Vk.Extras.FunctionNotLoadedException("vkSetPrivateDataEXT");
		return Functions.vkSetPrivateDataEXT(Handle, objectType, objectHandle, privateDataSlot, data);
	}

	/// <summary>vkGetPrivateDataEXT</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void GetPrivateDataEXT(Vk.ObjectType objectType, ulong objectHandle, Vk.Handle<Vk.EXT.PrivateDataSlot> privateDataSlot, ulong* pData)
	{
		if (Functions.vkGetPrivateDataEXT == null) throw new Vk.Extras.FunctionNotLoadedException("vkGetPrivateDataEXT");
		Functions.vkGetPrivateDataEXT(Handle, objectType, objectHandle, privateDataSlot, pData);
	}

	/// <summary>vkGetPrivateDataEXT</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void GetPrivateDataEXT(Vk.ObjectType objectType, ulong objectHandle, Vk.Handle<Vk.EXT.PrivateDataSlot> privateDataSlot, out ulong data)
	{
		if (Functions.vkGetPrivateDataEXT == null) throw new Vk.Extras.FunctionNotLoadedException("vkGetPrivateDataEXT");
		Functions.GetPrivateDataEXT(Handle, objectType, objectHandle, privateDataSlot, out data);
	}

}

public unsafe partial class Queue : IHandleType<Queue>
{
	public static readonly Queue Null = new(Device.Null, Vk.Handle<Queue>.Null);

	public readonly Vk.Device Parent;
	public readonly Vk.DeviceFunctionTable Functions;
	public readonly Vk.Instance Instance;
	public readonly Vk.Device Device;
	public readonly Handle<Queue> Handle;
	public bool IsValid => Handle.IsValid;

	public Queue(in Vk.Device parent, Vk.Handle<Queue> handle)
	{
		Parent = parent;
		Functions = parent.Functions;
		Instance = parent.Instance;
		Device = parent;
		Handle = handle;
	}

	public override int GetHashCode() => Handle.GetHashCode();
	public override string? ToString() => $"[Queue 0x{(ulong)Handle:X16}]";
	public override bool Equals(object? o) => (o is Queue t) && (t.Handle == Handle);
	bool IEquatable<Queue>.Equals(Queue? other) => (other?.Handle ?? new()) == Handle;

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static implicit operator Vk.Handle<Queue> (Queue? handle) => handle?.Handle ?? new();
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static bool operator == (Queue? l, Queue? r) => (l?.Handle ?? new()) == (r?.Handle ?? new());
	public static bool operator != (Queue? l, Queue? r) => (l?.Handle ?? new()) == (r?.Handle ?? new());
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static implicit operator bool (Queue? handle) => handle?.Handle.IsValid ?? false;

	/// <summary>vkQueueSubmit</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result QueueSubmit(uint submitCount, Vk.SubmitInfo* pSubmits, Vk.Handle<Vk.Fence> fence)
	{
		if (Functions.vkQueueSubmit == null) throw new Vk.Extras.FunctionNotLoadedException("vkQueueSubmit");
		return Functions.vkQueueSubmit(Handle, submitCount, pSubmits, fence);
	}

	/// <summary>vkQueueSubmit</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result QueueSubmit(in ReadOnlySpan<Vk.SubmitInfo> submits, Vk.Handle<Vk.Fence> fence)
	{
		if (Functions.vkQueueSubmit == null) throw new Vk.Extras.FunctionNotLoadedException("vkQueueSubmit");
		return Functions.QueueSubmit(Handle, submits, fence);
	}

	/// <summary>vkQueueWaitIdle</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result QueueWaitIdle()
	{
		if (Functions.vkQueueWaitIdle == null) throw new Vk.Extras.FunctionNotLoadedException("vkQueueWaitIdle");
		return Functions.vkQueueWaitIdle(Handle);
	}

	/// <summary>vkQueueBindSparse</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result QueueBindSparse(uint bindInfoCount, Vk.BindSparseInfo* pBindInfo, Vk.Handle<Vk.Fence> fence)
	{
		if (Functions.vkQueueBindSparse == null) throw new Vk.Extras.FunctionNotLoadedException("vkQueueBindSparse");
		return Functions.vkQueueBindSparse(Handle, bindInfoCount, pBindInfo, fence);
	}

	/// <summary>vkQueueBindSparse</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result QueueBindSparse(in ReadOnlySpan<Vk.BindSparseInfo> bindInfo, Vk.Handle<Vk.Fence> fence)
	{
		if (Functions.vkQueueBindSparse == null) throw new Vk.Extras.FunctionNotLoadedException("vkQueueBindSparse");
		return Functions.QueueBindSparse(Handle, bindInfo, fence);
	}

	/// <summary>vkQueuePresentKHR</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result QueuePresentKHR(Vk.KHR.PresentInfo* pPresentInfo)
	{
		if (Functions.vkQueuePresentKHR == null) throw new Vk.Extras.FunctionNotLoadedException("vkQueuePresentKHR");
		return Functions.vkQueuePresentKHR(Handle, pPresentInfo);
	}

	/// <summary>vkQueuePresentKHR</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result QueuePresentKHR(in Vk.KHR.PresentInfo presentInfo)
	{
		if (Functions.vkQueuePresentKHR == null) throw new Vk.Extras.FunctionNotLoadedException("vkQueuePresentKHR");
		return Functions.QueuePresentKHR(Handle, presentInfo);
	}

	/// <summary>vkQueueSignalReleaseImageANDROID</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result QueueSignalReleaseImageANDROID(uint waitSemaphoreCount, Vk.Handle<Vk.Semaphore>* pWaitSemaphores, Vk.Handle<Vk.Image> image, int* pNativeFenceFd)
	{
		if (Functions.vkQueueSignalReleaseImageANDROID == null) throw new Vk.Extras.FunctionNotLoadedException("vkQueueSignalReleaseImageANDROID");
		return Functions.vkQueueSignalReleaseImageANDROID(Handle, waitSemaphoreCount, pWaitSemaphores, image, pNativeFenceFd);
	}

	/// <summary>vkQueueSignalReleaseImageANDROID</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result QueueSignalReleaseImageANDROID(in ReadOnlySpan<Vk.Handle<Vk.Semaphore>> waitSemaphores, Vk.Handle<Vk.Image> image, out int nativeFenceFd)
	{
		if (Functions.vkQueueSignalReleaseImageANDROID == null) throw new Vk.Extras.FunctionNotLoadedException("vkQueueSignalReleaseImageANDROID");
		return Functions.QueueSignalReleaseImageANDROID(Handle, waitSemaphores, image, out nativeFenceFd);
	}

	/// <summary>vkQueueBeginDebugUtilsLabelEXT</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void QueueBeginDebugUtilsLabelEXT(Vk.EXT.DebugUtilsLabel* pLabelInfo)
	{
		if (Functions.vkQueueBeginDebugUtilsLabelEXT == null) throw new Vk.Extras.FunctionNotLoadedException("vkQueueBeginDebugUtilsLabelEXT");
		Functions.vkQueueBeginDebugUtilsLabelEXT(Handle, pLabelInfo);
	}

	/// <summary>vkQueueBeginDebugUtilsLabelEXT</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void QueueBeginDebugUtilsLabelEXT(in Vk.EXT.DebugUtilsLabel labelInfo)
	{
		if (Functions.vkQueueBeginDebugUtilsLabelEXT == null) throw new Vk.Extras.FunctionNotLoadedException("vkQueueBeginDebugUtilsLabelEXT");
		Functions.QueueBeginDebugUtilsLabelEXT(Handle, labelInfo);
	}

	/// <summary>vkQueueEndDebugUtilsLabelEXT</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void QueueEndDebugUtilsLabelEXT()
	{
		if (Functions.vkQueueEndDebugUtilsLabelEXT == null) throw new Vk.Extras.FunctionNotLoadedException("vkQueueEndDebugUtilsLabelEXT");
		Functions.vkQueueEndDebugUtilsLabelEXT(Handle);
	}

	/// <summary>vkQueueInsertDebugUtilsLabelEXT</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void QueueInsertDebugUtilsLabelEXT(Vk.EXT.DebugUtilsLabel* pLabelInfo)
	{
		if (Functions.vkQueueInsertDebugUtilsLabelEXT == null) throw new Vk.Extras.FunctionNotLoadedException("vkQueueInsertDebugUtilsLabelEXT");
		Functions.vkQueueInsertDebugUtilsLabelEXT(Handle, pLabelInfo);
	}

	/// <summary>vkQueueInsertDebugUtilsLabelEXT</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void QueueInsertDebugUtilsLabelEXT(in Vk.EXT.DebugUtilsLabel labelInfo)
	{
		if (Functions.vkQueueInsertDebugUtilsLabelEXT == null) throw new Vk.Extras.FunctionNotLoadedException("vkQueueInsertDebugUtilsLabelEXT");
		Functions.QueueInsertDebugUtilsLabelEXT(Handle, labelInfo);
	}

	/// <summary>vkGetQueueCheckpointDataNV</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void GetQueueCheckpointDataNV(uint* pCheckpointDataCount, Vk.NV.CheckpointData* pCheckpointData)
	{
		if (Functions.vkGetQueueCheckpointDataNV == null) throw new Vk.Extras.FunctionNotLoadedException("vkGetQueueCheckpointDataNV");
		Functions.vkGetQueueCheckpointDataNV(Handle, pCheckpointDataCount, pCheckpointData);
	}

	/// <summary>vkGetQueueCheckpointDataNV</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void GetQueueCheckpointDataNV(out uint checkpointDataCount, in Span<Vk.NV.CheckpointData> checkpointData)
	{
		if (Functions.vkGetQueueCheckpointDataNV == null) throw new Vk.Extras.FunctionNotLoadedException("vkGetQueueCheckpointDataNV");
		Functions.GetQueueCheckpointDataNV(Handle, out checkpointDataCount, checkpointData);
	}

	/// <summary>vkQueueSetPerformanceConfigurationINTEL</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result QueueSetPerformanceConfigurationINTEL(Vk.Handle<Vk.INTEL.PerformanceConfiguration> configuration)
	{
		if (Functions.vkQueueSetPerformanceConfigurationINTEL == null) throw new Vk.Extras.FunctionNotLoadedException("vkQueueSetPerformanceConfigurationINTEL");
		return Functions.vkQueueSetPerformanceConfigurationINTEL(Handle, configuration);
	}

}

public unsafe partial class CommandBuffer : IHandleType<CommandBuffer>
{
	public static readonly CommandBuffer Null = new(CommandPool.Null, Vk.Handle<CommandBuffer>.Null);

	public readonly Vk.CommandPool Parent;
	public readonly Vk.DeviceFunctionTable Functions;
	public readonly Vk.Instance Instance;
	public readonly Vk.Device Device;
	public readonly Handle<CommandBuffer> Handle;
	public bool IsValid => Handle.IsValid;

	public CommandBuffer(in Vk.CommandPool parent, Vk.Handle<CommandBuffer> handle)
	{
		Parent = parent;
		Functions = parent.Functions;
		Instance = parent.Instance;
		Device = parent.Device;
		Handle = handle;
	}

	public override int GetHashCode() => Handle.GetHashCode();
	public override string? ToString() => $"[CommandBuffer 0x{(ulong)Handle:X16}]";
	public override bool Equals(object? o) => (o is CommandBuffer t) && (t.Handle == Handle);
	bool IEquatable<CommandBuffer>.Equals(CommandBuffer? other) => (other?.Handle ?? new()) == Handle;

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static implicit operator Vk.Handle<CommandBuffer> (CommandBuffer? handle) => handle?.Handle ?? new();
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static bool operator == (CommandBuffer? l, CommandBuffer? r) => (l?.Handle ?? new()) == (r?.Handle ?? new());
	public static bool operator != (CommandBuffer? l, CommandBuffer? r) => (l?.Handle ?? new()) == (r?.Handle ?? new());
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static implicit operator bool (CommandBuffer? handle) => handle?.Handle.IsValid ?? false;

	/// <summary>vkBeginCommandBuffer</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result BeginCommandBuffer(Vk.CommandBufferBeginInfo* pBeginInfo)
	{
		if (Functions.vkBeginCommandBuffer == null) throw new Vk.Extras.FunctionNotLoadedException("vkBeginCommandBuffer");
		return Functions.vkBeginCommandBuffer(Handle, pBeginInfo);
	}

	/// <summary>vkBeginCommandBuffer</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result BeginCommandBuffer(in Vk.CommandBufferBeginInfo beginInfo)
	{
		if (Functions.vkBeginCommandBuffer == null) throw new Vk.Extras.FunctionNotLoadedException("vkBeginCommandBuffer");
		return Functions.BeginCommandBuffer(Handle, beginInfo);
	}

	/// <summary>vkEndCommandBuffer</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result EndCommandBuffer()
	{
		if (Functions.vkEndCommandBuffer == null) throw new Vk.Extras.FunctionNotLoadedException("vkEndCommandBuffer");
		return Functions.vkEndCommandBuffer(Handle);
	}

	/// <summary>vkResetCommandBuffer</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result ResetCommandBuffer(Vk.CommandBufferResetFlags flags)
	{
		if (Functions.vkResetCommandBuffer == null) throw new Vk.Extras.FunctionNotLoadedException("vkResetCommandBuffer");
		return Functions.vkResetCommandBuffer(Handle, flags);
	}

	/// <summary>vkCmdBindPipeline</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void BindPipeline(Vk.PipelineBindPoint pipelineBindPoint, Vk.Handle<Vk.Pipeline> pipeline)
	{
		if (Functions.vkCmdBindPipeline == null) throw new Vk.Extras.FunctionNotLoadedException("vkCmdBindPipeline");
		Functions.vkCmdBindPipeline(Handle, pipelineBindPoint, pipeline);
	}

	/// <summary>vkCmdSetViewport</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void SetViewport(uint firstViewport, uint viewportCount, Vk.Viewport* pViewports)
	{
		if (Functions.vkCmdSetViewport == null) throw new Vk.Extras.FunctionNotLoadedException("vkCmdSetViewport");
		Functions.vkCmdSetViewport(Handle, firstViewport, viewportCount, pViewports);
	}

	/// <summary>vkCmdSetViewport</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void SetViewport(uint firstViewport, in ReadOnlySpan<Vk.Viewport> viewports)
	{
		if (Functions.vkCmdSetViewport == null) throw new Vk.Extras.FunctionNotLoadedException("vkCmdSetViewport");
		Functions.CmdSetViewport(Handle, firstViewport, viewports);
	}

	/// <summary>vkCmdSetScissor</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void SetScissor(uint firstScissor, uint scissorCount, Vk.Rect2D* pScissors)
	{
		if (Functions.vkCmdSetScissor == null) throw new Vk.Extras.FunctionNotLoadedException("vkCmdSetScissor");
		Functions.vkCmdSetScissor(Handle, firstScissor, scissorCount, pScissors);
	}

	/// <summary>vkCmdSetScissor</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void SetScissor(uint firstScissor, in ReadOnlySpan<Vk.Rect2D> scissors)
	{
		if (Functions.vkCmdSetScissor == null) throw new Vk.Extras.FunctionNotLoadedException("vkCmdSetScissor");
		Functions.CmdSetScissor(Handle, firstScissor, scissors);
	}

	/// <summary>vkCmdSetLineWidth</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void SetLineWidth(float lineWidth)
	{
		if (Functions.vkCmdSetLineWidth == null) throw new Vk.Extras.FunctionNotLoadedException("vkCmdSetLineWidth");
		Functions.vkCmdSetLineWidth(Handle, lineWidth);
	}

	/// <summary>vkCmdSetDepthBias</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void SetDepthBias(float depthBiasConstantFactor, float depthBiasClamp, float depthBiasSlopeFactor)
	{
		if (Functions.vkCmdSetDepthBias == null) throw new Vk.Extras.FunctionNotLoadedException("vkCmdSetDepthBias");
		Functions.vkCmdSetDepthBias(Handle, depthBiasConstantFactor, depthBiasClamp, depthBiasSlopeFactor);
	}

	/// <summary>vkCmdSetBlendConstants</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void SetBlendConstants(float* blendConstants)
	{
		if (Functions.vkCmdSetBlendConstants == null) throw new Vk.Extras.FunctionNotLoadedException("vkCmdSetBlendConstants");
		Functions.vkCmdSetBlendConstants(Handle, blendConstants);
	}

	/// <summary>vkCmdSetBlendConstants</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void SetBlendConstants(in float blendConstants)
	{
		if (Functions.vkCmdSetBlendConstants == null) throw new Vk.Extras.FunctionNotLoadedException("vkCmdSetBlendConstants");
		Functions.CmdSetBlendConstants(Handle, blendConstants);
	}

	/// <summary>vkCmdSetDepthBounds</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void SetDepthBounds(float minDepthBounds, float maxDepthBounds)
	{
		if (Functions.vkCmdSetDepthBounds == null) throw new Vk.Extras.FunctionNotLoadedException("vkCmdSetDepthBounds");
		Functions.vkCmdSetDepthBounds(Handle, minDepthBounds, maxDepthBounds);
	}

	/// <summary>vkCmdSetStencilCompareMask</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void SetStencilCompareMask(Vk.StencilFaceFlags faceMask, uint compareMask)
	{
		if (Functions.vkCmdSetStencilCompareMask == null) throw new Vk.Extras.FunctionNotLoadedException("vkCmdSetStencilCompareMask");
		Functions.vkCmdSetStencilCompareMask(Handle, faceMask, compareMask);
	}

	/// <summary>vkCmdSetStencilWriteMask</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void SetStencilWriteMask(Vk.StencilFaceFlags faceMask, uint writeMask)
	{
		if (Functions.vkCmdSetStencilWriteMask == null) throw new Vk.Extras.FunctionNotLoadedException("vkCmdSetStencilWriteMask");
		Functions.vkCmdSetStencilWriteMask(Handle, faceMask, writeMask);
	}

	/// <summary>vkCmdSetStencilReference</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void SetStencilReference(Vk.StencilFaceFlags faceMask, uint reference)
	{
		if (Functions.vkCmdSetStencilReference == null) throw new Vk.Extras.FunctionNotLoadedException("vkCmdSetStencilReference");
		Functions.vkCmdSetStencilReference(Handle, faceMask, reference);
	}

	/// <summary>vkCmdBindDescriptorSets</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void BindDescriptorSets(Vk.PipelineBindPoint pipelineBindPoint, Vk.Handle<Vk.PipelineLayout> layout, uint firstSet, uint descriptorSetCount, Vk.Handle<Vk.DescriptorSet>* pDescriptorSets, uint dynamicOffsetCount, uint* pDynamicOffsets)
	{
		if (Functions.vkCmdBindDescriptorSets == null) throw new Vk.Extras.FunctionNotLoadedException("vkCmdBindDescriptorSets");
		Functions.vkCmdBindDescriptorSets(Handle, pipelineBindPoint, layout, firstSet, descriptorSetCount, pDescriptorSets, dynamicOffsetCount, pDynamicOffsets);
	}

	/// <summary>vkCmdBindDescriptorSets</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void BindDescriptorSets(Vk.PipelineBindPoint pipelineBindPoint, Vk.Handle<Vk.PipelineLayout> layout, uint firstSet, in ReadOnlySpan<Vk.Handle<Vk.DescriptorSet>> descriptorSets, in ReadOnlySpan<uint> dynamicOffsets)
	{
		if (Functions.vkCmdBindDescriptorSets == null) throw new Vk.Extras.FunctionNotLoadedException("vkCmdBindDescriptorSets");
		Functions.CmdBindDescriptorSets(Handle, pipelineBindPoint, layout, firstSet, descriptorSets, dynamicOffsets);
	}

	/// <summary>vkCmdBindIndexBuffer</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void BindIndexBuffer(Vk.Handle<Vk.Buffer> buffer, Vk.DeviceSize offset, Vk.IndexType indexType)
	{
		if (Functions.vkCmdBindIndexBuffer == null) throw new Vk.Extras.FunctionNotLoadedException("vkCmdBindIndexBuffer");
		Functions.vkCmdBindIndexBuffer(Handle, buffer, offset, indexType);
	}

	/// <summary>vkCmdBindVertexBuffers</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void BindVertexBuffers(uint firstBinding, uint bindingCount, Vk.Handle<Vk.Buffer>* pBuffers, Vk.DeviceSize* pOffsets)
	{
		if (Functions.vkCmdBindVertexBuffers == null) throw new Vk.Extras.FunctionNotLoadedException("vkCmdBindVertexBuffers");
		Functions.vkCmdBindVertexBuffers(Handle, firstBinding, bindingCount, pBuffers, pOffsets);
	}

	/// <summary>vkCmdBindVertexBuffers</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void BindVertexBuffers(uint firstBinding, in ReadOnlySpan<Vk.Handle<Vk.Buffer>> buffers, in ReadOnlySpan<Vk.DeviceSize> offsets)
	{
		if (Functions.vkCmdBindVertexBuffers == null) throw new Vk.Extras.FunctionNotLoadedException("vkCmdBindVertexBuffers");
		Functions.CmdBindVertexBuffers(Handle, firstBinding, buffers, offsets);
	}

	/// <summary>vkCmdDraw</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void Draw(uint vertexCount, uint instanceCount, uint firstVertex, uint firstInstance)
	{
		if (Functions.vkCmdDraw == null) throw new Vk.Extras.FunctionNotLoadedException("vkCmdDraw");
		Functions.vkCmdDraw(Handle, vertexCount, instanceCount, firstVertex, firstInstance);
	}

	/// <summary>vkCmdDrawIndexed</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void DrawIndexed(uint indexCount, uint instanceCount, uint firstIndex, int vertexOffset, uint firstInstance)
	{
		if (Functions.vkCmdDrawIndexed == null) throw new Vk.Extras.FunctionNotLoadedException("vkCmdDrawIndexed");
		Functions.vkCmdDrawIndexed(Handle, indexCount, instanceCount, firstIndex, vertexOffset, firstInstance);
	}

	/// <summary>vkCmdDrawIndirect</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void DrawIndirect(Vk.Handle<Vk.Buffer> buffer, Vk.DeviceSize offset, uint drawCount, uint stride)
	{
		if (Functions.vkCmdDrawIndirect == null) throw new Vk.Extras.FunctionNotLoadedException("vkCmdDrawIndirect");
		Functions.vkCmdDrawIndirect(Handle, buffer, offset, drawCount, stride);
	}

	/// <summary>vkCmdDrawIndexedIndirect</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void DrawIndexedIndirect(Vk.Handle<Vk.Buffer> buffer, Vk.DeviceSize offset, uint drawCount, uint stride)
	{
		if (Functions.vkCmdDrawIndexedIndirect == null) throw new Vk.Extras.FunctionNotLoadedException("vkCmdDrawIndexedIndirect");
		Functions.vkCmdDrawIndexedIndirect(Handle, buffer, offset, drawCount, stride);
	}

	/// <summary>vkCmdDispatch</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void Dispatch(uint groupCountX, uint groupCountY, uint groupCountZ)
	{
		if (Functions.vkCmdDispatch == null) throw new Vk.Extras.FunctionNotLoadedException("vkCmdDispatch");
		Functions.vkCmdDispatch(Handle, groupCountX, groupCountY, groupCountZ);
	}

	/// <summary>vkCmdDispatchIndirect</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void DispatchIndirect(Vk.Handle<Vk.Buffer> buffer, Vk.DeviceSize offset)
	{
		if (Functions.vkCmdDispatchIndirect == null) throw new Vk.Extras.FunctionNotLoadedException("vkCmdDispatchIndirect");
		Functions.vkCmdDispatchIndirect(Handle, buffer, offset);
	}

	/// <summary>vkCmdCopyBuffer</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void CopyBuffer(Vk.Handle<Vk.Buffer> srcBuffer, Vk.Handle<Vk.Buffer> dstBuffer, uint regionCount, Vk.BufferCopy* pRegions)
	{
		if (Functions.vkCmdCopyBuffer == null) throw new Vk.Extras.FunctionNotLoadedException("vkCmdCopyBuffer");
		Functions.vkCmdCopyBuffer(Handle, srcBuffer, dstBuffer, regionCount, pRegions);
	}

	/// <summary>vkCmdCopyBuffer</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void CopyBuffer(Vk.Handle<Vk.Buffer> srcBuffer, Vk.Handle<Vk.Buffer> dstBuffer, in ReadOnlySpan<Vk.BufferCopy> regions)
	{
		if (Functions.vkCmdCopyBuffer == null) throw new Vk.Extras.FunctionNotLoadedException("vkCmdCopyBuffer");
		Functions.CmdCopyBuffer(Handle, srcBuffer, dstBuffer, regions);
	}

	/// <summary>vkCmdCopyImage</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void CopyImage(Vk.Handle<Vk.Image> srcImage, Vk.ImageLayout srcImageLayout, Vk.Handle<Vk.Image> dstImage, Vk.ImageLayout dstImageLayout, uint regionCount, Vk.ImageCopy* pRegions)
	{
		if (Functions.vkCmdCopyImage == null) throw new Vk.Extras.FunctionNotLoadedException("vkCmdCopyImage");
		Functions.vkCmdCopyImage(Handle, srcImage, srcImageLayout, dstImage, dstImageLayout, regionCount, pRegions);
	}

	/// <summary>vkCmdCopyImage</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void CopyImage(Vk.Handle<Vk.Image> srcImage, Vk.ImageLayout srcImageLayout, Vk.Handle<Vk.Image> dstImage, Vk.ImageLayout dstImageLayout, in ReadOnlySpan<Vk.ImageCopy> regions)
	{
		if (Functions.vkCmdCopyImage == null) throw new Vk.Extras.FunctionNotLoadedException("vkCmdCopyImage");
		Functions.CmdCopyImage(Handle, srcImage, srcImageLayout, dstImage, dstImageLayout, regions);
	}

	/// <summary>vkCmdBlitImage</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void BlitImage(Vk.Handle<Vk.Image> srcImage, Vk.ImageLayout srcImageLayout, Vk.Handle<Vk.Image> dstImage, Vk.ImageLayout dstImageLayout, uint regionCount, Vk.ImageBlit* pRegions, Vk.Filter filter)
	{
		if (Functions.vkCmdBlitImage == null) throw new Vk.Extras.FunctionNotLoadedException("vkCmdBlitImage");
		Functions.vkCmdBlitImage(Handle, srcImage, srcImageLayout, dstImage, dstImageLayout, regionCount, pRegions, filter);
	}

	/// <summary>vkCmdBlitImage</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void BlitImage(Vk.Handle<Vk.Image> srcImage, Vk.ImageLayout srcImageLayout, Vk.Handle<Vk.Image> dstImage, Vk.ImageLayout dstImageLayout, in ReadOnlySpan<Vk.ImageBlit> regions, Vk.Filter filter)
	{
		if (Functions.vkCmdBlitImage == null) throw new Vk.Extras.FunctionNotLoadedException("vkCmdBlitImage");
		Functions.CmdBlitImage(Handle, srcImage, srcImageLayout, dstImage, dstImageLayout, regions, filter);
	}

	/// <summary>vkCmdCopyBufferToImage</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void CopyBufferToImage(Vk.Handle<Vk.Buffer> srcBuffer, Vk.Handle<Vk.Image> dstImage, Vk.ImageLayout dstImageLayout, uint regionCount, Vk.BufferImageCopy* pRegions)
	{
		if (Functions.vkCmdCopyBufferToImage == null) throw new Vk.Extras.FunctionNotLoadedException("vkCmdCopyBufferToImage");
		Functions.vkCmdCopyBufferToImage(Handle, srcBuffer, dstImage, dstImageLayout, regionCount, pRegions);
	}

	/// <summary>vkCmdCopyBufferToImage</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void CopyBufferToImage(Vk.Handle<Vk.Buffer> srcBuffer, Vk.Handle<Vk.Image> dstImage, Vk.ImageLayout dstImageLayout, in ReadOnlySpan<Vk.BufferImageCopy> regions)
	{
		if (Functions.vkCmdCopyBufferToImage == null) throw new Vk.Extras.FunctionNotLoadedException("vkCmdCopyBufferToImage");
		Functions.CmdCopyBufferToImage(Handle, srcBuffer, dstImage, dstImageLayout, regions);
	}

	/// <summary>vkCmdCopyImageToBuffer</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void CopyImageToBuffer(Vk.Handle<Vk.Image> srcImage, Vk.ImageLayout srcImageLayout, Vk.Handle<Vk.Buffer> dstBuffer, uint regionCount, Vk.BufferImageCopy* pRegions)
	{
		if (Functions.vkCmdCopyImageToBuffer == null) throw new Vk.Extras.FunctionNotLoadedException("vkCmdCopyImageToBuffer");
		Functions.vkCmdCopyImageToBuffer(Handle, srcImage, srcImageLayout, dstBuffer, regionCount, pRegions);
	}

	/// <summary>vkCmdCopyImageToBuffer</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void CopyImageToBuffer(Vk.Handle<Vk.Image> srcImage, Vk.ImageLayout srcImageLayout, Vk.Handle<Vk.Buffer> dstBuffer, in ReadOnlySpan<Vk.BufferImageCopy> regions)
	{
		if (Functions.vkCmdCopyImageToBuffer == null) throw new Vk.Extras.FunctionNotLoadedException("vkCmdCopyImageToBuffer");
		Functions.CmdCopyImageToBuffer(Handle, srcImage, srcImageLayout, dstBuffer, regions);
	}

	/// <summary>vkCmdUpdateBuffer</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void UpdateBuffer(Vk.Handle<Vk.Buffer> dstBuffer, Vk.DeviceSize dstOffset, Vk.DeviceSize dataSize, void* pData)
	{
		if (Functions.vkCmdUpdateBuffer == null) throw new Vk.Extras.FunctionNotLoadedException("vkCmdUpdateBuffer");
		Functions.vkCmdUpdateBuffer(Handle, dstBuffer, dstOffset, dataSize, pData);
	}

	/// <summary>vkCmdFillBuffer</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void FillBuffer(Vk.Handle<Vk.Buffer> dstBuffer, Vk.DeviceSize dstOffset, Vk.DeviceSize size, uint data)
	{
		if (Functions.vkCmdFillBuffer == null) throw new Vk.Extras.FunctionNotLoadedException("vkCmdFillBuffer");
		Functions.vkCmdFillBuffer(Handle, dstBuffer, dstOffset, size, data);
	}

	/// <summary>vkCmdClearColorImage</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void ClearColorImage(Vk.Handle<Vk.Image> image, Vk.ImageLayout imageLayout, Vk.ClearColorValue* pColor, uint rangeCount, Vk.ImageSubresourceRange* pRanges)
	{
		if (Functions.vkCmdClearColorImage == null) throw new Vk.Extras.FunctionNotLoadedException("vkCmdClearColorImage");
		Functions.vkCmdClearColorImage(Handle, image, imageLayout, pColor, rangeCount, pRanges);
	}

	/// <summary>vkCmdClearColorImage</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void ClearColorImage(Vk.Handle<Vk.Image> image, Vk.ImageLayout imageLayout, in Vk.ClearColorValue color, in ReadOnlySpan<Vk.ImageSubresourceRange> ranges)
	{
		if (Functions.vkCmdClearColorImage == null) throw new Vk.Extras.FunctionNotLoadedException("vkCmdClearColorImage");
		Functions.CmdClearColorImage(Handle, image, imageLayout, color, ranges);
	}

	/// <summary>vkCmdClearDepthStencilImage</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void ClearDepthStencilImage(Vk.Handle<Vk.Image> image, Vk.ImageLayout imageLayout, Vk.ClearDepthStencilValue* pDepthStencil, uint rangeCount, Vk.ImageSubresourceRange* pRanges)
	{
		if (Functions.vkCmdClearDepthStencilImage == null) throw new Vk.Extras.FunctionNotLoadedException("vkCmdClearDepthStencilImage");
		Functions.vkCmdClearDepthStencilImage(Handle, image, imageLayout, pDepthStencil, rangeCount, pRanges);
	}

	/// <summary>vkCmdClearDepthStencilImage</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void ClearDepthStencilImage(Vk.Handle<Vk.Image> image, Vk.ImageLayout imageLayout, in Vk.ClearDepthStencilValue depthStencil, in ReadOnlySpan<Vk.ImageSubresourceRange> ranges)
	{
		if (Functions.vkCmdClearDepthStencilImage == null) throw new Vk.Extras.FunctionNotLoadedException("vkCmdClearDepthStencilImage");
		Functions.CmdClearDepthStencilImage(Handle, image, imageLayout, depthStencil, ranges);
	}

	/// <summary>vkCmdClearAttachments</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void ClearAttachments(uint attachmentCount, Vk.ClearAttachment* pAttachments, uint rectCount, Vk.ClearRect* pRects)
	{
		if (Functions.vkCmdClearAttachments == null) throw new Vk.Extras.FunctionNotLoadedException("vkCmdClearAttachments");
		Functions.vkCmdClearAttachments(Handle, attachmentCount, pAttachments, rectCount, pRects);
	}

	/// <summary>vkCmdClearAttachments</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void ClearAttachments(in ReadOnlySpan<Vk.ClearAttachment> attachments, in ReadOnlySpan<Vk.ClearRect> rects)
	{
		if (Functions.vkCmdClearAttachments == null) throw new Vk.Extras.FunctionNotLoadedException("vkCmdClearAttachments");
		Functions.CmdClearAttachments(Handle, attachments, rects);
	}

	/// <summary>vkCmdResolveImage</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void ResolveImage(Vk.Handle<Vk.Image> srcImage, Vk.ImageLayout srcImageLayout, Vk.Handle<Vk.Image> dstImage, Vk.ImageLayout dstImageLayout, uint regionCount, Vk.ImageResolve* pRegions)
	{
		if (Functions.vkCmdResolveImage == null) throw new Vk.Extras.FunctionNotLoadedException("vkCmdResolveImage");
		Functions.vkCmdResolveImage(Handle, srcImage, srcImageLayout, dstImage, dstImageLayout, regionCount, pRegions);
	}

	/// <summary>vkCmdResolveImage</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void ResolveImage(Vk.Handle<Vk.Image> srcImage, Vk.ImageLayout srcImageLayout, Vk.Handle<Vk.Image> dstImage, Vk.ImageLayout dstImageLayout, in ReadOnlySpan<Vk.ImageResolve> regions)
	{
		if (Functions.vkCmdResolveImage == null) throw new Vk.Extras.FunctionNotLoadedException("vkCmdResolveImage");
		Functions.CmdResolveImage(Handle, srcImage, srcImageLayout, dstImage, dstImageLayout, regions);
	}

	/// <summary>vkCmdSetEvent</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void SetEvent(Vk.Handle<Vk.Event> @event, Vk.PipelineStageFlags stageMask)
	{
		if (Functions.vkCmdSetEvent == null) throw new Vk.Extras.FunctionNotLoadedException("vkCmdSetEvent");
		Functions.vkCmdSetEvent(Handle, @event, stageMask);
	}

	/// <summary>vkCmdResetEvent</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void ResetEvent(Vk.Handle<Vk.Event> @event, Vk.PipelineStageFlags stageMask)
	{
		if (Functions.vkCmdResetEvent == null) throw new Vk.Extras.FunctionNotLoadedException("vkCmdResetEvent");
		Functions.vkCmdResetEvent(Handle, @event, stageMask);
	}

	/// <summary>vkCmdWaitEvents</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void WaitEvents(uint eventCount, Vk.Handle<Vk.Event>* pEvents, Vk.PipelineStageFlags srcStageMask, Vk.PipelineStageFlags dstStageMask, uint memoryBarrierCount, Vk.MemoryBarrier* pMemoryBarriers, uint bufferMemoryBarrierCount, Vk.BufferMemoryBarrier* pBufferMemoryBarriers, uint imageMemoryBarrierCount, Vk.ImageMemoryBarrier* pImageMemoryBarriers)
	{
		if (Functions.vkCmdWaitEvents == null) throw new Vk.Extras.FunctionNotLoadedException("vkCmdWaitEvents");
		Functions.vkCmdWaitEvents(Handle, eventCount, pEvents, srcStageMask, dstStageMask, memoryBarrierCount, pMemoryBarriers, bufferMemoryBarrierCount, pBufferMemoryBarriers, imageMemoryBarrierCount, pImageMemoryBarriers);
	}

	/// <summary>vkCmdWaitEvents</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void WaitEvents(in ReadOnlySpan<Vk.Handle<Vk.Event>> events, Vk.PipelineStageFlags srcStageMask, Vk.PipelineStageFlags dstStageMask, in ReadOnlySpan<Vk.MemoryBarrier> memoryBarriers, in ReadOnlySpan<Vk.BufferMemoryBarrier> bufferMemoryBarriers, in ReadOnlySpan<Vk.ImageMemoryBarrier> imageMemoryBarriers)
	{
		if (Functions.vkCmdWaitEvents == null) throw new Vk.Extras.FunctionNotLoadedException("vkCmdWaitEvents");
		Functions.CmdWaitEvents(Handle, events, srcStageMask, dstStageMask, memoryBarriers, bufferMemoryBarriers, imageMemoryBarriers);
	}

	/// <summary>vkCmdPipelineBarrier</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void PipelineBarrier(Vk.PipelineStageFlags srcStageMask, Vk.PipelineStageFlags dstStageMask, Vk.DependencyFlags dependencyFlags, uint memoryBarrierCount, Vk.MemoryBarrier* pMemoryBarriers, uint bufferMemoryBarrierCount, Vk.BufferMemoryBarrier* pBufferMemoryBarriers, uint imageMemoryBarrierCount, Vk.ImageMemoryBarrier* pImageMemoryBarriers)
	{
		if (Functions.vkCmdPipelineBarrier == null) throw new Vk.Extras.FunctionNotLoadedException("vkCmdPipelineBarrier");
		Functions.vkCmdPipelineBarrier(Handle, srcStageMask, dstStageMask, dependencyFlags, memoryBarrierCount, pMemoryBarriers, bufferMemoryBarrierCount, pBufferMemoryBarriers, imageMemoryBarrierCount, pImageMemoryBarriers);
	}

	/// <summary>vkCmdPipelineBarrier</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void PipelineBarrier(Vk.PipelineStageFlags srcStageMask, Vk.PipelineStageFlags dstStageMask, Vk.DependencyFlags dependencyFlags, in ReadOnlySpan<Vk.MemoryBarrier> memoryBarriers, in ReadOnlySpan<Vk.BufferMemoryBarrier> bufferMemoryBarriers, in ReadOnlySpan<Vk.ImageMemoryBarrier> imageMemoryBarriers)
	{
		if (Functions.vkCmdPipelineBarrier == null) throw new Vk.Extras.FunctionNotLoadedException("vkCmdPipelineBarrier");
		Functions.CmdPipelineBarrier(Handle, srcStageMask, dstStageMask, dependencyFlags, memoryBarriers, bufferMemoryBarriers, imageMemoryBarriers);
	}

	/// <summary>vkCmdBeginQuery</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void BeginQuery(Vk.Handle<Vk.QueryPool> queryPool, uint query, Vk.QueryControlFlags flags)
	{
		if (Functions.vkCmdBeginQuery == null) throw new Vk.Extras.FunctionNotLoadedException("vkCmdBeginQuery");
		Functions.vkCmdBeginQuery(Handle, queryPool, query, flags);
	}

	/// <summary>vkCmdEndQuery</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void EndQuery(Vk.Handle<Vk.QueryPool> queryPool, uint query)
	{
		if (Functions.vkCmdEndQuery == null) throw new Vk.Extras.FunctionNotLoadedException("vkCmdEndQuery");
		Functions.vkCmdEndQuery(Handle, queryPool, query);
	}

	/// <summary>vkCmdBeginConditionalRenderingEXT</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void BeginConditionalRenderingEXT(Vk.EXT.ConditionalRenderingBeginInfo* pConditionalRenderingBegin)
	{
		if (Functions.vkCmdBeginConditionalRenderingEXT == null) throw new Vk.Extras.FunctionNotLoadedException("vkCmdBeginConditionalRenderingEXT");
		Functions.vkCmdBeginConditionalRenderingEXT(Handle, pConditionalRenderingBegin);
	}

	/// <summary>vkCmdBeginConditionalRenderingEXT</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void BeginConditionalRenderingEXT(in Vk.EXT.ConditionalRenderingBeginInfo conditionalRenderingBegin)
	{
		if (Functions.vkCmdBeginConditionalRenderingEXT == null) throw new Vk.Extras.FunctionNotLoadedException("vkCmdBeginConditionalRenderingEXT");
		Functions.CmdBeginConditionalRenderingEXT(Handle, conditionalRenderingBegin);
	}

	/// <summary>vkCmdEndConditionalRenderingEXT</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void EndConditionalRenderingEXT()
	{
		if (Functions.vkCmdEndConditionalRenderingEXT == null) throw new Vk.Extras.FunctionNotLoadedException("vkCmdEndConditionalRenderingEXT");
		Functions.vkCmdEndConditionalRenderingEXT(Handle);
	}

	/// <summary>vkCmdResetQueryPool</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void ResetQueryPool(Vk.Handle<Vk.QueryPool> queryPool, uint firstQuery, uint queryCount)
	{
		if (Functions.vkCmdResetQueryPool == null) throw new Vk.Extras.FunctionNotLoadedException("vkCmdResetQueryPool");
		Functions.vkCmdResetQueryPool(Handle, queryPool, firstQuery, queryCount);
	}

	/// <summary>vkCmdWriteTimestamp</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void WriteTimestamp(Vk.PipelineStageFlags pipelineStage, Vk.Handle<Vk.QueryPool> queryPool, uint query)
	{
		if (Functions.vkCmdWriteTimestamp == null) throw new Vk.Extras.FunctionNotLoadedException("vkCmdWriteTimestamp");
		Functions.vkCmdWriteTimestamp(Handle, pipelineStage, queryPool, query);
	}

	/// <summary>vkCmdCopyQueryPoolResults</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void CopyQueryPoolResults(Vk.Handle<Vk.QueryPool> queryPool, uint firstQuery, uint queryCount, Vk.Handle<Vk.Buffer> dstBuffer, Vk.DeviceSize dstOffset, Vk.DeviceSize stride, Vk.QueryResultFlags flags)
	{
		if (Functions.vkCmdCopyQueryPoolResults == null) throw new Vk.Extras.FunctionNotLoadedException("vkCmdCopyQueryPoolResults");
		Functions.vkCmdCopyQueryPoolResults(Handle, queryPool, firstQuery, queryCount, dstBuffer, dstOffset, stride, flags);
	}

	/// <summary>vkCmdPushConstants</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void PushConstants(Vk.Handle<Vk.PipelineLayout> layout, Vk.ShaderStageFlags stageFlags, uint offset, uint size, void* pValues)
	{
		if (Functions.vkCmdPushConstants == null) throw new Vk.Extras.FunctionNotLoadedException("vkCmdPushConstants");
		Functions.vkCmdPushConstants(Handle, layout, stageFlags, offset, size, pValues);
	}

	/// <summary>vkCmdBeginRenderPass</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void BeginRenderPass(Vk.RenderPassBeginInfo* pRenderPassBegin, Vk.SubpassContents contents)
	{
		if (Functions.vkCmdBeginRenderPass == null) throw new Vk.Extras.FunctionNotLoadedException("vkCmdBeginRenderPass");
		Functions.vkCmdBeginRenderPass(Handle, pRenderPassBegin, contents);
	}

	/// <summary>vkCmdBeginRenderPass</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void BeginRenderPass(in Vk.RenderPassBeginInfo renderPassBegin, Vk.SubpassContents contents)
	{
		if (Functions.vkCmdBeginRenderPass == null) throw new Vk.Extras.FunctionNotLoadedException("vkCmdBeginRenderPass");
		Functions.CmdBeginRenderPass(Handle, renderPassBegin, contents);
	}

	/// <summary>vkCmdNextSubpass</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void NextSubpass(Vk.SubpassContents contents)
	{
		if (Functions.vkCmdNextSubpass == null) throw new Vk.Extras.FunctionNotLoadedException("vkCmdNextSubpass");
		Functions.vkCmdNextSubpass(Handle, contents);
	}

	/// <summary>vkCmdEndRenderPass</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void EndRenderPass()
	{
		if (Functions.vkCmdEndRenderPass == null) throw new Vk.Extras.FunctionNotLoadedException("vkCmdEndRenderPass");
		Functions.vkCmdEndRenderPass(Handle);
	}

	/// <summary>vkCmdExecuteCommands</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void ExecuteCommands(uint commandBufferCount, Vk.Handle<Vk.CommandBuffer>* pCommandBuffers)
	{
		if (Functions.vkCmdExecuteCommands == null) throw new Vk.Extras.FunctionNotLoadedException("vkCmdExecuteCommands");
		Functions.vkCmdExecuteCommands(Handle, commandBufferCount, pCommandBuffers);
	}

	/// <summary>vkCmdExecuteCommands</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void ExecuteCommands(in ReadOnlySpan<Vk.Handle<Vk.CommandBuffer>> commandBuffers)
	{
		if (Functions.vkCmdExecuteCommands == null) throw new Vk.Extras.FunctionNotLoadedException("vkCmdExecuteCommands");
		Functions.CmdExecuteCommands(Handle, commandBuffers);
	}

	/// <summary>vkCmdDebugMarkerBeginEXT</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void DebugMarkerBeginEXT(Vk.EXT.DebugMarkerMarkerInfo* pMarkerInfo)
	{
		if (Functions.vkCmdDebugMarkerBeginEXT == null) throw new Vk.Extras.FunctionNotLoadedException("vkCmdDebugMarkerBeginEXT");
		Functions.vkCmdDebugMarkerBeginEXT(Handle, pMarkerInfo);
	}

	/// <summary>vkCmdDebugMarkerBeginEXT</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void DebugMarkerBeginEXT(in Vk.EXT.DebugMarkerMarkerInfo markerInfo)
	{
		if (Functions.vkCmdDebugMarkerBeginEXT == null) throw new Vk.Extras.FunctionNotLoadedException("vkCmdDebugMarkerBeginEXT");
		Functions.CmdDebugMarkerBeginEXT(Handle, markerInfo);
	}

	/// <summary>vkCmdDebugMarkerEndEXT</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void DebugMarkerEndEXT()
	{
		if (Functions.vkCmdDebugMarkerEndEXT == null) throw new Vk.Extras.FunctionNotLoadedException("vkCmdDebugMarkerEndEXT");
		Functions.vkCmdDebugMarkerEndEXT(Handle);
	}

	/// <summary>vkCmdDebugMarkerInsertEXT</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void DebugMarkerInsertEXT(Vk.EXT.DebugMarkerMarkerInfo* pMarkerInfo)
	{
		if (Functions.vkCmdDebugMarkerInsertEXT == null) throw new Vk.Extras.FunctionNotLoadedException("vkCmdDebugMarkerInsertEXT");
		Functions.vkCmdDebugMarkerInsertEXT(Handle, pMarkerInfo);
	}

	/// <summary>vkCmdDebugMarkerInsertEXT</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void DebugMarkerInsertEXT(in Vk.EXT.DebugMarkerMarkerInfo markerInfo)
	{
		if (Functions.vkCmdDebugMarkerInsertEXT == null) throw new Vk.Extras.FunctionNotLoadedException("vkCmdDebugMarkerInsertEXT");
		Functions.CmdDebugMarkerInsertEXT(Handle, markerInfo);
	}

	/// <summary>vkCmdExecuteGeneratedCommandsNV</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void ExecuteGeneratedCommandsNV(Vk.Bool32 isPreprocessed, Vk.NV.GeneratedCommandsInfo* pGeneratedCommandsInfo)
	{
		if (Functions.vkCmdExecuteGeneratedCommandsNV == null) throw new Vk.Extras.FunctionNotLoadedException("vkCmdExecuteGeneratedCommandsNV");
		Functions.vkCmdExecuteGeneratedCommandsNV(Handle, isPreprocessed, pGeneratedCommandsInfo);
	}

	/// <summary>vkCmdExecuteGeneratedCommandsNV</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void ExecuteGeneratedCommandsNV(Vk.Bool32 isPreprocessed, in Vk.NV.GeneratedCommandsInfo generatedCommandsInfo)
	{
		if (Functions.vkCmdExecuteGeneratedCommandsNV == null) throw new Vk.Extras.FunctionNotLoadedException("vkCmdExecuteGeneratedCommandsNV");
		Functions.CmdExecuteGeneratedCommandsNV(Handle, isPreprocessed, generatedCommandsInfo);
	}

	/// <summary>vkCmdPreprocessGeneratedCommandsNV</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void PreprocessGeneratedCommandsNV(Vk.NV.GeneratedCommandsInfo* pGeneratedCommandsInfo)
	{
		if (Functions.vkCmdPreprocessGeneratedCommandsNV == null) throw new Vk.Extras.FunctionNotLoadedException("vkCmdPreprocessGeneratedCommandsNV");
		Functions.vkCmdPreprocessGeneratedCommandsNV(Handle, pGeneratedCommandsInfo);
	}

	/// <summary>vkCmdPreprocessGeneratedCommandsNV</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void PreprocessGeneratedCommandsNV(in Vk.NV.GeneratedCommandsInfo generatedCommandsInfo)
	{
		if (Functions.vkCmdPreprocessGeneratedCommandsNV == null) throw new Vk.Extras.FunctionNotLoadedException("vkCmdPreprocessGeneratedCommandsNV");
		Functions.CmdPreprocessGeneratedCommandsNV(Handle, generatedCommandsInfo);
	}

	/// <summary>vkCmdBindPipelineShaderGroupNV</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void BindPipelineShaderGroupNV(Vk.PipelineBindPoint pipelineBindPoint, Vk.Handle<Vk.Pipeline> pipeline, uint groupIndex)
	{
		if (Functions.vkCmdBindPipelineShaderGroupNV == null) throw new Vk.Extras.FunctionNotLoadedException("vkCmdBindPipelineShaderGroupNV");
		Functions.vkCmdBindPipelineShaderGroupNV(Handle, pipelineBindPoint, pipeline, groupIndex);
	}

	/// <summary>vkCmdPushDescriptorSetKHR</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void PushDescriptorSetKHR(Vk.PipelineBindPoint pipelineBindPoint, Vk.Handle<Vk.PipelineLayout> layout, uint set, uint descriptorWriteCount, Vk.WriteDescriptorSet* pDescriptorWrites)
	{
		if (Functions.vkCmdPushDescriptorSetKHR == null) throw new Vk.Extras.FunctionNotLoadedException("vkCmdPushDescriptorSetKHR");
		Functions.vkCmdPushDescriptorSetKHR(Handle, pipelineBindPoint, layout, set, descriptorWriteCount, pDescriptorWrites);
	}

	/// <summary>vkCmdPushDescriptorSetKHR</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void PushDescriptorSetKHR(Vk.PipelineBindPoint pipelineBindPoint, Vk.Handle<Vk.PipelineLayout> layout, uint set, in ReadOnlySpan<Vk.WriteDescriptorSet> descriptorWrites)
	{
		if (Functions.vkCmdPushDescriptorSetKHR == null) throw new Vk.Extras.FunctionNotLoadedException("vkCmdPushDescriptorSetKHR");
		Functions.CmdPushDescriptorSetKHR(Handle, pipelineBindPoint, layout, set, descriptorWrites);
	}

	/// <summary>vkCmdSetDeviceMask</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void SetDeviceMask(uint deviceMask)
	{
		if (Functions.vkCmdSetDeviceMask == null) throw new Vk.Extras.FunctionNotLoadedException("vkCmdSetDeviceMask");
		Functions.vkCmdSetDeviceMask(Handle, deviceMask);
	}

	/// <summary>vkCmdSetDeviceMaskKHR</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void SetDeviceMaskKHR(uint deviceMask)
	{
		if (Functions.vkCmdSetDeviceMaskKHR == null) throw new Vk.Extras.FunctionNotLoadedException("vkCmdSetDeviceMaskKHR");
		Functions.vkCmdSetDeviceMaskKHR(Handle, deviceMask);
	}

	/// <summary>vkCmdDispatchBase</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void DispatchBase(uint baseGroupX, uint baseGroupY, uint baseGroupZ, uint groupCountX, uint groupCountY, uint groupCountZ)
	{
		if (Functions.vkCmdDispatchBase == null) throw new Vk.Extras.FunctionNotLoadedException("vkCmdDispatchBase");
		Functions.vkCmdDispatchBase(Handle, baseGroupX, baseGroupY, baseGroupZ, groupCountX, groupCountY, groupCountZ);
	}

	/// <summary>vkCmdDispatchBaseKHR</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void DispatchBaseKHR(uint baseGroupX, uint baseGroupY, uint baseGroupZ, uint groupCountX, uint groupCountY, uint groupCountZ)
	{
		if (Functions.vkCmdDispatchBaseKHR == null) throw new Vk.Extras.FunctionNotLoadedException("vkCmdDispatchBaseKHR");
		Functions.vkCmdDispatchBaseKHR(Handle, baseGroupX, baseGroupY, baseGroupZ, groupCountX, groupCountY, groupCountZ);
	}

	/// <summary>vkCmdPushDescriptorSetWithTemplateKHR</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void PushDescriptorSetWithTemplateKHR(Vk.Handle<Vk.DescriptorUpdateTemplate> descriptorUpdateTemplate, Vk.Handle<Vk.PipelineLayout> layout, uint set, void* pData)
	{
		if (Functions.vkCmdPushDescriptorSetWithTemplateKHR == null) throw new Vk.Extras.FunctionNotLoadedException("vkCmdPushDescriptorSetWithTemplateKHR");
		Functions.vkCmdPushDescriptorSetWithTemplateKHR(Handle, descriptorUpdateTemplate, layout, set, pData);
	}

	/// <summary>vkCmdSetViewportWScalingNV</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void SetViewportWScalingNV(uint firstViewport, uint viewportCount, Vk.NV.ViewportWScaling* pViewportWScalings)
	{
		if (Functions.vkCmdSetViewportWScalingNV == null) throw new Vk.Extras.FunctionNotLoadedException("vkCmdSetViewportWScalingNV");
		Functions.vkCmdSetViewportWScalingNV(Handle, firstViewport, viewportCount, pViewportWScalings);
	}

	/// <summary>vkCmdSetViewportWScalingNV</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void SetViewportWScalingNV(uint firstViewport, in ReadOnlySpan<Vk.NV.ViewportWScaling> viewportWScalings)
	{
		if (Functions.vkCmdSetViewportWScalingNV == null) throw new Vk.Extras.FunctionNotLoadedException("vkCmdSetViewportWScalingNV");
		Functions.CmdSetViewportWScalingNV(Handle, firstViewport, viewportWScalings);
	}

	/// <summary>vkCmdSetDiscardRectangleEXT</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void SetDiscardRectangleEXT(uint firstDiscardRectangle, uint discardRectangleCount, Vk.Rect2D* pDiscardRectangles)
	{
		if (Functions.vkCmdSetDiscardRectangleEXT == null) throw new Vk.Extras.FunctionNotLoadedException("vkCmdSetDiscardRectangleEXT");
		Functions.vkCmdSetDiscardRectangleEXT(Handle, firstDiscardRectangle, discardRectangleCount, pDiscardRectangles);
	}

	/// <summary>vkCmdSetDiscardRectangleEXT</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void SetDiscardRectangleEXT(uint firstDiscardRectangle, in ReadOnlySpan<Vk.Rect2D> discardRectangles)
	{
		if (Functions.vkCmdSetDiscardRectangleEXT == null) throw new Vk.Extras.FunctionNotLoadedException("vkCmdSetDiscardRectangleEXT");
		Functions.CmdSetDiscardRectangleEXT(Handle, firstDiscardRectangle, discardRectangles);
	}

	/// <summary>vkCmdSetSampleLocationsEXT</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void SetSampleLocationsEXT(Vk.EXT.SampleLocationsInfo* pSampleLocationsInfo)
	{
		if (Functions.vkCmdSetSampleLocationsEXT == null) throw new Vk.Extras.FunctionNotLoadedException("vkCmdSetSampleLocationsEXT");
		Functions.vkCmdSetSampleLocationsEXT(Handle, pSampleLocationsInfo);
	}

	/// <summary>vkCmdSetSampleLocationsEXT</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void SetSampleLocationsEXT(in Vk.EXT.SampleLocationsInfo sampleLocationsInfo)
	{
		if (Functions.vkCmdSetSampleLocationsEXT == null) throw new Vk.Extras.FunctionNotLoadedException("vkCmdSetSampleLocationsEXT");
		Functions.CmdSetSampleLocationsEXT(Handle, sampleLocationsInfo);
	}

	/// <summary>vkCmdBeginDebugUtilsLabelEXT</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void BeginDebugUtilsLabelEXT(Vk.EXT.DebugUtilsLabel* pLabelInfo)
	{
		if (Functions.vkCmdBeginDebugUtilsLabelEXT == null) throw new Vk.Extras.FunctionNotLoadedException("vkCmdBeginDebugUtilsLabelEXT");
		Functions.vkCmdBeginDebugUtilsLabelEXT(Handle, pLabelInfo);
	}

	/// <summary>vkCmdBeginDebugUtilsLabelEXT</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void BeginDebugUtilsLabelEXT(in Vk.EXT.DebugUtilsLabel labelInfo)
	{
		if (Functions.vkCmdBeginDebugUtilsLabelEXT == null) throw new Vk.Extras.FunctionNotLoadedException("vkCmdBeginDebugUtilsLabelEXT");
		Functions.CmdBeginDebugUtilsLabelEXT(Handle, labelInfo);
	}

	/// <summary>vkCmdEndDebugUtilsLabelEXT</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void EndDebugUtilsLabelEXT()
	{
		if (Functions.vkCmdEndDebugUtilsLabelEXT == null) throw new Vk.Extras.FunctionNotLoadedException("vkCmdEndDebugUtilsLabelEXT");
		Functions.vkCmdEndDebugUtilsLabelEXT(Handle);
	}

	/// <summary>vkCmdInsertDebugUtilsLabelEXT</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void InsertDebugUtilsLabelEXT(Vk.EXT.DebugUtilsLabel* pLabelInfo)
	{
		if (Functions.vkCmdInsertDebugUtilsLabelEXT == null) throw new Vk.Extras.FunctionNotLoadedException("vkCmdInsertDebugUtilsLabelEXT");
		Functions.vkCmdInsertDebugUtilsLabelEXT(Handle, pLabelInfo);
	}

	/// <summary>vkCmdInsertDebugUtilsLabelEXT</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void InsertDebugUtilsLabelEXT(in Vk.EXT.DebugUtilsLabel labelInfo)
	{
		if (Functions.vkCmdInsertDebugUtilsLabelEXT == null) throw new Vk.Extras.FunctionNotLoadedException("vkCmdInsertDebugUtilsLabelEXT");
		Functions.CmdInsertDebugUtilsLabelEXT(Handle, labelInfo);
	}

	/// <summary>vkCmdWriteBufferMarkerAMD</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void WriteBufferMarkerAMD(Vk.PipelineStageFlags pipelineStage, Vk.Handle<Vk.Buffer> dstBuffer, Vk.DeviceSize dstOffset, uint marker)
	{
		if (Functions.vkCmdWriteBufferMarkerAMD == null) throw new Vk.Extras.FunctionNotLoadedException("vkCmdWriteBufferMarkerAMD");
		Functions.vkCmdWriteBufferMarkerAMD(Handle, pipelineStage, dstBuffer, dstOffset, marker);
	}

	/// <summary>vkCmdBeginRenderPass2</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void BeginRenderPass2(Vk.RenderPassBeginInfo* pRenderPassBegin, Vk.SubpassBeginInfo* pSubpassBeginInfo)
	{
		if (Functions.vkCmdBeginRenderPass2 == null) throw new Vk.Extras.FunctionNotLoadedException("vkCmdBeginRenderPass2");
		Functions.vkCmdBeginRenderPass2(Handle, pRenderPassBegin, pSubpassBeginInfo);
	}

	/// <summary>vkCmdBeginRenderPass2</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void BeginRenderPass2(in Vk.RenderPassBeginInfo renderPassBegin, in Vk.SubpassBeginInfo subpassBeginInfo)
	{
		if (Functions.vkCmdBeginRenderPass2 == null) throw new Vk.Extras.FunctionNotLoadedException("vkCmdBeginRenderPass2");
		Functions.CmdBeginRenderPass2(Handle, renderPassBegin, subpassBeginInfo);
	}

	/// <summary>vkCmdBeginRenderPass2KHR</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void BeginRenderPass2KHR(Vk.RenderPassBeginInfo* pRenderPassBegin, Vk.SubpassBeginInfo* pSubpassBeginInfo)
	{
		if (Functions.vkCmdBeginRenderPass2KHR == null) throw new Vk.Extras.FunctionNotLoadedException("vkCmdBeginRenderPass2KHR");
		Functions.vkCmdBeginRenderPass2KHR(Handle, pRenderPassBegin, pSubpassBeginInfo);
	}

	/// <summary>vkCmdBeginRenderPass2KHR</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void BeginRenderPass2KHR(in Vk.RenderPassBeginInfo renderPassBegin, in Vk.SubpassBeginInfo subpassBeginInfo)
	{
		if (Functions.vkCmdBeginRenderPass2KHR == null) throw new Vk.Extras.FunctionNotLoadedException("vkCmdBeginRenderPass2KHR");
		Functions.CmdBeginRenderPass2KHR(Handle, renderPassBegin, subpassBeginInfo);
	}

	/// <summary>vkCmdNextSubpass2</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void NextSubpass2(Vk.SubpassBeginInfo* pSubpassBeginInfo, Vk.SubpassEndInfo* pSubpassEndInfo)
	{
		if (Functions.vkCmdNextSubpass2 == null) throw new Vk.Extras.FunctionNotLoadedException("vkCmdNextSubpass2");
		Functions.vkCmdNextSubpass2(Handle, pSubpassBeginInfo, pSubpassEndInfo);
	}

	/// <summary>vkCmdNextSubpass2</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void NextSubpass2(in Vk.SubpassBeginInfo subpassBeginInfo, in Vk.SubpassEndInfo subpassEndInfo)
	{
		if (Functions.vkCmdNextSubpass2 == null) throw new Vk.Extras.FunctionNotLoadedException("vkCmdNextSubpass2");
		Functions.CmdNextSubpass2(Handle, subpassBeginInfo, subpassEndInfo);
	}

	/// <summary>vkCmdNextSubpass2KHR</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void NextSubpass2KHR(Vk.SubpassBeginInfo* pSubpassBeginInfo, Vk.SubpassEndInfo* pSubpassEndInfo)
	{
		if (Functions.vkCmdNextSubpass2KHR == null) throw new Vk.Extras.FunctionNotLoadedException("vkCmdNextSubpass2KHR");
		Functions.vkCmdNextSubpass2KHR(Handle, pSubpassBeginInfo, pSubpassEndInfo);
	}

	/// <summary>vkCmdNextSubpass2KHR</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void NextSubpass2KHR(in Vk.SubpassBeginInfo subpassBeginInfo, in Vk.SubpassEndInfo subpassEndInfo)
	{
		if (Functions.vkCmdNextSubpass2KHR == null) throw new Vk.Extras.FunctionNotLoadedException("vkCmdNextSubpass2KHR");
		Functions.CmdNextSubpass2KHR(Handle, subpassBeginInfo, subpassEndInfo);
	}

	/// <summary>vkCmdEndRenderPass2</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void EndRenderPass2(Vk.SubpassEndInfo* pSubpassEndInfo)
	{
		if (Functions.vkCmdEndRenderPass2 == null) throw new Vk.Extras.FunctionNotLoadedException("vkCmdEndRenderPass2");
		Functions.vkCmdEndRenderPass2(Handle, pSubpassEndInfo);
	}

	/// <summary>vkCmdEndRenderPass2</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void EndRenderPass2(in Vk.SubpassEndInfo subpassEndInfo)
	{
		if (Functions.vkCmdEndRenderPass2 == null) throw new Vk.Extras.FunctionNotLoadedException("vkCmdEndRenderPass2");
		Functions.CmdEndRenderPass2(Handle, subpassEndInfo);
	}

	/// <summary>vkCmdEndRenderPass2KHR</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void EndRenderPass2KHR(Vk.SubpassEndInfo* pSubpassEndInfo)
	{
		if (Functions.vkCmdEndRenderPass2KHR == null) throw new Vk.Extras.FunctionNotLoadedException("vkCmdEndRenderPass2KHR");
		Functions.vkCmdEndRenderPass2KHR(Handle, pSubpassEndInfo);
	}

	/// <summary>vkCmdEndRenderPass2KHR</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void EndRenderPass2KHR(in Vk.SubpassEndInfo subpassEndInfo)
	{
		if (Functions.vkCmdEndRenderPass2KHR == null) throw new Vk.Extras.FunctionNotLoadedException("vkCmdEndRenderPass2KHR");
		Functions.CmdEndRenderPass2KHR(Handle, subpassEndInfo);
	}

	/// <summary>vkCmdDrawIndirectCount</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void DrawIndirectCount(Vk.Handle<Vk.Buffer> buffer, Vk.DeviceSize offset, Vk.Handle<Vk.Buffer> countBuffer, Vk.DeviceSize countBufferOffset, uint maxDrawCount, uint stride)
	{
		if (Functions.vkCmdDrawIndirectCount == null) throw new Vk.Extras.FunctionNotLoadedException("vkCmdDrawIndirectCount");
		Functions.vkCmdDrawIndirectCount(Handle, buffer, offset, countBuffer, countBufferOffset, maxDrawCount, stride);
	}

	/// <summary>vkCmdDrawIndirectCountKHR</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void DrawIndirectCountKHR(Vk.Handle<Vk.Buffer> buffer, Vk.DeviceSize offset, Vk.Handle<Vk.Buffer> countBuffer, Vk.DeviceSize countBufferOffset, uint maxDrawCount, uint stride)
	{
		if (Functions.vkCmdDrawIndirectCountKHR == null) throw new Vk.Extras.FunctionNotLoadedException("vkCmdDrawIndirectCountKHR");
		Functions.vkCmdDrawIndirectCountKHR(Handle, buffer, offset, countBuffer, countBufferOffset, maxDrawCount, stride);
	}

	/// <summary>vkCmdDrawIndirectCountAMD</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void DrawIndirectCountAMD(Vk.Handle<Vk.Buffer> buffer, Vk.DeviceSize offset, Vk.Handle<Vk.Buffer> countBuffer, Vk.DeviceSize countBufferOffset, uint maxDrawCount, uint stride)
	{
		if (Functions.vkCmdDrawIndirectCountAMD == null) throw new Vk.Extras.FunctionNotLoadedException("vkCmdDrawIndirectCountAMD");
		Functions.vkCmdDrawIndirectCountAMD(Handle, buffer, offset, countBuffer, countBufferOffset, maxDrawCount, stride);
	}

	/// <summary>vkCmdDrawIndexedIndirectCount</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void DrawIndexedIndirectCount(Vk.Handle<Vk.Buffer> buffer, Vk.DeviceSize offset, Vk.Handle<Vk.Buffer> countBuffer, Vk.DeviceSize countBufferOffset, uint maxDrawCount, uint stride)
	{
		if (Functions.vkCmdDrawIndexedIndirectCount == null) throw new Vk.Extras.FunctionNotLoadedException("vkCmdDrawIndexedIndirectCount");
		Functions.vkCmdDrawIndexedIndirectCount(Handle, buffer, offset, countBuffer, countBufferOffset, maxDrawCount, stride);
	}

	/// <summary>vkCmdDrawIndexedIndirectCountKHR</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void DrawIndexedIndirectCountKHR(Vk.Handle<Vk.Buffer> buffer, Vk.DeviceSize offset, Vk.Handle<Vk.Buffer> countBuffer, Vk.DeviceSize countBufferOffset, uint maxDrawCount, uint stride)
	{
		if (Functions.vkCmdDrawIndexedIndirectCountKHR == null) throw new Vk.Extras.FunctionNotLoadedException("vkCmdDrawIndexedIndirectCountKHR");
		Functions.vkCmdDrawIndexedIndirectCountKHR(Handle, buffer, offset, countBuffer, countBufferOffset, maxDrawCount, stride);
	}

	/// <summary>vkCmdDrawIndexedIndirectCountAMD</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void DrawIndexedIndirectCountAMD(Vk.Handle<Vk.Buffer> buffer, Vk.DeviceSize offset, Vk.Handle<Vk.Buffer> countBuffer, Vk.DeviceSize countBufferOffset, uint maxDrawCount, uint stride)
	{
		if (Functions.vkCmdDrawIndexedIndirectCountAMD == null) throw new Vk.Extras.FunctionNotLoadedException("vkCmdDrawIndexedIndirectCountAMD");
		Functions.vkCmdDrawIndexedIndirectCountAMD(Handle, buffer, offset, countBuffer, countBufferOffset, maxDrawCount, stride);
	}

	/// <summary>vkCmdSetCheckpointNV</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void SetCheckpointNV(void* pCheckpointMarker)
	{
		if (Functions.vkCmdSetCheckpointNV == null) throw new Vk.Extras.FunctionNotLoadedException("vkCmdSetCheckpointNV");
		Functions.vkCmdSetCheckpointNV(Handle, pCheckpointMarker);
	}

	/// <summary>vkCmdBindTransformFeedbackBuffersEXT</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void BindTransformFeedbackBuffersEXT(uint firstBinding, uint bindingCount, Vk.Handle<Vk.Buffer>* pBuffers, Vk.DeviceSize* pOffsets, Vk.DeviceSize* pSizes)
	{
		if (Functions.vkCmdBindTransformFeedbackBuffersEXT == null) throw new Vk.Extras.FunctionNotLoadedException("vkCmdBindTransformFeedbackBuffersEXT");
		Functions.vkCmdBindTransformFeedbackBuffersEXT(Handle, firstBinding, bindingCount, pBuffers, pOffsets, pSizes);
	}

	/// <summary>vkCmdBindTransformFeedbackBuffersEXT</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void BindTransformFeedbackBuffersEXT(uint firstBinding, in ReadOnlySpan<Vk.Handle<Vk.Buffer>> buffers, in ReadOnlySpan<Vk.DeviceSize> offsets, in ReadOnlySpan<Vk.DeviceSize> sizes)
	{
		if (Functions.vkCmdBindTransformFeedbackBuffersEXT == null) throw new Vk.Extras.FunctionNotLoadedException("vkCmdBindTransformFeedbackBuffersEXT");
		Functions.CmdBindTransformFeedbackBuffersEXT(Handle, firstBinding, buffers, offsets, sizes);
	}

	/// <summary>vkCmdBeginTransformFeedbackEXT</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void BeginTransformFeedbackEXT(uint firstCounterBuffer, uint counterBufferCount, Vk.Handle<Vk.Buffer>* pCounterBuffers, Vk.DeviceSize* pCounterBufferOffsets)
	{
		if (Functions.vkCmdBeginTransformFeedbackEXT == null) throw new Vk.Extras.FunctionNotLoadedException("vkCmdBeginTransformFeedbackEXT");
		Functions.vkCmdBeginTransformFeedbackEXT(Handle, firstCounterBuffer, counterBufferCount, pCounterBuffers, pCounterBufferOffsets);
	}

	/// <summary>vkCmdBeginTransformFeedbackEXT</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void BeginTransformFeedbackEXT(uint firstCounterBuffer, in ReadOnlySpan<Vk.Handle<Vk.Buffer>> counterBuffers, in ReadOnlySpan<Vk.DeviceSize> counterBufferOffsets)
	{
		if (Functions.vkCmdBeginTransformFeedbackEXT == null) throw new Vk.Extras.FunctionNotLoadedException("vkCmdBeginTransformFeedbackEXT");
		Functions.CmdBeginTransformFeedbackEXT(Handle, firstCounterBuffer, counterBuffers, counterBufferOffsets);
	}

	/// <summary>vkCmdEndTransformFeedbackEXT</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void EndTransformFeedbackEXT(uint firstCounterBuffer, uint counterBufferCount, Vk.Handle<Vk.Buffer>* pCounterBuffers, Vk.DeviceSize* pCounterBufferOffsets)
	{
		if (Functions.vkCmdEndTransformFeedbackEXT == null) throw new Vk.Extras.FunctionNotLoadedException("vkCmdEndTransformFeedbackEXT");
		Functions.vkCmdEndTransformFeedbackEXT(Handle, firstCounterBuffer, counterBufferCount, pCounterBuffers, pCounterBufferOffsets);
	}

	/// <summary>vkCmdEndTransformFeedbackEXT</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void EndTransformFeedbackEXT(uint firstCounterBuffer, in ReadOnlySpan<Vk.Handle<Vk.Buffer>> counterBuffers, in ReadOnlySpan<Vk.DeviceSize> counterBufferOffsets)
	{
		if (Functions.vkCmdEndTransformFeedbackEXT == null) throw new Vk.Extras.FunctionNotLoadedException("vkCmdEndTransformFeedbackEXT");
		Functions.CmdEndTransformFeedbackEXT(Handle, firstCounterBuffer, counterBuffers, counterBufferOffsets);
	}

	/// <summary>vkCmdBeginQueryIndexedEXT</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void BeginQueryIndexedEXT(Vk.Handle<Vk.QueryPool> queryPool, uint query, Vk.QueryControlFlags flags, uint index)
	{
		if (Functions.vkCmdBeginQueryIndexedEXT == null) throw new Vk.Extras.FunctionNotLoadedException("vkCmdBeginQueryIndexedEXT");
		Functions.vkCmdBeginQueryIndexedEXT(Handle, queryPool, query, flags, index);
	}

	/// <summary>vkCmdEndQueryIndexedEXT</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void EndQueryIndexedEXT(Vk.Handle<Vk.QueryPool> queryPool, uint query, uint index)
	{
		if (Functions.vkCmdEndQueryIndexedEXT == null) throw new Vk.Extras.FunctionNotLoadedException("vkCmdEndQueryIndexedEXT");
		Functions.vkCmdEndQueryIndexedEXT(Handle, queryPool, query, index);
	}

	/// <summary>vkCmdDrawIndirectByteCountEXT</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void DrawIndirectByteCountEXT(uint instanceCount, uint firstInstance, Vk.Handle<Vk.Buffer> counterBuffer, Vk.DeviceSize counterBufferOffset, uint counterOffset, uint vertexStride)
	{
		if (Functions.vkCmdDrawIndirectByteCountEXT == null) throw new Vk.Extras.FunctionNotLoadedException("vkCmdDrawIndirectByteCountEXT");
		Functions.vkCmdDrawIndirectByteCountEXT(Handle, instanceCount, firstInstance, counterBuffer, counterBufferOffset, counterOffset, vertexStride);
	}

	/// <summary>vkCmdSetExclusiveScissorNV</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void SetExclusiveScissorNV(uint firstExclusiveScissor, uint exclusiveScissorCount, Vk.Rect2D* pExclusiveScissors)
	{
		if (Functions.vkCmdSetExclusiveScissorNV == null) throw new Vk.Extras.FunctionNotLoadedException("vkCmdSetExclusiveScissorNV");
		Functions.vkCmdSetExclusiveScissorNV(Handle, firstExclusiveScissor, exclusiveScissorCount, pExclusiveScissors);
	}

	/// <summary>vkCmdSetExclusiveScissorNV</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void SetExclusiveScissorNV(uint firstExclusiveScissor, in ReadOnlySpan<Vk.Rect2D> exclusiveScissors)
	{
		if (Functions.vkCmdSetExclusiveScissorNV == null) throw new Vk.Extras.FunctionNotLoadedException("vkCmdSetExclusiveScissorNV");
		Functions.CmdSetExclusiveScissorNV(Handle, firstExclusiveScissor, exclusiveScissors);
	}

	/// <summary>vkCmdBindShadingRateImageNV</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void BindShadingRateImageNV(Vk.Handle<Vk.ImageView> imageView, Vk.ImageLayout imageLayout)
	{
		if (Functions.vkCmdBindShadingRateImageNV == null) throw new Vk.Extras.FunctionNotLoadedException("vkCmdBindShadingRateImageNV");
		Functions.vkCmdBindShadingRateImageNV(Handle, imageView, imageLayout);
	}

	/// <summary>vkCmdSetViewportShadingRatePaletteNV</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void SetViewportShadingRatePaletteNV(uint firstViewport, uint viewportCount, Vk.NV.ShadingRatePalette* pShadingRatePalettes)
	{
		if (Functions.vkCmdSetViewportShadingRatePaletteNV == null) throw new Vk.Extras.FunctionNotLoadedException("vkCmdSetViewportShadingRatePaletteNV");
		Functions.vkCmdSetViewportShadingRatePaletteNV(Handle, firstViewport, viewportCount, pShadingRatePalettes);
	}

	/// <summary>vkCmdSetViewportShadingRatePaletteNV</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void SetViewportShadingRatePaletteNV(uint firstViewport, in ReadOnlySpan<Vk.NV.ShadingRatePalette> shadingRatePalettes)
	{
		if (Functions.vkCmdSetViewportShadingRatePaletteNV == null) throw new Vk.Extras.FunctionNotLoadedException("vkCmdSetViewportShadingRatePaletteNV");
		Functions.CmdSetViewportShadingRatePaletteNV(Handle, firstViewport, shadingRatePalettes);
	}

	/// <summary>vkCmdSetCoarseSampleOrderNV</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void SetCoarseSampleOrderNV(Vk.NV.CoarseSampleOrderType sampleOrderType, uint customSampleOrderCount, Vk.NV.CoarseSampleOrderCustom* pCustomSampleOrders)
	{
		if (Functions.vkCmdSetCoarseSampleOrderNV == null) throw new Vk.Extras.FunctionNotLoadedException("vkCmdSetCoarseSampleOrderNV");
		Functions.vkCmdSetCoarseSampleOrderNV(Handle, sampleOrderType, customSampleOrderCount, pCustomSampleOrders);
	}

	/// <summary>vkCmdSetCoarseSampleOrderNV</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void SetCoarseSampleOrderNV(Vk.NV.CoarseSampleOrderType sampleOrderType, in ReadOnlySpan<Vk.NV.CoarseSampleOrderCustom> customSampleOrders)
	{
		if (Functions.vkCmdSetCoarseSampleOrderNV == null) throw new Vk.Extras.FunctionNotLoadedException("vkCmdSetCoarseSampleOrderNV");
		Functions.CmdSetCoarseSampleOrderNV(Handle, sampleOrderType, customSampleOrders);
	}

	/// <summary>vkCmdDrawMeshTasksNV</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void DrawMeshTasksNV(uint taskCount, uint firstTask)
	{
		if (Functions.vkCmdDrawMeshTasksNV == null) throw new Vk.Extras.FunctionNotLoadedException("vkCmdDrawMeshTasksNV");
		Functions.vkCmdDrawMeshTasksNV(Handle, taskCount, firstTask);
	}

	/// <summary>vkCmdDrawMeshTasksIndirectNV</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void DrawMeshTasksIndirectNV(Vk.Handle<Vk.Buffer> buffer, Vk.DeviceSize offset, uint drawCount, uint stride)
	{
		if (Functions.vkCmdDrawMeshTasksIndirectNV == null) throw new Vk.Extras.FunctionNotLoadedException("vkCmdDrawMeshTasksIndirectNV");
		Functions.vkCmdDrawMeshTasksIndirectNV(Handle, buffer, offset, drawCount, stride);
	}

	/// <summary>vkCmdDrawMeshTasksIndirectCountNV</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void DrawMeshTasksIndirectCountNV(Vk.Handle<Vk.Buffer> buffer, Vk.DeviceSize offset, Vk.Handle<Vk.Buffer> countBuffer, Vk.DeviceSize countBufferOffset, uint maxDrawCount, uint stride)
	{
		if (Functions.vkCmdDrawMeshTasksIndirectCountNV == null) throw new Vk.Extras.FunctionNotLoadedException("vkCmdDrawMeshTasksIndirectCountNV");
		Functions.vkCmdDrawMeshTasksIndirectCountNV(Handle, buffer, offset, countBuffer, countBufferOffset, maxDrawCount, stride);
	}

	/// <summary>vkCmdCopyAccelerationStructureNV</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void CopyAccelerationStructureNV(Vk.Handle<Vk.KHR.AccelerationStructure> dst, Vk.Handle<Vk.KHR.AccelerationStructure> src, Vk.KHR.CopyAccelerationStructureMode mode)
	{
		if (Functions.vkCmdCopyAccelerationStructureNV == null) throw new Vk.Extras.FunctionNotLoadedException("vkCmdCopyAccelerationStructureNV");
		Functions.vkCmdCopyAccelerationStructureNV(Handle, dst, src, mode);
	}

	/// <summary>vkCmdCopyAccelerationStructureKHR</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void CopyAccelerationStructureKHR(Vk.KHR.CopyAccelerationStructureInfo* pInfo)
	{
		if (Functions.vkCmdCopyAccelerationStructureKHR == null) throw new Vk.Extras.FunctionNotLoadedException("vkCmdCopyAccelerationStructureKHR");
		Functions.vkCmdCopyAccelerationStructureKHR(Handle, pInfo);
	}

	/// <summary>vkCmdCopyAccelerationStructureKHR</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void CopyAccelerationStructureKHR(in Vk.KHR.CopyAccelerationStructureInfo info)
	{
		if (Functions.vkCmdCopyAccelerationStructureKHR == null) throw new Vk.Extras.FunctionNotLoadedException("vkCmdCopyAccelerationStructureKHR");
		Functions.CmdCopyAccelerationStructureKHR(Handle, info);
	}

	/// <summary>vkCmdCopyAccelerationStructureToMemoryKHR</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void CopyAccelerationStructureToMemoryKHR(Vk.KHR.CopyAccelerationStructureToMemoryInfo* pInfo)
	{
		if (Functions.vkCmdCopyAccelerationStructureToMemoryKHR == null) throw new Vk.Extras.FunctionNotLoadedException("vkCmdCopyAccelerationStructureToMemoryKHR");
		Functions.vkCmdCopyAccelerationStructureToMemoryKHR(Handle, pInfo);
	}

	/// <summary>vkCmdCopyAccelerationStructureToMemoryKHR</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void CopyAccelerationStructureToMemoryKHR(in Vk.KHR.CopyAccelerationStructureToMemoryInfo info)
	{
		if (Functions.vkCmdCopyAccelerationStructureToMemoryKHR == null) throw new Vk.Extras.FunctionNotLoadedException("vkCmdCopyAccelerationStructureToMemoryKHR");
		Functions.CmdCopyAccelerationStructureToMemoryKHR(Handle, info);
	}

	/// <summary>vkCmdCopyMemoryToAccelerationStructureKHR</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void CopyMemoryToAccelerationStructureKHR(Vk.KHR.CopyMemoryToAccelerationStructureInfo* pInfo)
	{
		if (Functions.vkCmdCopyMemoryToAccelerationStructureKHR == null) throw new Vk.Extras.FunctionNotLoadedException("vkCmdCopyMemoryToAccelerationStructureKHR");
		Functions.vkCmdCopyMemoryToAccelerationStructureKHR(Handle, pInfo);
	}

	/// <summary>vkCmdCopyMemoryToAccelerationStructureKHR</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void CopyMemoryToAccelerationStructureKHR(in Vk.KHR.CopyMemoryToAccelerationStructureInfo info)
	{
		if (Functions.vkCmdCopyMemoryToAccelerationStructureKHR == null) throw new Vk.Extras.FunctionNotLoadedException("vkCmdCopyMemoryToAccelerationStructureKHR");
		Functions.CmdCopyMemoryToAccelerationStructureKHR(Handle, info);
	}

	/// <summary>vkCmdWriteAccelerationStructuresPropertiesKHR</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void WriteAccelerationStructuresPropertiesKHR(uint accelerationStructureCount, Vk.Handle<Vk.KHR.AccelerationStructure>* pAccelerationStructures, Vk.QueryType queryType, Vk.Handle<Vk.QueryPool> queryPool, uint firstQuery)
	{
		if (Functions.vkCmdWriteAccelerationStructuresPropertiesKHR == null) throw new Vk.Extras.FunctionNotLoadedException("vkCmdWriteAccelerationStructuresPropertiesKHR");
		Functions.vkCmdWriteAccelerationStructuresPropertiesKHR(Handle, accelerationStructureCount, pAccelerationStructures, queryType, queryPool, firstQuery);
	}

	/// <summary>vkCmdWriteAccelerationStructuresPropertiesKHR</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void WriteAccelerationStructuresPropertiesKHR(in ReadOnlySpan<Vk.Handle<Vk.KHR.AccelerationStructure>> accelerationStructures, Vk.QueryType queryType, Vk.Handle<Vk.QueryPool> queryPool, uint firstQuery)
	{
		if (Functions.vkCmdWriteAccelerationStructuresPropertiesKHR == null) throw new Vk.Extras.FunctionNotLoadedException("vkCmdWriteAccelerationStructuresPropertiesKHR");
		Functions.CmdWriteAccelerationStructuresPropertiesKHR(Handle, accelerationStructures, queryType, queryPool, firstQuery);
	}

	/// <summary>vkCmdWriteAccelerationStructuresPropertiesNV</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void WriteAccelerationStructuresPropertiesNV(uint accelerationStructureCount, Vk.Handle<Vk.KHR.AccelerationStructure>* pAccelerationStructures, Vk.QueryType queryType, Vk.Handle<Vk.QueryPool> queryPool, uint firstQuery)
	{
		if (Functions.vkCmdWriteAccelerationStructuresPropertiesNV == null) throw new Vk.Extras.FunctionNotLoadedException("vkCmdWriteAccelerationStructuresPropertiesNV");
		Functions.vkCmdWriteAccelerationStructuresPropertiesNV(Handle, accelerationStructureCount, pAccelerationStructures, queryType, queryPool, firstQuery);
	}

	/// <summary>vkCmdWriteAccelerationStructuresPropertiesNV</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void WriteAccelerationStructuresPropertiesNV(in ReadOnlySpan<Vk.Handle<Vk.KHR.AccelerationStructure>> accelerationStructures, Vk.QueryType queryType, Vk.Handle<Vk.QueryPool> queryPool, uint firstQuery)
	{
		if (Functions.vkCmdWriteAccelerationStructuresPropertiesNV == null) throw new Vk.Extras.FunctionNotLoadedException("vkCmdWriteAccelerationStructuresPropertiesNV");
		Functions.CmdWriteAccelerationStructuresPropertiesNV(Handle, accelerationStructures, queryType, queryPool, firstQuery);
	}

	/// <summary>vkCmdBuildAccelerationStructureNV</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void BuildAccelerationStructureNV(Vk.NV.AccelerationStructureInfo* pInfo, Vk.Handle<Vk.Buffer> instanceData, Vk.DeviceSize instanceOffset, Vk.Bool32 update, Vk.Handle<Vk.KHR.AccelerationStructure> dst, Vk.Handle<Vk.KHR.AccelerationStructure> src, Vk.Handle<Vk.Buffer> scratch, Vk.DeviceSize scratchOffset)
	{
		if (Functions.vkCmdBuildAccelerationStructureNV == null) throw new Vk.Extras.FunctionNotLoadedException("vkCmdBuildAccelerationStructureNV");
		Functions.vkCmdBuildAccelerationStructureNV(Handle, pInfo, instanceData, instanceOffset, update, dst, src, scratch, scratchOffset);
	}

	/// <summary>vkCmdBuildAccelerationStructureNV</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void BuildAccelerationStructureNV(in Vk.NV.AccelerationStructureInfo info, Vk.Handle<Vk.Buffer> instanceData, Vk.DeviceSize instanceOffset, Vk.Bool32 update, Vk.Handle<Vk.KHR.AccelerationStructure> dst, Vk.Handle<Vk.KHR.AccelerationStructure> src, Vk.Handle<Vk.Buffer> scratch, Vk.DeviceSize scratchOffset)
	{
		if (Functions.vkCmdBuildAccelerationStructureNV == null) throw new Vk.Extras.FunctionNotLoadedException("vkCmdBuildAccelerationStructureNV");
		Functions.CmdBuildAccelerationStructureNV(Handle, info, instanceData, instanceOffset, update, dst, src, scratch, scratchOffset);
	}

	/// <summary>vkCmdTraceRaysKHR</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void TraceRaysKHR(Vk.KHR.StridedBufferRegion* pRaygenShaderBindingTable, Vk.KHR.StridedBufferRegion* pMissShaderBindingTable, Vk.KHR.StridedBufferRegion* pHitShaderBindingTable, Vk.KHR.StridedBufferRegion* pCallableShaderBindingTable, uint width, uint height, uint depth)
	{
		if (Functions.vkCmdTraceRaysKHR == null) throw new Vk.Extras.FunctionNotLoadedException("vkCmdTraceRaysKHR");
		Functions.vkCmdTraceRaysKHR(Handle, pRaygenShaderBindingTable, pMissShaderBindingTable, pHitShaderBindingTable, pCallableShaderBindingTable, width, height, depth);
	}

	/// <summary>vkCmdTraceRaysKHR</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void TraceRaysKHR(in Vk.KHR.StridedBufferRegion raygenShaderBindingTable, in Vk.KHR.StridedBufferRegion missShaderBindingTable, in Vk.KHR.StridedBufferRegion hitShaderBindingTable, in Vk.KHR.StridedBufferRegion callableShaderBindingTable, uint width, uint height, uint depth)
	{
		if (Functions.vkCmdTraceRaysKHR == null) throw new Vk.Extras.FunctionNotLoadedException("vkCmdTraceRaysKHR");
		Functions.CmdTraceRaysKHR(Handle, raygenShaderBindingTable, missShaderBindingTable, hitShaderBindingTable, callableShaderBindingTable, width, height, depth);
	}

	/// <summary>vkCmdTraceRaysNV</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void TraceRaysNV(Vk.Handle<Vk.Buffer> raygenShaderBindingTableBuffer, Vk.DeviceSize raygenShaderBindingOffset, Vk.Handle<Vk.Buffer> missShaderBindingTableBuffer, Vk.DeviceSize missShaderBindingOffset, Vk.DeviceSize missShaderBindingStride, Vk.Handle<Vk.Buffer> hitShaderBindingTableBuffer, Vk.DeviceSize hitShaderBindingOffset, Vk.DeviceSize hitShaderBindingStride, Vk.Handle<Vk.Buffer> callableShaderBindingTableBuffer, Vk.DeviceSize callableShaderBindingOffset, Vk.DeviceSize callableShaderBindingStride, uint width, uint height, uint depth)
	{
		if (Functions.vkCmdTraceRaysNV == null) throw new Vk.Extras.FunctionNotLoadedException("vkCmdTraceRaysNV");
		Functions.vkCmdTraceRaysNV(Handle, raygenShaderBindingTableBuffer, raygenShaderBindingOffset, missShaderBindingTableBuffer, missShaderBindingOffset, missShaderBindingStride, hitShaderBindingTableBuffer, hitShaderBindingOffset, hitShaderBindingStride, callableShaderBindingTableBuffer, callableShaderBindingOffset, callableShaderBindingStride, width, height, depth);
	}

	/// <summary>vkCmdTraceRaysIndirectKHR</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void TraceRaysIndirectKHR(Vk.KHR.StridedBufferRegion* pRaygenShaderBindingTable, Vk.KHR.StridedBufferRegion* pMissShaderBindingTable, Vk.KHR.StridedBufferRegion* pHitShaderBindingTable, Vk.KHR.StridedBufferRegion* pCallableShaderBindingTable, Vk.Handle<Vk.Buffer> buffer, Vk.DeviceSize offset)
	{
		if (Functions.vkCmdTraceRaysIndirectKHR == null) throw new Vk.Extras.FunctionNotLoadedException("vkCmdTraceRaysIndirectKHR");
		Functions.vkCmdTraceRaysIndirectKHR(Handle, pRaygenShaderBindingTable, pMissShaderBindingTable, pHitShaderBindingTable, pCallableShaderBindingTable, buffer, offset);
	}

	/// <summary>vkCmdTraceRaysIndirectKHR</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void TraceRaysIndirectKHR(in Vk.KHR.StridedBufferRegion raygenShaderBindingTable, in Vk.KHR.StridedBufferRegion missShaderBindingTable, in Vk.KHR.StridedBufferRegion hitShaderBindingTable, in Vk.KHR.StridedBufferRegion callableShaderBindingTable, Vk.Handle<Vk.Buffer> buffer, Vk.DeviceSize offset)
	{
		if (Functions.vkCmdTraceRaysIndirectKHR == null) throw new Vk.Extras.FunctionNotLoadedException("vkCmdTraceRaysIndirectKHR");
		Functions.CmdTraceRaysIndirectKHR(Handle, raygenShaderBindingTable, missShaderBindingTable, hitShaderBindingTable, callableShaderBindingTable, buffer, offset);
	}

	/// <summary>vkCmdSetPerformanceMarkerINTEL</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result SetPerformanceMarkerINTEL(Vk.INTEL.PerformanceMarkerInfo* pMarkerInfo)
	{
		if (Functions.vkCmdSetPerformanceMarkerINTEL == null) throw new Vk.Extras.FunctionNotLoadedException("vkCmdSetPerformanceMarkerINTEL");
		return Functions.vkCmdSetPerformanceMarkerINTEL(Handle, pMarkerInfo);
	}

	/// <summary>vkCmdSetPerformanceMarkerINTEL</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result SetPerformanceMarkerINTEL(in Vk.INTEL.PerformanceMarkerInfo markerInfo)
	{
		if (Functions.vkCmdSetPerformanceMarkerINTEL == null) throw new Vk.Extras.FunctionNotLoadedException("vkCmdSetPerformanceMarkerINTEL");
		return Functions.CmdSetPerformanceMarkerINTEL(Handle, markerInfo);
	}

	/// <summary>vkCmdSetPerformanceStreamMarkerINTEL</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result SetPerformanceStreamMarkerINTEL(Vk.INTEL.PerformanceStreamMarkerInfo* pMarkerInfo)
	{
		if (Functions.vkCmdSetPerformanceStreamMarkerINTEL == null) throw new Vk.Extras.FunctionNotLoadedException("vkCmdSetPerformanceStreamMarkerINTEL");
		return Functions.vkCmdSetPerformanceStreamMarkerINTEL(Handle, pMarkerInfo);
	}

	/// <summary>vkCmdSetPerformanceStreamMarkerINTEL</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result SetPerformanceStreamMarkerINTEL(in Vk.INTEL.PerformanceStreamMarkerInfo markerInfo)
	{
		if (Functions.vkCmdSetPerformanceStreamMarkerINTEL == null) throw new Vk.Extras.FunctionNotLoadedException("vkCmdSetPerformanceStreamMarkerINTEL");
		return Functions.CmdSetPerformanceStreamMarkerINTEL(Handle, markerInfo);
	}

	/// <summary>vkCmdSetPerformanceOverrideINTEL</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result SetPerformanceOverrideINTEL(Vk.INTEL.PerformanceOverrideInfo* pOverrideInfo)
	{
		if (Functions.vkCmdSetPerformanceOverrideINTEL == null) throw new Vk.Extras.FunctionNotLoadedException("vkCmdSetPerformanceOverrideINTEL");
		return Functions.vkCmdSetPerformanceOverrideINTEL(Handle, pOverrideInfo);
	}

	/// <summary>vkCmdSetPerformanceOverrideINTEL</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result SetPerformanceOverrideINTEL(in Vk.INTEL.PerformanceOverrideInfo overrideInfo)
	{
		if (Functions.vkCmdSetPerformanceOverrideINTEL == null) throw new Vk.Extras.FunctionNotLoadedException("vkCmdSetPerformanceOverrideINTEL");
		return Functions.CmdSetPerformanceOverrideINTEL(Handle, overrideInfo);
	}

	/// <summary>vkCmdSetLineStippleEXT</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void SetLineStippleEXT(uint lineStippleFactor, ushort lineStipplePattern)
	{
		if (Functions.vkCmdSetLineStippleEXT == null) throw new Vk.Extras.FunctionNotLoadedException("vkCmdSetLineStippleEXT");
		Functions.vkCmdSetLineStippleEXT(Handle, lineStippleFactor, lineStipplePattern);
	}

	/// <summary>vkCmdBuildAccelerationStructureKHR</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void BuildAccelerationStructureKHR(uint infoCount, Vk.KHR.AccelerationStructureBuildGeometryInfo* pInfos, Vk.KHR.AccelerationStructureBuildOffsetInfo** ppOffsetInfos)
	{
		if (Functions.vkCmdBuildAccelerationStructureKHR == null) throw new Vk.Extras.FunctionNotLoadedException("vkCmdBuildAccelerationStructureKHR");
		Functions.vkCmdBuildAccelerationStructureKHR(Handle, infoCount, pInfos, ppOffsetInfos);
	}

	/// <summary>vkCmdBuildAccelerationStructureKHR</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void BuildAccelerationStructureKHR(in ReadOnlySpan<Vk.KHR.AccelerationStructureBuildGeometryInfo> infos, Vk.KHR.AccelerationStructureBuildOffsetInfo** ppOffsetInfos)
	{
		if (Functions.vkCmdBuildAccelerationStructureKHR == null) throw new Vk.Extras.FunctionNotLoadedException("vkCmdBuildAccelerationStructureKHR");
		Functions.CmdBuildAccelerationStructureKHR(Handle, infos, ppOffsetInfos);
	}

	/// <summary>vkCmdBuildAccelerationStructureIndirectKHR</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void BuildAccelerationStructureIndirectKHR(Vk.KHR.AccelerationStructureBuildGeometryInfo* pInfo, Vk.Handle<Vk.Buffer> indirectBuffer, Vk.DeviceSize indirectOffset, uint indirectStride)
	{
		if (Functions.vkCmdBuildAccelerationStructureIndirectKHR == null) throw new Vk.Extras.FunctionNotLoadedException("vkCmdBuildAccelerationStructureIndirectKHR");
		Functions.vkCmdBuildAccelerationStructureIndirectKHR(Handle, pInfo, indirectBuffer, indirectOffset, indirectStride);
	}

	/// <summary>vkCmdBuildAccelerationStructureIndirectKHR</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void BuildAccelerationStructureIndirectKHR(in Vk.KHR.AccelerationStructureBuildGeometryInfo info, Vk.Handle<Vk.Buffer> indirectBuffer, Vk.DeviceSize indirectOffset, uint indirectStride)
	{
		if (Functions.vkCmdBuildAccelerationStructureIndirectKHR == null) throw new Vk.Extras.FunctionNotLoadedException("vkCmdBuildAccelerationStructureIndirectKHR");
		Functions.CmdBuildAccelerationStructureIndirectKHR(Handle, info, indirectBuffer, indirectOffset, indirectStride);
	}

	/// <summary>vkCmdSetCullModeEXT</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void SetCullModeEXT(Vk.CullModeFlags cullMode)
	{
		if (Functions.vkCmdSetCullModeEXT == null) throw new Vk.Extras.FunctionNotLoadedException("vkCmdSetCullModeEXT");
		Functions.vkCmdSetCullModeEXT(Handle, cullMode);
	}

	/// <summary>vkCmdSetFrontFaceEXT</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void SetFrontFaceEXT(Vk.FrontFace frontFace)
	{
		if (Functions.vkCmdSetFrontFaceEXT == null) throw new Vk.Extras.FunctionNotLoadedException("vkCmdSetFrontFaceEXT");
		Functions.vkCmdSetFrontFaceEXT(Handle, frontFace);
	}

	/// <summary>vkCmdSetPrimitiveTopologyEXT</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void SetPrimitiveTopologyEXT(Vk.PrimitiveTopology primitiveTopology)
	{
		if (Functions.vkCmdSetPrimitiveTopologyEXT == null) throw new Vk.Extras.FunctionNotLoadedException("vkCmdSetPrimitiveTopologyEXT");
		Functions.vkCmdSetPrimitiveTopologyEXT(Handle, primitiveTopology);
	}

	/// <summary>vkCmdSetViewportWithCountEXT</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void SetViewportWithCountEXT(uint viewportCount, Vk.Viewport* pViewports)
	{
		if (Functions.vkCmdSetViewportWithCountEXT == null) throw new Vk.Extras.FunctionNotLoadedException("vkCmdSetViewportWithCountEXT");
		Functions.vkCmdSetViewportWithCountEXT(Handle, viewportCount, pViewports);
	}

	/// <summary>vkCmdSetViewportWithCountEXT</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void SetViewportWithCountEXT(in ReadOnlySpan<Vk.Viewport> viewports)
	{
		if (Functions.vkCmdSetViewportWithCountEXT == null) throw new Vk.Extras.FunctionNotLoadedException("vkCmdSetViewportWithCountEXT");
		Functions.CmdSetViewportWithCountEXT(Handle, viewports);
	}

	/// <summary>vkCmdSetScissorWithCountEXT</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void SetScissorWithCountEXT(uint scissorCount, Vk.Rect2D* pScissors)
	{
		if (Functions.vkCmdSetScissorWithCountEXT == null) throw new Vk.Extras.FunctionNotLoadedException("vkCmdSetScissorWithCountEXT");
		Functions.vkCmdSetScissorWithCountEXT(Handle, scissorCount, pScissors);
	}

	/// <summary>vkCmdSetScissorWithCountEXT</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void SetScissorWithCountEXT(in ReadOnlySpan<Vk.Rect2D> scissors)
	{
		if (Functions.vkCmdSetScissorWithCountEXT == null) throw new Vk.Extras.FunctionNotLoadedException("vkCmdSetScissorWithCountEXT");
		Functions.CmdSetScissorWithCountEXT(Handle, scissors);
	}

	/// <summary>vkCmdBindVertexBuffers2EXT</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void BindVertexBuffers2EXT(uint firstBinding, uint bindingCount, Vk.Handle<Vk.Buffer>* pBuffers, Vk.DeviceSize* pOffsets, Vk.DeviceSize* pSizes, Vk.DeviceSize* pStrides)
	{
		if (Functions.vkCmdBindVertexBuffers2EXT == null) throw new Vk.Extras.FunctionNotLoadedException("vkCmdBindVertexBuffers2EXT");
		Functions.vkCmdBindVertexBuffers2EXT(Handle, firstBinding, bindingCount, pBuffers, pOffsets, pSizes, pStrides);
	}

	/// <summary>vkCmdBindVertexBuffers2EXT</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void BindVertexBuffers2EXT(uint firstBinding, in ReadOnlySpan<Vk.Handle<Vk.Buffer>> buffers, in ReadOnlySpan<Vk.DeviceSize> offsets, in ReadOnlySpan<Vk.DeviceSize> sizes, in ReadOnlySpan<Vk.DeviceSize> strides)
	{
		if (Functions.vkCmdBindVertexBuffers2EXT == null) throw new Vk.Extras.FunctionNotLoadedException("vkCmdBindVertexBuffers2EXT");
		Functions.CmdBindVertexBuffers2EXT(Handle, firstBinding, buffers, offsets, sizes, strides);
	}

	/// <summary>vkCmdSetDepthTestEnableEXT</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void SetDepthTestEnableEXT(Vk.Bool32 depthTestEnable)
	{
		if (Functions.vkCmdSetDepthTestEnableEXT == null) throw new Vk.Extras.FunctionNotLoadedException("vkCmdSetDepthTestEnableEXT");
		Functions.vkCmdSetDepthTestEnableEXT(Handle, depthTestEnable);
	}

	/// <summary>vkCmdSetDepthWriteEnableEXT</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void SetDepthWriteEnableEXT(Vk.Bool32 depthWriteEnable)
	{
		if (Functions.vkCmdSetDepthWriteEnableEXT == null) throw new Vk.Extras.FunctionNotLoadedException("vkCmdSetDepthWriteEnableEXT");
		Functions.vkCmdSetDepthWriteEnableEXT(Handle, depthWriteEnable);
	}

	/// <summary>vkCmdSetDepthCompareOpEXT</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void SetDepthCompareOpEXT(Vk.CompareOp depthCompareOp)
	{
		if (Functions.vkCmdSetDepthCompareOpEXT == null) throw new Vk.Extras.FunctionNotLoadedException("vkCmdSetDepthCompareOpEXT");
		Functions.vkCmdSetDepthCompareOpEXT(Handle, depthCompareOp);
	}

	/// <summary>vkCmdSetDepthBoundsTestEnableEXT</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void SetDepthBoundsTestEnableEXT(Vk.Bool32 depthBoundsTestEnable)
	{
		if (Functions.vkCmdSetDepthBoundsTestEnableEXT == null) throw new Vk.Extras.FunctionNotLoadedException("vkCmdSetDepthBoundsTestEnableEXT");
		Functions.vkCmdSetDepthBoundsTestEnableEXT(Handle, depthBoundsTestEnable);
	}

	/// <summary>vkCmdSetStencilTestEnableEXT</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void SetStencilTestEnableEXT(Vk.Bool32 stencilTestEnable)
	{
		if (Functions.vkCmdSetStencilTestEnableEXT == null) throw new Vk.Extras.FunctionNotLoadedException("vkCmdSetStencilTestEnableEXT");
		Functions.vkCmdSetStencilTestEnableEXT(Handle, stencilTestEnable);
	}

	/// <summary>vkCmdSetStencilOpEXT</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void SetStencilOpEXT(Vk.StencilFaceFlags faceMask, Vk.StencilOp failOp, Vk.StencilOp passOp, Vk.StencilOp depthFailOp, Vk.CompareOp compareOp)
	{
		if (Functions.vkCmdSetStencilOpEXT == null) throw new Vk.Extras.FunctionNotLoadedException("vkCmdSetStencilOpEXT");
		Functions.vkCmdSetStencilOpEXT(Handle, faceMask, failOp, passOp, depthFailOp, compareOp);
	}

	/// <summary>vkCmdCopyBuffer2KHR</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void CopyBuffer2KHR(Vk.KHR.CopyBufferInfo2* pCopyBufferInfo)
	{
		if (Functions.vkCmdCopyBuffer2KHR == null) throw new Vk.Extras.FunctionNotLoadedException("vkCmdCopyBuffer2KHR");
		Functions.vkCmdCopyBuffer2KHR(Handle, pCopyBufferInfo);
	}

	/// <summary>vkCmdCopyBuffer2KHR</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void CopyBuffer2KHR(in Vk.KHR.CopyBufferInfo2 copyBufferInfo)
	{
		if (Functions.vkCmdCopyBuffer2KHR == null) throw new Vk.Extras.FunctionNotLoadedException("vkCmdCopyBuffer2KHR");
		Functions.CmdCopyBuffer2KHR(Handle, copyBufferInfo);
	}

	/// <summary>vkCmdCopyImage2KHR</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void CopyImage2KHR(Vk.KHR.CopyImageInfo2* pCopyImageInfo)
	{
		if (Functions.vkCmdCopyImage2KHR == null) throw new Vk.Extras.FunctionNotLoadedException("vkCmdCopyImage2KHR");
		Functions.vkCmdCopyImage2KHR(Handle, pCopyImageInfo);
	}

	/// <summary>vkCmdCopyImage2KHR</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void CopyImage2KHR(in Vk.KHR.CopyImageInfo2 copyImageInfo)
	{
		if (Functions.vkCmdCopyImage2KHR == null) throw new Vk.Extras.FunctionNotLoadedException("vkCmdCopyImage2KHR");
		Functions.CmdCopyImage2KHR(Handle, copyImageInfo);
	}

	/// <summary>vkCmdBlitImage2KHR</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void BlitImage2KHR(Vk.KHR.BlitImageInfo2* pBlitImageInfo)
	{
		if (Functions.vkCmdBlitImage2KHR == null) throw new Vk.Extras.FunctionNotLoadedException("vkCmdBlitImage2KHR");
		Functions.vkCmdBlitImage2KHR(Handle, pBlitImageInfo);
	}

	/// <summary>vkCmdBlitImage2KHR</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void BlitImage2KHR(in Vk.KHR.BlitImageInfo2 blitImageInfo)
	{
		if (Functions.vkCmdBlitImage2KHR == null) throw new Vk.Extras.FunctionNotLoadedException("vkCmdBlitImage2KHR");
		Functions.CmdBlitImage2KHR(Handle, blitImageInfo);
	}

	/// <summary>vkCmdCopyBufferToImage2KHR</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void CopyBufferToImage2KHR(Vk.KHR.CopyBufferToImageInfo2* pCopyBufferToImageInfo)
	{
		if (Functions.vkCmdCopyBufferToImage2KHR == null) throw new Vk.Extras.FunctionNotLoadedException("vkCmdCopyBufferToImage2KHR");
		Functions.vkCmdCopyBufferToImage2KHR(Handle, pCopyBufferToImageInfo);
	}

	/// <summary>vkCmdCopyBufferToImage2KHR</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void CopyBufferToImage2KHR(in Vk.KHR.CopyBufferToImageInfo2 copyBufferToImageInfo)
	{
		if (Functions.vkCmdCopyBufferToImage2KHR == null) throw new Vk.Extras.FunctionNotLoadedException("vkCmdCopyBufferToImage2KHR");
		Functions.CmdCopyBufferToImage2KHR(Handle, copyBufferToImageInfo);
	}

	/// <summary>vkCmdCopyImageToBuffer2KHR</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void CopyImageToBuffer2KHR(Vk.KHR.CopyImageToBufferInfo2* pCopyImageToBufferInfo)
	{
		if (Functions.vkCmdCopyImageToBuffer2KHR == null) throw new Vk.Extras.FunctionNotLoadedException("vkCmdCopyImageToBuffer2KHR");
		Functions.vkCmdCopyImageToBuffer2KHR(Handle, pCopyImageToBufferInfo);
	}

	/// <summary>vkCmdCopyImageToBuffer2KHR</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void CopyImageToBuffer2KHR(in Vk.KHR.CopyImageToBufferInfo2 copyImageToBufferInfo)
	{
		if (Functions.vkCmdCopyImageToBuffer2KHR == null) throw new Vk.Extras.FunctionNotLoadedException("vkCmdCopyImageToBuffer2KHR");
		Functions.CmdCopyImageToBuffer2KHR(Handle, copyImageToBufferInfo);
	}

	/// <summary>vkCmdResolveImage2KHR</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void ResolveImage2KHR(Vk.KHR.ResolveImageInfo2* pResolveImageInfo)
	{
		if (Functions.vkCmdResolveImage2KHR == null) throw new Vk.Extras.FunctionNotLoadedException("vkCmdResolveImage2KHR");
		Functions.vkCmdResolveImage2KHR(Handle, pResolveImageInfo);
	}

	/// <summary>vkCmdResolveImage2KHR</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void ResolveImage2KHR(in Vk.KHR.ResolveImageInfo2 resolveImageInfo)
	{
		if (Functions.vkCmdResolveImage2KHR == null) throw new Vk.Extras.FunctionNotLoadedException("vkCmdResolveImage2KHR");
		Functions.CmdResolveImage2KHR(Handle, resolveImageInfo);
	}

	/// <summary>vkCmdSetFragmentShadingRateKHR</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void SetFragmentShadingRateKHR(Vk.Extent2D* pFragmentSize, Vk.KHR.FragmentShadingRateCombinerOp* combinerOps)
	{
		if (Functions.vkCmdSetFragmentShadingRateKHR == null) throw new Vk.Extras.FunctionNotLoadedException("vkCmdSetFragmentShadingRateKHR");
		Functions.vkCmdSetFragmentShadingRateKHR(Handle, pFragmentSize, combinerOps);
	}

	/// <summary>vkCmdSetFragmentShadingRateKHR</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void SetFragmentShadingRateKHR(in Vk.Extent2D fragmentSize, in Vk.KHR.FragmentShadingRateCombinerOp combinerOps)
	{
		if (Functions.vkCmdSetFragmentShadingRateKHR == null) throw new Vk.Extras.FunctionNotLoadedException("vkCmdSetFragmentShadingRateKHR");
		Functions.CmdSetFragmentShadingRateKHR(Handle, fragmentSize, combinerOps);
	}

}

public unsafe partial class DeviceMemory : IHandleType<DeviceMemory>
{
	public static readonly DeviceMemory Null = new(Device.Null, Vk.Handle<DeviceMemory>.Null);

	public readonly Vk.Device Parent;
	public readonly Vk.DeviceFunctionTable Functions;
	public readonly Vk.Instance Instance;
	public readonly Vk.Device Device;
	public readonly Handle<DeviceMemory> Handle;
	public bool IsValid => Handle.IsValid;

	public DeviceMemory(in Vk.Device parent, Vk.Handle<DeviceMemory> handle)
	{
		Parent = parent;
		Functions = parent.Functions;
		Instance = parent.Instance;
		Device = parent;
		Handle = handle;
	}

	public override int GetHashCode() => Handle.GetHashCode();
	public override string? ToString() => $"[DeviceMemory 0x{(ulong)Handle:X16}]";
	public override bool Equals(object? o) => (o is DeviceMemory t) && (t.Handle == Handle);
	bool IEquatable<DeviceMemory>.Equals(DeviceMemory? other) => (other?.Handle ?? new()) == Handle;

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static implicit operator Vk.Handle<DeviceMemory> (DeviceMemory? handle) => handle?.Handle ?? new();
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static bool operator == (DeviceMemory? l, DeviceMemory? r) => (l?.Handle ?? new()) == (r?.Handle ?? new());
	public static bool operator != (DeviceMemory? l, DeviceMemory? r) => (l?.Handle ?? new()) == (r?.Handle ?? new());
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static implicit operator bool (DeviceMemory? handle) => handle?.Handle.IsValid ?? false;

	/// <summary>vkFreeMemory</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void FreeMemory(Vk.AllocationCallbacks* pAllocator)
	{
		if (Functions.vkFreeMemory == null) throw new Vk.Extras.FunctionNotLoadedException("vkFreeMemory");
		Functions.vkFreeMemory(Device.Handle, Handle, pAllocator);
	}

	/// <summary>vkFreeMemory</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void FreeMemory(in Vk.AllocationCallbacks allocator)
	{
		if (Functions.vkFreeMemory == null) throw new Vk.Extras.FunctionNotLoadedException("vkFreeMemory");
		Functions.FreeMemory(Device.Handle, Handle, allocator);
	}

	/// <summary>vkMapMemory</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result MapMemory(Vk.DeviceSize offset, Vk.DeviceSize size, Vk.MemoryMapFlags flags, void** ppData)
	{
		if (Functions.vkMapMemory == null) throw new Vk.Extras.FunctionNotLoadedException("vkMapMemory");
		return Functions.vkMapMemory(Device.Handle, Handle, offset, size, flags, ppData);
	}

	/// <summary>vkUnmapMemory</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void UnmapMemory()
	{
		if (Functions.vkUnmapMemory == null) throw new Vk.Extras.FunctionNotLoadedException("vkUnmapMemory");
		Functions.vkUnmapMemory(Device.Handle, Handle);
	}

	/// <summary>vkGetDeviceMemoryCommitment</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void GetDeviceMemoryCommitment(Vk.DeviceSize* pCommittedMemoryInBytes)
	{
		if (Functions.vkGetDeviceMemoryCommitment == null) throw new Vk.Extras.FunctionNotLoadedException("vkGetDeviceMemoryCommitment");
		Functions.vkGetDeviceMemoryCommitment(Device.Handle, Handle, pCommittedMemoryInBytes);
	}

	/// <summary>vkGetDeviceMemoryCommitment</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void GetDeviceMemoryCommitment(out Vk.DeviceSize committedMemoryInBytes)
	{
		if (Functions.vkGetDeviceMemoryCommitment == null) throw new Vk.Extras.FunctionNotLoadedException("vkGetDeviceMemoryCommitment");
		Functions.GetDeviceMemoryCommitment(Device.Handle, Handle, out committedMemoryInBytes);
	}

	/// <summary>vkGetMemoryWin32HandleNV</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result GetMemoryWin32HandleNV(Vk.NV.ExternalMemoryHandleTypeFlags handleType, void** pHandle)
	{
		if (Functions.vkGetMemoryWin32HandleNV == null) throw new Vk.Extras.FunctionNotLoadedException("vkGetMemoryWin32HandleNV");
		return Functions.vkGetMemoryWin32HandleNV(Device.Handle, Handle, handleType, pHandle);
	}

}

public unsafe partial class CommandPool : IHandleType<CommandPool>
{
	public static readonly CommandPool Null = new(Device.Null, Vk.Handle<CommandPool>.Null);

	public readonly Vk.Device Parent;
	public readonly Vk.DeviceFunctionTable Functions;
	public readonly Vk.Instance Instance;
	public readonly Vk.Device Device;
	public readonly Handle<CommandPool> Handle;
	public bool IsValid => Handle.IsValid;

	public CommandPool(in Vk.Device parent, Vk.Handle<CommandPool> handle)
	{
		Parent = parent;
		Functions = parent.Functions;
		Instance = parent.Instance;
		Device = parent;
		Handle = handle;
	}

	public override int GetHashCode() => Handle.GetHashCode();
	public override string? ToString() => $"[CommandPool 0x{(ulong)Handle:X16}]";
	public override bool Equals(object? o) => (o is CommandPool t) && (t.Handle == Handle);
	bool IEquatable<CommandPool>.Equals(CommandPool? other) => (other?.Handle ?? new()) == Handle;

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static implicit operator Vk.Handle<CommandPool> (CommandPool? handle) => handle?.Handle ?? new();
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static bool operator == (CommandPool? l, CommandPool? r) => (l?.Handle ?? new()) == (r?.Handle ?? new());
	public static bool operator != (CommandPool? l, CommandPool? r) => (l?.Handle ?? new()) == (r?.Handle ?? new());
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static implicit operator bool (CommandPool? handle) => handle?.Handle.IsValid ?? false;

	/// <summary>vkDestroyCommandPool</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void DestroyCommandPool(Vk.AllocationCallbacks* pAllocator)
	{
		if (Functions.vkDestroyCommandPool == null) throw new Vk.Extras.FunctionNotLoadedException("vkDestroyCommandPool");
		Functions.vkDestroyCommandPool(Device.Handle, Handle, pAllocator);
	}

	/// <summary>vkDestroyCommandPool</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void DestroyCommandPool(in Vk.AllocationCallbacks allocator)
	{
		if (Functions.vkDestroyCommandPool == null) throw new Vk.Extras.FunctionNotLoadedException("vkDestroyCommandPool");
		Functions.DestroyCommandPool(Device.Handle, Handle, allocator);
	}

	/// <summary>vkResetCommandPool</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result ResetCommandPool(Vk.CommandPoolResetFlags flags)
	{
		if (Functions.vkResetCommandPool == null) throw new Vk.Extras.FunctionNotLoadedException("vkResetCommandPool");
		return Functions.vkResetCommandPool(Device.Handle, Handle, flags);
	}

	/// <summary>vkFreeCommandBuffers</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void FreeCommandBuffers(uint commandBufferCount, Vk.Handle<Vk.CommandBuffer>* pCommandBuffers)
	{
		if (Functions.vkFreeCommandBuffers == null) throw new Vk.Extras.FunctionNotLoadedException("vkFreeCommandBuffers");
		Functions.vkFreeCommandBuffers(Device.Handle, Handle, commandBufferCount, pCommandBuffers);
	}

	/// <summary>vkFreeCommandBuffers</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void FreeCommandBuffers(in ReadOnlySpan<Vk.Handle<Vk.CommandBuffer>> commandBuffers)
	{
		if (Functions.vkFreeCommandBuffers == null) throw new Vk.Extras.FunctionNotLoadedException("vkFreeCommandBuffers");
		Functions.FreeCommandBuffers(Device.Handle, Handle, commandBuffers);
	}

	/// <summary>vkTrimCommandPool</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void TrimCommandPool(Vk.CommandPoolTrimFlags flags)
	{
		if (Functions.vkTrimCommandPool == null) throw new Vk.Extras.FunctionNotLoadedException("vkTrimCommandPool");
		Functions.vkTrimCommandPool(Device.Handle, Handle, flags);
	}

	/// <summary>vkTrimCommandPoolKHR</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void TrimCommandPoolKHR(Vk.CommandPoolTrimFlags flags)
	{
		if (Functions.vkTrimCommandPoolKHR == null) throw new Vk.Extras.FunctionNotLoadedException("vkTrimCommandPoolKHR");
		Functions.vkTrimCommandPoolKHR(Device.Handle, Handle, flags);
	}

}

public unsafe partial class Buffer : IHandleType<Buffer>
{
	public static readonly Buffer Null = new(Device.Null, Vk.Handle<Buffer>.Null);

	public readonly Vk.Device Parent;
	public readonly Vk.DeviceFunctionTable Functions;
	public readonly Vk.Instance Instance;
	public readonly Vk.Device Device;
	public readonly Handle<Buffer> Handle;
	public bool IsValid => Handle.IsValid;

	public Buffer(in Vk.Device parent, Vk.Handle<Buffer> handle)
	{
		Parent = parent;
		Functions = parent.Functions;
		Instance = parent.Instance;
		Device = parent;
		Handle = handle;
	}

	public override int GetHashCode() => Handle.GetHashCode();
	public override string? ToString() => $"[Buffer 0x{(ulong)Handle:X16}]";
	public override bool Equals(object? o) => (o is Buffer t) && (t.Handle == Handle);
	bool IEquatable<Buffer>.Equals(Buffer? other) => (other?.Handle ?? new()) == Handle;

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static implicit operator Vk.Handle<Buffer> (Buffer? handle) => handle?.Handle ?? new();
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static bool operator == (Buffer? l, Buffer? r) => (l?.Handle ?? new()) == (r?.Handle ?? new());
	public static bool operator != (Buffer? l, Buffer? r) => (l?.Handle ?? new()) == (r?.Handle ?? new());
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static implicit operator bool (Buffer? handle) => handle?.Handle.IsValid ?? false;

	/// <summary>vkGetBufferMemoryRequirements</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void GetBufferMemoryRequirements(Vk.MemoryRequirements* pMemoryRequirements)
	{
		if (Functions.vkGetBufferMemoryRequirements == null) throw new Vk.Extras.FunctionNotLoadedException("vkGetBufferMemoryRequirements");
		Functions.vkGetBufferMemoryRequirements(Device.Handle, Handle, pMemoryRequirements);
	}

	/// <summary>vkGetBufferMemoryRequirements</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void GetBufferMemoryRequirements(out Vk.MemoryRequirements memoryRequirements)
	{
		if (Functions.vkGetBufferMemoryRequirements == null) throw new Vk.Extras.FunctionNotLoadedException("vkGetBufferMemoryRequirements");
		Functions.GetBufferMemoryRequirements(Device.Handle, Handle, out memoryRequirements);
	}

	/// <summary>vkBindBufferMemory</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result BindBufferMemory(Vk.Handle<Vk.DeviceMemory> memory, Vk.DeviceSize memoryOffset)
	{
		if (Functions.vkBindBufferMemory == null) throw new Vk.Extras.FunctionNotLoadedException("vkBindBufferMemory");
		return Functions.vkBindBufferMemory(Device.Handle, Handle, memory, memoryOffset);
	}

	/// <summary>vkDestroyBuffer</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void DestroyBuffer(Vk.AllocationCallbacks* pAllocator)
	{
		if (Functions.vkDestroyBuffer == null) throw new Vk.Extras.FunctionNotLoadedException("vkDestroyBuffer");
		Functions.vkDestroyBuffer(Device.Handle, Handle, pAllocator);
	}

	/// <summary>vkDestroyBuffer</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void DestroyBuffer(in Vk.AllocationCallbacks allocator)
	{
		if (Functions.vkDestroyBuffer == null) throw new Vk.Extras.FunctionNotLoadedException("vkDestroyBuffer");
		Functions.DestroyBuffer(Device.Handle, Handle, allocator);
	}

}

public unsafe partial class BufferView : IHandleType<BufferView>
{
	public static readonly BufferView Null = new(Device.Null, Vk.Handle<BufferView>.Null);

	public readonly Vk.Device Parent;
	public readonly Vk.DeviceFunctionTable Functions;
	public readonly Vk.Instance Instance;
	public readonly Vk.Device Device;
	public readonly Handle<BufferView> Handle;
	public bool IsValid => Handle.IsValid;

	public BufferView(in Vk.Device parent, Vk.Handle<BufferView> handle)
	{
		Parent = parent;
		Functions = parent.Functions;
		Instance = parent.Instance;
		Device = parent;
		Handle = handle;
	}

	public override int GetHashCode() => Handle.GetHashCode();
	public override string? ToString() => $"[BufferView 0x{(ulong)Handle:X16}]";
	public override bool Equals(object? o) => (o is BufferView t) && (t.Handle == Handle);
	bool IEquatable<BufferView>.Equals(BufferView? other) => (other?.Handle ?? new()) == Handle;

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static implicit operator Vk.Handle<BufferView> (BufferView? handle) => handle?.Handle ?? new();
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static bool operator == (BufferView? l, BufferView? r) => (l?.Handle ?? new()) == (r?.Handle ?? new());
	public static bool operator != (BufferView? l, BufferView? r) => (l?.Handle ?? new()) == (r?.Handle ?? new());
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static implicit operator bool (BufferView? handle) => handle?.Handle.IsValid ?? false;

	/// <summary>vkDestroyBufferView</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void DestroyBufferView(Vk.AllocationCallbacks* pAllocator)
	{
		if (Functions.vkDestroyBufferView == null) throw new Vk.Extras.FunctionNotLoadedException("vkDestroyBufferView");
		Functions.vkDestroyBufferView(Device.Handle, Handle, pAllocator);
	}

	/// <summary>vkDestroyBufferView</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void DestroyBufferView(in Vk.AllocationCallbacks allocator)
	{
		if (Functions.vkDestroyBufferView == null) throw new Vk.Extras.FunctionNotLoadedException("vkDestroyBufferView");
		Functions.DestroyBufferView(Device.Handle, Handle, allocator);
	}

}

public unsafe partial class Image : IHandleType<Image>
{
	public static readonly Image Null = new(Device.Null, Vk.Handle<Image>.Null);

	public readonly Vk.Device Parent;
	public readonly Vk.DeviceFunctionTable Functions;
	public readonly Vk.Instance Instance;
	public readonly Vk.Device Device;
	public readonly Handle<Image> Handle;
	public bool IsValid => Handle.IsValid;

	public Image(in Vk.Device parent, Vk.Handle<Image> handle)
	{
		Parent = parent;
		Functions = parent.Functions;
		Instance = parent.Instance;
		Device = parent;
		Handle = handle;
	}

	public override int GetHashCode() => Handle.GetHashCode();
	public override string? ToString() => $"[Image 0x{(ulong)Handle:X16}]";
	public override bool Equals(object? o) => (o is Image t) && (t.Handle == Handle);
	bool IEquatable<Image>.Equals(Image? other) => (other?.Handle ?? new()) == Handle;

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static implicit operator Vk.Handle<Image> (Image? handle) => handle?.Handle ?? new();
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static bool operator == (Image? l, Image? r) => (l?.Handle ?? new()) == (r?.Handle ?? new());
	public static bool operator != (Image? l, Image? r) => (l?.Handle ?? new()) == (r?.Handle ?? new());
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static implicit operator bool (Image? handle) => handle?.Handle.IsValid ?? false;

	/// <summary>vkGetImageMemoryRequirements</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void GetImageMemoryRequirements(Vk.MemoryRequirements* pMemoryRequirements)
	{
		if (Functions.vkGetImageMemoryRequirements == null) throw new Vk.Extras.FunctionNotLoadedException("vkGetImageMemoryRequirements");
		Functions.vkGetImageMemoryRequirements(Device.Handle, Handle, pMemoryRequirements);
	}

	/// <summary>vkGetImageMemoryRequirements</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void GetImageMemoryRequirements(out Vk.MemoryRequirements memoryRequirements)
	{
		if (Functions.vkGetImageMemoryRequirements == null) throw new Vk.Extras.FunctionNotLoadedException("vkGetImageMemoryRequirements");
		Functions.GetImageMemoryRequirements(Device.Handle, Handle, out memoryRequirements);
	}

	/// <summary>vkBindImageMemory</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result BindImageMemory(Vk.Handle<Vk.DeviceMemory> memory, Vk.DeviceSize memoryOffset)
	{
		if (Functions.vkBindImageMemory == null) throw new Vk.Extras.FunctionNotLoadedException("vkBindImageMemory");
		return Functions.vkBindImageMemory(Device.Handle, Handle, memory, memoryOffset);
	}

	/// <summary>vkGetImageSparseMemoryRequirements</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void GetImageSparseMemoryRequirements(uint* pSparseMemoryRequirementCount, Vk.SparseImageMemoryRequirements* pSparseMemoryRequirements)
	{
		if (Functions.vkGetImageSparseMemoryRequirements == null) throw new Vk.Extras.FunctionNotLoadedException("vkGetImageSparseMemoryRequirements");
		Functions.vkGetImageSparseMemoryRequirements(Device.Handle, Handle, pSparseMemoryRequirementCount, pSparseMemoryRequirements);
	}

	/// <summary>vkGetImageSparseMemoryRequirements</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void GetImageSparseMemoryRequirements(out uint sparseMemoryRequirementCount, in Span<Vk.SparseImageMemoryRequirements> sparseMemoryRequirements)
	{
		if (Functions.vkGetImageSparseMemoryRequirements == null) throw new Vk.Extras.FunctionNotLoadedException("vkGetImageSparseMemoryRequirements");
		Functions.GetImageSparseMemoryRequirements(Device.Handle, Handle, out sparseMemoryRequirementCount, sparseMemoryRequirements);
	}

	/// <summary>vkDestroyImage</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void DestroyImage(Vk.AllocationCallbacks* pAllocator)
	{
		if (Functions.vkDestroyImage == null) throw new Vk.Extras.FunctionNotLoadedException("vkDestroyImage");
		Functions.vkDestroyImage(Device.Handle, Handle, pAllocator);
	}

	/// <summary>vkDestroyImage</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void DestroyImage(in Vk.AllocationCallbacks allocator)
	{
		if (Functions.vkDestroyImage == null) throw new Vk.Extras.FunctionNotLoadedException("vkDestroyImage");
		Functions.DestroyImage(Device.Handle, Handle, allocator);
	}

	/// <summary>vkGetImageSubresourceLayout</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void GetImageSubresourceLayout(Vk.ImageSubresource* pSubresource, Vk.SubresourceLayout* pLayout)
	{
		if (Functions.vkGetImageSubresourceLayout == null) throw new Vk.Extras.FunctionNotLoadedException("vkGetImageSubresourceLayout");
		Functions.vkGetImageSubresourceLayout(Device.Handle, Handle, pSubresource, pLayout);
	}

	/// <summary>vkGetImageSubresourceLayout</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void GetImageSubresourceLayout(in Vk.ImageSubresource subresource, out Vk.SubresourceLayout layout)
	{
		if (Functions.vkGetImageSubresourceLayout == null) throw new Vk.Extras.FunctionNotLoadedException("vkGetImageSubresourceLayout");
		Functions.GetImageSubresourceLayout(Device.Handle, Handle, subresource, out layout);
	}

	/// <summary>vkAcquireImageANDROID</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result AcquireImageANDROID(int nativeFenceFd, Vk.Handle<Vk.Semaphore> semaphore, Vk.Handle<Vk.Fence> fence)
	{
		if (Functions.vkAcquireImageANDROID == null) throw new Vk.Extras.FunctionNotLoadedException("vkAcquireImageANDROID");
		return Functions.vkAcquireImageANDROID(Device.Handle, Handle, nativeFenceFd, semaphore, fence);
	}

	/// <summary>vkGetImageDrmFormatModifierPropertiesEXT</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result GetImageDrmFormatModifierPropertiesEXT(Vk.EXT.ImageDrmFormatModifierProperties* pProperties)
	{
		if (Functions.vkGetImageDrmFormatModifierPropertiesEXT == null) throw new Vk.Extras.FunctionNotLoadedException("vkGetImageDrmFormatModifierPropertiesEXT");
		return Functions.vkGetImageDrmFormatModifierPropertiesEXT(Device.Handle, Handle, pProperties);
	}

	/// <summary>vkGetImageDrmFormatModifierPropertiesEXT</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result GetImageDrmFormatModifierPropertiesEXT(out Vk.EXT.ImageDrmFormatModifierProperties properties)
	{
		if (Functions.vkGetImageDrmFormatModifierPropertiesEXT == null) throw new Vk.Extras.FunctionNotLoadedException("vkGetImageDrmFormatModifierPropertiesEXT");
		return Functions.GetImageDrmFormatModifierPropertiesEXT(Device.Handle, Handle, out properties);
	}

}

public unsafe partial class ImageView : IHandleType<ImageView>
{
	public static readonly ImageView Null = new(Device.Null, Vk.Handle<ImageView>.Null);

	public readonly Vk.Device Parent;
	public readonly Vk.DeviceFunctionTable Functions;
	public readonly Vk.Instance Instance;
	public readonly Vk.Device Device;
	public readonly Handle<ImageView> Handle;
	public bool IsValid => Handle.IsValid;

	public ImageView(in Vk.Device parent, Vk.Handle<ImageView> handle)
	{
		Parent = parent;
		Functions = parent.Functions;
		Instance = parent.Instance;
		Device = parent;
		Handle = handle;
	}

	public override int GetHashCode() => Handle.GetHashCode();
	public override string? ToString() => $"[ImageView 0x{(ulong)Handle:X16}]";
	public override bool Equals(object? o) => (o is ImageView t) && (t.Handle == Handle);
	bool IEquatable<ImageView>.Equals(ImageView? other) => (other?.Handle ?? new()) == Handle;

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static implicit operator Vk.Handle<ImageView> (ImageView? handle) => handle?.Handle ?? new();
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static bool operator == (ImageView? l, ImageView? r) => (l?.Handle ?? new()) == (r?.Handle ?? new());
	public static bool operator != (ImageView? l, ImageView? r) => (l?.Handle ?? new()) == (r?.Handle ?? new());
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static implicit operator bool (ImageView? handle) => handle?.Handle.IsValid ?? false;

	/// <summary>vkDestroyImageView</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void DestroyImageView(Vk.AllocationCallbacks* pAllocator)
	{
		if (Functions.vkDestroyImageView == null) throw new Vk.Extras.FunctionNotLoadedException("vkDestroyImageView");
		Functions.vkDestroyImageView(Device.Handle, Handle, pAllocator);
	}

	/// <summary>vkDestroyImageView</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void DestroyImageView(in Vk.AllocationCallbacks allocator)
	{
		if (Functions.vkDestroyImageView == null) throw new Vk.Extras.FunctionNotLoadedException("vkDestroyImageView");
		Functions.DestroyImageView(Device.Handle, Handle, allocator);
	}

	/// <summary>vkGetImageViewAddressNVX</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result GetImageViewAddressNVX(Vk.NVX.ImageViewAddressProperties* pProperties)
	{
		if (Functions.vkGetImageViewAddressNVX == null) throw new Vk.Extras.FunctionNotLoadedException("vkGetImageViewAddressNVX");
		return Functions.vkGetImageViewAddressNVX(Device.Handle, Handle, pProperties);
	}

	/// <summary>vkGetImageViewAddressNVX</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result GetImageViewAddressNVX(out Vk.NVX.ImageViewAddressProperties properties)
	{
		if (Functions.vkGetImageViewAddressNVX == null) throw new Vk.Extras.FunctionNotLoadedException("vkGetImageViewAddressNVX");
		return Functions.GetImageViewAddressNVX(Device.Handle, Handle, out properties);
	}

}

public unsafe partial class ShaderModule : IHandleType<ShaderModule>
{
	public static readonly ShaderModule Null = new(Device.Null, Vk.Handle<ShaderModule>.Null);

	public readonly Vk.Device Parent;
	public readonly Vk.DeviceFunctionTable Functions;
	public readonly Vk.Instance Instance;
	public readonly Vk.Device Device;
	public readonly Handle<ShaderModule> Handle;
	public bool IsValid => Handle.IsValid;

	public ShaderModule(in Vk.Device parent, Vk.Handle<ShaderModule> handle)
	{
		Parent = parent;
		Functions = parent.Functions;
		Instance = parent.Instance;
		Device = parent;
		Handle = handle;
	}

	public override int GetHashCode() => Handle.GetHashCode();
	public override string? ToString() => $"[ShaderModule 0x{(ulong)Handle:X16}]";
	public override bool Equals(object? o) => (o is ShaderModule t) && (t.Handle == Handle);
	bool IEquatable<ShaderModule>.Equals(ShaderModule? other) => (other?.Handle ?? new()) == Handle;

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static implicit operator Vk.Handle<ShaderModule> (ShaderModule? handle) => handle?.Handle ?? new();
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static bool operator == (ShaderModule? l, ShaderModule? r) => (l?.Handle ?? new()) == (r?.Handle ?? new());
	public static bool operator != (ShaderModule? l, ShaderModule? r) => (l?.Handle ?? new()) == (r?.Handle ?? new());
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static implicit operator bool (ShaderModule? handle) => handle?.Handle.IsValid ?? false;

	/// <summary>vkDestroyShaderModule</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void DestroyShaderModule(Vk.AllocationCallbacks* pAllocator)
	{
		if (Functions.vkDestroyShaderModule == null) throw new Vk.Extras.FunctionNotLoadedException("vkDestroyShaderModule");
		Functions.vkDestroyShaderModule(Device.Handle, Handle, pAllocator);
	}

	/// <summary>vkDestroyShaderModule</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void DestroyShaderModule(in Vk.AllocationCallbacks allocator)
	{
		if (Functions.vkDestroyShaderModule == null) throw new Vk.Extras.FunctionNotLoadedException("vkDestroyShaderModule");
		Functions.DestroyShaderModule(Device.Handle, Handle, allocator);
	}

}

public unsafe partial class Pipeline : IHandleType<Pipeline>
{
	public static readonly Pipeline Null = new(Device.Null, Vk.Handle<Pipeline>.Null);

	public readonly Vk.Device Parent;
	public readonly Vk.DeviceFunctionTable Functions;
	public readonly Vk.Instance Instance;
	public readonly Vk.Device Device;
	public readonly Handle<Pipeline> Handle;
	public bool IsValid => Handle.IsValid;

	public Pipeline(in Vk.Device parent, Vk.Handle<Pipeline> handle)
	{
		Parent = parent;
		Functions = parent.Functions;
		Instance = parent.Instance;
		Device = parent;
		Handle = handle;
	}

	public override int GetHashCode() => Handle.GetHashCode();
	public override string? ToString() => $"[Pipeline 0x{(ulong)Handle:X16}]";
	public override bool Equals(object? o) => (o is Pipeline t) && (t.Handle == Handle);
	bool IEquatable<Pipeline>.Equals(Pipeline? other) => (other?.Handle ?? new()) == Handle;

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static implicit operator Vk.Handle<Pipeline> (Pipeline? handle) => handle?.Handle ?? new();
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static bool operator == (Pipeline? l, Pipeline? r) => (l?.Handle ?? new()) == (r?.Handle ?? new());
	public static bool operator != (Pipeline? l, Pipeline? r) => (l?.Handle ?? new()) == (r?.Handle ?? new());
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static implicit operator bool (Pipeline? handle) => handle?.Handle.IsValid ?? false;

	/// <summary>vkDestroyPipeline</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void DestroyPipeline(Vk.AllocationCallbacks* pAllocator)
	{
		if (Functions.vkDestroyPipeline == null) throw new Vk.Extras.FunctionNotLoadedException("vkDestroyPipeline");
		Functions.vkDestroyPipeline(Device.Handle, Handle, pAllocator);
	}

	/// <summary>vkDestroyPipeline</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void DestroyPipeline(in Vk.AllocationCallbacks allocator)
	{
		if (Functions.vkDestroyPipeline == null) throw new Vk.Extras.FunctionNotLoadedException("vkDestroyPipeline");
		Functions.DestroyPipeline(Device.Handle, Handle, allocator);
	}

	/// <summary>vkGetShaderInfoAMD</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result GetShaderInfoAMD(Vk.ShaderStageFlags shaderStage, Vk.AMD.ShaderInfoType infoType, ulong* pInfoSize, void* pInfo)
	{
		if (Functions.vkGetShaderInfoAMD == null) throw new Vk.Extras.FunctionNotLoadedException("vkGetShaderInfoAMD");
		return Functions.vkGetShaderInfoAMD(Device.Handle, Handle, shaderStage, infoType, pInfoSize, pInfo);
	}

	/// <summary>vkGetShaderInfoAMD</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result GetShaderInfoAMD(Vk.ShaderStageFlags shaderStage, Vk.AMD.ShaderInfoType infoType, out ulong infoSize, void* pInfo)
	{
		if (Functions.vkGetShaderInfoAMD == null) throw new Vk.Extras.FunctionNotLoadedException("vkGetShaderInfoAMD");
		return Functions.GetShaderInfoAMD(Device.Handle, Handle, shaderStage, infoType, out infoSize, pInfo);
	}

	/// <summary>vkCompileDeferredNV</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result CompileDeferredNV(uint shader)
	{
		if (Functions.vkCompileDeferredNV == null) throw new Vk.Extras.FunctionNotLoadedException("vkCompileDeferredNV");
		return Functions.vkCompileDeferredNV(Device.Handle, Handle, shader);
	}

	/// <summary>vkGetRayTracingShaderGroupHandlesKHR</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result GetRayTracingShaderGroupHandlesKHR(uint firstGroup, uint groupCount, ulong dataSize, void* pData)
	{
		if (Functions.vkGetRayTracingShaderGroupHandlesKHR == null) throw new Vk.Extras.FunctionNotLoadedException("vkGetRayTracingShaderGroupHandlesKHR");
		return Functions.vkGetRayTracingShaderGroupHandlesKHR(Device.Handle, Handle, firstGroup, groupCount, dataSize, pData);
	}

	/// <summary>vkGetRayTracingShaderGroupHandlesNV</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result GetRayTracingShaderGroupHandlesNV(uint firstGroup, uint groupCount, ulong dataSize, void* pData)
	{
		if (Functions.vkGetRayTracingShaderGroupHandlesNV == null) throw new Vk.Extras.FunctionNotLoadedException("vkGetRayTracingShaderGroupHandlesNV");
		return Functions.vkGetRayTracingShaderGroupHandlesNV(Device.Handle, Handle, firstGroup, groupCount, dataSize, pData);
	}

	/// <summary>vkGetRayTracingCaptureReplayShaderGroupHandlesKHR</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result GetRayTracingCaptureReplayShaderGroupHandlesKHR(uint firstGroup, uint groupCount, ulong dataSize, void* pData)
	{
		if (Functions.vkGetRayTracingCaptureReplayShaderGroupHandlesKHR == null) throw new Vk.Extras.FunctionNotLoadedException("vkGetRayTracingCaptureReplayShaderGroupHandlesKHR");
		return Functions.vkGetRayTracingCaptureReplayShaderGroupHandlesKHR(Device.Handle, Handle, firstGroup, groupCount, dataSize, pData);
	}

}

public unsafe partial class PipelineLayout : IHandleType<PipelineLayout>
{
	public static readonly PipelineLayout Null = new(Device.Null, Vk.Handle<PipelineLayout>.Null);

	public readonly Vk.Device Parent;
	public readonly Vk.DeviceFunctionTable Functions;
	public readonly Vk.Instance Instance;
	public readonly Vk.Device Device;
	public readonly Handle<PipelineLayout> Handle;
	public bool IsValid => Handle.IsValid;

	public PipelineLayout(in Vk.Device parent, Vk.Handle<PipelineLayout> handle)
	{
		Parent = parent;
		Functions = parent.Functions;
		Instance = parent.Instance;
		Device = parent;
		Handle = handle;
	}

	public override int GetHashCode() => Handle.GetHashCode();
	public override string? ToString() => $"[PipelineLayout 0x{(ulong)Handle:X16}]";
	public override bool Equals(object? o) => (o is PipelineLayout t) && (t.Handle == Handle);
	bool IEquatable<PipelineLayout>.Equals(PipelineLayout? other) => (other?.Handle ?? new()) == Handle;

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static implicit operator Vk.Handle<PipelineLayout> (PipelineLayout? handle) => handle?.Handle ?? new();
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static bool operator == (PipelineLayout? l, PipelineLayout? r) => (l?.Handle ?? new()) == (r?.Handle ?? new());
	public static bool operator != (PipelineLayout? l, PipelineLayout? r) => (l?.Handle ?? new()) == (r?.Handle ?? new());
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static implicit operator bool (PipelineLayout? handle) => handle?.Handle.IsValid ?? false;

	/// <summary>vkDestroyPipelineLayout</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void DestroyPipelineLayout(Vk.AllocationCallbacks* pAllocator)
	{
		if (Functions.vkDestroyPipelineLayout == null) throw new Vk.Extras.FunctionNotLoadedException("vkDestroyPipelineLayout");
		Functions.vkDestroyPipelineLayout(Device.Handle, Handle, pAllocator);
	}

	/// <summary>vkDestroyPipelineLayout</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void DestroyPipelineLayout(in Vk.AllocationCallbacks allocator)
	{
		if (Functions.vkDestroyPipelineLayout == null) throw new Vk.Extras.FunctionNotLoadedException("vkDestroyPipelineLayout");
		Functions.DestroyPipelineLayout(Device.Handle, Handle, allocator);
	}

}

public unsafe partial class Sampler : IHandleType<Sampler>
{
	public static readonly Sampler Null = new(Device.Null, Vk.Handle<Sampler>.Null);

	public readonly Vk.Device Parent;
	public readonly Vk.DeviceFunctionTable Functions;
	public readonly Vk.Instance Instance;
	public readonly Vk.Device Device;
	public readonly Handle<Sampler> Handle;
	public bool IsValid => Handle.IsValid;

	public Sampler(in Vk.Device parent, Vk.Handle<Sampler> handle)
	{
		Parent = parent;
		Functions = parent.Functions;
		Instance = parent.Instance;
		Device = parent;
		Handle = handle;
	}

	public override int GetHashCode() => Handle.GetHashCode();
	public override string? ToString() => $"[Sampler 0x{(ulong)Handle:X16}]";
	public override bool Equals(object? o) => (o is Sampler t) && (t.Handle == Handle);
	bool IEquatable<Sampler>.Equals(Sampler? other) => (other?.Handle ?? new()) == Handle;

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static implicit operator Vk.Handle<Sampler> (Sampler? handle) => handle?.Handle ?? new();
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static bool operator == (Sampler? l, Sampler? r) => (l?.Handle ?? new()) == (r?.Handle ?? new());
	public static bool operator != (Sampler? l, Sampler? r) => (l?.Handle ?? new()) == (r?.Handle ?? new());
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static implicit operator bool (Sampler? handle) => handle?.Handle.IsValid ?? false;

	/// <summary>vkDestroySampler</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void DestroySampler(Vk.AllocationCallbacks* pAllocator)
	{
		if (Functions.vkDestroySampler == null) throw new Vk.Extras.FunctionNotLoadedException("vkDestroySampler");
		Functions.vkDestroySampler(Device.Handle, Handle, pAllocator);
	}

	/// <summary>vkDestroySampler</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void DestroySampler(in Vk.AllocationCallbacks allocator)
	{
		if (Functions.vkDestroySampler == null) throw new Vk.Extras.FunctionNotLoadedException("vkDestroySampler");
		Functions.DestroySampler(Device.Handle, Handle, allocator);
	}

}

public unsafe partial class DescriptorSet : IHandleType<DescriptorSet>
{
	public static readonly DescriptorSet Null = new(DescriptorPool.Null, Vk.Handle<DescriptorSet>.Null);

	public readonly Vk.DescriptorPool Parent;
	public readonly Vk.DeviceFunctionTable Functions;
	public readonly Vk.Instance Instance;
	public readonly Vk.Device Device;
	public readonly Handle<DescriptorSet> Handle;
	public bool IsValid => Handle.IsValid;

	public DescriptorSet(in Vk.DescriptorPool parent, Vk.Handle<DescriptorSet> handle)
	{
		Parent = parent;
		Functions = parent.Functions;
		Instance = parent.Instance;
		Device = parent.Device;
		Handle = handle;
	}

	public override int GetHashCode() => Handle.GetHashCode();
	public override string? ToString() => $"[DescriptorSet 0x{(ulong)Handle:X16}]";
	public override bool Equals(object? o) => (o is DescriptorSet t) && (t.Handle == Handle);
	bool IEquatable<DescriptorSet>.Equals(DescriptorSet? other) => (other?.Handle ?? new()) == Handle;

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static implicit operator Vk.Handle<DescriptorSet> (DescriptorSet? handle) => handle?.Handle ?? new();
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static bool operator == (DescriptorSet? l, DescriptorSet? r) => (l?.Handle ?? new()) == (r?.Handle ?? new());
	public static bool operator != (DescriptorSet? l, DescriptorSet? r) => (l?.Handle ?? new()) == (r?.Handle ?? new());
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static implicit operator bool (DescriptorSet? handle) => handle?.Handle.IsValid ?? false;

	/// <summary>vkUpdateDescriptorSetWithTemplate</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void UpdateDescriptorSetWithTemplate(Vk.Handle<Vk.DescriptorUpdateTemplate> descriptorUpdateTemplate, void* pData)
	{
		if (Functions.vkUpdateDescriptorSetWithTemplate == null) throw new Vk.Extras.FunctionNotLoadedException("vkUpdateDescriptorSetWithTemplate");
		Functions.vkUpdateDescriptorSetWithTemplate(Device.Handle, Handle, descriptorUpdateTemplate, pData);
	}

	/// <summary>vkUpdateDescriptorSetWithTemplateKHR</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void UpdateDescriptorSetWithTemplateKHR(Vk.Handle<Vk.DescriptorUpdateTemplate> descriptorUpdateTemplate, void* pData)
	{
		if (Functions.vkUpdateDescriptorSetWithTemplateKHR == null) throw new Vk.Extras.FunctionNotLoadedException("vkUpdateDescriptorSetWithTemplateKHR");
		Functions.vkUpdateDescriptorSetWithTemplateKHR(Device.Handle, Handle, descriptorUpdateTemplate, pData);
	}

}

public unsafe partial class DescriptorSetLayout : IHandleType<DescriptorSetLayout>
{
	public static readonly DescriptorSetLayout Null = new(Device.Null, Vk.Handle<DescriptorSetLayout>.Null);

	public readonly Vk.Device Parent;
	public readonly Vk.DeviceFunctionTable Functions;
	public readonly Vk.Instance Instance;
	public readonly Vk.Device Device;
	public readonly Handle<DescriptorSetLayout> Handle;
	public bool IsValid => Handle.IsValid;

	public DescriptorSetLayout(in Vk.Device parent, Vk.Handle<DescriptorSetLayout> handle)
	{
		Parent = parent;
		Functions = parent.Functions;
		Instance = parent.Instance;
		Device = parent;
		Handle = handle;
	}

	public override int GetHashCode() => Handle.GetHashCode();
	public override string? ToString() => $"[DescriptorSetLayout 0x{(ulong)Handle:X16}]";
	public override bool Equals(object? o) => (o is DescriptorSetLayout t) && (t.Handle == Handle);
	bool IEquatable<DescriptorSetLayout>.Equals(DescriptorSetLayout? other) => (other?.Handle ?? new()) == Handle;

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static implicit operator Vk.Handle<DescriptorSetLayout> (DescriptorSetLayout? handle) => handle?.Handle ?? new();
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static bool operator == (DescriptorSetLayout? l, DescriptorSetLayout? r) => (l?.Handle ?? new()) == (r?.Handle ?? new());
	public static bool operator != (DescriptorSetLayout? l, DescriptorSetLayout? r) => (l?.Handle ?? new()) == (r?.Handle ?? new());
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static implicit operator bool (DescriptorSetLayout? handle) => handle?.Handle.IsValid ?? false;

	/// <summary>vkDestroyDescriptorSetLayout</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void DestroyDescriptorSetLayout(Vk.AllocationCallbacks* pAllocator)
	{
		if (Functions.vkDestroyDescriptorSetLayout == null) throw new Vk.Extras.FunctionNotLoadedException("vkDestroyDescriptorSetLayout");
		Functions.vkDestroyDescriptorSetLayout(Device.Handle, Handle, pAllocator);
	}

	/// <summary>vkDestroyDescriptorSetLayout</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void DestroyDescriptorSetLayout(in Vk.AllocationCallbacks allocator)
	{
		if (Functions.vkDestroyDescriptorSetLayout == null) throw new Vk.Extras.FunctionNotLoadedException("vkDestroyDescriptorSetLayout");
		Functions.DestroyDescriptorSetLayout(Device.Handle, Handle, allocator);
	}

}

public unsafe partial class DescriptorPool : IHandleType<DescriptorPool>
{
	public static readonly DescriptorPool Null = new(Device.Null, Vk.Handle<DescriptorPool>.Null);

	public readonly Vk.Device Parent;
	public readonly Vk.DeviceFunctionTable Functions;
	public readonly Vk.Instance Instance;
	public readonly Vk.Device Device;
	public readonly Handle<DescriptorPool> Handle;
	public bool IsValid => Handle.IsValid;

	public DescriptorPool(in Vk.Device parent, Vk.Handle<DescriptorPool> handle)
	{
		Parent = parent;
		Functions = parent.Functions;
		Instance = parent.Instance;
		Device = parent;
		Handle = handle;
	}

	public override int GetHashCode() => Handle.GetHashCode();
	public override string? ToString() => $"[DescriptorPool 0x{(ulong)Handle:X16}]";
	public override bool Equals(object? o) => (o is DescriptorPool t) && (t.Handle == Handle);
	bool IEquatable<DescriptorPool>.Equals(DescriptorPool? other) => (other?.Handle ?? new()) == Handle;

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static implicit operator Vk.Handle<DescriptorPool> (DescriptorPool? handle) => handle?.Handle ?? new();
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static bool operator == (DescriptorPool? l, DescriptorPool? r) => (l?.Handle ?? new()) == (r?.Handle ?? new());
	public static bool operator != (DescriptorPool? l, DescriptorPool? r) => (l?.Handle ?? new()) == (r?.Handle ?? new());
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static implicit operator bool (DescriptorPool? handle) => handle?.Handle.IsValid ?? false;

	/// <summary>vkDestroyDescriptorPool</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void DestroyDescriptorPool(Vk.AllocationCallbacks* pAllocator)
	{
		if (Functions.vkDestroyDescriptorPool == null) throw new Vk.Extras.FunctionNotLoadedException("vkDestroyDescriptorPool");
		Functions.vkDestroyDescriptorPool(Device.Handle, Handle, pAllocator);
	}

	/// <summary>vkDestroyDescriptorPool</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void DestroyDescriptorPool(in Vk.AllocationCallbacks allocator)
	{
		if (Functions.vkDestroyDescriptorPool == null) throw new Vk.Extras.FunctionNotLoadedException("vkDestroyDescriptorPool");
		Functions.DestroyDescriptorPool(Device.Handle, Handle, allocator);
	}

	/// <summary>vkResetDescriptorPool</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result ResetDescriptorPool(Vk.DescriptorPoolResetFlags flags)
	{
		if (Functions.vkResetDescriptorPool == null) throw new Vk.Extras.FunctionNotLoadedException("vkResetDescriptorPool");
		return Functions.vkResetDescriptorPool(Device.Handle, Handle, flags);
	}

	/// <summary>vkFreeDescriptorSets</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result FreeDescriptorSets(uint descriptorSetCount, Vk.Handle<Vk.DescriptorSet>* pDescriptorSets)
	{
		if (Functions.vkFreeDescriptorSets == null) throw new Vk.Extras.FunctionNotLoadedException("vkFreeDescriptorSets");
		return Functions.vkFreeDescriptorSets(Device.Handle, Handle, descriptorSetCount, pDescriptorSets);
	}

	/// <summary>vkFreeDescriptorSets</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result FreeDescriptorSets(in ReadOnlySpan<Vk.Handle<Vk.DescriptorSet>> descriptorSets)
	{
		if (Functions.vkFreeDescriptorSets == null) throw new Vk.Extras.FunctionNotLoadedException("vkFreeDescriptorSets");
		return Functions.FreeDescriptorSets(Device.Handle, Handle, descriptorSets);
	}

}

public unsafe partial class Fence : IHandleType<Fence>
{
	public static readonly Fence Null = new(Device.Null, Vk.Handle<Fence>.Null);

	public readonly Vk.Device Parent;
	public readonly Vk.DeviceFunctionTable Functions;
	public readonly Vk.Instance Instance;
	public readonly Vk.Device Device;
	public readonly Handle<Fence> Handle;
	public bool IsValid => Handle.IsValid;

	public Fence(in Vk.Device parent, Vk.Handle<Fence> handle)
	{
		Parent = parent;
		Functions = parent.Functions;
		Instance = parent.Instance;
		Device = parent;
		Handle = handle;
	}

	public override int GetHashCode() => Handle.GetHashCode();
	public override string? ToString() => $"[Fence 0x{(ulong)Handle:X16}]";
	public override bool Equals(object? o) => (o is Fence t) && (t.Handle == Handle);
	bool IEquatable<Fence>.Equals(Fence? other) => (other?.Handle ?? new()) == Handle;

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static implicit operator Vk.Handle<Fence> (Fence? handle) => handle?.Handle ?? new();
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static bool operator == (Fence? l, Fence? r) => (l?.Handle ?? new()) == (r?.Handle ?? new());
	public static bool operator != (Fence? l, Fence? r) => (l?.Handle ?? new()) == (r?.Handle ?? new());
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static implicit operator bool (Fence? handle) => handle?.Handle.IsValid ?? false;

	/// <summary>vkDestroyFence</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void DestroyFence(Vk.AllocationCallbacks* pAllocator)
	{
		if (Functions.vkDestroyFence == null) throw new Vk.Extras.FunctionNotLoadedException("vkDestroyFence");
		Functions.vkDestroyFence(Device.Handle, Handle, pAllocator);
	}

	/// <summary>vkDestroyFence</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void DestroyFence(in Vk.AllocationCallbacks allocator)
	{
		if (Functions.vkDestroyFence == null) throw new Vk.Extras.FunctionNotLoadedException("vkDestroyFence");
		Functions.DestroyFence(Device.Handle, Handle, allocator);
	}

	/// <summary>vkGetFenceStatus</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result GetFenceStatus()
	{
		if (Functions.vkGetFenceStatus == null) throw new Vk.Extras.FunctionNotLoadedException("vkGetFenceStatus");
		return Functions.vkGetFenceStatus(Device.Handle, Handle);
	}

}

public unsafe partial class Semaphore : IHandleType<Semaphore>
{
	public static readonly Semaphore Null = new(Device.Null, Vk.Handle<Semaphore>.Null);

	public readonly Vk.Device Parent;
	public readonly Vk.DeviceFunctionTable Functions;
	public readonly Vk.Instance Instance;
	public readonly Vk.Device Device;
	public readonly Handle<Semaphore> Handle;
	public bool IsValid => Handle.IsValid;

	public Semaphore(in Vk.Device parent, Vk.Handle<Semaphore> handle)
	{
		Parent = parent;
		Functions = parent.Functions;
		Instance = parent.Instance;
		Device = parent;
		Handle = handle;
	}

	public override int GetHashCode() => Handle.GetHashCode();
	public override string? ToString() => $"[Semaphore 0x{(ulong)Handle:X16}]";
	public override bool Equals(object? o) => (o is Semaphore t) && (t.Handle == Handle);
	bool IEquatable<Semaphore>.Equals(Semaphore? other) => (other?.Handle ?? new()) == Handle;

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static implicit operator Vk.Handle<Semaphore> (Semaphore? handle) => handle?.Handle ?? new();
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static bool operator == (Semaphore? l, Semaphore? r) => (l?.Handle ?? new()) == (r?.Handle ?? new());
	public static bool operator != (Semaphore? l, Semaphore? r) => (l?.Handle ?? new()) == (r?.Handle ?? new());
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static implicit operator bool (Semaphore? handle) => handle?.Handle.IsValid ?? false;

	/// <summary>vkDestroySemaphore</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void DestroySemaphore(Vk.AllocationCallbacks* pAllocator)
	{
		if (Functions.vkDestroySemaphore == null) throw new Vk.Extras.FunctionNotLoadedException("vkDestroySemaphore");
		Functions.vkDestroySemaphore(Device.Handle, Handle, pAllocator);
	}

	/// <summary>vkDestroySemaphore</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void DestroySemaphore(in Vk.AllocationCallbacks allocator)
	{
		if (Functions.vkDestroySemaphore == null) throw new Vk.Extras.FunctionNotLoadedException("vkDestroySemaphore");
		Functions.DestroySemaphore(Device.Handle, Handle, allocator);
	}

	/// <summary>vkGetSemaphoreCounterValue</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result GetSemaphoreCounterValue(ulong* pValue)
	{
		if (Functions.vkGetSemaphoreCounterValue == null) throw new Vk.Extras.FunctionNotLoadedException("vkGetSemaphoreCounterValue");
		return Functions.vkGetSemaphoreCounterValue(Device.Handle, Handle, pValue);
	}

	/// <summary>vkGetSemaphoreCounterValue</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result GetSemaphoreCounterValue(out ulong value)
	{
		if (Functions.vkGetSemaphoreCounterValue == null) throw new Vk.Extras.FunctionNotLoadedException("vkGetSemaphoreCounterValue");
		return Functions.GetSemaphoreCounterValue(Device.Handle, Handle, out value);
	}

	/// <summary>vkGetSemaphoreCounterValueKHR</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result GetSemaphoreCounterValueKHR(ulong* pValue)
	{
		if (Functions.vkGetSemaphoreCounterValueKHR == null) throw new Vk.Extras.FunctionNotLoadedException("vkGetSemaphoreCounterValueKHR");
		return Functions.vkGetSemaphoreCounterValueKHR(Device.Handle, Handle, pValue);
	}

	/// <summary>vkGetSemaphoreCounterValueKHR</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result GetSemaphoreCounterValueKHR(out ulong value)
	{
		if (Functions.vkGetSemaphoreCounterValueKHR == null) throw new Vk.Extras.FunctionNotLoadedException("vkGetSemaphoreCounterValueKHR");
		return Functions.GetSemaphoreCounterValueKHR(Device.Handle, Handle, out value);
	}

}

public unsafe partial class Event : IHandleType<Event>
{
	public static readonly Event Null = new(Device.Null, Vk.Handle<Event>.Null);

	public readonly Vk.Device Parent;
	public readonly Vk.DeviceFunctionTable Functions;
	public readonly Vk.Instance Instance;
	public readonly Vk.Device Device;
	public readonly Handle<Event> Handle;
	public bool IsValid => Handle.IsValid;

	public Event(in Vk.Device parent, Vk.Handle<Event> handle)
	{
		Parent = parent;
		Functions = parent.Functions;
		Instance = parent.Instance;
		Device = parent;
		Handle = handle;
	}

	public override int GetHashCode() => Handle.GetHashCode();
	public override string? ToString() => $"[Event 0x{(ulong)Handle:X16}]";
	public override bool Equals(object? o) => (o is Event t) && (t.Handle == Handle);
	bool IEquatable<Event>.Equals(Event? other) => (other?.Handle ?? new()) == Handle;

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static implicit operator Vk.Handle<Event> (Event? handle) => handle?.Handle ?? new();
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static bool operator == (Event? l, Event? r) => (l?.Handle ?? new()) == (r?.Handle ?? new());
	public static bool operator != (Event? l, Event? r) => (l?.Handle ?? new()) == (r?.Handle ?? new());
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static implicit operator bool (Event? handle) => handle?.Handle.IsValid ?? false;

	/// <summary>vkDestroyEvent</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void DestroyEvent(Vk.AllocationCallbacks* pAllocator)
	{
		if (Functions.vkDestroyEvent == null) throw new Vk.Extras.FunctionNotLoadedException("vkDestroyEvent");
		Functions.vkDestroyEvent(Device.Handle, Handle, pAllocator);
	}

	/// <summary>vkDestroyEvent</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void DestroyEvent(in Vk.AllocationCallbacks allocator)
	{
		if (Functions.vkDestroyEvent == null) throw new Vk.Extras.FunctionNotLoadedException("vkDestroyEvent");
		Functions.DestroyEvent(Device.Handle, Handle, allocator);
	}

	/// <summary>vkGetEventStatus</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result GetEventStatus()
	{
		if (Functions.vkGetEventStatus == null) throw new Vk.Extras.FunctionNotLoadedException("vkGetEventStatus");
		return Functions.vkGetEventStatus(Device.Handle, Handle);
	}

	/// <summary>vkSetEvent</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result SetEvent()
	{
		if (Functions.vkSetEvent == null) throw new Vk.Extras.FunctionNotLoadedException("vkSetEvent");
		return Functions.vkSetEvent(Device.Handle, Handle);
	}

	/// <summary>vkResetEvent</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result ResetEvent()
	{
		if (Functions.vkResetEvent == null) throw new Vk.Extras.FunctionNotLoadedException("vkResetEvent");
		return Functions.vkResetEvent(Device.Handle, Handle);
	}

}

public unsafe partial class QueryPool : IHandleType<QueryPool>
{
	public static readonly QueryPool Null = new(Device.Null, Vk.Handle<QueryPool>.Null);

	public readonly Vk.Device Parent;
	public readonly Vk.DeviceFunctionTable Functions;
	public readonly Vk.Instance Instance;
	public readonly Vk.Device Device;
	public readonly Handle<QueryPool> Handle;
	public bool IsValid => Handle.IsValid;

	public QueryPool(in Vk.Device parent, Vk.Handle<QueryPool> handle)
	{
		Parent = parent;
		Functions = parent.Functions;
		Instance = parent.Instance;
		Device = parent;
		Handle = handle;
	}

	public override int GetHashCode() => Handle.GetHashCode();
	public override string? ToString() => $"[QueryPool 0x{(ulong)Handle:X16}]";
	public override bool Equals(object? o) => (o is QueryPool t) && (t.Handle == Handle);
	bool IEquatable<QueryPool>.Equals(QueryPool? other) => (other?.Handle ?? new()) == Handle;

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static implicit operator Vk.Handle<QueryPool> (QueryPool? handle) => handle?.Handle ?? new();
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static bool operator == (QueryPool? l, QueryPool? r) => (l?.Handle ?? new()) == (r?.Handle ?? new());
	public static bool operator != (QueryPool? l, QueryPool? r) => (l?.Handle ?? new()) == (r?.Handle ?? new());
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static implicit operator bool (QueryPool? handle) => handle?.Handle.IsValid ?? false;

	/// <summary>vkDestroyQueryPool</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void DestroyQueryPool(Vk.AllocationCallbacks* pAllocator)
	{
		if (Functions.vkDestroyQueryPool == null) throw new Vk.Extras.FunctionNotLoadedException("vkDestroyQueryPool");
		Functions.vkDestroyQueryPool(Device.Handle, Handle, pAllocator);
	}

	/// <summary>vkDestroyQueryPool</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void DestroyQueryPool(in Vk.AllocationCallbacks allocator)
	{
		if (Functions.vkDestroyQueryPool == null) throw new Vk.Extras.FunctionNotLoadedException("vkDestroyQueryPool");
		Functions.DestroyQueryPool(Device.Handle, Handle, allocator);
	}

	/// <summary>vkGetQueryPoolResults</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result GetQueryPoolResults(uint firstQuery, uint queryCount, ulong dataSize, void* pData, Vk.DeviceSize stride, Vk.QueryResultFlags flags)
	{
		if (Functions.vkGetQueryPoolResults == null) throw new Vk.Extras.FunctionNotLoadedException("vkGetQueryPoolResults");
		return Functions.vkGetQueryPoolResults(Device.Handle, Handle, firstQuery, queryCount, dataSize, pData, stride, flags);
	}

	/// <summary>vkResetQueryPool</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void ResetQueryPool(uint firstQuery, uint queryCount)
	{
		if (Functions.vkResetQueryPool == null) throw new Vk.Extras.FunctionNotLoadedException("vkResetQueryPool");
		Functions.vkResetQueryPool(Device.Handle, Handle, firstQuery, queryCount);
	}

	/// <summary>vkResetQueryPoolEXT</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void ResetQueryPoolEXT(uint firstQuery, uint queryCount)
	{
		if (Functions.vkResetQueryPoolEXT == null) throw new Vk.Extras.FunctionNotLoadedException("vkResetQueryPoolEXT");
		Functions.vkResetQueryPoolEXT(Device.Handle, Handle, firstQuery, queryCount);
	}

}

public unsafe partial class Framebuffer : IHandleType<Framebuffer>
{
	public static readonly Framebuffer Null = new(Device.Null, Vk.Handle<Framebuffer>.Null);

	public readonly Vk.Device Parent;
	public readonly Vk.DeviceFunctionTable Functions;
	public readonly Vk.Instance Instance;
	public readonly Vk.Device Device;
	public readonly Handle<Framebuffer> Handle;
	public bool IsValid => Handle.IsValid;

	public Framebuffer(in Vk.Device parent, Vk.Handle<Framebuffer> handle)
	{
		Parent = parent;
		Functions = parent.Functions;
		Instance = parent.Instance;
		Device = parent;
		Handle = handle;
	}

	public override int GetHashCode() => Handle.GetHashCode();
	public override string? ToString() => $"[Framebuffer 0x{(ulong)Handle:X16}]";
	public override bool Equals(object? o) => (o is Framebuffer t) && (t.Handle == Handle);
	bool IEquatable<Framebuffer>.Equals(Framebuffer? other) => (other?.Handle ?? new()) == Handle;

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static implicit operator Vk.Handle<Framebuffer> (Framebuffer? handle) => handle?.Handle ?? new();
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static bool operator == (Framebuffer? l, Framebuffer? r) => (l?.Handle ?? new()) == (r?.Handle ?? new());
	public static bool operator != (Framebuffer? l, Framebuffer? r) => (l?.Handle ?? new()) == (r?.Handle ?? new());
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static implicit operator bool (Framebuffer? handle) => handle?.Handle.IsValid ?? false;

	/// <summary>vkDestroyFramebuffer</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void DestroyFramebuffer(Vk.AllocationCallbacks* pAllocator)
	{
		if (Functions.vkDestroyFramebuffer == null) throw new Vk.Extras.FunctionNotLoadedException("vkDestroyFramebuffer");
		Functions.vkDestroyFramebuffer(Device.Handle, Handle, pAllocator);
	}

	/// <summary>vkDestroyFramebuffer</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void DestroyFramebuffer(in Vk.AllocationCallbacks allocator)
	{
		if (Functions.vkDestroyFramebuffer == null) throw new Vk.Extras.FunctionNotLoadedException("vkDestroyFramebuffer");
		Functions.DestroyFramebuffer(Device.Handle, Handle, allocator);
	}

}

public unsafe partial class RenderPass : IHandleType<RenderPass>
{
	public static readonly RenderPass Null = new(Device.Null, Vk.Handle<RenderPass>.Null);

	public readonly Vk.Device Parent;
	public readonly Vk.DeviceFunctionTable Functions;
	public readonly Vk.Instance Instance;
	public readonly Vk.Device Device;
	public readonly Handle<RenderPass> Handle;
	public bool IsValid => Handle.IsValid;

	public RenderPass(in Vk.Device parent, Vk.Handle<RenderPass> handle)
	{
		Parent = parent;
		Functions = parent.Functions;
		Instance = parent.Instance;
		Device = parent;
		Handle = handle;
	}

	public override int GetHashCode() => Handle.GetHashCode();
	public override string? ToString() => $"[RenderPass 0x{(ulong)Handle:X16}]";
	public override bool Equals(object? o) => (o is RenderPass t) && (t.Handle == Handle);
	bool IEquatable<RenderPass>.Equals(RenderPass? other) => (other?.Handle ?? new()) == Handle;

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static implicit operator Vk.Handle<RenderPass> (RenderPass? handle) => handle?.Handle ?? new();
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static bool operator == (RenderPass? l, RenderPass? r) => (l?.Handle ?? new()) == (r?.Handle ?? new());
	public static bool operator != (RenderPass? l, RenderPass? r) => (l?.Handle ?? new()) == (r?.Handle ?? new());
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static implicit operator bool (RenderPass? handle) => handle?.Handle.IsValid ?? false;

	/// <summary>vkDestroyRenderPass</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void DestroyRenderPass(Vk.AllocationCallbacks* pAllocator)
	{
		if (Functions.vkDestroyRenderPass == null) throw new Vk.Extras.FunctionNotLoadedException("vkDestroyRenderPass");
		Functions.vkDestroyRenderPass(Device.Handle, Handle, pAllocator);
	}

	/// <summary>vkDestroyRenderPass</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void DestroyRenderPass(in Vk.AllocationCallbacks allocator)
	{
		if (Functions.vkDestroyRenderPass == null) throw new Vk.Extras.FunctionNotLoadedException("vkDestroyRenderPass");
		Functions.DestroyRenderPass(Device.Handle, Handle, allocator);
	}

	/// <summary>vkGetRenderAreaGranularity</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void GetRenderAreaGranularity(Vk.Extent2D* pGranularity)
	{
		if (Functions.vkGetRenderAreaGranularity == null) throw new Vk.Extras.FunctionNotLoadedException("vkGetRenderAreaGranularity");
		Functions.vkGetRenderAreaGranularity(Device.Handle, Handle, pGranularity);
	}

	/// <summary>vkGetRenderAreaGranularity</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void GetRenderAreaGranularity(out Vk.Extent2D granularity)
	{
		if (Functions.vkGetRenderAreaGranularity == null) throw new Vk.Extras.FunctionNotLoadedException("vkGetRenderAreaGranularity");
		Functions.GetRenderAreaGranularity(Device.Handle, Handle, out granularity);
	}

}

public unsafe partial class PipelineCache : IHandleType<PipelineCache>
{
	public static readonly PipelineCache Null = new(Device.Null, Vk.Handle<PipelineCache>.Null);

	public readonly Vk.Device Parent;
	public readonly Vk.DeviceFunctionTable Functions;
	public readonly Vk.Instance Instance;
	public readonly Vk.Device Device;
	public readonly Handle<PipelineCache> Handle;
	public bool IsValid => Handle.IsValid;

	public PipelineCache(in Vk.Device parent, Vk.Handle<PipelineCache> handle)
	{
		Parent = parent;
		Functions = parent.Functions;
		Instance = parent.Instance;
		Device = parent;
		Handle = handle;
	}

	public override int GetHashCode() => Handle.GetHashCode();
	public override string? ToString() => $"[PipelineCache 0x{(ulong)Handle:X16}]";
	public override bool Equals(object? o) => (o is PipelineCache t) && (t.Handle == Handle);
	bool IEquatable<PipelineCache>.Equals(PipelineCache? other) => (other?.Handle ?? new()) == Handle;

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static implicit operator Vk.Handle<PipelineCache> (PipelineCache? handle) => handle?.Handle ?? new();
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static bool operator == (PipelineCache? l, PipelineCache? r) => (l?.Handle ?? new()) == (r?.Handle ?? new());
	public static bool operator != (PipelineCache? l, PipelineCache? r) => (l?.Handle ?? new()) == (r?.Handle ?? new());
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static implicit operator bool (PipelineCache? handle) => handle?.Handle.IsValid ?? false;

	/// <summary>vkDestroyPipelineCache</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void DestroyPipelineCache(Vk.AllocationCallbacks* pAllocator)
	{
		if (Functions.vkDestroyPipelineCache == null) throw new Vk.Extras.FunctionNotLoadedException("vkDestroyPipelineCache");
		Functions.vkDestroyPipelineCache(Device.Handle, Handle, pAllocator);
	}

	/// <summary>vkDestroyPipelineCache</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void DestroyPipelineCache(in Vk.AllocationCallbacks allocator)
	{
		if (Functions.vkDestroyPipelineCache == null) throw new Vk.Extras.FunctionNotLoadedException("vkDestroyPipelineCache");
		Functions.DestroyPipelineCache(Device.Handle, Handle, allocator);
	}

	/// <summary>vkGetPipelineCacheData</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result GetPipelineCacheData(ulong* pDataSize, void* pData)
	{
		if (Functions.vkGetPipelineCacheData == null) throw new Vk.Extras.FunctionNotLoadedException("vkGetPipelineCacheData");
		return Functions.vkGetPipelineCacheData(Device.Handle, Handle, pDataSize, pData);
	}

	/// <summary>vkGetPipelineCacheData</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result GetPipelineCacheData(out ulong dataSize, void* pData)
	{
		if (Functions.vkGetPipelineCacheData == null) throw new Vk.Extras.FunctionNotLoadedException("vkGetPipelineCacheData");
		return Functions.GetPipelineCacheData(Device.Handle, Handle, out dataSize, pData);
	}

	/// <summary>vkMergePipelineCaches</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result MergePipelineCaches(uint srcCacheCount, Vk.Handle<Vk.PipelineCache>* pSrcCaches)
	{
		if (Functions.vkMergePipelineCaches == null) throw new Vk.Extras.FunctionNotLoadedException("vkMergePipelineCaches");
		return Functions.vkMergePipelineCaches(Device.Handle, Handle, srcCacheCount, pSrcCaches);
	}

	/// <summary>vkMergePipelineCaches</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result MergePipelineCaches(in ReadOnlySpan<Vk.Handle<Vk.PipelineCache>> srcCaches)
	{
		if (Functions.vkMergePipelineCaches == null) throw new Vk.Extras.FunctionNotLoadedException("vkMergePipelineCaches");
		return Functions.MergePipelineCaches(Device.Handle, Handle, srcCaches);
	}

}

public unsafe partial class DescriptorUpdateTemplate : IHandleType<DescriptorUpdateTemplate>
{
	public static readonly DescriptorUpdateTemplate Null = new(Device.Null, Vk.Handle<DescriptorUpdateTemplate>.Null);

	public readonly Vk.Device Parent;
	public readonly Vk.DeviceFunctionTable Functions;
	public readonly Vk.Instance Instance;
	public readonly Vk.Device Device;
	public readonly Handle<DescriptorUpdateTemplate> Handle;
	public bool IsValid => Handle.IsValid;

	public DescriptorUpdateTemplate(in Vk.Device parent, Vk.Handle<DescriptorUpdateTemplate> handle)
	{
		Parent = parent;
		Functions = parent.Functions;
		Instance = parent.Instance;
		Device = parent;
		Handle = handle;
	}

	public override int GetHashCode() => Handle.GetHashCode();
	public override string? ToString() => $"[DescriptorUpdateTemplate 0x{(ulong)Handle:X16}]";
	public override bool Equals(object? o) => (o is DescriptorUpdateTemplate t) && (t.Handle == Handle);
	bool IEquatable<DescriptorUpdateTemplate>.Equals(DescriptorUpdateTemplate? other) => (other?.Handle ?? new()) == Handle;

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static implicit operator Vk.Handle<DescriptorUpdateTemplate> (DescriptorUpdateTemplate? handle) => handle?.Handle ?? new();
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static bool operator == (DescriptorUpdateTemplate? l, DescriptorUpdateTemplate? r) => (l?.Handle ?? new()) == (r?.Handle ?? new());
	public static bool operator != (DescriptorUpdateTemplate? l, DescriptorUpdateTemplate? r) => (l?.Handle ?? new()) == (r?.Handle ?? new());
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static implicit operator bool (DescriptorUpdateTemplate? handle) => handle?.Handle.IsValid ?? false;

	/// <summary>vkDestroyDescriptorUpdateTemplate</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void DestroyDescriptorUpdateTemplate(Vk.AllocationCallbacks* pAllocator)
	{
		if (Functions.vkDestroyDescriptorUpdateTemplate == null) throw new Vk.Extras.FunctionNotLoadedException("vkDestroyDescriptorUpdateTemplate");
		Functions.vkDestroyDescriptorUpdateTemplate(Device.Handle, Handle, pAllocator);
	}

	/// <summary>vkDestroyDescriptorUpdateTemplate</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void DestroyDescriptorUpdateTemplate(in Vk.AllocationCallbacks allocator)
	{
		if (Functions.vkDestroyDescriptorUpdateTemplate == null) throw new Vk.Extras.FunctionNotLoadedException("vkDestroyDescriptorUpdateTemplate");
		Functions.DestroyDescriptorUpdateTemplate(Device.Handle, Handle, allocator);
	}

	/// <summary>vkDestroyDescriptorUpdateTemplateKHR</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void DestroyDescriptorUpdateTemplateKHR(Vk.AllocationCallbacks* pAllocator)
	{
		if (Functions.vkDestroyDescriptorUpdateTemplateKHR == null) throw new Vk.Extras.FunctionNotLoadedException("vkDestroyDescriptorUpdateTemplateKHR");
		Functions.vkDestroyDescriptorUpdateTemplateKHR(Device.Handle, Handle, pAllocator);
	}

	/// <summary>vkDestroyDescriptorUpdateTemplateKHR</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void DestroyDescriptorUpdateTemplateKHR(in Vk.AllocationCallbacks allocator)
	{
		if (Functions.vkDestroyDescriptorUpdateTemplateKHR == null) throw new Vk.Extras.FunctionNotLoadedException("vkDestroyDescriptorUpdateTemplateKHR");
		Functions.DestroyDescriptorUpdateTemplateKHR(Device.Handle, Handle, allocator);
	}

}

public unsafe partial class SamplerYcbcrConversion : IHandleType<SamplerYcbcrConversion>
{
	public static readonly SamplerYcbcrConversion Null = new(Device.Null, Vk.Handle<SamplerYcbcrConversion>.Null);

	public readonly Vk.Device Parent;
	public readonly Vk.DeviceFunctionTable Functions;
	public readonly Vk.Instance Instance;
	public readonly Vk.Device Device;
	public readonly Handle<SamplerYcbcrConversion> Handle;
	public bool IsValid => Handle.IsValid;

	public SamplerYcbcrConversion(in Vk.Device parent, Vk.Handle<SamplerYcbcrConversion> handle)
	{
		Parent = parent;
		Functions = parent.Functions;
		Instance = parent.Instance;
		Device = parent;
		Handle = handle;
	}

	public override int GetHashCode() => Handle.GetHashCode();
	public override string? ToString() => $"[SamplerYcbcrConversion 0x{(ulong)Handle:X16}]";
	public override bool Equals(object? o) => (o is SamplerYcbcrConversion t) && (t.Handle == Handle);
	bool IEquatable<SamplerYcbcrConversion>.Equals(SamplerYcbcrConversion? other) => (other?.Handle ?? new()) == Handle;

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static implicit operator Vk.Handle<SamplerYcbcrConversion> (SamplerYcbcrConversion? handle) => handle?.Handle ?? new();
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static bool operator == (SamplerYcbcrConversion? l, SamplerYcbcrConversion? r) => (l?.Handle ?? new()) == (r?.Handle ?? new());
	public static bool operator != (SamplerYcbcrConversion? l, SamplerYcbcrConversion? r) => (l?.Handle ?? new()) == (r?.Handle ?? new());
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static implicit operator bool (SamplerYcbcrConversion? handle) => handle?.Handle.IsValid ?? false;

	/// <summary>vkDestroySamplerYcbcrConversion</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void DestroySamplerYcbcrConversion(Vk.AllocationCallbacks* pAllocator)
	{
		if (Functions.vkDestroySamplerYcbcrConversion == null) throw new Vk.Extras.FunctionNotLoadedException("vkDestroySamplerYcbcrConversion");
		Functions.vkDestroySamplerYcbcrConversion(Device.Handle, Handle, pAllocator);
	}

	/// <summary>vkDestroySamplerYcbcrConversion</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void DestroySamplerYcbcrConversion(in Vk.AllocationCallbacks allocator)
	{
		if (Functions.vkDestroySamplerYcbcrConversion == null) throw new Vk.Extras.FunctionNotLoadedException("vkDestroySamplerYcbcrConversion");
		Functions.DestroySamplerYcbcrConversion(Device.Handle, Handle, allocator);
	}

	/// <summary>vkDestroySamplerYcbcrConversionKHR</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void DestroySamplerYcbcrConversionKHR(Vk.AllocationCallbacks* pAllocator)
	{
		if (Functions.vkDestroySamplerYcbcrConversionKHR == null) throw new Vk.Extras.FunctionNotLoadedException("vkDestroySamplerYcbcrConversionKHR");
		Functions.vkDestroySamplerYcbcrConversionKHR(Device.Handle, Handle, pAllocator);
	}

	/// <summary>vkDestroySamplerYcbcrConversionKHR</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void DestroySamplerYcbcrConversionKHR(in Vk.AllocationCallbacks allocator)
	{
		if (Functions.vkDestroySamplerYcbcrConversionKHR == null) throw new Vk.Extras.FunctionNotLoadedException("vkDestroySamplerYcbcrConversionKHR");
		Functions.DestroySamplerYcbcrConversionKHR(Device.Handle, Handle, allocator);
	}

}

} // namespace Vk
