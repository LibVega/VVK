/*
 * MIT License - Copyright(c) 2020 Sean Moss
 * This file is subject to the terms and conditions of the MIT License, the text of which can be found in the 'LICENSE'
 * file at the root of this repository, or online at<https://opensource.org/licenses/MIT>.
 */

/// This file was generated by VVKGen. Edits to this file will be lost on next generation.

using System;
using System.Runtime.InteropServices;
using System.Runtime.CompilerServices;


namespace VVK.Vk.KHR
{

[StructLayout(LayoutKind.Explicit, Size = 8)]
public unsafe partial struct DescriptorUpdateTemplate
{
	public static readonly DescriptorUpdateTemplate Null = new(0);

	[FieldOffset(0)] public readonly void* Handle;
	public readonly ulong LongHandle => (ulong)Handle;

	public DescriptorUpdateTemplate(void* handle) => Handle = handle;
	public DescriptorUpdateTemplate(ulong handle) => Handle = (void*)handle;
	public DescriptorUpdateTemplate(IntPtr handle) => Handle = handle.ToPointer();
}

[StructLayout(LayoutKind.Explicit, Size = 8)]
public unsafe partial struct SamplerYcbcrConversion
{
	public static readonly SamplerYcbcrConversion Null = new(0);

	[FieldOffset(0)] public readonly void* Handle;
	public readonly ulong LongHandle => (ulong)Handle;

	public SamplerYcbcrConversion(void* handle) => Handle = handle;
	public SamplerYcbcrConversion(ulong handle) => Handle = (void*)handle;
	public SamplerYcbcrConversion(IntPtr handle) => Handle = handle.ToPointer();
}

[StructLayout(LayoutKind.Explicit, Size = 8)]
public unsafe partial struct AccelerationStructure
{
	public static readonly AccelerationStructure Null = new(0);

	[FieldOffset(0)] public readonly void* Handle;
	public readonly ulong LongHandle => (ulong)Handle;

	public AccelerationStructure(void* handle) => Handle = handle;
	public AccelerationStructure(ulong handle) => Handle = (void*)handle;
	public AccelerationStructure(IntPtr handle) => Handle = handle.ToPointer();
}

[StructLayout(LayoutKind.Explicit, Size = 8)]
public unsafe partial struct DeferredOperation
{
	public static readonly DeferredOperation Null = new(0);

	[FieldOffset(0)] public readonly void* Handle;
	public readonly ulong LongHandle => (ulong)Handle;

	public DeferredOperation(void* handle) => Handle = handle;
	public DeferredOperation(ulong handle) => Handle = (void*)handle;
	public DeferredOperation(IntPtr handle) => Handle = handle.ToPointer();
}

[StructLayout(LayoutKind.Explicit, Size = 8)]
public unsafe partial struct Display
{
	public static readonly Display Null = new(0);

	[FieldOffset(0)] public readonly void* Handle;
	public readonly ulong LongHandle => (ulong)Handle;

	public Display(void* handle) => Handle = handle;
	public Display(ulong handle) => Handle = (void*)handle;
	public Display(IntPtr handle) => Handle = handle.ToPointer();
}

[StructLayout(LayoutKind.Explicit, Size = 8)]
public unsafe partial struct DisplayMode
{
	public static readonly DisplayMode Null = new(0);

	[FieldOffset(0)] public readonly void* Handle;
	public readonly ulong LongHandle => (ulong)Handle;

	public DisplayMode(void* handle) => Handle = handle;
	public DisplayMode(ulong handle) => Handle = (void*)handle;
	public DisplayMode(IntPtr handle) => Handle = handle.ToPointer();
}

[StructLayout(LayoutKind.Explicit, Size = 8)]
public unsafe partial struct Surface
{
	public static readonly Surface Null = new(0);

	[FieldOffset(0)] public readonly void* Handle;
	public readonly ulong LongHandle => (ulong)Handle;

	public Surface(void* handle) => Handle = handle;
	public Surface(ulong handle) => Handle = (void*)handle;
	public Surface(IntPtr handle) => Handle = handle.ToPointer();
}

[StructLayout(LayoutKind.Explicit, Size = 8)]
public unsafe partial struct Swapchain
{
	public static readonly Swapchain Null = new(0);

	[FieldOffset(0)] public readonly void* Handle;
	public readonly ulong LongHandle => (ulong)Handle;

	public Swapchain(void* handle) => Handle = handle;
	public Swapchain(ulong handle) => Handle = (void*)handle;
	public Swapchain(IntPtr handle) => Handle = handle.ToPointer();
}

} // namespace VVK.Vk.KHR
