/*
 * MIT License - Copyright(c) 2020 Sean Moss
 * This file is subject to the terms and conditions of the MIT License, the text of which can be found in the 'LICENSE'
 * file at the root of this repository, or online at<https://opensource.org/licenses/MIT>.
 */

/// This file was generated by VVKGen. Edits to this file will be lost on next generation.

using System;
using System.Runtime.InteropServices;
using System.Runtime.CompilerServices;


namespace Vk.KHR
{

public unsafe partial struct DescriptorUpdateTemplate : IHandleType<DescriptorUpdateTemplate>
{
	public static readonly DescriptorUpdateTemplate Null = new();

	public readonly Vk.Device Parent;
	public readonly Vk.DeviceFunctionTable Functions;
	public readonly Vk.Instance Instance;
	public readonly Vk.Device Device;
	private readonly Handle<DescriptorUpdateTemplate> _handle;
	readonly Handle<DescriptorUpdateTemplate> IHandleType<DescriptorUpdateTemplate>.Handle => _handle;
	public readonly bool IsValid => _handle.IsValid;

	public DescriptorUpdateTemplate(in Vk.Device parent, Vk.Handle<DescriptorUpdateTemplate> handle)
	{
		Parent = parent;
		Functions = parent.Functions;
		Instance = parent.Instance;
		Device = parent;
		_handle = handle;
	}

	public override readonly int GetHashCode() => _handle.GetHashCode();
	public override readonly string? ToString() => $"[DescriptorUpdateTemplate 0x{(ulong)_handle:X16}]";
	public override readonly bool Equals(object? o) => (o is DescriptorUpdateTemplate t) && (t._handle == _handle);
	readonly bool IEquatable<DescriptorUpdateTemplate>.Equals(DescriptorUpdateTemplate other) => other._handle == _handle;

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static implicit operator Vk.Handle<DescriptorUpdateTemplate> (in DescriptorUpdateTemplate handle) => handle._handle;
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static bool operator == (DescriptorUpdateTemplate l, DescriptorUpdateTemplate r) => l._handle == r._handle;
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static bool operator != (DescriptorUpdateTemplate l, DescriptorUpdateTemplate r) => l._handle != r._handle;
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static implicit operator bool (DescriptorUpdateTemplate handle) => handle._handle.IsValid;
}

public unsafe partial struct SamplerYcbcrConversion : IHandleType<SamplerYcbcrConversion>
{
	public static readonly SamplerYcbcrConversion Null = new();

	public readonly Vk.Device Parent;
	public readonly Vk.DeviceFunctionTable Functions;
	public readonly Vk.Instance Instance;
	public readonly Vk.Device Device;
	private readonly Handle<SamplerYcbcrConversion> _handle;
	readonly Handle<SamplerYcbcrConversion> IHandleType<SamplerYcbcrConversion>.Handle => _handle;
	public readonly bool IsValid => _handle.IsValid;

	public SamplerYcbcrConversion(in Vk.Device parent, Vk.Handle<SamplerYcbcrConversion> handle)
	{
		Parent = parent;
		Functions = parent.Functions;
		Instance = parent.Instance;
		Device = parent;
		_handle = handle;
	}

	public override readonly int GetHashCode() => _handle.GetHashCode();
	public override readonly string? ToString() => $"[SamplerYcbcrConversion 0x{(ulong)_handle:X16}]";
	public override readonly bool Equals(object? o) => (o is SamplerYcbcrConversion t) && (t._handle == _handle);
	readonly bool IEquatable<SamplerYcbcrConversion>.Equals(SamplerYcbcrConversion other) => other._handle == _handle;

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static implicit operator Vk.Handle<SamplerYcbcrConversion> (in SamplerYcbcrConversion handle) => handle._handle;
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static bool operator == (SamplerYcbcrConversion l, SamplerYcbcrConversion r) => l._handle == r._handle;
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static bool operator != (SamplerYcbcrConversion l, SamplerYcbcrConversion r) => l._handle != r._handle;
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static implicit operator bool (SamplerYcbcrConversion handle) => handle._handle.IsValid;
}

public unsafe partial struct AccelerationStructure : IHandleType<AccelerationStructure>
{
	public static readonly AccelerationStructure Null = new();

	public readonly Vk.Device Parent;
	public readonly Vk.DeviceFunctionTable Functions;
	public readonly Vk.Instance Instance;
	public readonly Vk.Device Device;
	private readonly Handle<AccelerationStructure> _handle;
	readonly Handle<AccelerationStructure> IHandleType<AccelerationStructure>.Handle => _handle;
	public readonly bool IsValid => _handle.IsValid;

	public AccelerationStructure(in Vk.Device parent, Vk.Handle<AccelerationStructure> handle)
	{
		Parent = parent;
		Functions = parent.Functions;
		Instance = parent.Instance;
		Device = parent;
		_handle = handle;
	}

	public override readonly int GetHashCode() => _handle.GetHashCode();
	public override readonly string? ToString() => $"[AccelerationStructure 0x{(ulong)_handle:X16}]";
	public override readonly bool Equals(object? o) => (o is AccelerationStructure t) && (t._handle == _handle);
	readonly bool IEquatable<AccelerationStructure>.Equals(AccelerationStructure other) => other._handle == _handle;

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static implicit operator Vk.Handle<AccelerationStructure> (in AccelerationStructure handle) => handle._handle;
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static bool operator == (AccelerationStructure l, AccelerationStructure r) => l._handle == r._handle;
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static bool operator != (AccelerationStructure l, AccelerationStructure r) => l._handle != r._handle;
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static implicit operator bool (AccelerationStructure handle) => handle._handle.IsValid;
}

public unsafe partial struct DeferredOperation : IHandleType<DeferredOperation>
{
	public static readonly DeferredOperation Null = new();

	public readonly Vk.Device Parent;
	public readonly Vk.DeviceFunctionTable Functions;
	public readonly Vk.Instance Instance;
	public readonly Vk.Device Device;
	private readonly Handle<DeferredOperation> _handle;
	readonly Handle<DeferredOperation> IHandleType<DeferredOperation>.Handle => _handle;
	public readonly bool IsValid => _handle.IsValid;

	public DeferredOperation(in Vk.Device parent, Vk.Handle<DeferredOperation> handle)
	{
		Parent = parent;
		Functions = parent.Functions;
		Instance = parent.Instance;
		Device = parent;
		_handle = handle;
	}

	public override readonly int GetHashCode() => _handle.GetHashCode();
	public override readonly string? ToString() => $"[DeferredOperation 0x{(ulong)_handle:X16}]";
	public override readonly bool Equals(object? o) => (o is DeferredOperation t) && (t._handle == _handle);
	readonly bool IEquatable<DeferredOperation>.Equals(DeferredOperation other) => other._handle == _handle;

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static implicit operator Vk.Handle<DeferredOperation> (in DeferredOperation handle) => handle._handle;
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static bool operator == (DeferredOperation l, DeferredOperation r) => l._handle == r._handle;
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static bool operator != (DeferredOperation l, DeferredOperation r) => l._handle != r._handle;
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static implicit operator bool (DeferredOperation handle) => handle._handle.IsValid;
}

public unsafe partial struct Display : IHandleType<Display>
{
	public static readonly Display Null = new();

	public readonly Vk.PhysicalDevice Parent;
	public readonly Vk.InstanceFunctionTable Functions;
	public readonly Vk.Instance Instance;
	private readonly Handle<Display> _handle;
	readonly Handle<Display> IHandleType<Display>.Handle => _handle;
	public readonly bool IsValid => _handle.IsValid;

	public Display(in Vk.PhysicalDevice parent, Vk.Handle<Display> handle)
	{
		Parent = parent;
		Functions = parent.Functions;
		Instance = parent.Instance;
		_handle = handle;
	}

	public override readonly int GetHashCode() => _handle.GetHashCode();
	public override readonly string? ToString() => $"[Display 0x{(ulong)_handle:X16}]";
	public override readonly bool Equals(object? o) => (o is Display t) && (t._handle == _handle);
	readonly bool IEquatable<Display>.Equals(Display other) => other._handle == _handle;

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static implicit operator Vk.Handle<Display> (in Display handle) => handle._handle;
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static bool operator == (Display l, Display r) => l._handle == r._handle;
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static bool operator != (Display l, Display r) => l._handle != r._handle;
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static implicit operator bool (Display handle) => handle._handle.IsValid;
}

public unsafe partial struct DisplayMode : IHandleType<DisplayMode>
{
	public static readonly DisplayMode Null = new();

	public readonly Vk.KHR.Display Parent;
	public readonly Vk.InstanceFunctionTable Functions;
	public readonly Vk.Instance Instance;
	private readonly Handle<DisplayMode> _handle;
	readonly Handle<DisplayMode> IHandleType<DisplayMode>.Handle => _handle;
	public readonly bool IsValid => _handle.IsValid;

	public DisplayMode(in Vk.KHR.Display parent, Vk.Handle<DisplayMode> handle)
	{
		Parent = parent;
		Functions = parent.Functions;
		Instance = parent.Instance;
		_handle = handle;
	}

	public override readonly int GetHashCode() => _handle.GetHashCode();
	public override readonly string? ToString() => $"[DisplayMode 0x{(ulong)_handle:X16}]";
	public override readonly bool Equals(object? o) => (o is DisplayMode t) && (t._handle == _handle);
	readonly bool IEquatable<DisplayMode>.Equals(DisplayMode other) => other._handle == _handle;

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static implicit operator Vk.Handle<DisplayMode> (in DisplayMode handle) => handle._handle;
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static bool operator == (DisplayMode l, DisplayMode r) => l._handle == r._handle;
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static bool operator != (DisplayMode l, DisplayMode r) => l._handle != r._handle;
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static implicit operator bool (DisplayMode handle) => handle._handle.IsValid;
}

public unsafe partial struct Surface : IHandleType<Surface>
{
	public static readonly Surface Null = new();

	public readonly Vk.Instance Parent;
	public readonly Vk.InstanceFunctionTable Functions;
	public readonly Vk.Instance Instance;
	private readonly Handle<Surface> _handle;
	readonly Handle<Surface> IHandleType<Surface>.Handle => _handle;
	public readonly bool IsValid => _handle.IsValid;

	public Surface(in Vk.Instance parent, Vk.Handle<Surface> handle)
	{
		Parent = parent;
		Functions = parent.Functions;
		Instance = parent;
		_handle = handle;
	}

	public override readonly int GetHashCode() => _handle.GetHashCode();
	public override readonly string? ToString() => $"[Surface 0x{(ulong)_handle:X16}]";
	public override readonly bool Equals(object? o) => (o is Surface t) && (t._handle == _handle);
	readonly bool IEquatable<Surface>.Equals(Surface other) => other._handle == _handle;

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static implicit operator Vk.Handle<Surface> (in Surface handle) => handle._handle;
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static bool operator == (Surface l, Surface r) => l._handle == r._handle;
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static bool operator != (Surface l, Surface r) => l._handle != r._handle;
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static implicit operator bool (Surface handle) => handle._handle.IsValid;
}

public unsafe partial struct Swapchain : IHandleType<Swapchain>
{
	public static readonly Swapchain Null = new();

	public readonly Vk.KHR.Surface Parent;
	public readonly Vk.InstanceFunctionTable Functions;
	public readonly Vk.Instance Instance;
	private readonly Handle<Swapchain> _handle;
	readonly Handle<Swapchain> IHandleType<Swapchain>.Handle => _handle;
	public readonly bool IsValid => _handle.IsValid;

	public Swapchain(in Vk.KHR.Surface parent, Vk.Handle<Swapchain> handle)
	{
		Parent = parent;
		Functions = parent.Functions;
		Instance = parent.Instance;
		_handle = handle;
	}

	public override readonly int GetHashCode() => _handle.GetHashCode();
	public override readonly string? ToString() => $"[Swapchain 0x{(ulong)_handle:X16}]";
	public override readonly bool Equals(object? o) => (o is Swapchain t) && (t._handle == _handle);
	readonly bool IEquatable<Swapchain>.Equals(Swapchain other) => other._handle == _handle;

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static implicit operator Vk.Handle<Swapchain> (in Swapchain handle) => handle._handle;
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static bool operator == (Swapchain l, Swapchain r) => l._handle == r._handle;
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static bool operator != (Swapchain l, Swapchain r) => l._handle != r._handle;
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static implicit operator bool (Swapchain handle) => handle._handle.IsValid;
}

} // namespace Vk.KHR
