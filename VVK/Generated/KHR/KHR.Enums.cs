/*
 * MIT License - Copyright(c) 2020 Sean Moss
 * This file is subject to the terms and conditions of the MIT License, the text of which can be found in the 'LICENSE'
 * file at the root of this repository, or online at<https://opensource.org/licenses/MIT>.
 */

/// This file was generated by VVKGen. Edits to this file will be lost on next generation.

using System;
using System.Runtime.InteropServices;
using System.Runtime.CompilerServices;


namespace VVK.Vk.KHR
{

[Flags]
public enum GeometryFlags : uint
{
	OpaqueKHR = 1,
	NoDuplicateAnyHitInvocationKHR = 2,
	OpaqueNV = 1,
	NoDuplicateAnyHitInvocationNV = 2,
	NoFlags = 0,
}

[Flags]
public enum GeometryInstanceFlags : uint
{
	TriangleFacingCullDisableKHR = 1,
	TriangleFrontCounterclockwiseKHR = 2,
	ForceOpaqueKHR = 4,
	ForceNoOpaqueKHR = 8,
	TriangleCullDisableNV = 1,
	TriangleFrontCounterclockwiseNV = 2,
	ForceOpaqueNV = 4,
	ForceNoOpaqueNV = 8,
	NoFlags = 0,
}

[Flags]
public enum BuildAccelerationStructureFlags : uint
{
	AllowUpdateKHR = 1,
	AllowCompactionKHR = 2,
	PreferFastTraceKHR = 4,
	PreferFastBuildKHR = 8,
	LowMemoryKHR = 16,
	AllowUpdateNV = 1,
	AllowCompactionNV = 2,
	PreferFastTraceNV = 4,
	PreferFastBuildNV = 8,
	LowMemoryNV = 16,
	NoFlags = 0,
}

[Flags]
public enum DescriptorUpdateTemplateCreateFlags : uint
{
	NoFlags = 0,
}

[Flags]
public enum PerformanceCounterDescriptionFlags : uint
{
	PerformanceImpactingKHR = 1,
	ConcurrentlyImpactedKHR = 2,
	NoFlags = 0,
}

[Flags]
public enum AcquireProfilingLockFlags : uint
{
	NoFlags = 0,
}

[Flags]
public enum SemaphoreWaitFlags : uint
{
	Any = 1,
	AnyKHR = 1,
	NoFlags = 0,
}

[Flags]
public enum CompositeAlphaFlags : uint
{
	OpaqueKHR = 1,
	PreMultipliedKHR = 2,
	PostMultipliedKHR = 4,
	InheritKHR = 8,
	NoFlags = 0,
}

[Flags]
public enum DisplayPlaneAlphaFlags : uint
{
	OpaqueKHR = 1,
	GlobalKHR = 2,
	PerPixelKHR = 4,
	PerPixelPremultipliedKHR = 8,
	NoFlags = 0,
}

[Flags]
public enum SurfaceTransformFlags : uint
{
	IdentityKHR = 1,
	Rotate90KHR = 2,
	Rotate180KHR = 4,
	Rotate270KHR = 8,
	HorizontalMirrorKHR = 16,
	HorizontalMirrorRotate90KHR = 32,
	HorizontalMirrorRotate180KHR = 64,
	HorizontalMirrorRotate270KHR = 128,
	InheritKHR = 256,
	NoFlags = 0,
}

[Flags]
public enum SwapchainCreateFlags : uint
{
	SplitInstanceBindRegionsKHR = 1,
	ProtectedKHR = 2,
	MutableFormatKHR = 4,
	NoFlags = 0,
}

[Flags]
public enum DisplayModeCreateFlags : uint
{
	NoFlags = 0,
}

[Flags]
public enum DisplaySurfaceCreateFlags : uint
{
	NoFlags = 0,
}

[Flags]
public enum AndroidSurfaceCreateFlags : uint
{
	NoFlags = 0,
}

[Flags]
public enum WaylandSurfaceCreateFlags : uint
{
	NoFlags = 0,
}

[Flags]
public enum Win32SurfaceCreateFlags : uint
{
	NoFlags = 0,
}

[Flags]
public enum XlibSurfaceCreateFlags : uint
{
	NoFlags = 0,
}

[Flags]
public enum XcbSurfaceCreateFlags : uint
{
	NoFlags = 0,
}

[Flags]
public enum PeerMemoryFeatureFlags : uint
{
	CopySrc = 1,
	CopyDst = 2,
	GenericSrc = 4,
	GenericDst = 8,
	CopySrcKHR = 1,
	CopyDstKHR = 2,
	GenericSrcKHR = 4,
	GenericDstKHR = 8,
	NoFlags = 0,
}

[Flags]
public enum MemoryAllocateFlags : uint
{
	DeviceMask = 1,
	DeviceAddress = 2,
	DeviceAddressCaptureReplay = 4,
	DeviceMaskKHR = 1,
	DeviceAddressKHR = 2,
	DeviceAddressCaptureReplayKHR = 4,
	NoFlags = 0,
}

[Flags]
public enum DeviceGroupPresentModeFlags : uint
{
	LocalKHR = 1,
	RemoteKHR = 2,
	SumKHR = 4,
	LocalMultiDeviceKHR = 8,
	NoFlags = 0,
}

[Flags]
public enum CommandPoolTrimFlags : uint
{
	NoFlags = 0,
}

[Flags]
public enum ExternalMemoryHandleTypeFlags : uint
{
	OpaqueFd = 1,
	OpaqueWin32 = 2,
	OpaqueWin32Kmt = 4,
	D3d11Texture = 8,
	D3d11TextureKmt = 16,
	D3d12Heap = 32,
	D3d12Resource = 64,
	OpaqueFdKHR = 1,
	OpaqueWin32KHR = 2,
	OpaqueWin32KmtKHR = 4,
	D3d11TextureKHR = 8,
	D3d11TextureKmtKHR = 16,
	D3d12HeapKHR = 32,
	D3d12ResourceKHR = 64,
	DmaBufEXT = 512,
	AndroidHardwareBufferANDROID = 1024,
	HostAllocationEXT = 128,
	HostMappedForeignMemoryEXT = 256,
	NoFlags = 0,
}

[Flags]
public enum ExternalMemoryFeatureFlags : uint
{
	DedicatedOnly = 1,
	Exportable = 2,
	Importable = 4,
	DedicatedOnlyKHR = 1,
	ExportableKHR = 2,
	ImportableKHR = 4,
	NoFlags = 0,
}

[Flags]
public enum ExternalSemaphoreHandleTypeFlags : uint
{
	OpaqueFd = 1,
	OpaqueWin32 = 2,
	OpaqueWin32Kmt = 4,
	D3d12Fence = 8,
	D3d11Fence = 8,
	SyncFd = 16,
	OpaqueFdKHR = 1,
	OpaqueWin32KHR = 2,
	OpaqueWin32KmtKHR = 4,
	D3d12FenceKHR = 8,
	SyncFdKHR = 16,
	NoFlags = 0,
}

[Flags]
public enum ExternalSemaphoreFeatureFlags : uint
{
	Exportable = 1,
	Importable = 2,
	ExportableKHR = 1,
	ImportableKHR = 2,
	NoFlags = 0,
}

[Flags]
public enum SemaphoreImportFlags : uint
{
	Temporary = 1,
	TemporaryKHR = 1,
	NoFlags = 0,
}

[Flags]
public enum ExternalFenceHandleTypeFlags : uint
{
	OpaqueFd = 1,
	OpaqueWin32 = 2,
	OpaqueWin32Kmt = 4,
	SyncFd = 8,
	OpaqueFdKHR = 1,
	OpaqueWin32KHR = 2,
	OpaqueWin32KmtKHR = 4,
	SyncFdKHR = 8,
	NoFlags = 0,
}

[Flags]
public enum ExternalFenceFeatureFlags : uint
{
	Exportable = 1,
	Importable = 2,
	ExportableKHR = 1,
	ImportableKHR = 2,
	NoFlags = 0,
}

[Flags]
public enum FenceImportFlags : uint
{
	Temporary = 1,
	TemporaryKHR = 1,
	NoFlags = 0,
}

[Flags]
public enum ResolveModeFlags : uint
{
	None = 0,
	SampleZero = 1,
	Average = 2,
	Min = 4,
	Max = 8,
	NoneKHR = 0,
	SampleZeroKHR = 1,
	AverageKHR = 2,
	MinKHR = 4,
	MaxKHR = 8,
	NoFlags = 0,
}

public enum DescriptorUpdateTemplateType : int
{
	DescriptorSet = 0,
	PushDescriptorsKHR = 1,
	DescriptorSetKHR = 0,
}

public enum PointClippingBehavior : int
{
	AllClipPlanes = 0,
	UserClipPlanesOnly = 1,
	AllClipPlanesKHR = 0,
	UserClipPlanesOnlyKHR = 1,
}

public enum SemaphoreType : int
{
	Binary = 0,
	Timeline = 1,
	BinaryKHR = 0,
	TimelineKHR = 1,
}

public enum CopyAccelerationStructureMode : int
{
	CloneKHR = 0,
	CompactKHR = 1,
	SerializeKHR = 2,
	DeserializeKHR = 3,
	CloneNV = 0,
	CompactNV = 1,
}

public enum AccelerationStructureType : int
{
	TopLevelKHR = 0,
	BottomLevelKHR = 1,
	TopLevelNV = 0,
	BottomLevelNV = 1,
}

public enum GeometryType : int
{
	TrianglesKHR = 0,
	AabbsKHR = 1,
	InstancesKHR = 1000150000,
	TrianglesNV = 0,
	AabbsNV = 1,
}

public enum RayTracingShaderGroupType : int
{
	GeneralKHR = 0,
	TrianglesHitGroupKHR = 1,
	ProceduralHitGroupKHR = 2,
	GeneralNV = 0,
	TrianglesHitGroupNV = 1,
	ProceduralHitGroupNV = 2,
}

public enum AccelerationStructureMemoryRequirementsType : int
{
	ObjectKHR = 0,
	BuildScratchKHR = 1,
	UpdateScratchKHR = 2,
	ObjectNV = 0,
	BuildScratchNV = 1,
	UpdateScratchNV = 2,
}

public enum AccelerationStructureBuildType : int
{
	HostKHR = 0,
	DeviceKHR = 1,
	HostOrDeviceKHR = 2,
}

public enum PerformanceCounterScope : int
{
	CommandBufferKHR = 0,
	RenderPassKHR = 1,
	CommandKHR = 2,
	CommandBuffer_ALIAS = 0,
	RenderPass_ALIAS = 1,
	Command_ALIAS = 2,
}

public enum PerformanceCounterUnit : int
{
	GenericKHR = 0,
	PercentageKHR = 1,
	NanosecondsKHR = 2,
	BytesKHR = 3,
	BytesPerSecondKHR = 4,
	KelvinKHR = 5,
	WattsKHR = 6,
	VoltsKHR = 7,
	AmpsKHR = 8,
	HertzKHR = 9,
	CyclesKHR = 10,
}

public enum PerformanceCounterStorage : int
{
	Int32KHR = 0,
	Int64KHR = 1,
	Uint32KHR = 2,
	Uint64KHR = 3,
	Float32KHR = 4,
	Float64KHR = 5,
}

public enum ColorSpace : int
{
	SrgbNonlinearKHR = 0,
	SrgbNonlinear_ALIAS = 0,
	DisplayP3NonlinearEXT = 1000104001,
	ExtendedSrgbLinearEXT = 1000104002,
	DisplayP3LinearEXT = 1000104003,
	DciP3NonlinearEXT = 1000104004,
	Bt709LinearEXT = 1000104005,
	Bt709NonlinearEXT = 1000104006,
	Bt2020LinearEXT = 1000104007,
	Hdr10St2084EXT = 1000104008,
	DolbyvisionEXT = 1000104009,
	Hdr10HlgEXT = 1000104010,
	AdobergbLinearEXT = 1000104011,
	AdobergbNonlinearEXT = 1000104012,
	PassThroughEXT = 1000104013,
	ExtendedSrgbNonlinearEXT = 1000104014,
	DciP3LinearEXT = 1000104003,
	DisplayNativeAMD = 1000213000,
}

public enum PresentMode : int
{
	ImmediateKHR = 0,
	MailboxKHR = 1,
	FifoKHR = 2,
	FifoRelaxedKHR = 3,
	SharedDemandRefreshKHR = 1000111000,
	SharedContinuousRefreshKHR = 1000111001,
}

public enum TessellationDomainOrigin : int
{
	UpperLeft = 0,
	LowerLeft = 1,
	UpperLeftKHR = 0,
	LowerLeftKHR = 1,
}

public enum SamplerYcbcrModelConversion : int
{
	RgbIdentity = 0,
	YcbcrIdentity = 1,
	Ycbcr709 = 2,
	Ycbcr601 = 3,
	Ycbcr2020 = 4,
	RgbIdentityKHR = 0,
	YcbcrIdentityKHR = 1,
	Ycbcr709KHR = 2,
	Ycbcr601KHR = 3,
	Ycbcr2020KHR = 4,
}

public enum SamplerYcbcrRange : int
{
	ItuFull = 0,
	ItuNarrow = 1,
	ItuFullKHR = 0,
	ItuNarrowKHR = 1,
}

public enum ChromaLocation : int
{
	CositedEven = 0,
	Midpoint = 1,
	CositedEvenKHR = 0,
	MidpointKHR = 1,
}

public enum ShaderFloatControlsIndependence : int
{
	E32BitOnly = 0,
	All = 1,
	None = 2,
	E32BitOnlyKHR = 0,
	AllKHR = 1,
	NoneKHR = 2,
}

public enum DriverId : int
{
	AmdProprietary = 1,
	AmdOpenSource = 2,
	MesaRadv = 3,
	NvidiaProprietary = 4,
	IntelProprietaryWindows = 5,
	IntelOpenSourceMESA = 6,
	ImaginationProprietary = 7,
	QualcommProprietary = 8,
	ArmProprietary = 9,
	GoogleSwiftshader = 10,
	GgpProprietary = 11,
	BroadcomProprietary = 12,
	MesaLlvmpipe = 13,
	Moltenvk = 14,
	AmdProprietaryKHR = 1,
	AmdOpenSourceKHR = 2,
	MesaRadvKHR = 3,
	NvidiaProprietaryKHR = 4,
	IntelProprietaryWindowsKHR = 5,
	IntelOpenSourceMesaKHR = 6,
	ImaginationProprietaryKHR = 7,
	QualcommProprietaryKHR = 8,
	ArmProprietaryKHR = 9,
	GoogleSwiftshaderKHR = 10,
	GgpProprietaryKHR = 11,
	BroadcomProprietaryKHR = 12,
}

public enum PipelineExecutableStatisticFormat : int
{
	Bool32KHR = 0,
	Int64KHR = 1,
	Uint64KHR = 2,
	Float64KHR = 3,
}

} // namespace VVK.Vk.KHR
