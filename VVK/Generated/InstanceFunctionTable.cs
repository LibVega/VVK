/*
 * MIT License - Copyright(c) 2020 Sean Moss
 * This file is subject to the terms and conditions of the MIT License, the text of which can be found in the 'LICENSE'
 * file at the root of this repository, or online at <https://opensource.org/licenses/MIT>.
 */

/// This file was generated by VVKGen. Edits to this file will be lost on next generation.

using System;
using System.Runtime.InteropServices;
using System.Runtime.CompilerServices;

namespace Vulkan
{

public unsafe sealed partial class InstanceFunctionTable
{
	/* Global Functions */
	public static readonly delegate* unmanaged<VkInstanceCreateInfo*, VkAllocationCallbacks*, VulkanHandle<VkInstance>*, VkResult> vkCreateInstance = null;
	public static readonly delegate* unmanaged<VulkanHandle<VkDevice>, byte*, delegate* unmanaged<void>> vkGetDeviceProcAddr = null;
	public static readonly delegate* unmanaged<VulkanHandle<VkInstance>, byte*, delegate* unmanaged<void>> vkGetInstanceProcAddr = null;
	public static readonly delegate* unmanaged<uint*, VkResult> vkEnumerateInstanceVersion = null;
	public static readonly delegate* unmanaged<uint*, VkLayerProperties*, VkResult> vkEnumerateInstanceLayerProperties = null;
	public static readonly delegate* unmanaged<byte*, uint*, VkExtensionProperties*, VkResult> vkEnumerateInstanceExtensionProperties = null;

	/* Instance Functions */
	public readonly delegate* unmanaged<VulkanHandle<VkInstance>, VkAllocationCallbacks*, void> vkDestroyInstance = null;
	public readonly delegate* unmanaged<VulkanHandle<VkInstance>, uint*, VulkanHandle<VkPhysicalDevice>*, VkResult> vkEnumeratePhysicalDevices = null;
	public readonly delegate* unmanaged<VulkanHandle<VkPhysicalDevice>, VkPhysicalDeviceProperties*, void> vkGetPhysicalDeviceProperties = null;
	public readonly delegate* unmanaged<VulkanHandle<VkPhysicalDevice>, uint*, VkQueueFamilyProperties*, void> vkGetPhysicalDeviceQueueFamilyProperties = null;
	public readonly delegate* unmanaged<VulkanHandle<VkPhysicalDevice>, VkPhysicalDeviceMemoryProperties*, void> vkGetPhysicalDeviceMemoryProperties = null;
	public readonly delegate* unmanaged<VulkanHandle<VkPhysicalDevice>, VkPhysicalDeviceFeatures*, void> vkGetPhysicalDeviceFeatures = null;
	public readonly delegate* unmanaged<VulkanHandle<VkPhysicalDevice>, VkFormat, VkFormatProperties*, void> vkGetPhysicalDeviceFormatProperties = null;
	public readonly delegate* unmanaged<VulkanHandle<VkPhysicalDevice>, VkFormat, VkImageType, VkImageTiling, VkImageUsageFlags, VkImageCreateFlags, VkImageFormatProperties*, VkResult> vkGetPhysicalDeviceImageFormatProperties = null;
	public readonly delegate* unmanaged<VulkanHandle<VkPhysicalDevice>, VkDeviceCreateInfo*, VkAllocationCallbacks*, VulkanHandle<VkDevice>*, VkResult> vkCreateDevice = null;
	public readonly delegate* unmanaged<VulkanHandle<VkPhysicalDevice>, uint*, VkLayerProperties*, VkResult> vkEnumerateDeviceLayerProperties = null;
	public readonly delegate* unmanaged<VulkanHandle<VkPhysicalDevice>, byte*, uint*, VkExtensionProperties*, VkResult> vkEnumerateDeviceExtensionProperties = null;
	public readonly delegate* unmanaged<VulkanHandle<VkPhysicalDevice>, VkFormat, VkImageType, VkSampleCountFlags, VkImageUsageFlags, VkImageTiling, uint*, VkSparseImageFormatProperties*, void> vkGetPhysicalDeviceSparseImageFormatProperties = null;
	public readonly delegate* unmanaged<VulkanHandle<VkInstance>, VkAndroidSurfaceCreateInfoKHR*, VkAllocationCallbacks*, VulkanHandle<VkSurfaceKHR>*, VkResult> vkCreateAndroidSurfaceKHR = null;
	public readonly delegate* unmanaged<VulkanHandle<VkPhysicalDevice>, uint*, VkDisplayPropertiesKHR*, VkResult> vkGetPhysicalDeviceDisplayPropertiesKHR = null;
	public readonly delegate* unmanaged<VulkanHandle<VkPhysicalDevice>, uint*, VkDisplayPlanePropertiesKHR*, VkResult> vkGetPhysicalDeviceDisplayPlanePropertiesKHR = null;
	public readonly delegate* unmanaged<VulkanHandle<VkPhysicalDevice>, uint, uint*, VulkanHandle<VkDisplayKHR>*, VkResult> vkGetDisplayPlaneSupportedDisplaysKHR = null;
	public readonly delegate* unmanaged<VulkanHandle<VkPhysicalDevice>, VulkanHandle<VkDisplayKHR>, uint*, VkDisplayModePropertiesKHR*, VkResult> vkGetDisplayModePropertiesKHR = null;
	public readonly delegate* unmanaged<VulkanHandle<VkPhysicalDevice>, VulkanHandle<VkDisplayKHR>, VkDisplayModeCreateInfoKHR*, VkAllocationCallbacks*, VulkanHandle<VkDisplayModeKHR>*, VkResult> vkCreateDisplayModeKHR = null;
	public readonly delegate* unmanaged<VulkanHandle<VkPhysicalDevice>, VulkanHandle<VkDisplayModeKHR>, uint, VkDisplayPlaneCapabilitiesKHR*, VkResult> vkGetDisplayPlaneCapabilitiesKHR = null;
	public readonly delegate* unmanaged<VulkanHandle<VkInstance>, VkDisplaySurfaceCreateInfoKHR*, VkAllocationCallbacks*, VulkanHandle<VkSurfaceKHR>*, VkResult> vkCreateDisplayPlaneSurfaceKHR = null;
	public readonly delegate* unmanaged<VulkanHandle<VkInstance>, VulkanHandle<VkSurfaceKHR>, VkAllocationCallbacks*, void> vkDestroySurfaceKHR = null;
	public readonly delegate* unmanaged<VulkanHandle<VkPhysicalDevice>, uint, VulkanHandle<VkSurfaceKHR>, VkBool32*, VkResult> vkGetPhysicalDeviceSurfaceSupportKHR = null;
	public readonly delegate* unmanaged<VulkanHandle<VkPhysicalDevice>, VulkanHandle<VkSurfaceKHR>, VkSurfaceCapabilitiesKHR*, VkResult> vkGetPhysicalDeviceSurfaceCapabilitiesKHR = null;
	public readonly delegate* unmanaged<VulkanHandle<VkPhysicalDevice>, VulkanHandle<VkSurfaceKHR>, uint*, VkSurfaceFormatKHR*, VkResult> vkGetPhysicalDeviceSurfaceFormatsKHR = null;
	public readonly delegate* unmanaged<VulkanHandle<VkPhysicalDevice>, VulkanHandle<VkSurfaceKHR>, uint*, VkPresentModeKHR*, VkResult> vkGetPhysicalDeviceSurfacePresentModesKHR = null;
	public readonly delegate* unmanaged<VulkanHandle<VkInstance>, VkViSurfaceCreateInfoNN*, VkAllocationCallbacks*, VulkanHandle<VkSurfaceKHR>*, VkResult> vkCreateViSurfaceNN = null;
	public readonly delegate* unmanaged<VulkanHandle<VkInstance>, VkWaylandSurfaceCreateInfoKHR*, VkAllocationCallbacks*, VulkanHandle<VkSurfaceKHR>*, VkResult> vkCreateWaylandSurfaceKHR = null;
	public readonly delegate* unmanaged<VulkanHandle<VkPhysicalDevice>, uint, void*, VkBool32> vkGetPhysicalDeviceWaylandPresentationSupportKHR = null;
	public readonly delegate* unmanaged<VulkanHandle<VkInstance>, VkWin32SurfaceCreateInfoKHR*, VkAllocationCallbacks*, VulkanHandle<VkSurfaceKHR>*, VkResult> vkCreateWin32SurfaceKHR = null;
	public readonly delegate* unmanaged<VulkanHandle<VkPhysicalDevice>, uint, VkBool32> vkGetPhysicalDeviceWin32PresentationSupportKHR = null;
	public readonly delegate* unmanaged<VulkanHandle<VkInstance>, VkXlibSurfaceCreateInfoKHR*, VkAllocationCallbacks*, VulkanHandle<VkSurfaceKHR>*, VkResult> vkCreateXlibSurfaceKHR = null;
	public readonly delegate* unmanaged<VulkanHandle<VkPhysicalDevice>, uint, void*, ulong, VkBool32> vkGetPhysicalDeviceXlibPresentationSupportKHR = null;
	public readonly delegate* unmanaged<VulkanHandle<VkInstance>, VkXcbSurfaceCreateInfoKHR*, VkAllocationCallbacks*, VulkanHandle<VkSurfaceKHR>*, VkResult> vkCreateXcbSurfaceKHR = null;
	public readonly delegate* unmanaged<VulkanHandle<VkPhysicalDevice>, uint, void*, uint, VkBool32> vkGetPhysicalDeviceXcbPresentationSupportKHR = null;
	public readonly delegate* unmanaged<VulkanHandle<VkInstance>, VkDirectFBSurfaceCreateInfoEXT*, VkAllocationCallbacks*, VulkanHandle<VkSurfaceKHR>*, VkResult> vkCreateDirectFBSurfaceEXT = null;
	public readonly delegate* unmanaged<VulkanHandle<VkPhysicalDevice>, uint, void*, VkBool32> vkGetPhysicalDeviceDirectFBPresentationSupportEXT = null;
	public readonly delegate* unmanaged<VulkanHandle<VkInstance>, VkImagePipeSurfaceCreateInfoFUCHSIA*, VkAllocationCallbacks*, VulkanHandle<VkSurfaceKHR>*, VkResult> vkCreateImagePipeSurfaceFUCHSIA = null;
	public readonly delegate* unmanaged<VulkanHandle<VkInstance>, VkStreamDescriptorSurfaceCreateInfoGGP*, VkAllocationCallbacks*, VulkanHandle<VkSurfaceKHR>*, VkResult> vkCreateStreamDescriptorSurfaceGGP = null;
	public readonly delegate* unmanaged<VulkanHandle<VkInstance>, VkDebugReportCallbackCreateInfoEXT*, VkAllocationCallbacks*, VulkanHandle<VkDebugReportCallbackEXT>*, VkResult> vkCreateDebugReportCallbackEXT = null;
	public readonly delegate* unmanaged<VulkanHandle<VkInstance>, VulkanHandle<VkDebugReportCallbackEXT>, VkAllocationCallbacks*, void> vkDestroyDebugReportCallbackEXT = null;
	public readonly delegate* unmanaged<VulkanHandle<VkInstance>, VkDebugReportFlagsEXT, VkDebugReportObjectTypeEXT, ulong, ulong, int, byte*, byte*, void> vkDebugReportMessageEXT = null;
	public readonly delegate* unmanaged<VulkanHandle<VkPhysicalDevice>, VkFormat, VkImageType, VkImageTiling, VkImageUsageFlags, VkImageCreateFlags, VkExternalMemoryHandleTypeFlagsNV, VkExternalImageFormatPropertiesNV*, VkResult> vkGetPhysicalDeviceExternalImageFormatPropertiesNV = null;
	public readonly delegate* unmanaged<VulkanHandle<VkPhysicalDevice>, VkPhysicalDeviceFeatures2*, void> vkGetPhysicalDeviceFeatures2 = null;
	public readonly delegate* unmanaged<VulkanHandle<VkPhysicalDevice>, VkPhysicalDeviceFeatures2*, void> vkGetPhysicalDeviceFeatures2KHR = null;
	public readonly delegate* unmanaged<VulkanHandle<VkPhysicalDevice>, VkPhysicalDeviceProperties2*, void> vkGetPhysicalDeviceProperties2 = null;
	public readonly delegate* unmanaged<VulkanHandle<VkPhysicalDevice>, VkPhysicalDeviceProperties2*, void> vkGetPhysicalDeviceProperties2KHR = null;
	public readonly delegate* unmanaged<VulkanHandle<VkPhysicalDevice>, VkFormat, VkFormatProperties2*, void> vkGetPhysicalDeviceFormatProperties2 = null;
	public readonly delegate* unmanaged<VulkanHandle<VkPhysicalDevice>, VkFormat, VkFormatProperties2*, void> vkGetPhysicalDeviceFormatProperties2KHR = null;
	public readonly delegate* unmanaged<VulkanHandle<VkPhysicalDevice>, VkPhysicalDeviceImageFormatInfo2*, VkImageFormatProperties2*, VkResult> vkGetPhysicalDeviceImageFormatProperties2 = null;
	public readonly delegate* unmanaged<VulkanHandle<VkPhysicalDevice>, VkPhysicalDeviceImageFormatInfo2*, VkImageFormatProperties2*, VkResult> vkGetPhysicalDeviceImageFormatProperties2KHR = null;
	public readonly delegate* unmanaged<VulkanHandle<VkPhysicalDevice>, uint*, VkQueueFamilyProperties2*, void> vkGetPhysicalDeviceQueueFamilyProperties2 = null;
	public readonly delegate* unmanaged<VulkanHandle<VkPhysicalDevice>, uint*, VkQueueFamilyProperties2*, void> vkGetPhysicalDeviceQueueFamilyProperties2KHR = null;
	public readonly delegate* unmanaged<VulkanHandle<VkPhysicalDevice>, VkPhysicalDeviceMemoryProperties2*, void> vkGetPhysicalDeviceMemoryProperties2 = null;
	public readonly delegate* unmanaged<VulkanHandle<VkPhysicalDevice>, VkPhysicalDeviceMemoryProperties2*, void> vkGetPhysicalDeviceMemoryProperties2KHR = null;
	public readonly delegate* unmanaged<VulkanHandle<VkPhysicalDevice>, VkPhysicalDeviceSparseImageFormatInfo2*, uint*, VkSparseImageFormatProperties2*, void> vkGetPhysicalDeviceSparseImageFormatProperties2 = null;
	public readonly delegate* unmanaged<VulkanHandle<VkPhysicalDevice>, VkPhysicalDeviceSparseImageFormatInfo2*, uint*, VkSparseImageFormatProperties2*, void> vkGetPhysicalDeviceSparseImageFormatProperties2KHR = null;
	public readonly delegate* unmanaged<VulkanHandle<VkPhysicalDevice>, VkPhysicalDeviceExternalBufferInfo*, VkExternalBufferProperties*, void> vkGetPhysicalDeviceExternalBufferProperties = null;
	public readonly delegate* unmanaged<VulkanHandle<VkPhysicalDevice>, VkPhysicalDeviceExternalBufferInfo*, VkExternalBufferProperties*, void> vkGetPhysicalDeviceExternalBufferPropertiesKHR = null;
	public readonly delegate* unmanaged<VulkanHandle<VkPhysicalDevice>, VkPhysicalDeviceExternalSemaphoreInfo*, VkExternalSemaphoreProperties*, void> vkGetPhysicalDeviceExternalSemaphoreProperties = null;
	public readonly delegate* unmanaged<VulkanHandle<VkPhysicalDevice>, VkPhysicalDeviceExternalSemaphoreInfo*, VkExternalSemaphoreProperties*, void> vkGetPhysicalDeviceExternalSemaphorePropertiesKHR = null;
	public readonly delegate* unmanaged<VulkanHandle<VkPhysicalDevice>, VkPhysicalDeviceExternalFenceInfo*, VkExternalFenceProperties*, void> vkGetPhysicalDeviceExternalFenceProperties = null;
	public readonly delegate* unmanaged<VulkanHandle<VkPhysicalDevice>, VkPhysicalDeviceExternalFenceInfo*, VkExternalFenceProperties*, void> vkGetPhysicalDeviceExternalFencePropertiesKHR = null;
	public readonly delegate* unmanaged<VulkanHandle<VkPhysicalDevice>, VulkanHandle<VkDisplayKHR>, VkResult> vkReleaseDisplayEXT = null;
	public readonly delegate* unmanaged<VulkanHandle<VkPhysicalDevice>, void*, VulkanHandle<VkDisplayKHR>, VkResult> vkAcquireXlibDisplayEXT = null;
	public readonly delegate* unmanaged<VulkanHandle<VkPhysicalDevice>, void*, ulong, VulkanHandle<VkDisplayKHR>*, VkResult> vkGetRandROutputDisplayEXT = null;
	public readonly delegate* unmanaged<VulkanHandle<VkPhysicalDevice>, VulkanHandle<VkSurfaceKHR>, VkSurfaceCapabilities2EXT*, VkResult> vkGetPhysicalDeviceSurfaceCapabilities2EXT = null;
	public readonly delegate* unmanaged<VulkanHandle<VkInstance>, uint*, VkPhysicalDeviceGroupProperties*, VkResult> vkEnumeratePhysicalDeviceGroups = null;
	public readonly delegate* unmanaged<VulkanHandle<VkInstance>, uint*, VkPhysicalDeviceGroupProperties*, VkResult> vkEnumeratePhysicalDeviceGroupsKHR = null;
	public readonly delegate* unmanaged<VulkanHandle<VkPhysicalDevice>, VulkanHandle<VkSurfaceKHR>, uint*, VkRect2D*, VkResult> vkGetPhysicalDevicePresentRectanglesKHR = null;
	public readonly delegate* unmanaged<VulkanHandle<VkInstance>, VkIOSSurfaceCreateInfoMVK*, VkAllocationCallbacks*, VulkanHandle<VkSurfaceKHR>*, VkResult> vkCreateIOSSurfaceMVK = null;
	public readonly delegate* unmanaged<VulkanHandle<VkInstance>, VkMacOSSurfaceCreateInfoMVK*, VkAllocationCallbacks*, VulkanHandle<VkSurfaceKHR>*, VkResult> vkCreateMacOSSurfaceMVK = null;
	public readonly delegate* unmanaged<VulkanHandle<VkInstance>, VkMetalSurfaceCreateInfoEXT*, VkAllocationCallbacks*, VulkanHandle<VkSurfaceKHR>*, VkResult> vkCreateMetalSurfaceEXT = null;
	public readonly delegate* unmanaged<VulkanHandle<VkPhysicalDevice>, VkSampleCountFlags, VkMultisamplePropertiesEXT*, void> vkGetPhysicalDeviceMultisamplePropertiesEXT = null;
	public readonly delegate* unmanaged<VulkanHandle<VkPhysicalDevice>, VkPhysicalDeviceSurfaceInfo2KHR*, VkSurfaceCapabilities2KHR*, VkResult> vkGetPhysicalDeviceSurfaceCapabilities2KHR = null;
	public readonly delegate* unmanaged<VulkanHandle<VkPhysicalDevice>, VkPhysicalDeviceSurfaceInfo2KHR*, uint*, VkSurfaceFormat2KHR*, VkResult> vkGetPhysicalDeviceSurfaceFormats2KHR = null;
	public readonly delegate* unmanaged<VulkanHandle<VkPhysicalDevice>, uint*, VkDisplayProperties2KHR*, VkResult> vkGetPhysicalDeviceDisplayProperties2KHR = null;
	public readonly delegate* unmanaged<VulkanHandle<VkPhysicalDevice>, uint*, VkDisplayPlaneProperties2KHR*, VkResult> vkGetPhysicalDeviceDisplayPlaneProperties2KHR = null;
	public readonly delegate* unmanaged<VulkanHandle<VkPhysicalDevice>, VulkanHandle<VkDisplayKHR>, uint*, VkDisplayModeProperties2KHR*, VkResult> vkGetDisplayModeProperties2KHR = null;
	public readonly delegate* unmanaged<VulkanHandle<VkPhysicalDevice>, VkDisplayPlaneInfo2KHR*, VkDisplayPlaneCapabilities2KHR*, VkResult> vkGetDisplayPlaneCapabilities2KHR = null;
	public readonly delegate* unmanaged<VulkanHandle<VkPhysicalDevice>, uint*, VkTimeDomainEXT*, VkResult> vkGetPhysicalDeviceCalibrateableTimeDomainsEXT = null;
	public readonly delegate* unmanaged<VulkanHandle<VkInstance>, VkDebugUtilsMessengerCreateInfoEXT*, VkAllocationCallbacks*, VulkanHandle<VkDebugUtilsMessengerEXT>*, VkResult> vkCreateDebugUtilsMessengerEXT = null;
	public readonly delegate* unmanaged<VulkanHandle<VkInstance>, VulkanHandle<VkDebugUtilsMessengerEXT>, VkAllocationCallbacks*, void> vkDestroyDebugUtilsMessengerEXT = null;
	public readonly delegate* unmanaged<VulkanHandle<VkInstance>, VkDebugUtilsMessageSeverityFlagsEXT, VkDebugUtilsMessageTypeFlagsEXT, VkDebugUtilsMessengerCallbackDataEXT*, void> vkSubmitDebugUtilsMessageEXT = null;
	public readonly delegate* unmanaged<VulkanHandle<VkPhysicalDevice>, uint*, VkCooperativeMatrixPropertiesNV*, VkResult> vkGetPhysicalDeviceCooperativeMatrixPropertiesNV = null;
	public readonly delegate* unmanaged<VulkanHandle<VkPhysicalDevice>, VkPhysicalDeviceSurfaceInfo2KHR*, uint*, VkPresentModeKHR*, VkResult> vkGetPhysicalDeviceSurfacePresentModes2EXT = null;
	public readonly delegate* unmanaged<VulkanHandle<VkPhysicalDevice>, uint, uint*, VkPerformanceCounterKHR*, VkPerformanceCounterDescriptionKHR*, VkResult> vkEnumeratePhysicalDeviceQueueFamilyPerformanceQueryCountersKHR = null;
	public readonly delegate* unmanaged<VulkanHandle<VkPhysicalDevice>, VkQueryPoolPerformanceCreateInfoKHR*, uint*, void> vkGetPhysicalDeviceQueueFamilyPerformanceQueryPassesKHR = null;
	public readonly delegate* unmanaged<VulkanHandle<VkInstance>, VkHeadlessSurfaceCreateInfoEXT*, VkAllocationCallbacks*, VulkanHandle<VkSurfaceKHR>*, VkResult> vkCreateHeadlessSurfaceEXT = null;
	public readonly delegate* unmanaged<VulkanHandle<VkPhysicalDevice>, uint*, VkFramebufferMixedSamplesCombinationNV*, VkResult> vkGetPhysicalDeviceSupportedFramebufferMixedSamplesCombinationsNV = null;
	public readonly delegate* unmanaged<VulkanHandle<VkPhysicalDevice>, uint*, VkPhysicalDeviceToolPropertiesEXT*, VkResult> vkGetPhysicalDeviceToolPropertiesEXT = null;
	public readonly delegate* unmanaged<VulkanHandle<VkPhysicalDevice>, uint*, VkPhysicalDeviceFragmentShadingRateKHR*, VkResult> vkGetPhysicalDeviceFragmentShadingRatesKHR = null;

	/// <summary>Creates a new function table with all null pointers.</summary>
	public InstanceFunctionTable() { }

	/// <summary>Creates a new function table and loads the functions.</summary>
	/// <param name="inst">The instance to load the functions for.</param>
	/// <param name="version">The core API version that the instance was created with.</param>
	public InstanceFunctionTable(VulkanHandle<VkInstance> inst, VkVersion version)
	{
		void* addr = null;
		CoreVersion = version;

		vkDestroyInstance = (delegate* unmanaged<VulkanHandle<VkInstance>, VkAllocationCallbacks*, void>)LoadFunc(inst, "vkDestroyInstance");
		vkEnumeratePhysicalDevices = (delegate* unmanaged<VulkanHandle<VkInstance>, uint*, VulkanHandle<VkPhysicalDevice>*, VkResult>)LoadFunc(inst, "vkEnumeratePhysicalDevices");
		vkGetPhysicalDeviceProperties = (delegate* unmanaged<VulkanHandle<VkPhysicalDevice>, VkPhysicalDeviceProperties*, void>)LoadFunc(inst, "vkGetPhysicalDeviceProperties");
		vkGetPhysicalDeviceQueueFamilyProperties = (delegate* unmanaged<VulkanHandle<VkPhysicalDevice>, uint*, VkQueueFamilyProperties*, void>)LoadFunc(inst, "vkGetPhysicalDeviceQueueFamilyProperties");
		vkGetPhysicalDeviceMemoryProperties = (delegate* unmanaged<VulkanHandle<VkPhysicalDevice>, VkPhysicalDeviceMemoryProperties*, void>)LoadFunc(inst, "vkGetPhysicalDeviceMemoryProperties");
		vkGetPhysicalDeviceFeatures = (delegate* unmanaged<VulkanHandle<VkPhysicalDevice>, VkPhysicalDeviceFeatures*, void>)LoadFunc(inst, "vkGetPhysicalDeviceFeatures");
		vkGetPhysicalDeviceFormatProperties = (delegate* unmanaged<VulkanHandle<VkPhysicalDevice>, VkFormat, VkFormatProperties*, void>)LoadFunc(inst, "vkGetPhysicalDeviceFormatProperties");
		vkGetPhysicalDeviceImageFormatProperties = (delegate* unmanaged<VulkanHandle<VkPhysicalDevice>, VkFormat, VkImageType, VkImageTiling, VkImageUsageFlags, VkImageCreateFlags, VkImageFormatProperties*, VkResult>)LoadFunc(inst, "vkGetPhysicalDeviceImageFormatProperties");
		vkCreateDevice = (delegate* unmanaged<VulkanHandle<VkPhysicalDevice>, VkDeviceCreateInfo*, VkAllocationCallbacks*, VulkanHandle<VkDevice>*, VkResult>)LoadFunc(inst, "vkCreateDevice");
		vkEnumerateDeviceLayerProperties = (delegate* unmanaged<VulkanHandle<VkPhysicalDevice>, uint*, VkLayerProperties*, VkResult>)LoadFunc(inst, "vkEnumerateDeviceLayerProperties");
		vkEnumerateDeviceExtensionProperties = (delegate* unmanaged<VulkanHandle<VkPhysicalDevice>, byte*, uint*, VkExtensionProperties*, VkResult>)LoadFunc(inst, "vkEnumerateDeviceExtensionProperties");
		vkGetPhysicalDeviceSparseImageFormatProperties = (delegate* unmanaged<VulkanHandle<VkPhysicalDevice>, VkFormat, VkImageType, VkSampleCountFlags, VkImageUsageFlags, VkImageTiling, uint*, VkSparseImageFormatProperties*, void>)LoadFunc(inst, "vkGetPhysicalDeviceSparseImageFormatProperties");
		if (TryLoadFunc(inst, "vkCreateAndroidSurfaceKHR", out addr)) {
			vkCreateAndroidSurfaceKHR = (delegate* unmanaged<VulkanHandle<VkInstance>, VkAndroidSurfaceCreateInfoKHR*, VkAllocationCallbacks*, VulkanHandle<VkSurfaceKHR>*, VkResult>)addr;
		}
		if (TryLoadFunc(inst, "vkGetPhysicalDeviceDisplayPropertiesKHR", out addr)) {
			vkGetPhysicalDeviceDisplayPropertiesKHR = (delegate* unmanaged<VulkanHandle<VkPhysicalDevice>, uint*, VkDisplayPropertiesKHR*, VkResult>)addr;
		}
		if (TryLoadFunc(inst, "vkGetPhysicalDeviceDisplayPlanePropertiesKHR", out addr)) {
			vkGetPhysicalDeviceDisplayPlanePropertiesKHR = (delegate* unmanaged<VulkanHandle<VkPhysicalDevice>, uint*, VkDisplayPlanePropertiesKHR*, VkResult>)addr;
		}
		if (TryLoadFunc(inst, "vkGetDisplayPlaneSupportedDisplaysKHR", out addr)) {
			vkGetDisplayPlaneSupportedDisplaysKHR = (delegate* unmanaged<VulkanHandle<VkPhysicalDevice>, uint, uint*, VulkanHandle<VkDisplayKHR>*, VkResult>)addr;
		}
		if (TryLoadFunc(inst, "vkGetDisplayModePropertiesKHR", out addr)) {
			vkGetDisplayModePropertiesKHR = (delegate* unmanaged<VulkanHandle<VkPhysicalDevice>, VulkanHandle<VkDisplayKHR>, uint*, VkDisplayModePropertiesKHR*, VkResult>)addr;
		}
		if (TryLoadFunc(inst, "vkCreateDisplayModeKHR", out addr)) {
			vkCreateDisplayModeKHR = (delegate* unmanaged<VulkanHandle<VkPhysicalDevice>, VulkanHandle<VkDisplayKHR>, VkDisplayModeCreateInfoKHR*, VkAllocationCallbacks*, VulkanHandle<VkDisplayModeKHR>*, VkResult>)addr;
		}
		if (TryLoadFunc(inst, "vkGetDisplayPlaneCapabilitiesKHR", out addr)) {
			vkGetDisplayPlaneCapabilitiesKHR = (delegate* unmanaged<VulkanHandle<VkPhysicalDevice>, VulkanHandle<VkDisplayModeKHR>, uint, VkDisplayPlaneCapabilitiesKHR*, VkResult>)addr;
		}
		if (TryLoadFunc(inst, "vkCreateDisplayPlaneSurfaceKHR", out addr)) {
			vkCreateDisplayPlaneSurfaceKHR = (delegate* unmanaged<VulkanHandle<VkInstance>, VkDisplaySurfaceCreateInfoKHR*, VkAllocationCallbacks*, VulkanHandle<VkSurfaceKHR>*, VkResult>)addr;
		}
		if (TryLoadFunc(inst, "vkDestroySurfaceKHR", out addr)) {
			vkDestroySurfaceKHR = (delegate* unmanaged<VulkanHandle<VkInstance>, VulkanHandle<VkSurfaceKHR>, VkAllocationCallbacks*, void>)addr;
		}
		if (TryLoadFunc(inst, "vkGetPhysicalDeviceSurfaceSupportKHR", out addr)) {
			vkGetPhysicalDeviceSurfaceSupportKHR = (delegate* unmanaged<VulkanHandle<VkPhysicalDevice>, uint, VulkanHandle<VkSurfaceKHR>, VkBool32*, VkResult>)addr;
		}
		if (TryLoadFunc(inst, "vkGetPhysicalDeviceSurfaceCapabilitiesKHR", out addr)) {
			vkGetPhysicalDeviceSurfaceCapabilitiesKHR = (delegate* unmanaged<VulkanHandle<VkPhysicalDevice>, VulkanHandle<VkSurfaceKHR>, VkSurfaceCapabilitiesKHR*, VkResult>)addr;
		}
		if (TryLoadFunc(inst, "vkGetPhysicalDeviceSurfaceFormatsKHR", out addr)) {
			vkGetPhysicalDeviceSurfaceFormatsKHR = (delegate* unmanaged<VulkanHandle<VkPhysicalDevice>, VulkanHandle<VkSurfaceKHR>, uint*, VkSurfaceFormatKHR*, VkResult>)addr;
		}
		if (TryLoadFunc(inst, "vkGetPhysicalDeviceSurfacePresentModesKHR", out addr)) {
			vkGetPhysicalDeviceSurfacePresentModesKHR = (delegate* unmanaged<VulkanHandle<VkPhysicalDevice>, VulkanHandle<VkSurfaceKHR>, uint*, VkPresentModeKHR*, VkResult>)addr;
		}
		if (TryLoadFunc(inst, "vkCreateViSurfaceNN", out addr)) {
			vkCreateViSurfaceNN = (delegate* unmanaged<VulkanHandle<VkInstance>, VkViSurfaceCreateInfoNN*, VkAllocationCallbacks*, VulkanHandle<VkSurfaceKHR>*, VkResult>)addr;
		}
		if (TryLoadFunc(inst, "vkCreateWaylandSurfaceKHR", out addr)) {
			vkCreateWaylandSurfaceKHR = (delegate* unmanaged<VulkanHandle<VkInstance>, VkWaylandSurfaceCreateInfoKHR*, VkAllocationCallbacks*, VulkanHandle<VkSurfaceKHR>*, VkResult>)addr;
		}
		if (TryLoadFunc(inst, "vkGetPhysicalDeviceWaylandPresentationSupportKHR", out addr)) {
			vkGetPhysicalDeviceWaylandPresentationSupportKHR = (delegate* unmanaged<VulkanHandle<VkPhysicalDevice>, uint, void*, VkBool32>)addr;
		}
		if (TryLoadFunc(inst, "vkCreateWin32SurfaceKHR", out addr)) {
			vkCreateWin32SurfaceKHR = (delegate* unmanaged<VulkanHandle<VkInstance>, VkWin32SurfaceCreateInfoKHR*, VkAllocationCallbacks*, VulkanHandle<VkSurfaceKHR>*, VkResult>)addr;
		}
		if (TryLoadFunc(inst, "vkGetPhysicalDeviceWin32PresentationSupportKHR", out addr)) {
			vkGetPhysicalDeviceWin32PresentationSupportKHR = (delegate* unmanaged<VulkanHandle<VkPhysicalDevice>, uint, VkBool32>)addr;
		}
		if (TryLoadFunc(inst, "vkCreateXlibSurfaceKHR", out addr)) {
			vkCreateXlibSurfaceKHR = (delegate* unmanaged<VulkanHandle<VkInstance>, VkXlibSurfaceCreateInfoKHR*, VkAllocationCallbacks*, VulkanHandle<VkSurfaceKHR>*, VkResult>)addr;
		}
		if (TryLoadFunc(inst, "vkGetPhysicalDeviceXlibPresentationSupportKHR", out addr)) {
			vkGetPhysicalDeviceXlibPresentationSupportKHR = (delegate* unmanaged<VulkanHandle<VkPhysicalDevice>, uint, void*, ulong, VkBool32>)addr;
		}
		if (TryLoadFunc(inst, "vkCreateXcbSurfaceKHR", out addr)) {
			vkCreateXcbSurfaceKHR = (delegate* unmanaged<VulkanHandle<VkInstance>, VkXcbSurfaceCreateInfoKHR*, VkAllocationCallbacks*, VulkanHandle<VkSurfaceKHR>*, VkResult>)addr;
		}
		if (TryLoadFunc(inst, "vkGetPhysicalDeviceXcbPresentationSupportKHR", out addr)) {
			vkGetPhysicalDeviceXcbPresentationSupportKHR = (delegate* unmanaged<VulkanHandle<VkPhysicalDevice>, uint, void*, uint, VkBool32>)addr;
		}
		if (TryLoadFunc(inst, "vkCreateDirectFBSurfaceEXT", out addr)) {
			vkCreateDirectFBSurfaceEXT = (delegate* unmanaged<VulkanHandle<VkInstance>, VkDirectFBSurfaceCreateInfoEXT*, VkAllocationCallbacks*, VulkanHandle<VkSurfaceKHR>*, VkResult>)addr;
		}
		if (TryLoadFunc(inst, "vkGetPhysicalDeviceDirectFBPresentationSupportEXT", out addr)) {
			vkGetPhysicalDeviceDirectFBPresentationSupportEXT = (delegate* unmanaged<VulkanHandle<VkPhysicalDevice>, uint, void*, VkBool32>)addr;
		}
		if (TryLoadFunc(inst, "vkCreateImagePipeSurfaceFUCHSIA", out addr)) {
			vkCreateImagePipeSurfaceFUCHSIA = (delegate* unmanaged<VulkanHandle<VkInstance>, VkImagePipeSurfaceCreateInfoFUCHSIA*, VkAllocationCallbacks*, VulkanHandle<VkSurfaceKHR>*, VkResult>)addr;
		}
		if (TryLoadFunc(inst, "vkCreateStreamDescriptorSurfaceGGP", out addr)) {
			vkCreateStreamDescriptorSurfaceGGP = (delegate* unmanaged<VulkanHandle<VkInstance>, VkStreamDescriptorSurfaceCreateInfoGGP*, VkAllocationCallbacks*, VulkanHandle<VkSurfaceKHR>*, VkResult>)addr;
		}
		if (TryLoadFunc(inst, "vkCreateDebugReportCallbackEXT", out addr)) {
			vkCreateDebugReportCallbackEXT = (delegate* unmanaged<VulkanHandle<VkInstance>, VkDebugReportCallbackCreateInfoEXT*, VkAllocationCallbacks*, VulkanHandle<VkDebugReportCallbackEXT>*, VkResult>)addr;
		}
		if (TryLoadFunc(inst, "vkDestroyDebugReportCallbackEXT", out addr)) {
			vkDestroyDebugReportCallbackEXT = (delegate* unmanaged<VulkanHandle<VkInstance>, VulkanHandle<VkDebugReportCallbackEXT>, VkAllocationCallbacks*, void>)addr;
		}
		if (TryLoadFunc(inst, "vkDebugReportMessageEXT", out addr)) {
			vkDebugReportMessageEXT = (delegate* unmanaged<VulkanHandle<VkInstance>, VkDebugReportFlagsEXT, VkDebugReportObjectTypeEXT, ulong, ulong, int, byte*, byte*, void>)addr;
		}
		if (TryLoadFunc(inst, "vkGetPhysicalDeviceExternalImageFormatPropertiesNV", out addr)) {
			vkGetPhysicalDeviceExternalImageFormatPropertiesNV = (delegate* unmanaged<VulkanHandle<VkPhysicalDevice>, VkFormat, VkImageType, VkImageTiling, VkImageUsageFlags, VkImageCreateFlags, VkExternalMemoryHandleTypeFlagsNV, VkExternalImageFormatPropertiesNV*, VkResult>)addr;
		}
		if (version >= VkVersion.VK_VERSION_1_1) {
			vkGetPhysicalDeviceFeatures2 = (delegate* unmanaged<VulkanHandle<VkPhysicalDevice>, VkPhysicalDeviceFeatures2*, void>)LoadFunc(inst, "vkGetPhysicalDeviceFeatures2");
		}
		vkGetPhysicalDeviceFeatures2KHR = vkGetPhysicalDeviceFeatures2;
		if ((vkGetPhysicalDeviceFeatures2KHR == null) && TryLoadFunc(inst, "vkGetPhysicalDeviceFeatures2KHR", out addr)) {
			vkGetPhysicalDeviceFeatures2KHR = (delegate* unmanaged<VulkanHandle<VkPhysicalDevice>, VkPhysicalDeviceFeatures2*, void>)addr;
		}
		if (version >= VkVersion.VK_VERSION_1_1) {
			vkGetPhysicalDeviceProperties2 = (delegate* unmanaged<VulkanHandle<VkPhysicalDevice>, VkPhysicalDeviceProperties2*, void>)LoadFunc(inst, "vkGetPhysicalDeviceProperties2");
		}
		vkGetPhysicalDeviceProperties2KHR = vkGetPhysicalDeviceProperties2;
		if ((vkGetPhysicalDeviceProperties2KHR == null) && TryLoadFunc(inst, "vkGetPhysicalDeviceProperties2KHR", out addr)) {
			vkGetPhysicalDeviceProperties2KHR = (delegate* unmanaged<VulkanHandle<VkPhysicalDevice>, VkPhysicalDeviceProperties2*, void>)addr;
		}
		if (version >= VkVersion.VK_VERSION_1_1) {
			vkGetPhysicalDeviceFormatProperties2 = (delegate* unmanaged<VulkanHandle<VkPhysicalDevice>, VkFormat, VkFormatProperties2*, void>)LoadFunc(inst, "vkGetPhysicalDeviceFormatProperties2");
		}
		vkGetPhysicalDeviceFormatProperties2KHR = vkGetPhysicalDeviceFormatProperties2;
		if ((vkGetPhysicalDeviceFormatProperties2KHR == null) && TryLoadFunc(inst, "vkGetPhysicalDeviceFormatProperties2KHR", out addr)) {
			vkGetPhysicalDeviceFormatProperties2KHR = (delegate* unmanaged<VulkanHandle<VkPhysicalDevice>, VkFormat, VkFormatProperties2*, void>)addr;
		}
		if (version >= VkVersion.VK_VERSION_1_1) {
			vkGetPhysicalDeviceImageFormatProperties2 = (delegate* unmanaged<VulkanHandle<VkPhysicalDevice>, VkPhysicalDeviceImageFormatInfo2*, VkImageFormatProperties2*, VkResult>)LoadFunc(inst, "vkGetPhysicalDeviceImageFormatProperties2");
		}
		vkGetPhysicalDeviceImageFormatProperties2KHR = vkGetPhysicalDeviceImageFormatProperties2;
		if ((vkGetPhysicalDeviceImageFormatProperties2KHR == null) && TryLoadFunc(inst, "vkGetPhysicalDeviceImageFormatProperties2KHR", out addr)) {
			vkGetPhysicalDeviceImageFormatProperties2KHR = (delegate* unmanaged<VulkanHandle<VkPhysicalDevice>, VkPhysicalDeviceImageFormatInfo2*, VkImageFormatProperties2*, VkResult>)addr;
		}
		if (version >= VkVersion.VK_VERSION_1_1) {
			vkGetPhysicalDeviceQueueFamilyProperties2 = (delegate* unmanaged<VulkanHandle<VkPhysicalDevice>, uint*, VkQueueFamilyProperties2*, void>)LoadFunc(inst, "vkGetPhysicalDeviceQueueFamilyProperties2");
		}
		vkGetPhysicalDeviceQueueFamilyProperties2KHR = vkGetPhysicalDeviceQueueFamilyProperties2;
		if ((vkGetPhysicalDeviceQueueFamilyProperties2KHR == null) && TryLoadFunc(inst, "vkGetPhysicalDeviceQueueFamilyProperties2KHR", out addr)) {
			vkGetPhysicalDeviceQueueFamilyProperties2KHR = (delegate* unmanaged<VulkanHandle<VkPhysicalDevice>, uint*, VkQueueFamilyProperties2*, void>)addr;
		}
		if (version >= VkVersion.VK_VERSION_1_1) {
			vkGetPhysicalDeviceMemoryProperties2 = (delegate* unmanaged<VulkanHandle<VkPhysicalDevice>, VkPhysicalDeviceMemoryProperties2*, void>)LoadFunc(inst, "vkGetPhysicalDeviceMemoryProperties2");
		}
		vkGetPhysicalDeviceMemoryProperties2KHR = vkGetPhysicalDeviceMemoryProperties2;
		if ((vkGetPhysicalDeviceMemoryProperties2KHR == null) && TryLoadFunc(inst, "vkGetPhysicalDeviceMemoryProperties2KHR", out addr)) {
			vkGetPhysicalDeviceMemoryProperties2KHR = (delegate* unmanaged<VulkanHandle<VkPhysicalDevice>, VkPhysicalDeviceMemoryProperties2*, void>)addr;
		}
		if (version >= VkVersion.VK_VERSION_1_1) {
			vkGetPhysicalDeviceSparseImageFormatProperties2 = (delegate* unmanaged<VulkanHandle<VkPhysicalDevice>, VkPhysicalDeviceSparseImageFormatInfo2*, uint*, VkSparseImageFormatProperties2*, void>)LoadFunc(inst, "vkGetPhysicalDeviceSparseImageFormatProperties2");
		}
		vkGetPhysicalDeviceSparseImageFormatProperties2KHR = vkGetPhysicalDeviceSparseImageFormatProperties2;
		if ((vkGetPhysicalDeviceSparseImageFormatProperties2KHR == null) && TryLoadFunc(inst, "vkGetPhysicalDeviceSparseImageFormatProperties2KHR", out addr)) {
			vkGetPhysicalDeviceSparseImageFormatProperties2KHR = (delegate* unmanaged<VulkanHandle<VkPhysicalDevice>, VkPhysicalDeviceSparseImageFormatInfo2*, uint*, VkSparseImageFormatProperties2*, void>)addr;
		}
		if (version >= VkVersion.VK_VERSION_1_1) {
			vkGetPhysicalDeviceExternalBufferProperties = (delegate* unmanaged<VulkanHandle<VkPhysicalDevice>, VkPhysicalDeviceExternalBufferInfo*, VkExternalBufferProperties*, void>)LoadFunc(inst, "vkGetPhysicalDeviceExternalBufferProperties");
		}
		vkGetPhysicalDeviceExternalBufferPropertiesKHR = vkGetPhysicalDeviceExternalBufferProperties;
		if ((vkGetPhysicalDeviceExternalBufferPropertiesKHR == null) && TryLoadFunc(inst, "vkGetPhysicalDeviceExternalBufferPropertiesKHR", out addr)) {
			vkGetPhysicalDeviceExternalBufferPropertiesKHR = (delegate* unmanaged<VulkanHandle<VkPhysicalDevice>, VkPhysicalDeviceExternalBufferInfo*, VkExternalBufferProperties*, void>)addr;
		}
		if (version >= VkVersion.VK_VERSION_1_1) {
			vkGetPhysicalDeviceExternalSemaphoreProperties = (delegate* unmanaged<VulkanHandle<VkPhysicalDevice>, VkPhysicalDeviceExternalSemaphoreInfo*, VkExternalSemaphoreProperties*, void>)LoadFunc(inst, "vkGetPhysicalDeviceExternalSemaphoreProperties");
		}
		vkGetPhysicalDeviceExternalSemaphorePropertiesKHR = vkGetPhysicalDeviceExternalSemaphoreProperties;
		if ((vkGetPhysicalDeviceExternalSemaphorePropertiesKHR == null) && TryLoadFunc(inst, "vkGetPhysicalDeviceExternalSemaphorePropertiesKHR", out addr)) {
			vkGetPhysicalDeviceExternalSemaphorePropertiesKHR = (delegate* unmanaged<VulkanHandle<VkPhysicalDevice>, VkPhysicalDeviceExternalSemaphoreInfo*, VkExternalSemaphoreProperties*, void>)addr;
		}
		if (version >= VkVersion.VK_VERSION_1_1) {
			vkGetPhysicalDeviceExternalFenceProperties = (delegate* unmanaged<VulkanHandle<VkPhysicalDevice>, VkPhysicalDeviceExternalFenceInfo*, VkExternalFenceProperties*, void>)LoadFunc(inst, "vkGetPhysicalDeviceExternalFenceProperties");
		}
		vkGetPhysicalDeviceExternalFencePropertiesKHR = vkGetPhysicalDeviceExternalFenceProperties;
		if ((vkGetPhysicalDeviceExternalFencePropertiesKHR == null) && TryLoadFunc(inst, "vkGetPhysicalDeviceExternalFencePropertiesKHR", out addr)) {
			vkGetPhysicalDeviceExternalFencePropertiesKHR = (delegate* unmanaged<VulkanHandle<VkPhysicalDevice>, VkPhysicalDeviceExternalFenceInfo*, VkExternalFenceProperties*, void>)addr;
		}
		if (TryLoadFunc(inst, "vkReleaseDisplayEXT", out addr)) {
			vkReleaseDisplayEXT = (delegate* unmanaged<VulkanHandle<VkPhysicalDevice>, VulkanHandle<VkDisplayKHR>, VkResult>)addr;
		}
		if (TryLoadFunc(inst, "vkAcquireXlibDisplayEXT", out addr)) {
			vkAcquireXlibDisplayEXT = (delegate* unmanaged<VulkanHandle<VkPhysicalDevice>, void*, VulkanHandle<VkDisplayKHR>, VkResult>)addr;
		}
		if (TryLoadFunc(inst, "vkGetRandROutputDisplayEXT", out addr)) {
			vkGetRandROutputDisplayEXT = (delegate* unmanaged<VulkanHandle<VkPhysicalDevice>, void*, ulong, VulkanHandle<VkDisplayKHR>*, VkResult>)addr;
		}
		if (TryLoadFunc(inst, "vkGetPhysicalDeviceSurfaceCapabilities2EXT", out addr)) {
			vkGetPhysicalDeviceSurfaceCapabilities2EXT = (delegate* unmanaged<VulkanHandle<VkPhysicalDevice>, VulkanHandle<VkSurfaceKHR>, VkSurfaceCapabilities2EXT*, VkResult>)addr;
		}
		if (version >= VkVersion.VK_VERSION_1_1) {
			vkEnumeratePhysicalDeviceGroups = (delegate* unmanaged<VulkanHandle<VkInstance>, uint*, VkPhysicalDeviceGroupProperties*, VkResult>)LoadFunc(inst, "vkEnumeratePhysicalDeviceGroups");
		}
		vkEnumeratePhysicalDeviceGroupsKHR = vkEnumeratePhysicalDeviceGroups;
		if ((vkEnumeratePhysicalDeviceGroupsKHR == null) && TryLoadFunc(inst, "vkEnumeratePhysicalDeviceGroupsKHR", out addr)) {
			vkEnumeratePhysicalDeviceGroupsKHR = (delegate* unmanaged<VulkanHandle<VkInstance>, uint*, VkPhysicalDeviceGroupProperties*, VkResult>)addr;
		}
		if (TryLoadFunc(inst, "vkGetPhysicalDevicePresentRectanglesKHR", out addr)) {
			vkGetPhysicalDevicePresentRectanglesKHR = (delegate* unmanaged<VulkanHandle<VkPhysicalDevice>, VulkanHandle<VkSurfaceKHR>, uint*, VkRect2D*, VkResult>)addr;
		}
		if (TryLoadFunc(inst, "vkCreateIOSSurfaceMVK", out addr)) {
			vkCreateIOSSurfaceMVK = (delegate* unmanaged<VulkanHandle<VkInstance>, VkIOSSurfaceCreateInfoMVK*, VkAllocationCallbacks*, VulkanHandle<VkSurfaceKHR>*, VkResult>)addr;
		}
		if (TryLoadFunc(inst, "vkCreateMacOSSurfaceMVK", out addr)) {
			vkCreateMacOSSurfaceMVK = (delegate* unmanaged<VulkanHandle<VkInstance>, VkMacOSSurfaceCreateInfoMVK*, VkAllocationCallbacks*, VulkanHandle<VkSurfaceKHR>*, VkResult>)addr;
		}
		if (TryLoadFunc(inst, "vkCreateMetalSurfaceEXT", out addr)) {
			vkCreateMetalSurfaceEXT = (delegate* unmanaged<VulkanHandle<VkInstance>, VkMetalSurfaceCreateInfoEXT*, VkAllocationCallbacks*, VulkanHandle<VkSurfaceKHR>*, VkResult>)addr;
		}
		if (TryLoadFunc(inst, "vkGetPhysicalDeviceMultisamplePropertiesEXT", out addr)) {
			vkGetPhysicalDeviceMultisamplePropertiesEXT = (delegate* unmanaged<VulkanHandle<VkPhysicalDevice>, VkSampleCountFlags, VkMultisamplePropertiesEXT*, void>)addr;
		}
		if (TryLoadFunc(inst, "vkGetPhysicalDeviceSurfaceCapabilities2KHR", out addr)) {
			vkGetPhysicalDeviceSurfaceCapabilities2KHR = (delegate* unmanaged<VulkanHandle<VkPhysicalDevice>, VkPhysicalDeviceSurfaceInfo2KHR*, VkSurfaceCapabilities2KHR*, VkResult>)addr;
		}
		if (TryLoadFunc(inst, "vkGetPhysicalDeviceSurfaceFormats2KHR", out addr)) {
			vkGetPhysicalDeviceSurfaceFormats2KHR = (delegate* unmanaged<VulkanHandle<VkPhysicalDevice>, VkPhysicalDeviceSurfaceInfo2KHR*, uint*, VkSurfaceFormat2KHR*, VkResult>)addr;
		}
		if (TryLoadFunc(inst, "vkGetPhysicalDeviceDisplayProperties2KHR", out addr)) {
			vkGetPhysicalDeviceDisplayProperties2KHR = (delegate* unmanaged<VulkanHandle<VkPhysicalDevice>, uint*, VkDisplayProperties2KHR*, VkResult>)addr;
		}
		if (TryLoadFunc(inst, "vkGetPhysicalDeviceDisplayPlaneProperties2KHR", out addr)) {
			vkGetPhysicalDeviceDisplayPlaneProperties2KHR = (delegate* unmanaged<VulkanHandle<VkPhysicalDevice>, uint*, VkDisplayPlaneProperties2KHR*, VkResult>)addr;
		}
		if (TryLoadFunc(inst, "vkGetDisplayModeProperties2KHR", out addr)) {
			vkGetDisplayModeProperties2KHR = (delegate* unmanaged<VulkanHandle<VkPhysicalDevice>, VulkanHandle<VkDisplayKHR>, uint*, VkDisplayModeProperties2KHR*, VkResult>)addr;
		}
		if (TryLoadFunc(inst, "vkGetDisplayPlaneCapabilities2KHR", out addr)) {
			vkGetDisplayPlaneCapabilities2KHR = (delegate* unmanaged<VulkanHandle<VkPhysicalDevice>, VkDisplayPlaneInfo2KHR*, VkDisplayPlaneCapabilities2KHR*, VkResult>)addr;
		}
		if (TryLoadFunc(inst, "vkGetPhysicalDeviceCalibrateableTimeDomainsEXT", out addr)) {
			vkGetPhysicalDeviceCalibrateableTimeDomainsEXT = (delegate* unmanaged<VulkanHandle<VkPhysicalDevice>, uint*, VkTimeDomainEXT*, VkResult>)addr;
		}
		if (TryLoadFunc(inst, "vkCreateDebugUtilsMessengerEXT", out addr)) {
			vkCreateDebugUtilsMessengerEXT = (delegate* unmanaged<VulkanHandle<VkInstance>, VkDebugUtilsMessengerCreateInfoEXT*, VkAllocationCallbacks*, VulkanHandle<VkDebugUtilsMessengerEXT>*, VkResult>)addr;
		}
		if (TryLoadFunc(inst, "vkDestroyDebugUtilsMessengerEXT", out addr)) {
			vkDestroyDebugUtilsMessengerEXT = (delegate* unmanaged<VulkanHandle<VkInstance>, VulkanHandle<VkDebugUtilsMessengerEXT>, VkAllocationCallbacks*, void>)addr;
		}
		if (TryLoadFunc(inst, "vkSubmitDebugUtilsMessageEXT", out addr)) {
			vkSubmitDebugUtilsMessageEXT = (delegate* unmanaged<VulkanHandle<VkInstance>, VkDebugUtilsMessageSeverityFlagsEXT, VkDebugUtilsMessageTypeFlagsEXT, VkDebugUtilsMessengerCallbackDataEXT*, void>)addr;
		}
		if (TryLoadFunc(inst, "vkGetPhysicalDeviceCooperativeMatrixPropertiesNV", out addr)) {
			vkGetPhysicalDeviceCooperativeMatrixPropertiesNV = (delegate* unmanaged<VulkanHandle<VkPhysicalDevice>, uint*, VkCooperativeMatrixPropertiesNV*, VkResult>)addr;
		}
		if (TryLoadFunc(inst, "vkGetPhysicalDeviceSurfacePresentModes2EXT", out addr)) {
			vkGetPhysicalDeviceSurfacePresentModes2EXT = (delegate* unmanaged<VulkanHandle<VkPhysicalDevice>, VkPhysicalDeviceSurfaceInfo2KHR*, uint*, VkPresentModeKHR*, VkResult>)addr;
		}
		if (TryLoadFunc(inst, "vkEnumeratePhysicalDeviceQueueFamilyPerformanceQueryCountersKHR", out addr)) {
			vkEnumeratePhysicalDeviceQueueFamilyPerformanceQueryCountersKHR = (delegate* unmanaged<VulkanHandle<VkPhysicalDevice>, uint, uint*, VkPerformanceCounterKHR*, VkPerformanceCounterDescriptionKHR*, VkResult>)addr;
		}
		if (TryLoadFunc(inst, "vkGetPhysicalDeviceQueueFamilyPerformanceQueryPassesKHR", out addr)) {
			vkGetPhysicalDeviceQueueFamilyPerformanceQueryPassesKHR = (delegate* unmanaged<VulkanHandle<VkPhysicalDevice>, VkQueryPoolPerformanceCreateInfoKHR*, uint*, void>)addr;
		}
		if (TryLoadFunc(inst, "vkCreateHeadlessSurfaceEXT", out addr)) {
			vkCreateHeadlessSurfaceEXT = (delegate* unmanaged<VulkanHandle<VkInstance>, VkHeadlessSurfaceCreateInfoEXT*, VkAllocationCallbacks*, VulkanHandle<VkSurfaceKHR>*, VkResult>)addr;
		}
		if (TryLoadFunc(inst, "vkGetPhysicalDeviceSupportedFramebufferMixedSamplesCombinationsNV", out addr)) {
			vkGetPhysicalDeviceSupportedFramebufferMixedSamplesCombinationsNV = (delegate* unmanaged<VulkanHandle<VkPhysicalDevice>, uint*, VkFramebufferMixedSamplesCombinationNV*, VkResult>)addr;
		}
		if (TryLoadFunc(inst, "vkGetPhysicalDeviceToolPropertiesEXT", out addr)) {
			vkGetPhysicalDeviceToolPropertiesEXT = (delegate* unmanaged<VulkanHandle<VkPhysicalDevice>, uint*, VkPhysicalDeviceToolPropertiesEXT*, VkResult>)addr;
		}
		if (TryLoadFunc(inst, "vkGetPhysicalDeviceFragmentShadingRatesKHR", out addr)) {
			vkGetPhysicalDeviceFragmentShadingRatesKHR = (delegate* unmanaged<VulkanHandle<VkPhysicalDevice>, uint*, VkPhysicalDeviceFragmentShadingRateKHR*, VkResult>)addr;
		}
	}

	static InstanceFunctionTable()
	{
		vkCreateInstance =
			(delegate* unmanaged<VkInstanceCreateInfo*, VkAllocationCallbacks*, VulkanHandle<VkInstance>*, VkResult>)VulkanLibrary.GetExport("vkCreateInstance").ToPointer();
		vkGetDeviceProcAddr =
			(delegate* unmanaged<VulkanHandle<VkDevice>, byte*, delegate* unmanaged<void>>)VulkanLibrary.GetExport("vkGetDeviceProcAddr").ToPointer();
		vkGetInstanceProcAddr =
			(delegate* unmanaged<VulkanHandle<VkInstance>, byte*, delegate* unmanaged<void>>)VulkanLibrary.GetExport("vkGetInstanceProcAddr").ToPointer();
		vkEnumerateInstanceVersion =
			(delegate* unmanaged<uint*, VkResult>)VulkanLibrary.GetExport("vkEnumerateInstanceVersion").ToPointer();
		vkEnumerateInstanceLayerProperties =
			(delegate* unmanaged<uint*, VkLayerProperties*, VkResult>)VulkanLibrary.GetExport("vkEnumerateInstanceLayerProperties").ToPointer();
		vkEnumerateInstanceExtensionProperties =
			(delegate* unmanaged<byte*, uint*, VkExtensionProperties*, VkResult>)VulkanLibrary.GetExport("vkEnumerateInstanceExtensionProperties").ToPointer();
	}

}


} // namespace Vulkan

