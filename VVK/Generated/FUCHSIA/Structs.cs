/*
 * MIT License - Copyright(c) 2020 Sean Moss
 * This file is subject to the terms and conditions of the MIT License, the text of which can be found in the 'LICENSE'
 * file at the root of this repository, or online at <https://opensource.org/licenses/MIT>.
 */

/// This file was generated by VVKGen. Edits to this file will be lost on next generation.

using System;
using System.Runtime.InteropServices;
using System.Runtime.CompilerServices;

namespace Vulkan
{

[StructLayout(LayoutKind.Sequential)]
public unsafe partial struct VkImagePipeSurfaceCreateInfoFUCHSIA : IEquatable<VkImagePipeSurfaceCreateInfoFUCHSIA>
{
	public const VkStructureType TYPE = VkStructureType.ImagepipeSurfaceCreateInfoFuchsia;

	public VkStructureType sType;
	public void* pNext;
	public VkImagePipeSurfaceCreateFlagsFUCHSIA Flags;
	public uint ImagePipeHandle;

	public VkImagePipeSurfaceCreateInfoFUCHSIA(
		VkImagePipeSurfaceCreateFlagsFUCHSIA flags = default,
		uint imagePipeHandle = default
	) {
		sType = TYPE;
		pNext = null;
		Flags = flags;
		ImagePipeHandle = imagePipeHandle;
	}

	public readonly override bool Equals(object? o) => (o is VkImagePipeSurfaceCreateInfoFUCHSIA s) && (this == s);
	readonly bool IEquatable<VkImagePipeSurfaceCreateInfoFUCHSIA>.Equals(VkImagePipeSurfaceCreateInfoFUCHSIA o) => o == this;

	[MethodImpl(MethodImplOptions.AggressiveOptimization)]
	public readonly override int GetHashCode()
	{
		return
			sType.GetHashCode() ^ ((ulong)pNext).GetHashCode() ^ Flags.GetHashCode() ^ ImagePipeHandle.GetHashCode()
			;
	}

	[MethodImpl(MethodImplOptions.AggressiveOptimization)]
	public static bool operator == (in VkImagePipeSurfaceCreateInfoFUCHSIA l, in VkImagePipeSurfaceCreateInfoFUCHSIA r)
	{
		return
			(l.sType == r.sType) && (l.pNext == r.pNext) && (l.Flags == r.Flags) && (l.ImagePipeHandle == r.ImagePipeHandle)
			;
	}

	[MethodImpl(MethodImplOptions.AggressiveOptimization)]
	public static bool operator != (in VkImagePipeSurfaceCreateInfoFUCHSIA l, in VkImagePipeSurfaceCreateInfoFUCHSIA r)
	{
		return
			(l.sType != r.sType) || (l.pNext != r.pNext) || (l.Flags != r.Flags) || (l.ImagePipeHandle != r.ImagePipeHandle)
			;
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void New(out VkImagePipeSurfaceCreateInfoFUCHSIA s) => s = new() { sType = TYPE };
}


} // namespace Vulkan

