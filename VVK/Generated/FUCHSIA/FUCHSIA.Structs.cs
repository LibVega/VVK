/*
 * MIT License - Copyright(c) 2020 Sean Moss
 * This file is subject to the terms and conditions of the MIT License, the text of which can be found in the 'LICENSE'
 * file at the root of this repository, or online at<https://opensource.org/licenses/MIT>.
 */

/// This file was generated by VVKGen. Edits to this file will be lost on next generation.

using System;
using System.Runtime.InteropServices;
using System.Runtime.CompilerServices;


namespace Vk.FUCHSIA
{

[StructLayout(LayoutKind.Sequential)]
public unsafe partial struct ImagePipeSurfaceCreateInfo : IEquatable<ImagePipeSurfaceCreateInfo>
{
	public const Vk.StructureType TYPE = Vk.StructureType.ImagepipeSurfaceCreateInfoFUCHSIA;

	public Vk.StructureType sType;
	public void* pNext;
	public Vk.FUCHSIA.ImagePipeSurfaceCreateFlags Flags;
	public uint ImagePipeHandle;

	public readonly override bool Equals(object? obj) => (obj is ImagePipeSurfaceCreateInfo o) && (this == o);
	readonly bool IEquatable<ImagePipeSurfaceCreateInfo>.Equals(ImagePipeSurfaceCreateInfo obj) => (this == obj);
	public readonly override int GetHashCode()
	{
		fixed (Vk.StructureType* ptr = &sType) {
			return VVK.Hasher.HashBytes(ptr, (uint)Unsafe.SizeOf<ImagePipeSurfaceCreateInfo>());
		}
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static bool operator == (in ImagePipeSurfaceCreateInfo l, in ImagePipeSurfaceCreateInfo r)
	{
		fixed (ImagePipeSurfaceCreateInfo* lp = &l, rp = &r) {
			ReadOnlySpan<byte> lb = new((byte*)lp, Unsafe.SizeOf<ImagePipeSurfaceCreateInfo>());
			ReadOnlySpan<byte> rb = new((byte*)rp, Unsafe.SizeOf<ImagePipeSurfaceCreateInfo>());
			return lb.SequenceCompareTo(rb) == 0;
		}
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static bool operator != (in ImagePipeSurfaceCreateInfo l, in ImagePipeSurfaceCreateInfo r)
	{
		fixed (ImagePipeSurfaceCreateInfo* lp = &l, rp = &r) {
			ReadOnlySpan<byte> lb = new((byte*)lp, Unsafe.SizeOf<ImagePipeSurfaceCreateInfo>());
			ReadOnlySpan<byte> rb = new((byte*)rp, Unsafe.SizeOf<ImagePipeSurfaceCreateInfo>());
			return lb.SequenceCompareTo(rb) != 0;
		}
	}


	/// <summary>Creates a new ImagePipeSurfaceCreateInfo value with the correct type field.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void New(out ImagePipeSurfaceCreateInfo value) => value = new() { sType = TYPE };
	/// <summary>Initializes the sType and pNext fields to the correct default values.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void Init(ref ImagePipeSurfaceCreateInfo value) { value.sType = TYPE; value.pNext = null; }
}

} // namespace Vk.FUCHSIA
