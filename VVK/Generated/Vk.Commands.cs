/*
 * MIT License - Copyright(c) 2020 Sean Moss
 * This file is subject to the terms and conditions of the MIT License, the text of which can be found in the 'LICENSE'
 * file at the root of this repository, or online at<https://opensource.org/licenses/MIT>.
 */

/// This file was generated by VVKGen. Edits to this file will be lost on next generation.

using System;
using System.Runtime.InteropServices;
using System.Runtime.CompilerServices;


namespace Vk
{

public unsafe sealed partial class InstanceFunctionTable
{
	/* Global Functions */
	public static readonly delegate* unmanaged<Vk.InstanceCreateInfo*, Vk.AllocationCallbacks*, Vk.Handle<Vk.Instance>*, Vk.Result> vkCreateInstance = null;
	public static readonly delegate* unmanaged<Vk.Handle<Vk.Device>, byte*, delegate* unmanaged<void>> vkGetDeviceProcAddr = null;
	public static readonly delegate* unmanaged<Vk.Handle<Vk.Instance>, byte*, delegate* unmanaged<void>> vkGetInstanceProcAddr = null;
	public static readonly delegate* unmanaged<uint*, Vk.Result> vkEnumerateInstanceVersion = null;
	public static readonly delegate* unmanaged<uint*, Vk.LayerProperties*, Vk.Result> vkEnumerateInstanceLayerProperties = null;
	public static readonly delegate* unmanaged<byte*, uint*, Vk.ExtensionProperties*, Vk.Result> vkEnumerateInstanceExtensionProperties = null;

	/* Instance Functions */
	public readonly delegate* unmanaged<Vk.Handle<Vk.Instance>, Vk.AllocationCallbacks*, void> vkDestroyInstance = null;
	public readonly delegate* unmanaged<Vk.Handle<Vk.Instance>, uint*, Vk.Handle<Vk.PhysicalDevice>*, Vk.Result> vkEnumeratePhysicalDevices = null;
	public readonly delegate* unmanaged<Vk.Handle<Vk.PhysicalDevice>, Vk.PhysicalDeviceProperties*, void> vkGetPhysicalDeviceProperties = null;
	public readonly delegate* unmanaged<Vk.Handle<Vk.PhysicalDevice>, uint*, Vk.QueueFamilyProperties*, void> vkGetPhysicalDeviceQueueFamilyProperties = null;
	public readonly delegate* unmanaged<Vk.Handle<Vk.PhysicalDevice>, Vk.PhysicalDeviceMemoryProperties*, void> vkGetPhysicalDeviceMemoryProperties = null;
	public readonly delegate* unmanaged<Vk.Handle<Vk.PhysicalDevice>, Vk.PhysicalDeviceFeatures*, void> vkGetPhysicalDeviceFeatures = null;
	public readonly delegate* unmanaged<Vk.Handle<Vk.PhysicalDevice>, Vk.Format, Vk.FormatProperties*, void> vkGetPhysicalDeviceFormatProperties = null;
	public readonly delegate* unmanaged<Vk.Handle<Vk.PhysicalDevice>, Vk.Format, Vk.ImageType, Vk.ImageTiling, Vk.ImageUsageFlags, Vk.ImageCreateFlags, Vk.ImageFormatProperties*, Vk.Result> vkGetPhysicalDeviceImageFormatProperties = null;
	public readonly delegate* unmanaged<Vk.Handle<Vk.PhysicalDevice>, Vk.DeviceCreateInfo*, Vk.AllocationCallbacks*, Vk.Handle<Vk.Device>*, Vk.Result> vkCreateDevice = null;
	public readonly delegate* unmanaged<Vk.Handle<Vk.PhysicalDevice>, uint*, Vk.LayerProperties*, Vk.Result> vkEnumerateDeviceLayerProperties = null;
	public readonly delegate* unmanaged<Vk.Handle<Vk.PhysicalDevice>, byte*, uint*, Vk.ExtensionProperties*, Vk.Result> vkEnumerateDeviceExtensionProperties = null;
	public readonly delegate* unmanaged<Vk.Handle<Vk.PhysicalDevice>, Vk.Format, Vk.ImageType, Vk.SampleCountFlags, Vk.ImageUsageFlags, Vk.ImageTiling, uint*, Vk.SparseImageFormatProperties*, void> vkGetPhysicalDeviceSparseImageFormatProperties = null;
	public readonly delegate* unmanaged<Vk.Handle<Vk.Instance>, Vk.KHR.AndroidSurfaceCreateInfo*, Vk.AllocationCallbacks*, Vk.Handle<Vk.KHR.Surface>*, Vk.Result> vkCreateAndroidSurfaceKHR = null;
	public readonly delegate* unmanaged<Vk.Handle<Vk.PhysicalDevice>, uint*, Vk.KHR.DisplayProperties*, Vk.Result> vkGetPhysicalDeviceDisplayPropertiesKHR = null;
	public readonly delegate* unmanaged<Vk.Handle<Vk.PhysicalDevice>, uint*, Vk.KHR.DisplayPlaneProperties*, Vk.Result> vkGetPhysicalDeviceDisplayPlanePropertiesKHR = null;
	public readonly delegate* unmanaged<Vk.Handle<Vk.PhysicalDevice>, uint, uint*, Vk.Handle<Vk.KHR.Display>*, Vk.Result> vkGetDisplayPlaneSupportedDisplaysKHR = null;
	public readonly delegate* unmanaged<Vk.Handle<Vk.PhysicalDevice>, Vk.Handle<Vk.KHR.Display>, uint*, Vk.KHR.DisplayModeProperties*, Vk.Result> vkGetDisplayModePropertiesKHR = null;
	public readonly delegate* unmanaged<Vk.Handle<Vk.PhysicalDevice>, Vk.Handle<Vk.KHR.Display>, Vk.KHR.DisplayModeCreateInfo*, Vk.AllocationCallbacks*, Vk.Handle<Vk.KHR.DisplayMode>*, Vk.Result> vkCreateDisplayModeKHR = null;
	public readonly delegate* unmanaged<Vk.Handle<Vk.PhysicalDevice>, Vk.Handle<Vk.KHR.DisplayMode>, uint, Vk.KHR.DisplayPlaneCapabilities*, Vk.Result> vkGetDisplayPlaneCapabilitiesKHR = null;
	public readonly delegate* unmanaged<Vk.Handle<Vk.Instance>, Vk.KHR.DisplaySurfaceCreateInfo*, Vk.AllocationCallbacks*, Vk.Handle<Vk.KHR.Surface>*, Vk.Result> vkCreateDisplayPlaneSurfaceKHR = null;
	public readonly delegate* unmanaged<Vk.Handle<Vk.Instance>, Vk.Handle<Vk.KHR.Surface>, Vk.AllocationCallbacks*, void> vkDestroySurfaceKHR = null;
	public readonly delegate* unmanaged<Vk.Handle<Vk.PhysicalDevice>, uint, Vk.Handle<Vk.KHR.Surface>, Vk.Bool32*, Vk.Result> vkGetPhysicalDeviceSurfaceSupportKHR = null;
	public readonly delegate* unmanaged<Vk.Handle<Vk.PhysicalDevice>, Vk.Handle<Vk.KHR.Surface>, Vk.KHR.SurfaceCapabilities*, Vk.Result> vkGetPhysicalDeviceSurfaceCapabilitiesKHR = null;
	public readonly delegate* unmanaged<Vk.Handle<Vk.PhysicalDevice>, Vk.Handle<Vk.KHR.Surface>, uint*, Vk.KHR.SurfaceFormat*, Vk.Result> vkGetPhysicalDeviceSurfaceFormatsKHR = null;
	public readonly delegate* unmanaged<Vk.Handle<Vk.PhysicalDevice>, Vk.Handle<Vk.KHR.Surface>, uint*, Vk.KHR.PresentMode*, Vk.Result> vkGetPhysicalDeviceSurfacePresentModesKHR = null;
	public readonly delegate* unmanaged<Vk.Handle<Vk.Instance>, Vk.NN.ViSurfaceCreateInfo*, Vk.AllocationCallbacks*, Vk.Handle<Vk.KHR.Surface>*, Vk.Result> vkCreateViSurfaceNN = null;
	public readonly delegate* unmanaged<Vk.Handle<Vk.Instance>, Vk.KHR.WaylandSurfaceCreateInfo*, Vk.AllocationCallbacks*, Vk.Handle<Vk.KHR.Surface>*, Vk.Result> vkCreateWaylandSurfaceKHR = null;
	public readonly delegate* unmanaged<Vk.Handle<Vk.PhysicalDevice>, uint, void*, Vk.Bool32> vkGetPhysicalDeviceWaylandPresentationSupportKHR = null;
	public readonly delegate* unmanaged<Vk.Handle<Vk.Instance>, Vk.KHR.Win32SurfaceCreateInfo*, Vk.AllocationCallbacks*, Vk.Handle<Vk.KHR.Surface>*, Vk.Result> vkCreateWin32SurfaceKHR = null;
	public readonly delegate* unmanaged<Vk.Handle<Vk.PhysicalDevice>, uint, Vk.Bool32> vkGetPhysicalDeviceWin32PresentationSupportKHR = null;
	public readonly delegate* unmanaged<Vk.Handle<Vk.Instance>, Vk.KHR.XlibSurfaceCreateInfo*, Vk.AllocationCallbacks*, Vk.Handle<Vk.KHR.Surface>*, Vk.Result> vkCreateXlibSurfaceKHR = null;
	public readonly delegate* unmanaged<Vk.Handle<Vk.PhysicalDevice>, uint, void*, ulong, Vk.Bool32> vkGetPhysicalDeviceXlibPresentationSupportKHR = null;
	public readonly delegate* unmanaged<Vk.Handle<Vk.Instance>, Vk.KHR.XcbSurfaceCreateInfo*, Vk.AllocationCallbacks*, Vk.Handle<Vk.KHR.Surface>*, Vk.Result> vkCreateXcbSurfaceKHR = null;
	public readonly delegate* unmanaged<Vk.Handle<Vk.PhysicalDevice>, uint, void*, uint, Vk.Bool32> vkGetPhysicalDeviceXcbPresentationSupportKHR = null;
	public readonly delegate* unmanaged<Vk.Handle<Vk.Instance>, Vk.EXT.DirectFBSurfaceCreateInfo*, Vk.AllocationCallbacks*, Vk.Handle<Vk.KHR.Surface>*, Vk.Result> vkCreateDirectFBSurfaceEXT = null;
	public readonly delegate* unmanaged<Vk.Handle<Vk.PhysicalDevice>, uint, void*, Vk.Bool32> vkGetPhysicalDeviceDirectFBPresentationSupportEXT = null;
	public readonly delegate* unmanaged<Vk.Handle<Vk.Instance>, Vk.FUCHSIA.ImagePipeSurfaceCreateInfo*, Vk.AllocationCallbacks*, Vk.Handle<Vk.KHR.Surface>*, Vk.Result> vkCreateImagePipeSurfaceFUCHSIA = null;
	public readonly delegate* unmanaged<Vk.Handle<Vk.Instance>, Vk.GGP.StreamDescriptorSurfaceCreateInfo*, Vk.AllocationCallbacks*, Vk.Handle<Vk.KHR.Surface>*, Vk.Result> vkCreateStreamDescriptorSurfaceGGP = null;
	public readonly delegate* unmanaged<Vk.Handle<Vk.Instance>, Vk.EXT.DebugReportCallbackCreateInfo*, Vk.AllocationCallbacks*, Vk.Handle<Vk.EXT.DebugReportCallback>*, Vk.Result> vkCreateDebugReportCallbackEXT = null;
	public readonly delegate* unmanaged<Vk.Handle<Vk.Instance>, Vk.Handle<Vk.EXT.DebugReportCallback>, Vk.AllocationCallbacks*, void> vkDestroyDebugReportCallbackEXT = null;
	public readonly delegate* unmanaged<Vk.Handle<Vk.Instance>, Vk.EXT.DebugReportFlags, Vk.EXT.DebugReportObjectType, ulong, ulong, int, byte*, byte*, void> vkDebugReportMessageEXT = null;
	public readonly delegate* unmanaged<Vk.Handle<Vk.PhysicalDevice>, Vk.Format, Vk.ImageType, Vk.ImageTiling, Vk.ImageUsageFlags, Vk.ImageCreateFlags, Vk.NV.ExternalMemoryHandleTypeFlags, Vk.NV.ExternalImageFormatProperties*, Vk.Result> vkGetPhysicalDeviceExternalImageFormatPropertiesNV = null;
	public readonly delegate* unmanaged<Vk.Handle<Vk.PhysicalDevice>, Vk.PhysicalDeviceFeatures2*, void> vkGetPhysicalDeviceFeatures2 = null;
	public readonly delegate* unmanaged<Vk.Handle<Vk.PhysicalDevice>, Vk.PhysicalDeviceFeatures2*, void> vkGetPhysicalDeviceFeatures2KHR = null;
	public readonly delegate* unmanaged<Vk.Handle<Vk.PhysicalDevice>, Vk.PhysicalDeviceProperties2*, void> vkGetPhysicalDeviceProperties2 = null;
	public readonly delegate* unmanaged<Vk.Handle<Vk.PhysicalDevice>, Vk.PhysicalDeviceProperties2*, void> vkGetPhysicalDeviceProperties2KHR = null;
	public readonly delegate* unmanaged<Vk.Handle<Vk.PhysicalDevice>, Vk.Format, Vk.FormatProperties2*, void> vkGetPhysicalDeviceFormatProperties2 = null;
	public readonly delegate* unmanaged<Vk.Handle<Vk.PhysicalDevice>, Vk.Format, Vk.FormatProperties2*, void> vkGetPhysicalDeviceFormatProperties2KHR = null;
	public readonly delegate* unmanaged<Vk.Handle<Vk.PhysicalDevice>, Vk.PhysicalDeviceImageFormatInfo2*, Vk.ImageFormatProperties2*, Vk.Result> vkGetPhysicalDeviceImageFormatProperties2 = null;
	public readonly delegate* unmanaged<Vk.Handle<Vk.PhysicalDevice>, Vk.PhysicalDeviceImageFormatInfo2*, Vk.ImageFormatProperties2*, Vk.Result> vkGetPhysicalDeviceImageFormatProperties2KHR = null;
	public readonly delegate* unmanaged<Vk.Handle<Vk.PhysicalDevice>, uint*, Vk.QueueFamilyProperties2*, void> vkGetPhysicalDeviceQueueFamilyProperties2 = null;
	public readonly delegate* unmanaged<Vk.Handle<Vk.PhysicalDevice>, uint*, Vk.QueueFamilyProperties2*, void> vkGetPhysicalDeviceQueueFamilyProperties2KHR = null;
	public readonly delegate* unmanaged<Vk.Handle<Vk.PhysicalDevice>, Vk.PhysicalDeviceMemoryProperties2*, void> vkGetPhysicalDeviceMemoryProperties2 = null;
	public readonly delegate* unmanaged<Vk.Handle<Vk.PhysicalDevice>, Vk.PhysicalDeviceMemoryProperties2*, void> vkGetPhysicalDeviceMemoryProperties2KHR = null;
	public readonly delegate* unmanaged<Vk.Handle<Vk.PhysicalDevice>, Vk.PhysicalDeviceSparseImageFormatInfo2*, uint*, Vk.SparseImageFormatProperties2*, void> vkGetPhysicalDeviceSparseImageFormatProperties2 = null;
	public readonly delegate* unmanaged<Vk.Handle<Vk.PhysicalDevice>, Vk.PhysicalDeviceSparseImageFormatInfo2*, uint*, Vk.SparseImageFormatProperties2*, void> vkGetPhysicalDeviceSparseImageFormatProperties2KHR = null;
	public readonly delegate* unmanaged<Vk.Handle<Vk.PhysicalDevice>, Vk.PhysicalDeviceExternalBufferInfo*, Vk.ExternalBufferProperties*, void> vkGetPhysicalDeviceExternalBufferProperties = null;
	public readonly delegate* unmanaged<Vk.Handle<Vk.PhysicalDevice>, Vk.PhysicalDeviceExternalBufferInfo*, Vk.ExternalBufferProperties*, void> vkGetPhysicalDeviceExternalBufferPropertiesKHR = null;
	public readonly delegate* unmanaged<Vk.Handle<Vk.PhysicalDevice>, Vk.PhysicalDeviceExternalSemaphoreInfo*, Vk.ExternalSemaphoreProperties*, void> vkGetPhysicalDeviceExternalSemaphoreProperties = null;
	public readonly delegate* unmanaged<Vk.Handle<Vk.PhysicalDevice>, Vk.PhysicalDeviceExternalSemaphoreInfo*, Vk.ExternalSemaphoreProperties*, void> vkGetPhysicalDeviceExternalSemaphorePropertiesKHR = null;
	public readonly delegate* unmanaged<Vk.Handle<Vk.PhysicalDevice>, Vk.PhysicalDeviceExternalFenceInfo*, Vk.ExternalFenceProperties*, void> vkGetPhysicalDeviceExternalFenceProperties = null;
	public readonly delegate* unmanaged<Vk.Handle<Vk.PhysicalDevice>, Vk.PhysicalDeviceExternalFenceInfo*, Vk.ExternalFenceProperties*, void> vkGetPhysicalDeviceExternalFencePropertiesKHR = null;
	public readonly delegate* unmanaged<Vk.Handle<Vk.PhysicalDevice>, Vk.Handle<Vk.KHR.Display>, Vk.Result> vkReleaseDisplayEXT = null;
	public readonly delegate* unmanaged<Vk.Handle<Vk.PhysicalDevice>, void*, Vk.Handle<Vk.KHR.Display>, Vk.Result> vkAcquireXlibDisplayEXT = null;
	public readonly delegate* unmanaged<Vk.Handle<Vk.PhysicalDevice>, void*, ulong, Vk.Handle<Vk.KHR.Display>*, Vk.Result> vkGetRandROutputDisplayEXT = null;
	public readonly delegate* unmanaged<Vk.Handle<Vk.PhysicalDevice>, Vk.Handle<Vk.KHR.Surface>, Vk.EXT.SurfaceCapabilities2*, Vk.Result> vkGetPhysicalDeviceSurfaceCapabilities2EXT = null;
	public readonly delegate* unmanaged<Vk.Handle<Vk.Instance>, uint*, Vk.PhysicalDeviceGroupProperties*, Vk.Result> vkEnumeratePhysicalDeviceGroups = null;
	public readonly delegate* unmanaged<Vk.Handle<Vk.Instance>, uint*, Vk.PhysicalDeviceGroupProperties*, Vk.Result> vkEnumeratePhysicalDeviceGroupsKHR = null;
	public readonly delegate* unmanaged<Vk.Handle<Vk.PhysicalDevice>, Vk.Handle<Vk.KHR.Surface>, uint*, Vk.Rect2D*, Vk.Result> vkGetPhysicalDevicePresentRectanglesKHR = null;
	public readonly delegate* unmanaged<Vk.Handle<Vk.Instance>, Vk.MVK.IOSSurfaceCreateInfo*, Vk.AllocationCallbacks*, Vk.Handle<Vk.KHR.Surface>*, Vk.Result> vkCreateIOSSurfaceMVK = null;
	public readonly delegate* unmanaged<Vk.Handle<Vk.Instance>, Vk.MVK.MacOSSurfaceCreateInfo*, Vk.AllocationCallbacks*, Vk.Handle<Vk.KHR.Surface>*, Vk.Result> vkCreateMacOSSurfaceMVK = null;
	public readonly delegate* unmanaged<Vk.Handle<Vk.Instance>, Vk.EXT.MetalSurfaceCreateInfo*, Vk.AllocationCallbacks*, Vk.Handle<Vk.KHR.Surface>*, Vk.Result> vkCreateMetalSurfaceEXT = null;
	public readonly delegate* unmanaged<Vk.Handle<Vk.PhysicalDevice>, Vk.SampleCountFlags, Vk.EXT.MultisampleProperties*, void> vkGetPhysicalDeviceMultisamplePropertiesEXT = null;
	public readonly delegate* unmanaged<Vk.Handle<Vk.PhysicalDevice>, Vk.KHR.PhysicalDeviceSurfaceInfo2*, Vk.KHR.SurfaceCapabilities2*, Vk.Result> vkGetPhysicalDeviceSurfaceCapabilities2KHR = null;
	public readonly delegate* unmanaged<Vk.Handle<Vk.PhysicalDevice>, Vk.KHR.PhysicalDeviceSurfaceInfo2*, uint*, Vk.KHR.SurfaceFormat2*, Vk.Result> vkGetPhysicalDeviceSurfaceFormats2KHR = null;
	public readonly delegate* unmanaged<Vk.Handle<Vk.PhysicalDevice>, uint*, Vk.KHR.DisplayProperties2*, Vk.Result> vkGetPhysicalDeviceDisplayProperties2KHR = null;
	public readonly delegate* unmanaged<Vk.Handle<Vk.PhysicalDevice>, uint*, Vk.KHR.DisplayPlaneProperties2*, Vk.Result> vkGetPhysicalDeviceDisplayPlaneProperties2KHR = null;
	public readonly delegate* unmanaged<Vk.Handle<Vk.PhysicalDevice>, Vk.Handle<Vk.KHR.Display>, uint*, Vk.KHR.DisplayModeProperties2*, Vk.Result> vkGetDisplayModeProperties2KHR = null;
	public readonly delegate* unmanaged<Vk.Handle<Vk.PhysicalDevice>, Vk.KHR.DisplayPlaneInfo2*, Vk.KHR.DisplayPlaneCapabilities2*, Vk.Result> vkGetDisplayPlaneCapabilities2KHR = null;
	public readonly delegate* unmanaged<Vk.Handle<Vk.PhysicalDevice>, uint*, Vk.EXT.TimeDomain*, Vk.Result> vkGetPhysicalDeviceCalibrateableTimeDomainsEXT = null;
	public readonly delegate* unmanaged<Vk.Handle<Vk.Instance>, Vk.EXT.DebugUtilsMessengerCreateInfo*, Vk.AllocationCallbacks*, Vk.Handle<Vk.EXT.DebugUtilsMessenger>*, Vk.Result> vkCreateDebugUtilsMessengerEXT = null;
	public readonly delegate* unmanaged<Vk.Handle<Vk.Instance>, Vk.Handle<Vk.EXT.DebugUtilsMessenger>, Vk.AllocationCallbacks*, void> vkDestroyDebugUtilsMessengerEXT = null;
	public readonly delegate* unmanaged<Vk.Handle<Vk.Instance>, Vk.EXT.DebugUtilsMessageSeverityFlags, Vk.EXT.DebugUtilsMessageTypeFlags, Vk.EXT.DebugUtilsMessengerCallbackData*, void> vkSubmitDebugUtilsMessageEXT = null;
	public readonly delegate* unmanaged<Vk.Handle<Vk.PhysicalDevice>, uint*, Vk.NV.CooperativeMatrixProperties*, Vk.Result> vkGetPhysicalDeviceCooperativeMatrixPropertiesNV = null;
	public readonly delegate* unmanaged<Vk.Handle<Vk.PhysicalDevice>, Vk.KHR.PhysicalDeviceSurfaceInfo2*, uint*, Vk.KHR.PresentMode*, Vk.Result> vkGetPhysicalDeviceSurfacePresentModes2EXT = null;
	public readonly delegate* unmanaged<Vk.Handle<Vk.PhysicalDevice>, uint, uint*, Vk.KHR.PerformanceCounter*, Vk.KHR.PerformanceCounterDescription*, Vk.Result> vkEnumeratePhysicalDeviceQueueFamilyPerformanceQueryCountersKHR = null;
	public readonly delegate* unmanaged<Vk.Handle<Vk.PhysicalDevice>, Vk.KHR.QueryPoolPerformanceCreateInfo*, uint*, void> vkGetPhysicalDeviceQueueFamilyPerformanceQueryPassesKHR = null;
	public readonly delegate* unmanaged<Vk.Handle<Vk.Instance>, Vk.EXT.HeadlessSurfaceCreateInfo*, Vk.AllocationCallbacks*, Vk.Handle<Vk.KHR.Surface>*, Vk.Result> vkCreateHeadlessSurfaceEXT = null;
	public readonly delegate* unmanaged<Vk.Handle<Vk.PhysicalDevice>, uint*, Vk.NV.FramebufferMixedSamplesCombination*, Vk.Result> vkGetPhysicalDeviceSupportedFramebufferMixedSamplesCombinationsNV = null;
	public readonly delegate* unmanaged<Vk.Handle<Vk.PhysicalDevice>, uint*, Vk.EXT.PhysicalDeviceToolProperties*, Vk.Result> vkGetPhysicalDeviceToolPropertiesEXT = null;
	public readonly delegate* unmanaged<Vk.Handle<Vk.PhysicalDevice>, uint*, Vk.KHR.PhysicalDeviceFragmentShadingRate*, Vk.Result> vkGetPhysicalDeviceFragmentShadingRatesKHR = null;

	/// <summary>Creates a new function table with all null pointers.</summary>
	public InstanceFunctionTable() { }

	/// <summary>Creates a new function table and loads the functions.</summary>
	/// <param name="inst">The instance to load the functions for.</param>
	/// <param name="version">The core API version that the instance was created with.</param>
	public InstanceFunctionTable(Vk.Handle<Vk.Instance> inst, Vk.Version version)
	{
		void* addr = null;
		CoreVersion = version;
		Vk.Version V10 = new(1, 0, 0);
		Vk.Version V11 = new(1, 1, 0);
		Vk.Version V12 = new(1, 2, 0);

		if (version >= V10) {
			vkDestroyInstance =
				(delegate* unmanaged<Vk.Handle<Vk.Instance>, Vk.AllocationCallbacks*, void>)LoadFunc(inst, "vkDestroyInstance");
		}
		if (version >= V10) {
			vkEnumeratePhysicalDevices =
				(delegate* unmanaged<Vk.Handle<Vk.Instance>, uint*, Vk.Handle<Vk.PhysicalDevice>*, Vk.Result>)LoadFunc(inst, "vkEnumeratePhysicalDevices");
		}
		if (version >= V10) {
			vkGetPhysicalDeviceProperties =
				(delegate* unmanaged<Vk.Handle<Vk.PhysicalDevice>, Vk.PhysicalDeviceProperties*, void>)LoadFunc(inst, "vkGetPhysicalDeviceProperties");
		}
		if (version >= V10) {
			vkGetPhysicalDeviceQueueFamilyProperties =
				(delegate* unmanaged<Vk.Handle<Vk.PhysicalDevice>, uint*, Vk.QueueFamilyProperties*, void>)LoadFunc(inst, "vkGetPhysicalDeviceQueueFamilyProperties");
		}
		if (version >= V10) {
			vkGetPhysicalDeviceMemoryProperties =
				(delegate* unmanaged<Vk.Handle<Vk.PhysicalDevice>, Vk.PhysicalDeviceMemoryProperties*, void>)LoadFunc(inst, "vkGetPhysicalDeviceMemoryProperties");
		}
		if (version >= V10) {
			vkGetPhysicalDeviceFeatures =
				(delegate* unmanaged<Vk.Handle<Vk.PhysicalDevice>, Vk.PhysicalDeviceFeatures*, void>)LoadFunc(inst, "vkGetPhysicalDeviceFeatures");
		}
		if (version >= V10) {
			vkGetPhysicalDeviceFormatProperties =
				(delegate* unmanaged<Vk.Handle<Vk.PhysicalDevice>, Vk.Format, Vk.FormatProperties*, void>)LoadFunc(inst, "vkGetPhysicalDeviceFormatProperties");
		}
		if (version >= V10) {
			vkGetPhysicalDeviceImageFormatProperties =
				(delegate* unmanaged<Vk.Handle<Vk.PhysicalDevice>, Vk.Format, Vk.ImageType, Vk.ImageTiling, Vk.ImageUsageFlags, Vk.ImageCreateFlags, Vk.ImageFormatProperties*, Vk.Result>)LoadFunc(inst, "vkGetPhysicalDeviceImageFormatProperties");
		}
		if (version >= V10) {
			vkCreateDevice =
				(delegate* unmanaged<Vk.Handle<Vk.PhysicalDevice>, Vk.DeviceCreateInfo*, Vk.AllocationCallbacks*, Vk.Handle<Vk.Device>*, Vk.Result>)LoadFunc(inst, "vkCreateDevice");
		}
		if (version >= V10) {
			vkEnumerateDeviceLayerProperties =
				(delegate* unmanaged<Vk.Handle<Vk.PhysicalDevice>, uint*, Vk.LayerProperties*, Vk.Result>)LoadFunc(inst, "vkEnumerateDeviceLayerProperties");
		}
		if (version >= V10) {
			vkEnumerateDeviceExtensionProperties =
				(delegate* unmanaged<Vk.Handle<Vk.PhysicalDevice>, byte*, uint*, Vk.ExtensionProperties*, Vk.Result>)LoadFunc(inst, "vkEnumerateDeviceExtensionProperties");
		}
		if (version >= V10) {
			vkGetPhysicalDeviceSparseImageFormatProperties =
				(delegate* unmanaged<Vk.Handle<Vk.PhysicalDevice>, Vk.Format, Vk.ImageType, Vk.SampleCountFlags, Vk.ImageUsageFlags, Vk.ImageTiling, uint*, Vk.SparseImageFormatProperties*, void>)LoadFunc(inst, "vkGetPhysicalDeviceSparseImageFormatProperties");
		}
		if (TryLoadFunc(inst, "vkCreateAndroidSurfaceKHR", out addr)) {
			vkCreateAndroidSurfaceKHR =
				(delegate* unmanaged<Vk.Handle<Vk.Instance>, Vk.KHR.AndroidSurfaceCreateInfo*, Vk.AllocationCallbacks*, Vk.Handle<Vk.KHR.Surface>*, Vk.Result>)addr;
		}
		if (TryLoadFunc(inst, "vkGetPhysicalDeviceDisplayPropertiesKHR", out addr)) {
			vkGetPhysicalDeviceDisplayPropertiesKHR =
				(delegate* unmanaged<Vk.Handle<Vk.PhysicalDevice>, uint*, Vk.KHR.DisplayProperties*, Vk.Result>)addr;
		}
		if (TryLoadFunc(inst, "vkGetPhysicalDeviceDisplayPlanePropertiesKHR", out addr)) {
			vkGetPhysicalDeviceDisplayPlanePropertiesKHR =
				(delegate* unmanaged<Vk.Handle<Vk.PhysicalDevice>, uint*, Vk.KHR.DisplayPlaneProperties*, Vk.Result>)addr;
		}
		if (TryLoadFunc(inst, "vkGetDisplayPlaneSupportedDisplaysKHR", out addr)) {
			vkGetDisplayPlaneSupportedDisplaysKHR =
				(delegate* unmanaged<Vk.Handle<Vk.PhysicalDevice>, uint, uint*, Vk.Handle<Vk.KHR.Display>*, Vk.Result>)addr;
		}
		if (TryLoadFunc(inst, "vkGetDisplayModePropertiesKHR", out addr)) {
			vkGetDisplayModePropertiesKHR =
				(delegate* unmanaged<Vk.Handle<Vk.PhysicalDevice>, Vk.Handle<Vk.KHR.Display>, uint*, Vk.KHR.DisplayModeProperties*, Vk.Result>)addr;
		}
		if (TryLoadFunc(inst, "vkCreateDisplayModeKHR", out addr)) {
			vkCreateDisplayModeKHR =
				(delegate* unmanaged<Vk.Handle<Vk.PhysicalDevice>, Vk.Handle<Vk.KHR.Display>, Vk.KHR.DisplayModeCreateInfo*, Vk.AllocationCallbacks*, Vk.Handle<Vk.KHR.DisplayMode>*, Vk.Result>)addr;
		}
		if (TryLoadFunc(inst, "vkGetDisplayPlaneCapabilitiesKHR", out addr)) {
			vkGetDisplayPlaneCapabilitiesKHR =
				(delegate* unmanaged<Vk.Handle<Vk.PhysicalDevice>, Vk.Handle<Vk.KHR.DisplayMode>, uint, Vk.KHR.DisplayPlaneCapabilities*, Vk.Result>)addr;
		}
		if (TryLoadFunc(inst, "vkCreateDisplayPlaneSurfaceKHR", out addr)) {
			vkCreateDisplayPlaneSurfaceKHR =
				(delegate* unmanaged<Vk.Handle<Vk.Instance>, Vk.KHR.DisplaySurfaceCreateInfo*, Vk.AllocationCallbacks*, Vk.Handle<Vk.KHR.Surface>*, Vk.Result>)addr;
		}
		if (TryLoadFunc(inst, "vkDestroySurfaceKHR", out addr)) {
			vkDestroySurfaceKHR =
				(delegate* unmanaged<Vk.Handle<Vk.Instance>, Vk.Handle<Vk.KHR.Surface>, Vk.AllocationCallbacks*, void>)addr;
		}
		if (TryLoadFunc(inst, "vkGetPhysicalDeviceSurfaceSupportKHR", out addr)) {
			vkGetPhysicalDeviceSurfaceSupportKHR =
				(delegate* unmanaged<Vk.Handle<Vk.PhysicalDevice>, uint, Vk.Handle<Vk.KHR.Surface>, Vk.Bool32*, Vk.Result>)addr;
		}
		if (TryLoadFunc(inst, "vkGetPhysicalDeviceSurfaceCapabilitiesKHR", out addr)) {
			vkGetPhysicalDeviceSurfaceCapabilitiesKHR =
				(delegate* unmanaged<Vk.Handle<Vk.PhysicalDevice>, Vk.Handle<Vk.KHR.Surface>, Vk.KHR.SurfaceCapabilities*, Vk.Result>)addr;
		}
		if (TryLoadFunc(inst, "vkGetPhysicalDeviceSurfaceFormatsKHR", out addr)) {
			vkGetPhysicalDeviceSurfaceFormatsKHR =
				(delegate* unmanaged<Vk.Handle<Vk.PhysicalDevice>, Vk.Handle<Vk.KHR.Surface>, uint*, Vk.KHR.SurfaceFormat*, Vk.Result>)addr;
		}
		if (TryLoadFunc(inst, "vkGetPhysicalDeviceSurfacePresentModesKHR", out addr)) {
			vkGetPhysicalDeviceSurfacePresentModesKHR =
				(delegate* unmanaged<Vk.Handle<Vk.PhysicalDevice>, Vk.Handle<Vk.KHR.Surface>, uint*, Vk.KHR.PresentMode*, Vk.Result>)addr;
		}
		if (TryLoadFunc(inst, "vkCreateViSurfaceNN", out addr)) {
			vkCreateViSurfaceNN =
				(delegate* unmanaged<Vk.Handle<Vk.Instance>, Vk.NN.ViSurfaceCreateInfo*, Vk.AllocationCallbacks*, Vk.Handle<Vk.KHR.Surface>*, Vk.Result>)addr;
		}
		if (TryLoadFunc(inst, "vkCreateWaylandSurfaceKHR", out addr)) {
			vkCreateWaylandSurfaceKHR =
				(delegate* unmanaged<Vk.Handle<Vk.Instance>, Vk.KHR.WaylandSurfaceCreateInfo*, Vk.AllocationCallbacks*, Vk.Handle<Vk.KHR.Surface>*, Vk.Result>)addr;
		}
		if (TryLoadFunc(inst, "vkGetPhysicalDeviceWaylandPresentationSupportKHR", out addr)) {
			vkGetPhysicalDeviceWaylandPresentationSupportKHR =
				(delegate* unmanaged<Vk.Handle<Vk.PhysicalDevice>, uint, void*, Vk.Bool32>)addr;
		}
		if (TryLoadFunc(inst, "vkCreateWin32SurfaceKHR", out addr)) {
			vkCreateWin32SurfaceKHR =
				(delegate* unmanaged<Vk.Handle<Vk.Instance>, Vk.KHR.Win32SurfaceCreateInfo*, Vk.AllocationCallbacks*, Vk.Handle<Vk.KHR.Surface>*, Vk.Result>)addr;
		}
		if (TryLoadFunc(inst, "vkGetPhysicalDeviceWin32PresentationSupportKHR", out addr)) {
			vkGetPhysicalDeviceWin32PresentationSupportKHR =
				(delegate* unmanaged<Vk.Handle<Vk.PhysicalDevice>, uint, Vk.Bool32>)addr;
		}
		if (TryLoadFunc(inst, "vkCreateXlibSurfaceKHR", out addr)) {
			vkCreateXlibSurfaceKHR =
				(delegate* unmanaged<Vk.Handle<Vk.Instance>, Vk.KHR.XlibSurfaceCreateInfo*, Vk.AllocationCallbacks*, Vk.Handle<Vk.KHR.Surface>*, Vk.Result>)addr;
		}
		if (TryLoadFunc(inst, "vkGetPhysicalDeviceXlibPresentationSupportKHR", out addr)) {
			vkGetPhysicalDeviceXlibPresentationSupportKHR =
				(delegate* unmanaged<Vk.Handle<Vk.PhysicalDevice>, uint, void*, ulong, Vk.Bool32>)addr;
		}
		if (TryLoadFunc(inst, "vkCreateXcbSurfaceKHR", out addr)) {
			vkCreateXcbSurfaceKHR =
				(delegate* unmanaged<Vk.Handle<Vk.Instance>, Vk.KHR.XcbSurfaceCreateInfo*, Vk.AllocationCallbacks*, Vk.Handle<Vk.KHR.Surface>*, Vk.Result>)addr;
		}
		if (TryLoadFunc(inst, "vkGetPhysicalDeviceXcbPresentationSupportKHR", out addr)) {
			vkGetPhysicalDeviceXcbPresentationSupportKHR =
				(delegate* unmanaged<Vk.Handle<Vk.PhysicalDevice>, uint, void*, uint, Vk.Bool32>)addr;
		}
		if (TryLoadFunc(inst, "vkCreateDirectFBSurfaceEXT", out addr)) {
			vkCreateDirectFBSurfaceEXT =
				(delegate* unmanaged<Vk.Handle<Vk.Instance>, Vk.EXT.DirectFBSurfaceCreateInfo*, Vk.AllocationCallbacks*, Vk.Handle<Vk.KHR.Surface>*, Vk.Result>)addr;
		}
		if (TryLoadFunc(inst, "vkGetPhysicalDeviceDirectFBPresentationSupportEXT", out addr)) {
			vkGetPhysicalDeviceDirectFBPresentationSupportEXT =
				(delegate* unmanaged<Vk.Handle<Vk.PhysicalDevice>, uint, void*, Vk.Bool32>)addr;
		}
		if (TryLoadFunc(inst, "vkCreateImagePipeSurfaceFUCHSIA", out addr)) {
			vkCreateImagePipeSurfaceFUCHSIA =
				(delegate* unmanaged<Vk.Handle<Vk.Instance>, Vk.FUCHSIA.ImagePipeSurfaceCreateInfo*, Vk.AllocationCallbacks*, Vk.Handle<Vk.KHR.Surface>*, Vk.Result>)addr;
		}
		if (TryLoadFunc(inst, "vkCreateStreamDescriptorSurfaceGGP", out addr)) {
			vkCreateStreamDescriptorSurfaceGGP =
				(delegate* unmanaged<Vk.Handle<Vk.Instance>, Vk.GGP.StreamDescriptorSurfaceCreateInfo*, Vk.AllocationCallbacks*, Vk.Handle<Vk.KHR.Surface>*, Vk.Result>)addr;
		}
		if (TryLoadFunc(inst, "vkCreateDebugReportCallbackEXT", out addr)) {
			vkCreateDebugReportCallbackEXT =
				(delegate* unmanaged<Vk.Handle<Vk.Instance>, Vk.EXT.DebugReportCallbackCreateInfo*, Vk.AllocationCallbacks*, Vk.Handle<Vk.EXT.DebugReportCallback>*, Vk.Result>)addr;
		}
		if (TryLoadFunc(inst, "vkDestroyDebugReportCallbackEXT", out addr)) {
			vkDestroyDebugReportCallbackEXT =
				(delegate* unmanaged<Vk.Handle<Vk.Instance>, Vk.Handle<Vk.EXT.DebugReportCallback>, Vk.AllocationCallbacks*, void>)addr;
		}
		if (TryLoadFunc(inst, "vkDebugReportMessageEXT", out addr)) {
			vkDebugReportMessageEXT =
				(delegate* unmanaged<Vk.Handle<Vk.Instance>, Vk.EXT.DebugReportFlags, Vk.EXT.DebugReportObjectType, ulong, ulong, int, byte*, byte*, void>)addr;
		}
		if (TryLoadFunc(inst, "vkGetPhysicalDeviceExternalImageFormatPropertiesNV", out addr)) {
			vkGetPhysicalDeviceExternalImageFormatPropertiesNV =
				(delegate* unmanaged<Vk.Handle<Vk.PhysicalDevice>, Vk.Format, Vk.ImageType, Vk.ImageTiling, Vk.ImageUsageFlags, Vk.ImageCreateFlags, Vk.NV.ExternalMemoryHandleTypeFlags, Vk.NV.ExternalImageFormatProperties*, Vk.Result>)addr;
		}
		if (version >= V11) {
			vkGetPhysicalDeviceFeatures2 =
				(delegate* unmanaged<Vk.Handle<Vk.PhysicalDevice>, Vk.PhysicalDeviceFeatures2*, void>)LoadFunc(inst, "vkGetPhysicalDeviceFeatures2");
		}
		vkGetPhysicalDeviceFeatures2KHR = vkGetPhysicalDeviceFeatures2;
		if ((vkGetPhysicalDeviceFeatures2KHR == null) && TryLoadFunc(inst, "vkGetPhysicalDeviceFeatures2KHR", out addr)) {
			vkGetPhysicalDeviceFeatures2KHR =
				(delegate* unmanaged<Vk.Handle<Vk.PhysicalDevice>, Vk.PhysicalDeviceFeatures2*, void>)addr;
		}
		if (version >= V11) {
			vkGetPhysicalDeviceProperties2 =
				(delegate* unmanaged<Vk.Handle<Vk.PhysicalDevice>, Vk.PhysicalDeviceProperties2*, void>)LoadFunc(inst, "vkGetPhysicalDeviceProperties2");
		}
		vkGetPhysicalDeviceProperties2KHR = vkGetPhysicalDeviceProperties2;
		if ((vkGetPhysicalDeviceProperties2KHR == null) && TryLoadFunc(inst, "vkGetPhysicalDeviceProperties2KHR", out addr)) {
			vkGetPhysicalDeviceProperties2KHR =
				(delegate* unmanaged<Vk.Handle<Vk.PhysicalDevice>, Vk.PhysicalDeviceProperties2*, void>)addr;
		}
		if (version >= V11) {
			vkGetPhysicalDeviceFormatProperties2 =
				(delegate* unmanaged<Vk.Handle<Vk.PhysicalDevice>, Vk.Format, Vk.FormatProperties2*, void>)LoadFunc(inst, "vkGetPhysicalDeviceFormatProperties2");
		}
		vkGetPhysicalDeviceFormatProperties2KHR = vkGetPhysicalDeviceFormatProperties2;
		if ((vkGetPhysicalDeviceFormatProperties2KHR == null) && TryLoadFunc(inst, "vkGetPhysicalDeviceFormatProperties2KHR", out addr)) {
			vkGetPhysicalDeviceFormatProperties2KHR =
				(delegate* unmanaged<Vk.Handle<Vk.PhysicalDevice>, Vk.Format, Vk.FormatProperties2*, void>)addr;
		}
		if (version >= V11) {
			vkGetPhysicalDeviceImageFormatProperties2 =
				(delegate* unmanaged<Vk.Handle<Vk.PhysicalDevice>, Vk.PhysicalDeviceImageFormatInfo2*, Vk.ImageFormatProperties2*, Vk.Result>)LoadFunc(inst, "vkGetPhysicalDeviceImageFormatProperties2");
		}
		vkGetPhysicalDeviceImageFormatProperties2KHR = vkGetPhysicalDeviceImageFormatProperties2;
		if ((vkGetPhysicalDeviceImageFormatProperties2KHR == null) && TryLoadFunc(inst, "vkGetPhysicalDeviceImageFormatProperties2KHR", out addr)) {
			vkGetPhysicalDeviceImageFormatProperties2KHR =
				(delegate* unmanaged<Vk.Handle<Vk.PhysicalDevice>, Vk.PhysicalDeviceImageFormatInfo2*, Vk.ImageFormatProperties2*, Vk.Result>)addr;
		}
		if (version >= V11) {
			vkGetPhysicalDeviceQueueFamilyProperties2 =
				(delegate* unmanaged<Vk.Handle<Vk.PhysicalDevice>, uint*, Vk.QueueFamilyProperties2*, void>)LoadFunc(inst, "vkGetPhysicalDeviceQueueFamilyProperties2");
		}
		vkGetPhysicalDeviceQueueFamilyProperties2KHR = vkGetPhysicalDeviceQueueFamilyProperties2;
		if ((vkGetPhysicalDeviceQueueFamilyProperties2KHR == null) && TryLoadFunc(inst, "vkGetPhysicalDeviceQueueFamilyProperties2KHR", out addr)) {
			vkGetPhysicalDeviceQueueFamilyProperties2KHR =
				(delegate* unmanaged<Vk.Handle<Vk.PhysicalDevice>, uint*, Vk.QueueFamilyProperties2*, void>)addr;
		}
		if (version >= V11) {
			vkGetPhysicalDeviceMemoryProperties2 =
				(delegate* unmanaged<Vk.Handle<Vk.PhysicalDevice>, Vk.PhysicalDeviceMemoryProperties2*, void>)LoadFunc(inst, "vkGetPhysicalDeviceMemoryProperties2");
		}
		vkGetPhysicalDeviceMemoryProperties2KHR = vkGetPhysicalDeviceMemoryProperties2;
		if ((vkGetPhysicalDeviceMemoryProperties2KHR == null) && TryLoadFunc(inst, "vkGetPhysicalDeviceMemoryProperties2KHR", out addr)) {
			vkGetPhysicalDeviceMemoryProperties2KHR =
				(delegate* unmanaged<Vk.Handle<Vk.PhysicalDevice>, Vk.PhysicalDeviceMemoryProperties2*, void>)addr;
		}
		if (version >= V11) {
			vkGetPhysicalDeviceSparseImageFormatProperties2 =
				(delegate* unmanaged<Vk.Handle<Vk.PhysicalDevice>, Vk.PhysicalDeviceSparseImageFormatInfo2*, uint*, Vk.SparseImageFormatProperties2*, void>)LoadFunc(inst, "vkGetPhysicalDeviceSparseImageFormatProperties2");
		}
		vkGetPhysicalDeviceSparseImageFormatProperties2KHR = vkGetPhysicalDeviceSparseImageFormatProperties2;
		if ((vkGetPhysicalDeviceSparseImageFormatProperties2KHR == null) && TryLoadFunc(inst, "vkGetPhysicalDeviceSparseImageFormatProperties2KHR", out addr)) {
			vkGetPhysicalDeviceSparseImageFormatProperties2KHR =
				(delegate* unmanaged<Vk.Handle<Vk.PhysicalDevice>, Vk.PhysicalDeviceSparseImageFormatInfo2*, uint*, Vk.SparseImageFormatProperties2*, void>)addr;
		}
		if (version >= V11) {
			vkGetPhysicalDeviceExternalBufferProperties =
				(delegate* unmanaged<Vk.Handle<Vk.PhysicalDevice>, Vk.PhysicalDeviceExternalBufferInfo*, Vk.ExternalBufferProperties*, void>)LoadFunc(inst, "vkGetPhysicalDeviceExternalBufferProperties");
		}
		vkGetPhysicalDeviceExternalBufferPropertiesKHR = vkGetPhysicalDeviceExternalBufferProperties;
		if ((vkGetPhysicalDeviceExternalBufferPropertiesKHR == null) && TryLoadFunc(inst, "vkGetPhysicalDeviceExternalBufferPropertiesKHR", out addr)) {
			vkGetPhysicalDeviceExternalBufferPropertiesKHR =
				(delegate* unmanaged<Vk.Handle<Vk.PhysicalDevice>, Vk.PhysicalDeviceExternalBufferInfo*, Vk.ExternalBufferProperties*, void>)addr;
		}
		if (version >= V11) {
			vkGetPhysicalDeviceExternalSemaphoreProperties =
				(delegate* unmanaged<Vk.Handle<Vk.PhysicalDevice>, Vk.PhysicalDeviceExternalSemaphoreInfo*, Vk.ExternalSemaphoreProperties*, void>)LoadFunc(inst, "vkGetPhysicalDeviceExternalSemaphoreProperties");
		}
		vkGetPhysicalDeviceExternalSemaphorePropertiesKHR = vkGetPhysicalDeviceExternalSemaphoreProperties;
		if ((vkGetPhysicalDeviceExternalSemaphorePropertiesKHR == null) && TryLoadFunc(inst, "vkGetPhysicalDeviceExternalSemaphorePropertiesKHR", out addr)) {
			vkGetPhysicalDeviceExternalSemaphorePropertiesKHR =
				(delegate* unmanaged<Vk.Handle<Vk.PhysicalDevice>, Vk.PhysicalDeviceExternalSemaphoreInfo*, Vk.ExternalSemaphoreProperties*, void>)addr;
		}
		if (version >= V11) {
			vkGetPhysicalDeviceExternalFenceProperties =
				(delegate* unmanaged<Vk.Handle<Vk.PhysicalDevice>, Vk.PhysicalDeviceExternalFenceInfo*, Vk.ExternalFenceProperties*, void>)LoadFunc(inst, "vkGetPhysicalDeviceExternalFenceProperties");
		}
		vkGetPhysicalDeviceExternalFencePropertiesKHR = vkGetPhysicalDeviceExternalFenceProperties;
		if ((vkGetPhysicalDeviceExternalFencePropertiesKHR == null) && TryLoadFunc(inst, "vkGetPhysicalDeviceExternalFencePropertiesKHR", out addr)) {
			vkGetPhysicalDeviceExternalFencePropertiesKHR =
				(delegate* unmanaged<Vk.Handle<Vk.PhysicalDevice>, Vk.PhysicalDeviceExternalFenceInfo*, Vk.ExternalFenceProperties*, void>)addr;
		}
		if (TryLoadFunc(inst, "vkReleaseDisplayEXT", out addr)) {
			vkReleaseDisplayEXT =
				(delegate* unmanaged<Vk.Handle<Vk.PhysicalDevice>, Vk.Handle<Vk.KHR.Display>, Vk.Result>)addr;
		}
		if (TryLoadFunc(inst, "vkAcquireXlibDisplayEXT", out addr)) {
			vkAcquireXlibDisplayEXT =
				(delegate* unmanaged<Vk.Handle<Vk.PhysicalDevice>, void*, Vk.Handle<Vk.KHR.Display>, Vk.Result>)addr;
		}
		if (TryLoadFunc(inst, "vkGetRandROutputDisplayEXT", out addr)) {
			vkGetRandROutputDisplayEXT =
				(delegate* unmanaged<Vk.Handle<Vk.PhysicalDevice>, void*, ulong, Vk.Handle<Vk.KHR.Display>*, Vk.Result>)addr;
		}
		if (TryLoadFunc(inst, "vkGetPhysicalDeviceSurfaceCapabilities2EXT", out addr)) {
			vkGetPhysicalDeviceSurfaceCapabilities2EXT =
				(delegate* unmanaged<Vk.Handle<Vk.PhysicalDevice>, Vk.Handle<Vk.KHR.Surface>, Vk.EXT.SurfaceCapabilities2*, Vk.Result>)addr;
		}
		if (version >= V11) {
			vkEnumeratePhysicalDeviceGroups =
				(delegate* unmanaged<Vk.Handle<Vk.Instance>, uint*, Vk.PhysicalDeviceGroupProperties*, Vk.Result>)LoadFunc(inst, "vkEnumeratePhysicalDeviceGroups");
		}
		vkEnumeratePhysicalDeviceGroupsKHR = vkEnumeratePhysicalDeviceGroups;
		if ((vkEnumeratePhysicalDeviceGroupsKHR == null) && TryLoadFunc(inst, "vkEnumeratePhysicalDeviceGroupsKHR", out addr)) {
			vkEnumeratePhysicalDeviceGroupsKHR =
				(delegate* unmanaged<Vk.Handle<Vk.Instance>, uint*, Vk.PhysicalDeviceGroupProperties*, Vk.Result>)addr;
		}
		if (TryLoadFunc(inst, "vkGetPhysicalDevicePresentRectanglesKHR", out addr)) {
			vkGetPhysicalDevicePresentRectanglesKHR =
				(delegate* unmanaged<Vk.Handle<Vk.PhysicalDevice>, Vk.Handle<Vk.KHR.Surface>, uint*, Vk.Rect2D*, Vk.Result>)addr;
		}
		if (TryLoadFunc(inst, "vkCreateIOSSurfaceMVK", out addr)) {
			vkCreateIOSSurfaceMVK =
				(delegate* unmanaged<Vk.Handle<Vk.Instance>, Vk.MVK.IOSSurfaceCreateInfo*, Vk.AllocationCallbacks*, Vk.Handle<Vk.KHR.Surface>*, Vk.Result>)addr;
		}
		if (TryLoadFunc(inst, "vkCreateMacOSSurfaceMVK", out addr)) {
			vkCreateMacOSSurfaceMVK =
				(delegate* unmanaged<Vk.Handle<Vk.Instance>, Vk.MVK.MacOSSurfaceCreateInfo*, Vk.AllocationCallbacks*, Vk.Handle<Vk.KHR.Surface>*, Vk.Result>)addr;
		}
		if (TryLoadFunc(inst, "vkCreateMetalSurfaceEXT", out addr)) {
			vkCreateMetalSurfaceEXT =
				(delegate* unmanaged<Vk.Handle<Vk.Instance>, Vk.EXT.MetalSurfaceCreateInfo*, Vk.AllocationCallbacks*, Vk.Handle<Vk.KHR.Surface>*, Vk.Result>)addr;
		}
		if (TryLoadFunc(inst, "vkGetPhysicalDeviceMultisamplePropertiesEXT", out addr)) {
			vkGetPhysicalDeviceMultisamplePropertiesEXT =
				(delegate* unmanaged<Vk.Handle<Vk.PhysicalDevice>, Vk.SampleCountFlags, Vk.EXT.MultisampleProperties*, void>)addr;
		}
		if (TryLoadFunc(inst, "vkGetPhysicalDeviceSurfaceCapabilities2KHR", out addr)) {
			vkGetPhysicalDeviceSurfaceCapabilities2KHR =
				(delegate* unmanaged<Vk.Handle<Vk.PhysicalDevice>, Vk.KHR.PhysicalDeviceSurfaceInfo2*, Vk.KHR.SurfaceCapabilities2*, Vk.Result>)addr;
		}
		if (TryLoadFunc(inst, "vkGetPhysicalDeviceSurfaceFormats2KHR", out addr)) {
			vkGetPhysicalDeviceSurfaceFormats2KHR =
				(delegate* unmanaged<Vk.Handle<Vk.PhysicalDevice>, Vk.KHR.PhysicalDeviceSurfaceInfo2*, uint*, Vk.KHR.SurfaceFormat2*, Vk.Result>)addr;
		}
		if (TryLoadFunc(inst, "vkGetPhysicalDeviceDisplayProperties2KHR", out addr)) {
			vkGetPhysicalDeviceDisplayProperties2KHR =
				(delegate* unmanaged<Vk.Handle<Vk.PhysicalDevice>, uint*, Vk.KHR.DisplayProperties2*, Vk.Result>)addr;
		}
		if (TryLoadFunc(inst, "vkGetPhysicalDeviceDisplayPlaneProperties2KHR", out addr)) {
			vkGetPhysicalDeviceDisplayPlaneProperties2KHR =
				(delegate* unmanaged<Vk.Handle<Vk.PhysicalDevice>, uint*, Vk.KHR.DisplayPlaneProperties2*, Vk.Result>)addr;
		}
		if (TryLoadFunc(inst, "vkGetDisplayModeProperties2KHR", out addr)) {
			vkGetDisplayModeProperties2KHR =
				(delegate* unmanaged<Vk.Handle<Vk.PhysicalDevice>, Vk.Handle<Vk.KHR.Display>, uint*, Vk.KHR.DisplayModeProperties2*, Vk.Result>)addr;
		}
		if (TryLoadFunc(inst, "vkGetDisplayPlaneCapabilities2KHR", out addr)) {
			vkGetDisplayPlaneCapabilities2KHR =
				(delegate* unmanaged<Vk.Handle<Vk.PhysicalDevice>, Vk.KHR.DisplayPlaneInfo2*, Vk.KHR.DisplayPlaneCapabilities2*, Vk.Result>)addr;
		}
		if (TryLoadFunc(inst, "vkGetPhysicalDeviceCalibrateableTimeDomainsEXT", out addr)) {
			vkGetPhysicalDeviceCalibrateableTimeDomainsEXT =
				(delegate* unmanaged<Vk.Handle<Vk.PhysicalDevice>, uint*, Vk.EXT.TimeDomain*, Vk.Result>)addr;
		}
		if (TryLoadFunc(inst, "vkCreateDebugUtilsMessengerEXT", out addr)) {
			vkCreateDebugUtilsMessengerEXT =
				(delegate* unmanaged<Vk.Handle<Vk.Instance>, Vk.EXT.DebugUtilsMessengerCreateInfo*, Vk.AllocationCallbacks*, Vk.Handle<Vk.EXT.DebugUtilsMessenger>*, Vk.Result>)addr;
		}
		if (TryLoadFunc(inst, "vkDestroyDebugUtilsMessengerEXT", out addr)) {
			vkDestroyDebugUtilsMessengerEXT =
				(delegate* unmanaged<Vk.Handle<Vk.Instance>, Vk.Handle<Vk.EXT.DebugUtilsMessenger>, Vk.AllocationCallbacks*, void>)addr;
		}
		if (TryLoadFunc(inst, "vkSubmitDebugUtilsMessageEXT", out addr)) {
			vkSubmitDebugUtilsMessageEXT =
				(delegate* unmanaged<Vk.Handle<Vk.Instance>, Vk.EXT.DebugUtilsMessageSeverityFlags, Vk.EXT.DebugUtilsMessageTypeFlags, Vk.EXT.DebugUtilsMessengerCallbackData*, void>)addr;
		}
		if (TryLoadFunc(inst, "vkGetPhysicalDeviceCooperativeMatrixPropertiesNV", out addr)) {
			vkGetPhysicalDeviceCooperativeMatrixPropertiesNV =
				(delegate* unmanaged<Vk.Handle<Vk.PhysicalDevice>, uint*, Vk.NV.CooperativeMatrixProperties*, Vk.Result>)addr;
		}
		if (TryLoadFunc(inst, "vkGetPhysicalDeviceSurfacePresentModes2EXT", out addr)) {
			vkGetPhysicalDeviceSurfacePresentModes2EXT =
				(delegate* unmanaged<Vk.Handle<Vk.PhysicalDevice>, Vk.KHR.PhysicalDeviceSurfaceInfo2*, uint*, Vk.KHR.PresentMode*, Vk.Result>)addr;
		}
		if (TryLoadFunc(inst, "vkEnumeratePhysicalDeviceQueueFamilyPerformanceQueryCountersKHR", out addr)) {
			vkEnumeratePhysicalDeviceQueueFamilyPerformanceQueryCountersKHR =
				(delegate* unmanaged<Vk.Handle<Vk.PhysicalDevice>, uint, uint*, Vk.KHR.PerformanceCounter*, Vk.KHR.PerformanceCounterDescription*, Vk.Result>)addr;
		}
		if (TryLoadFunc(inst, "vkGetPhysicalDeviceQueueFamilyPerformanceQueryPassesKHR", out addr)) {
			vkGetPhysicalDeviceQueueFamilyPerformanceQueryPassesKHR =
				(delegate* unmanaged<Vk.Handle<Vk.PhysicalDevice>, Vk.KHR.QueryPoolPerformanceCreateInfo*, uint*, void>)addr;
		}
		if (TryLoadFunc(inst, "vkCreateHeadlessSurfaceEXT", out addr)) {
			vkCreateHeadlessSurfaceEXT =
				(delegate* unmanaged<Vk.Handle<Vk.Instance>, Vk.EXT.HeadlessSurfaceCreateInfo*, Vk.AllocationCallbacks*, Vk.Handle<Vk.KHR.Surface>*, Vk.Result>)addr;
		}
		if (TryLoadFunc(inst, "vkGetPhysicalDeviceSupportedFramebufferMixedSamplesCombinationsNV", out addr)) {
			vkGetPhysicalDeviceSupportedFramebufferMixedSamplesCombinationsNV =
				(delegate* unmanaged<Vk.Handle<Vk.PhysicalDevice>, uint*, Vk.NV.FramebufferMixedSamplesCombination*, Vk.Result>)addr;
		}
		if (TryLoadFunc(inst, "vkGetPhysicalDeviceToolPropertiesEXT", out addr)) {
			vkGetPhysicalDeviceToolPropertiesEXT =
				(delegate* unmanaged<Vk.Handle<Vk.PhysicalDevice>, uint*, Vk.EXT.PhysicalDeviceToolProperties*, Vk.Result>)addr;
		}
		if (TryLoadFunc(inst, "vkGetPhysicalDeviceFragmentShadingRatesKHR", out addr)) {
			vkGetPhysicalDeviceFragmentShadingRatesKHR =
				(delegate* unmanaged<Vk.Handle<Vk.PhysicalDevice>, uint*, Vk.KHR.PhysicalDeviceFragmentShadingRate*, Vk.Result>)addr;
		}
	}

	static InstanceFunctionTable()
	{
		vkCreateInstance =
			(delegate* unmanaged<Vk.InstanceCreateInfo*, Vk.AllocationCallbacks*, Vk.Handle<Vk.Instance>*, Vk.Result>)VVK.VulkanLibrary.GetExport("vkCreateInstance").ToPointer();
		vkGetDeviceProcAddr =
			(delegate* unmanaged<Vk.Handle<Vk.Device>, byte*, delegate* unmanaged<void>>)VVK.VulkanLibrary.GetExport("vkGetDeviceProcAddr").ToPointer();
		vkGetInstanceProcAddr =
			(delegate* unmanaged<Vk.Handle<Vk.Instance>, byte*, delegate* unmanaged<void>>)VVK.VulkanLibrary.GetExport("vkGetInstanceProcAddr").ToPointer();
		vkEnumerateInstanceVersion =
			(delegate* unmanaged<uint*, Vk.Result>)VVK.VulkanLibrary.GetExport("vkEnumerateInstanceVersion").ToPointer();
		vkEnumerateInstanceLayerProperties =
			(delegate* unmanaged<uint*, Vk.LayerProperties*, Vk.Result>)VVK.VulkanLibrary.GetExport("vkEnumerateInstanceLayerProperties").ToPointer();
		vkEnumerateInstanceExtensionProperties =
			(delegate* unmanaged<byte*, uint*, Vk.ExtensionProperties*, Vk.Result>)VVK.VulkanLibrary.GetExport("vkEnumerateInstanceExtensionProperties").ToPointer();
	}

}

public unsafe sealed partial class DeviceFunctionTable
{
	public readonly delegate* unmanaged<Vk.Handle<Vk.Device>, Vk.AllocationCallbacks*, void> vkDestroyDevice = null;
	public readonly delegate* unmanaged<Vk.Handle<Vk.Device>, uint, uint, Vk.Handle<Vk.Queue>*, void> vkGetDeviceQueue = null;
	public readonly delegate* unmanaged<Vk.Handle<Vk.Queue>, uint, Vk.SubmitInfo*, Vk.Handle<Vk.Fence>, Vk.Result> vkQueueSubmit = null;
	public readonly delegate* unmanaged<Vk.Handle<Vk.Queue>, Vk.Result> vkQueueWaitIdle = null;
	public readonly delegate* unmanaged<Vk.Handle<Vk.Device>, Vk.Result> vkDeviceWaitIdle = null;
	public readonly delegate* unmanaged<Vk.Handle<Vk.Device>, Vk.MemoryAllocateInfo*, Vk.AllocationCallbacks*, Vk.Handle<Vk.DeviceMemory>*, Vk.Result> vkAllocateMemory = null;
	public readonly delegate* unmanaged<Vk.Handle<Vk.Device>, Vk.Handle<Vk.DeviceMemory>, Vk.AllocationCallbacks*, void> vkFreeMemory = null;
	public readonly delegate* unmanaged<Vk.Handle<Vk.Device>, Vk.Handle<Vk.DeviceMemory>, Vk.DeviceSize, Vk.DeviceSize, Vk.MemoryMapFlags, void**, Vk.Result> vkMapMemory = null;
	public readonly delegate* unmanaged<Vk.Handle<Vk.Device>, Vk.Handle<Vk.DeviceMemory>, void> vkUnmapMemory = null;
	public readonly delegate* unmanaged<Vk.Handle<Vk.Device>, uint, Vk.MappedMemoryRange*, Vk.Result> vkFlushMappedMemoryRanges = null;
	public readonly delegate* unmanaged<Vk.Handle<Vk.Device>, uint, Vk.MappedMemoryRange*, Vk.Result> vkInvalidateMappedMemoryRanges = null;
	public readonly delegate* unmanaged<Vk.Handle<Vk.Device>, Vk.Handle<Vk.DeviceMemory>, Vk.DeviceSize*, void> vkGetDeviceMemoryCommitment = null;
	public readonly delegate* unmanaged<Vk.Handle<Vk.Device>, Vk.Handle<Vk.Buffer>, Vk.MemoryRequirements*, void> vkGetBufferMemoryRequirements = null;
	public readonly delegate* unmanaged<Vk.Handle<Vk.Device>, Vk.Handle<Vk.Buffer>, Vk.Handle<Vk.DeviceMemory>, Vk.DeviceSize, Vk.Result> vkBindBufferMemory = null;
	public readonly delegate* unmanaged<Vk.Handle<Vk.Device>, Vk.Handle<Vk.Image>, Vk.MemoryRequirements*, void> vkGetImageMemoryRequirements = null;
	public readonly delegate* unmanaged<Vk.Handle<Vk.Device>, Vk.Handle<Vk.Image>, Vk.Handle<Vk.DeviceMemory>, Vk.DeviceSize, Vk.Result> vkBindImageMemory = null;
	public readonly delegate* unmanaged<Vk.Handle<Vk.Device>, Vk.Handle<Vk.Image>, uint*, Vk.SparseImageMemoryRequirements*, void> vkGetImageSparseMemoryRequirements = null;
	public readonly delegate* unmanaged<Vk.Handle<Vk.Queue>, uint, Vk.BindSparseInfo*, Vk.Handle<Vk.Fence>, Vk.Result> vkQueueBindSparse = null;
	public readonly delegate* unmanaged<Vk.Handle<Vk.Device>, Vk.FenceCreateInfo*, Vk.AllocationCallbacks*, Vk.Handle<Vk.Fence>*, Vk.Result> vkCreateFence = null;
	public readonly delegate* unmanaged<Vk.Handle<Vk.Device>, Vk.Handle<Vk.Fence>, Vk.AllocationCallbacks*, void> vkDestroyFence = null;
	public readonly delegate* unmanaged<Vk.Handle<Vk.Device>, uint, Vk.Handle<Vk.Fence>*, Vk.Result> vkResetFences = null;
	public readonly delegate* unmanaged<Vk.Handle<Vk.Device>, Vk.Handle<Vk.Fence>, Vk.Result> vkGetFenceStatus = null;
	public readonly delegate* unmanaged<Vk.Handle<Vk.Device>, uint, Vk.Handle<Vk.Fence>*, Vk.Bool32, ulong, Vk.Result> vkWaitForFences = null;
	public readonly delegate* unmanaged<Vk.Handle<Vk.Device>, Vk.SemaphoreCreateInfo*, Vk.AllocationCallbacks*, Vk.Handle<Vk.Semaphore>*, Vk.Result> vkCreateSemaphore = null;
	public readonly delegate* unmanaged<Vk.Handle<Vk.Device>, Vk.Handle<Vk.Semaphore>, Vk.AllocationCallbacks*, void> vkDestroySemaphore = null;
	public readonly delegate* unmanaged<Vk.Handle<Vk.Device>, Vk.EventCreateInfo*, Vk.AllocationCallbacks*, Vk.Handle<Vk.Event>*, Vk.Result> vkCreateEvent = null;
	public readonly delegate* unmanaged<Vk.Handle<Vk.Device>, Vk.Handle<Vk.Event>, Vk.AllocationCallbacks*, void> vkDestroyEvent = null;
	public readonly delegate* unmanaged<Vk.Handle<Vk.Device>, Vk.Handle<Vk.Event>, Vk.Result> vkGetEventStatus = null;
	public readonly delegate* unmanaged<Vk.Handle<Vk.Device>, Vk.Handle<Vk.Event>, Vk.Result> vkSetEvent = null;
	public readonly delegate* unmanaged<Vk.Handle<Vk.Device>, Vk.Handle<Vk.Event>, Vk.Result> vkResetEvent = null;
	public readonly delegate* unmanaged<Vk.Handle<Vk.Device>, Vk.QueryPoolCreateInfo*, Vk.AllocationCallbacks*, Vk.Handle<Vk.QueryPool>*, Vk.Result> vkCreateQueryPool = null;
	public readonly delegate* unmanaged<Vk.Handle<Vk.Device>, Vk.Handle<Vk.QueryPool>, Vk.AllocationCallbacks*, void> vkDestroyQueryPool = null;
	public readonly delegate* unmanaged<Vk.Handle<Vk.Device>, Vk.Handle<Vk.QueryPool>, uint, uint, ulong, void*, Vk.DeviceSize, Vk.QueryResultFlags, Vk.Result> vkGetQueryPoolResults = null;
	public readonly delegate* unmanaged<Vk.Handle<Vk.Device>, Vk.Handle<Vk.QueryPool>, uint, uint, void> vkResetQueryPool = null;
	public readonly delegate* unmanaged<Vk.Handle<Vk.Device>, Vk.Handle<Vk.QueryPool>, uint, uint, void> vkResetQueryPoolEXT = null;
	public readonly delegate* unmanaged<Vk.Handle<Vk.Device>, Vk.BufferCreateInfo*, Vk.AllocationCallbacks*, Vk.Handle<Vk.Buffer>*, Vk.Result> vkCreateBuffer = null;
	public readonly delegate* unmanaged<Vk.Handle<Vk.Device>, Vk.Handle<Vk.Buffer>, Vk.AllocationCallbacks*, void> vkDestroyBuffer = null;
	public readonly delegate* unmanaged<Vk.Handle<Vk.Device>, Vk.BufferViewCreateInfo*, Vk.AllocationCallbacks*, Vk.Handle<Vk.BufferView>*, Vk.Result> vkCreateBufferView = null;
	public readonly delegate* unmanaged<Vk.Handle<Vk.Device>, Vk.Handle<Vk.BufferView>, Vk.AllocationCallbacks*, void> vkDestroyBufferView = null;
	public readonly delegate* unmanaged<Vk.Handle<Vk.Device>, Vk.ImageCreateInfo*, Vk.AllocationCallbacks*, Vk.Handle<Vk.Image>*, Vk.Result> vkCreateImage = null;
	public readonly delegate* unmanaged<Vk.Handle<Vk.Device>, Vk.Handle<Vk.Image>, Vk.AllocationCallbacks*, void> vkDestroyImage = null;
	public readonly delegate* unmanaged<Vk.Handle<Vk.Device>, Vk.Handle<Vk.Image>, Vk.ImageSubresource*, Vk.SubresourceLayout*, void> vkGetImageSubresourceLayout = null;
	public readonly delegate* unmanaged<Vk.Handle<Vk.Device>, Vk.ImageViewCreateInfo*, Vk.AllocationCallbacks*, Vk.Handle<Vk.ImageView>*, Vk.Result> vkCreateImageView = null;
	public readonly delegate* unmanaged<Vk.Handle<Vk.Device>, Vk.Handle<Vk.ImageView>, Vk.AllocationCallbacks*, void> vkDestroyImageView = null;
	public readonly delegate* unmanaged<Vk.Handle<Vk.Device>, Vk.ShaderModuleCreateInfo*, Vk.AllocationCallbacks*, Vk.Handle<Vk.ShaderModule>*, Vk.Result> vkCreateShaderModule = null;
	public readonly delegate* unmanaged<Vk.Handle<Vk.Device>, Vk.Handle<Vk.ShaderModule>, Vk.AllocationCallbacks*, void> vkDestroyShaderModule = null;
	public readonly delegate* unmanaged<Vk.Handle<Vk.Device>, Vk.PipelineCacheCreateInfo*, Vk.AllocationCallbacks*, Vk.Handle<Vk.PipelineCache>*, Vk.Result> vkCreatePipelineCache = null;
	public readonly delegate* unmanaged<Vk.Handle<Vk.Device>, Vk.Handle<Vk.PipelineCache>, Vk.AllocationCallbacks*, void> vkDestroyPipelineCache = null;
	public readonly delegate* unmanaged<Vk.Handle<Vk.Device>, Vk.Handle<Vk.PipelineCache>, ulong*, void*, Vk.Result> vkGetPipelineCacheData = null;
	public readonly delegate* unmanaged<Vk.Handle<Vk.Device>, Vk.Handle<Vk.PipelineCache>, uint, Vk.Handle<Vk.PipelineCache>*, Vk.Result> vkMergePipelineCaches = null;
	public readonly delegate* unmanaged<Vk.Handle<Vk.Device>, Vk.Handle<Vk.PipelineCache>, uint, Vk.GraphicsPipelineCreateInfo*, Vk.AllocationCallbacks*, Vk.Handle<Vk.Pipeline>*, Vk.Result> vkCreateGraphicsPipelines = null;
	public readonly delegate* unmanaged<Vk.Handle<Vk.Device>, Vk.Handle<Vk.PipelineCache>, uint, Vk.ComputePipelineCreateInfo*, Vk.AllocationCallbacks*, Vk.Handle<Vk.Pipeline>*, Vk.Result> vkCreateComputePipelines = null;
	public readonly delegate* unmanaged<Vk.Handle<Vk.Device>, Vk.Handle<Vk.Pipeline>, Vk.AllocationCallbacks*, void> vkDestroyPipeline = null;
	public readonly delegate* unmanaged<Vk.Handle<Vk.Device>, Vk.PipelineLayoutCreateInfo*, Vk.AllocationCallbacks*, Vk.Handle<Vk.PipelineLayout>*, Vk.Result> vkCreatePipelineLayout = null;
	public readonly delegate* unmanaged<Vk.Handle<Vk.Device>, Vk.Handle<Vk.PipelineLayout>, Vk.AllocationCallbacks*, void> vkDestroyPipelineLayout = null;
	public readonly delegate* unmanaged<Vk.Handle<Vk.Device>, Vk.SamplerCreateInfo*, Vk.AllocationCallbacks*, Vk.Handle<Vk.Sampler>*, Vk.Result> vkCreateSampler = null;
	public readonly delegate* unmanaged<Vk.Handle<Vk.Device>, Vk.Handle<Vk.Sampler>, Vk.AllocationCallbacks*, void> vkDestroySampler = null;
	public readonly delegate* unmanaged<Vk.Handle<Vk.Device>, Vk.DescriptorSetLayoutCreateInfo*, Vk.AllocationCallbacks*, Vk.Handle<Vk.DescriptorSetLayout>*, Vk.Result> vkCreateDescriptorSetLayout = null;
	public readonly delegate* unmanaged<Vk.Handle<Vk.Device>, Vk.Handle<Vk.DescriptorSetLayout>, Vk.AllocationCallbacks*, void> vkDestroyDescriptorSetLayout = null;
	public readonly delegate* unmanaged<Vk.Handle<Vk.Device>, Vk.DescriptorPoolCreateInfo*, Vk.AllocationCallbacks*, Vk.Handle<Vk.DescriptorPool>*, Vk.Result> vkCreateDescriptorPool = null;
	public readonly delegate* unmanaged<Vk.Handle<Vk.Device>, Vk.Handle<Vk.DescriptorPool>, Vk.AllocationCallbacks*, void> vkDestroyDescriptorPool = null;
	public readonly delegate* unmanaged<Vk.Handle<Vk.Device>, Vk.Handle<Vk.DescriptorPool>, Vk.DescriptorPoolResetFlags, Vk.Result> vkResetDescriptorPool = null;
	public readonly delegate* unmanaged<Vk.Handle<Vk.Device>, Vk.DescriptorSetAllocateInfo*, Vk.Handle<Vk.DescriptorSet>*, Vk.Result> vkAllocateDescriptorSets = null;
	public readonly delegate* unmanaged<Vk.Handle<Vk.Device>, Vk.Handle<Vk.DescriptorPool>, uint, Vk.Handle<Vk.DescriptorSet>*, Vk.Result> vkFreeDescriptorSets = null;
	public readonly delegate* unmanaged<Vk.Handle<Vk.Device>, uint, Vk.WriteDescriptorSet*, uint, Vk.CopyDescriptorSet*, void> vkUpdateDescriptorSets = null;
	public readonly delegate* unmanaged<Vk.Handle<Vk.Device>, Vk.FramebufferCreateInfo*, Vk.AllocationCallbacks*, Vk.Handle<Vk.Framebuffer>*, Vk.Result> vkCreateFramebuffer = null;
	public readonly delegate* unmanaged<Vk.Handle<Vk.Device>, Vk.Handle<Vk.Framebuffer>, Vk.AllocationCallbacks*, void> vkDestroyFramebuffer = null;
	public readonly delegate* unmanaged<Vk.Handle<Vk.Device>, Vk.RenderPassCreateInfo*, Vk.AllocationCallbacks*, Vk.Handle<Vk.RenderPass>*, Vk.Result> vkCreateRenderPass = null;
	public readonly delegate* unmanaged<Vk.Handle<Vk.Device>, Vk.Handle<Vk.RenderPass>, Vk.AllocationCallbacks*, void> vkDestroyRenderPass = null;
	public readonly delegate* unmanaged<Vk.Handle<Vk.Device>, Vk.Handle<Vk.RenderPass>, Vk.Extent2D*, void> vkGetRenderAreaGranularity = null;
	public readonly delegate* unmanaged<Vk.Handle<Vk.Device>, Vk.CommandPoolCreateInfo*, Vk.AllocationCallbacks*, Vk.Handle<Vk.CommandPool>*, Vk.Result> vkCreateCommandPool = null;
	public readonly delegate* unmanaged<Vk.Handle<Vk.Device>, Vk.Handle<Vk.CommandPool>, Vk.AllocationCallbacks*, void> vkDestroyCommandPool = null;
	public readonly delegate* unmanaged<Vk.Handle<Vk.Device>, Vk.Handle<Vk.CommandPool>, Vk.CommandPoolResetFlags, Vk.Result> vkResetCommandPool = null;
	public readonly delegate* unmanaged<Vk.Handle<Vk.Device>, Vk.CommandBufferAllocateInfo*, Vk.Handle<Vk.CommandBuffer>*, Vk.Result> vkAllocateCommandBuffers = null;
	public readonly delegate* unmanaged<Vk.Handle<Vk.Device>, Vk.Handle<Vk.CommandPool>, uint, Vk.Handle<Vk.CommandBuffer>*, void> vkFreeCommandBuffers = null;
	public readonly delegate* unmanaged<Vk.Handle<Vk.CommandBuffer>, Vk.CommandBufferBeginInfo*, Vk.Result> vkBeginCommandBuffer = null;
	public readonly delegate* unmanaged<Vk.Handle<Vk.CommandBuffer>, Vk.Result> vkEndCommandBuffer = null;
	public readonly delegate* unmanaged<Vk.Handle<Vk.CommandBuffer>, Vk.CommandBufferResetFlags, Vk.Result> vkResetCommandBuffer = null;
	public readonly delegate* unmanaged<Vk.Handle<Vk.CommandBuffer>, Vk.PipelineBindPoint, Vk.Handle<Vk.Pipeline>, void> vkCmdBindPipeline = null;
	public readonly delegate* unmanaged<Vk.Handle<Vk.CommandBuffer>, uint, uint, Vk.Viewport*, void> vkCmdSetViewport = null;
	public readonly delegate* unmanaged<Vk.Handle<Vk.CommandBuffer>, uint, uint, Vk.Rect2D*, void> vkCmdSetScissor = null;
	public readonly delegate* unmanaged<Vk.Handle<Vk.CommandBuffer>, float, void> vkCmdSetLineWidth = null;
	public readonly delegate* unmanaged<Vk.Handle<Vk.CommandBuffer>, float, float, float, void> vkCmdSetDepthBias = null;
	public readonly delegate* unmanaged<Vk.Handle<Vk.CommandBuffer>, float*, void> vkCmdSetBlendConstants = null;
	public readonly delegate* unmanaged<Vk.Handle<Vk.CommandBuffer>, float, float, void> vkCmdSetDepthBounds = null;
	public readonly delegate* unmanaged<Vk.Handle<Vk.CommandBuffer>, Vk.StencilFaceFlags, uint, void> vkCmdSetStencilCompareMask = null;
	public readonly delegate* unmanaged<Vk.Handle<Vk.CommandBuffer>, Vk.StencilFaceFlags, uint, void> vkCmdSetStencilWriteMask = null;
	public readonly delegate* unmanaged<Vk.Handle<Vk.CommandBuffer>, Vk.StencilFaceFlags, uint, void> vkCmdSetStencilReference = null;
	public readonly delegate* unmanaged<Vk.Handle<Vk.CommandBuffer>, Vk.PipelineBindPoint, Vk.Handle<Vk.PipelineLayout>, uint, uint, Vk.Handle<Vk.DescriptorSet>*, uint, uint*, void> vkCmdBindDescriptorSets = null;
	public readonly delegate* unmanaged<Vk.Handle<Vk.CommandBuffer>, Vk.Handle<Vk.Buffer>, Vk.DeviceSize, Vk.IndexType, void> vkCmdBindIndexBuffer = null;
	public readonly delegate* unmanaged<Vk.Handle<Vk.CommandBuffer>, uint, uint, Vk.Handle<Vk.Buffer>*, Vk.DeviceSize*, void> vkCmdBindVertexBuffers = null;
	public readonly delegate* unmanaged<Vk.Handle<Vk.CommandBuffer>, uint, uint, uint, uint, void> vkCmdDraw = null;
	public readonly delegate* unmanaged<Vk.Handle<Vk.CommandBuffer>, uint, uint, uint, int, uint, void> vkCmdDrawIndexed = null;
	public readonly delegate* unmanaged<Vk.Handle<Vk.CommandBuffer>, Vk.Handle<Vk.Buffer>, Vk.DeviceSize, uint, uint, void> vkCmdDrawIndirect = null;
	public readonly delegate* unmanaged<Vk.Handle<Vk.CommandBuffer>, Vk.Handle<Vk.Buffer>, Vk.DeviceSize, uint, uint, void> vkCmdDrawIndexedIndirect = null;
	public readonly delegate* unmanaged<Vk.Handle<Vk.CommandBuffer>, uint, uint, uint, void> vkCmdDispatch = null;
	public readonly delegate* unmanaged<Vk.Handle<Vk.CommandBuffer>, Vk.Handle<Vk.Buffer>, Vk.DeviceSize, void> vkCmdDispatchIndirect = null;
	public readonly delegate* unmanaged<Vk.Handle<Vk.CommandBuffer>, Vk.Handle<Vk.Buffer>, Vk.Handle<Vk.Buffer>, uint, Vk.BufferCopy*, void> vkCmdCopyBuffer = null;
	public readonly delegate* unmanaged<Vk.Handle<Vk.CommandBuffer>, Vk.Handle<Vk.Image>, Vk.ImageLayout, Vk.Handle<Vk.Image>, Vk.ImageLayout, uint, Vk.ImageCopy*, void> vkCmdCopyImage = null;
	public readonly delegate* unmanaged<Vk.Handle<Vk.CommandBuffer>, Vk.Handle<Vk.Image>, Vk.ImageLayout, Vk.Handle<Vk.Image>, Vk.ImageLayout, uint, Vk.ImageBlit*, Vk.Filter, void> vkCmdBlitImage = null;
	public readonly delegate* unmanaged<Vk.Handle<Vk.CommandBuffer>, Vk.Handle<Vk.Buffer>, Vk.Handle<Vk.Image>, Vk.ImageLayout, uint, Vk.BufferImageCopy*, void> vkCmdCopyBufferToImage = null;
	public readonly delegate* unmanaged<Vk.Handle<Vk.CommandBuffer>, Vk.Handle<Vk.Image>, Vk.ImageLayout, Vk.Handle<Vk.Buffer>, uint, Vk.BufferImageCopy*, void> vkCmdCopyImageToBuffer = null;
	public readonly delegate* unmanaged<Vk.Handle<Vk.CommandBuffer>, Vk.Handle<Vk.Buffer>, Vk.DeviceSize, Vk.DeviceSize, void*, void> vkCmdUpdateBuffer = null;
	public readonly delegate* unmanaged<Vk.Handle<Vk.CommandBuffer>, Vk.Handle<Vk.Buffer>, Vk.DeviceSize, Vk.DeviceSize, uint, void> vkCmdFillBuffer = null;
	public readonly delegate* unmanaged<Vk.Handle<Vk.CommandBuffer>, Vk.Handle<Vk.Image>, Vk.ImageLayout, Vk.ClearColorValue*, uint, Vk.ImageSubresourceRange*, void> vkCmdClearColorImage = null;
	public readonly delegate* unmanaged<Vk.Handle<Vk.CommandBuffer>, Vk.Handle<Vk.Image>, Vk.ImageLayout, Vk.ClearDepthStencilValue*, uint, Vk.ImageSubresourceRange*, void> vkCmdClearDepthStencilImage = null;
	public readonly delegate* unmanaged<Vk.Handle<Vk.CommandBuffer>, uint, Vk.ClearAttachment*, uint, Vk.ClearRect*, void> vkCmdClearAttachments = null;
	public readonly delegate* unmanaged<Vk.Handle<Vk.CommandBuffer>, Vk.Handle<Vk.Image>, Vk.ImageLayout, Vk.Handle<Vk.Image>, Vk.ImageLayout, uint, Vk.ImageResolve*, void> vkCmdResolveImage = null;
	public readonly delegate* unmanaged<Vk.Handle<Vk.CommandBuffer>, Vk.Handle<Vk.Event>, Vk.PipelineStageFlags, void> vkCmdSetEvent = null;
	public readonly delegate* unmanaged<Vk.Handle<Vk.CommandBuffer>, Vk.Handle<Vk.Event>, Vk.PipelineStageFlags, void> vkCmdResetEvent = null;
	public readonly delegate* unmanaged<Vk.Handle<Vk.CommandBuffer>, uint, Vk.Handle<Vk.Event>*, Vk.PipelineStageFlags, Vk.PipelineStageFlags, uint, Vk.MemoryBarrier*, uint, Vk.BufferMemoryBarrier*, uint, Vk.ImageMemoryBarrier*, void> vkCmdWaitEvents = null;
	public readonly delegate* unmanaged<Vk.Handle<Vk.CommandBuffer>, Vk.PipelineStageFlags, Vk.PipelineStageFlags, Vk.DependencyFlags, uint, Vk.MemoryBarrier*, uint, Vk.BufferMemoryBarrier*, uint, Vk.ImageMemoryBarrier*, void> vkCmdPipelineBarrier = null;
	public readonly delegate* unmanaged<Vk.Handle<Vk.CommandBuffer>, Vk.Handle<Vk.QueryPool>, uint, Vk.QueryControlFlags, void> vkCmdBeginQuery = null;
	public readonly delegate* unmanaged<Vk.Handle<Vk.CommandBuffer>, Vk.Handle<Vk.QueryPool>, uint, void> vkCmdEndQuery = null;
	public readonly delegate* unmanaged<Vk.Handle<Vk.CommandBuffer>, Vk.EXT.ConditionalRenderingBeginInfo*, void> vkCmdBeginConditionalRenderingEXT = null;
	public readonly delegate* unmanaged<Vk.Handle<Vk.CommandBuffer>, void> vkCmdEndConditionalRenderingEXT = null;
	public readonly delegate* unmanaged<Vk.Handle<Vk.CommandBuffer>, Vk.Handle<Vk.QueryPool>, uint, uint, void> vkCmdResetQueryPool = null;
	public readonly delegate* unmanaged<Vk.Handle<Vk.CommandBuffer>, Vk.PipelineStageFlags, Vk.Handle<Vk.QueryPool>, uint, void> vkCmdWriteTimestamp = null;
	public readonly delegate* unmanaged<Vk.Handle<Vk.CommandBuffer>, Vk.Handle<Vk.QueryPool>, uint, uint, Vk.Handle<Vk.Buffer>, Vk.DeviceSize, Vk.DeviceSize, Vk.QueryResultFlags, void> vkCmdCopyQueryPoolResults = null;
	public readonly delegate* unmanaged<Vk.Handle<Vk.CommandBuffer>, Vk.Handle<Vk.PipelineLayout>, Vk.ShaderStageFlags, uint, uint, void*, void> vkCmdPushConstants = null;
	public readonly delegate* unmanaged<Vk.Handle<Vk.CommandBuffer>, Vk.RenderPassBeginInfo*, Vk.SubpassContents, void> vkCmdBeginRenderPass = null;
	public readonly delegate* unmanaged<Vk.Handle<Vk.CommandBuffer>, Vk.SubpassContents, void> vkCmdNextSubpass = null;
	public readonly delegate* unmanaged<Vk.Handle<Vk.CommandBuffer>, void> vkCmdEndRenderPass = null;
	public readonly delegate* unmanaged<Vk.Handle<Vk.CommandBuffer>, uint, Vk.Handle<Vk.CommandBuffer>*, void> vkCmdExecuteCommands = null;
	public readonly delegate* unmanaged<Vk.Handle<Vk.Device>, uint, Vk.KHR.SwapchainCreateInfo*, Vk.AllocationCallbacks*, Vk.Handle<Vk.KHR.Swapchain>*, Vk.Result> vkCreateSharedSwapchainsKHR = null;
	public readonly delegate* unmanaged<Vk.Handle<Vk.Device>, Vk.KHR.SwapchainCreateInfo*, Vk.AllocationCallbacks*, Vk.Handle<Vk.KHR.Swapchain>*, Vk.Result> vkCreateSwapchainKHR = null;
	public readonly delegate* unmanaged<Vk.Handle<Vk.Device>, Vk.Handle<Vk.KHR.Swapchain>, Vk.AllocationCallbacks*, void> vkDestroySwapchainKHR = null;
	public readonly delegate* unmanaged<Vk.Handle<Vk.Device>, Vk.Handle<Vk.KHR.Swapchain>, uint*, Vk.Handle<Vk.Image>*, Vk.Result> vkGetSwapchainImagesKHR = null;
	public readonly delegate* unmanaged<Vk.Handle<Vk.Device>, Vk.Handle<Vk.KHR.Swapchain>, ulong, Vk.Handle<Vk.Semaphore>, Vk.Handle<Vk.Fence>, uint*, Vk.Result> vkAcquireNextImageKHR = null;
	public readonly delegate* unmanaged<Vk.Handle<Vk.Queue>, Vk.KHR.PresentInfo*, Vk.Result> vkQueuePresentKHR = null;
	public readonly delegate* unmanaged<Vk.Handle<Vk.Device>, Vk.EXT.DebugMarkerObjectNameInfo*, Vk.Result> vkDebugMarkerSetObjectNameEXT = null;
	public readonly delegate* unmanaged<Vk.Handle<Vk.Device>, Vk.EXT.DebugMarkerObjectTagInfo*, Vk.Result> vkDebugMarkerSetObjectTagEXT = null;
	public readonly delegate* unmanaged<Vk.Handle<Vk.CommandBuffer>, Vk.EXT.DebugMarkerMarkerInfo*, void> vkCmdDebugMarkerBeginEXT = null;
	public readonly delegate* unmanaged<Vk.Handle<Vk.CommandBuffer>, void> vkCmdDebugMarkerEndEXT = null;
	public readonly delegate* unmanaged<Vk.Handle<Vk.CommandBuffer>, Vk.EXT.DebugMarkerMarkerInfo*, void> vkCmdDebugMarkerInsertEXT = null;
	public readonly delegate* unmanaged<Vk.Handle<Vk.Device>, Vk.Handle<Vk.DeviceMemory>, Vk.NV.ExternalMemoryHandleTypeFlags, void**, Vk.Result> vkGetMemoryWin32HandleNV = null;
	public readonly delegate* unmanaged<Vk.Handle<Vk.CommandBuffer>, Vk.Bool32, Vk.NV.GeneratedCommandsInfo*, void> vkCmdExecuteGeneratedCommandsNV = null;
	public readonly delegate* unmanaged<Vk.Handle<Vk.CommandBuffer>, Vk.NV.GeneratedCommandsInfo*, void> vkCmdPreprocessGeneratedCommandsNV = null;
	public readonly delegate* unmanaged<Vk.Handle<Vk.CommandBuffer>, Vk.PipelineBindPoint, Vk.Handle<Vk.Pipeline>, uint, void> vkCmdBindPipelineShaderGroupNV = null;
	public readonly delegate* unmanaged<Vk.Handle<Vk.Device>, Vk.NV.GeneratedCommandsMemoryRequirementsInfo*, Vk.MemoryRequirements2*, void> vkGetGeneratedCommandsMemoryRequirementsNV = null;
	public readonly delegate* unmanaged<Vk.Handle<Vk.Device>, Vk.NV.IndirectCommandsLayoutCreateInfo*, Vk.AllocationCallbacks*, Vk.Handle<Vk.NV.IndirectCommandsLayout>*, Vk.Result> vkCreateIndirectCommandsLayoutNV = null;
	public readonly delegate* unmanaged<Vk.Handle<Vk.Device>, Vk.Handle<Vk.NV.IndirectCommandsLayout>, Vk.AllocationCallbacks*, void> vkDestroyIndirectCommandsLayoutNV = null;
	public readonly delegate* unmanaged<Vk.Handle<Vk.CommandBuffer>, Vk.PipelineBindPoint, Vk.Handle<Vk.PipelineLayout>, uint, uint, Vk.WriteDescriptorSet*, void> vkCmdPushDescriptorSetKHR = null;
	public readonly delegate* unmanaged<Vk.Handle<Vk.Device>, Vk.Handle<Vk.CommandPool>, Vk.CommandPoolTrimFlags, void> vkTrimCommandPool = null;
	public readonly delegate* unmanaged<Vk.Handle<Vk.Device>, Vk.Handle<Vk.CommandPool>, Vk.CommandPoolTrimFlags, void> vkTrimCommandPoolKHR = null;
	public readonly delegate* unmanaged<Vk.Handle<Vk.Device>, Vk.KHR.MemoryGetWin32HandleInfo*, void**, Vk.Result> vkGetMemoryWin32HandleKHR = null;
	public readonly delegate* unmanaged<Vk.Handle<Vk.Device>, Vk.ExternalMemoryHandleTypeFlags, void*, Vk.KHR.MemoryWin32HandleProperties*, Vk.Result> vkGetMemoryWin32HandlePropertiesKHR = null;
	public readonly delegate* unmanaged<Vk.Handle<Vk.Device>, Vk.KHR.MemoryGetFdInfo*, int*, Vk.Result> vkGetMemoryFdKHR = null;
	public readonly delegate* unmanaged<Vk.Handle<Vk.Device>, Vk.ExternalMemoryHandleTypeFlags, int, Vk.KHR.MemoryFdProperties*, Vk.Result> vkGetMemoryFdPropertiesKHR = null;
	public readonly delegate* unmanaged<Vk.Handle<Vk.Device>, Vk.KHR.SemaphoreGetWin32HandleInfo*, void**, Vk.Result> vkGetSemaphoreWin32HandleKHR = null;
	public readonly delegate* unmanaged<Vk.Handle<Vk.Device>, Vk.KHR.ImportSemaphoreWin32HandleInfo*, Vk.Result> vkImportSemaphoreWin32HandleKHR = null;
	public readonly delegate* unmanaged<Vk.Handle<Vk.Device>, Vk.KHR.SemaphoreGetFdInfo*, int*, Vk.Result> vkGetSemaphoreFdKHR = null;
	public readonly delegate* unmanaged<Vk.Handle<Vk.Device>, Vk.KHR.ImportSemaphoreFdInfo*, Vk.Result> vkImportSemaphoreFdKHR = null;
	public readonly delegate* unmanaged<Vk.Handle<Vk.Device>, Vk.KHR.FenceGetWin32HandleInfo*, void**, Vk.Result> vkGetFenceWin32HandleKHR = null;
	public readonly delegate* unmanaged<Vk.Handle<Vk.Device>, Vk.KHR.ImportFenceWin32HandleInfo*, Vk.Result> vkImportFenceWin32HandleKHR = null;
	public readonly delegate* unmanaged<Vk.Handle<Vk.Device>, Vk.KHR.FenceGetFdInfo*, int*, Vk.Result> vkGetFenceFdKHR = null;
	public readonly delegate* unmanaged<Vk.Handle<Vk.Device>, Vk.KHR.ImportFenceFdInfo*, Vk.Result> vkImportFenceFdKHR = null;
	public readonly delegate* unmanaged<Vk.Handle<Vk.Device>, Vk.Handle<Vk.KHR.Display>, Vk.EXT.DisplayPowerInfo*, Vk.Result> vkDisplayPowerControlEXT = null;
	public readonly delegate* unmanaged<Vk.Handle<Vk.Device>, Vk.EXT.DeviceEventInfo*, Vk.AllocationCallbacks*, Vk.Handle<Vk.Fence>*, Vk.Result> vkRegisterDeviceEventEXT = null;
	public readonly delegate* unmanaged<Vk.Handle<Vk.Device>, Vk.Handle<Vk.KHR.Display>, Vk.EXT.DisplayEventInfo*, Vk.AllocationCallbacks*, Vk.Handle<Vk.Fence>*, Vk.Result> vkRegisterDisplayEventEXT = null;
	public readonly delegate* unmanaged<Vk.Handle<Vk.Device>, Vk.Handle<Vk.KHR.Swapchain>, Vk.EXT.SurfaceCounterFlags, ulong*, Vk.Result> vkGetSwapchainCounterEXT = null;
	public readonly delegate* unmanaged<Vk.Handle<Vk.Device>, uint, uint, uint, Vk.PeerMemoryFeatureFlags*, void> vkGetDeviceGroupPeerMemoryFeatures = null;
	public readonly delegate* unmanaged<Vk.Handle<Vk.Device>, uint, uint, uint, Vk.PeerMemoryFeatureFlags*, void> vkGetDeviceGroupPeerMemoryFeaturesKHR = null;
	public readonly delegate* unmanaged<Vk.Handle<Vk.Device>, uint, Vk.BindBufferMemoryInfo*, Vk.Result> vkBindBufferMemory2 = null;
	public readonly delegate* unmanaged<Vk.Handle<Vk.Device>, uint, Vk.BindBufferMemoryInfo*, Vk.Result> vkBindBufferMemory2KHR = null;
	public readonly delegate* unmanaged<Vk.Handle<Vk.Device>, uint, Vk.BindImageMemoryInfo*, Vk.Result> vkBindImageMemory2 = null;
	public readonly delegate* unmanaged<Vk.Handle<Vk.Device>, uint, Vk.BindImageMemoryInfo*, Vk.Result> vkBindImageMemory2KHR = null;
	public readonly delegate* unmanaged<Vk.Handle<Vk.CommandBuffer>, uint, void> vkCmdSetDeviceMask = null;
	public readonly delegate* unmanaged<Vk.Handle<Vk.CommandBuffer>, uint, void> vkCmdSetDeviceMaskKHR = null;
	public readonly delegate* unmanaged<Vk.Handle<Vk.Device>, Vk.KHR.DeviceGroupPresentCapabilities*, Vk.Result> vkGetDeviceGroupPresentCapabilitiesKHR = null;
	public readonly delegate* unmanaged<Vk.Handle<Vk.Device>, Vk.Handle<Vk.KHR.Surface>, Vk.KHR.DeviceGroupPresentModeFlags*, Vk.Result> vkGetDeviceGroupSurfacePresentModesKHR = null;
	public readonly delegate* unmanaged<Vk.Handle<Vk.Device>, Vk.KHR.AcquireNextImageInfo*, uint*, Vk.Result> vkAcquireNextImage2KHR = null;
	public readonly delegate* unmanaged<Vk.Handle<Vk.CommandBuffer>, uint, uint, uint, uint, uint, uint, void> vkCmdDispatchBase = null;
	public readonly delegate* unmanaged<Vk.Handle<Vk.CommandBuffer>, uint, uint, uint, uint, uint, uint, void> vkCmdDispatchBaseKHR = null;
	public readonly delegate* unmanaged<Vk.Handle<Vk.Device>, Vk.DescriptorUpdateTemplateCreateInfo*, Vk.AllocationCallbacks*, Vk.Handle<Vk.DescriptorUpdateTemplate>*, Vk.Result> vkCreateDescriptorUpdateTemplate = null;
	public readonly delegate* unmanaged<Vk.Handle<Vk.Device>, Vk.DescriptorUpdateTemplateCreateInfo*, Vk.AllocationCallbacks*, Vk.Handle<Vk.DescriptorUpdateTemplate>*, Vk.Result> vkCreateDescriptorUpdateTemplateKHR = null;
	public readonly delegate* unmanaged<Vk.Handle<Vk.Device>, Vk.Handle<Vk.DescriptorUpdateTemplate>, Vk.AllocationCallbacks*, void> vkDestroyDescriptorUpdateTemplate = null;
	public readonly delegate* unmanaged<Vk.Handle<Vk.Device>, Vk.Handle<Vk.DescriptorUpdateTemplate>, Vk.AllocationCallbacks*, void> vkDestroyDescriptorUpdateTemplateKHR = null;
	public readonly delegate* unmanaged<Vk.Handle<Vk.Device>, Vk.Handle<Vk.DescriptorSet>, Vk.Handle<Vk.DescriptorUpdateTemplate>, void*, void> vkUpdateDescriptorSetWithTemplate = null;
	public readonly delegate* unmanaged<Vk.Handle<Vk.Device>, Vk.Handle<Vk.DescriptorSet>, Vk.Handle<Vk.DescriptorUpdateTemplate>, void*, void> vkUpdateDescriptorSetWithTemplateKHR = null;
	public readonly delegate* unmanaged<Vk.Handle<Vk.CommandBuffer>, Vk.Handle<Vk.DescriptorUpdateTemplate>, Vk.Handle<Vk.PipelineLayout>, uint, void*, void> vkCmdPushDescriptorSetWithTemplateKHR = null;
	public readonly delegate* unmanaged<Vk.Handle<Vk.Device>, uint, Vk.Handle<Vk.KHR.Swapchain>*, Vk.EXT.HdrMetadata*, void> vkSetHdrMetadataEXT = null;
	public readonly delegate* unmanaged<Vk.Handle<Vk.Device>, Vk.Handle<Vk.KHR.Swapchain>, Vk.Result> vkGetSwapchainStatusKHR = null;
	public readonly delegate* unmanaged<Vk.Handle<Vk.Device>, Vk.Handle<Vk.KHR.Swapchain>, Vk.GOOGLE.RefreshCycleDuration*, Vk.Result> vkGetRefreshCycleDurationGOOGLE = null;
	public readonly delegate* unmanaged<Vk.Handle<Vk.Device>, Vk.Handle<Vk.KHR.Swapchain>, uint*, Vk.GOOGLE.PastPresentationTiming*, Vk.Result> vkGetPastPresentationTimingGOOGLE = null;
	public readonly delegate* unmanaged<Vk.Handle<Vk.CommandBuffer>, uint, uint, Vk.NV.ViewportWScaling*, void> vkCmdSetViewportWScalingNV = null;
	public readonly delegate* unmanaged<Vk.Handle<Vk.CommandBuffer>, uint, uint, Vk.Rect2D*, void> vkCmdSetDiscardRectangleEXT = null;
	public readonly delegate* unmanaged<Vk.Handle<Vk.CommandBuffer>, Vk.EXT.SampleLocationsInfo*, void> vkCmdSetSampleLocationsEXT = null;
	public readonly delegate* unmanaged<Vk.Handle<Vk.Device>, Vk.BufferMemoryRequirementsInfo2*, Vk.MemoryRequirements2*, void> vkGetBufferMemoryRequirements2 = null;
	public readonly delegate* unmanaged<Vk.Handle<Vk.Device>, Vk.BufferMemoryRequirementsInfo2*, Vk.MemoryRequirements2*, void> vkGetBufferMemoryRequirements2KHR = null;
	public readonly delegate* unmanaged<Vk.Handle<Vk.Device>, Vk.ImageMemoryRequirementsInfo2*, Vk.MemoryRequirements2*, void> vkGetImageMemoryRequirements2 = null;
	public readonly delegate* unmanaged<Vk.Handle<Vk.Device>, Vk.ImageMemoryRequirementsInfo2*, Vk.MemoryRequirements2*, void> vkGetImageMemoryRequirements2KHR = null;
	public readonly delegate* unmanaged<Vk.Handle<Vk.Device>, Vk.ImageSparseMemoryRequirementsInfo2*, uint*, Vk.SparseImageMemoryRequirements2*, void> vkGetImageSparseMemoryRequirements2 = null;
	public readonly delegate* unmanaged<Vk.Handle<Vk.Device>, Vk.ImageSparseMemoryRequirementsInfo2*, uint*, Vk.SparseImageMemoryRequirements2*, void> vkGetImageSparseMemoryRequirements2KHR = null;
	public readonly delegate* unmanaged<Vk.Handle<Vk.Device>, Vk.SamplerYcbcrConversionCreateInfo*, Vk.AllocationCallbacks*, Vk.Handle<Vk.SamplerYcbcrConversion>*, Vk.Result> vkCreateSamplerYcbcrConversion = null;
	public readonly delegate* unmanaged<Vk.Handle<Vk.Device>, Vk.SamplerYcbcrConversionCreateInfo*, Vk.AllocationCallbacks*, Vk.Handle<Vk.SamplerYcbcrConversion>*, Vk.Result> vkCreateSamplerYcbcrConversionKHR = null;
	public readonly delegate* unmanaged<Vk.Handle<Vk.Device>, Vk.Handle<Vk.SamplerYcbcrConversion>, Vk.AllocationCallbacks*, void> vkDestroySamplerYcbcrConversion = null;
	public readonly delegate* unmanaged<Vk.Handle<Vk.Device>, Vk.Handle<Vk.SamplerYcbcrConversion>, Vk.AllocationCallbacks*, void> vkDestroySamplerYcbcrConversionKHR = null;
	public readonly delegate* unmanaged<Vk.Handle<Vk.Device>, Vk.DeviceQueueInfo2*, Vk.Handle<Vk.Queue>*, void> vkGetDeviceQueue2 = null;
	public readonly delegate* unmanaged<Vk.Handle<Vk.Device>, Vk.EXT.ValidationCacheCreateInfo*, Vk.AllocationCallbacks*, Vk.Handle<Vk.EXT.ValidationCache>*, Vk.Result> vkCreateValidationCacheEXT = null;
	public readonly delegate* unmanaged<Vk.Handle<Vk.Device>, Vk.Handle<Vk.EXT.ValidationCache>, Vk.AllocationCallbacks*, void> vkDestroyValidationCacheEXT = null;
	public readonly delegate* unmanaged<Vk.Handle<Vk.Device>, Vk.Handle<Vk.EXT.ValidationCache>, ulong*, void*, Vk.Result> vkGetValidationCacheDataEXT = null;
	public readonly delegate* unmanaged<Vk.Handle<Vk.Device>, Vk.Handle<Vk.EXT.ValidationCache>, uint, Vk.Handle<Vk.EXT.ValidationCache>*, Vk.Result> vkMergeValidationCachesEXT = null;
	public readonly delegate* unmanaged<Vk.Handle<Vk.Device>, Vk.DescriptorSetLayoutCreateInfo*, Vk.DescriptorSetLayoutSupport*, void> vkGetDescriptorSetLayoutSupport = null;
	public readonly delegate* unmanaged<Vk.Handle<Vk.Device>, Vk.DescriptorSetLayoutCreateInfo*, Vk.DescriptorSetLayoutSupport*, void> vkGetDescriptorSetLayoutSupportKHR = null;
	public readonly delegate* unmanaged<Vk.Handle<Vk.Device>, Vk.Format, Vk.ImageUsageFlags, int*, Vk.Result> vkGetSwapchainGrallocUsageANDROID = null;
	public readonly delegate* unmanaged<Vk.Handle<Vk.Device>, Vk.Format, Vk.ImageUsageFlags, Vk.ANDROID.SwapchainImageUsageFlags, ulong*, ulong*, Vk.Result> vkGetSwapchainGrallocUsage2ANDROID = null;
	public readonly delegate* unmanaged<Vk.Handle<Vk.Device>, Vk.Handle<Vk.Image>, int, Vk.Handle<Vk.Semaphore>, Vk.Handle<Vk.Fence>, Vk.Result> vkAcquireImageANDROID = null;
	public readonly delegate* unmanaged<Vk.Handle<Vk.Queue>, uint, Vk.Handle<Vk.Semaphore>*, Vk.Handle<Vk.Image>, int*, Vk.Result> vkQueueSignalReleaseImageANDROID = null;
	public readonly delegate* unmanaged<Vk.Handle<Vk.Device>, Vk.Handle<Vk.Pipeline>, Vk.ShaderStageFlags, Vk.AMD.ShaderInfoType, ulong*, void*, Vk.Result> vkGetShaderInfoAMD = null;
	public readonly delegate* unmanaged<Vk.Handle<Vk.Device>, Vk.Handle<Vk.KHR.Swapchain>, Vk.Bool32, void> vkSetLocalDimmingAMD = null;
	public readonly delegate* unmanaged<Vk.Handle<Vk.Device>, uint, Vk.EXT.CalibratedTimestampInfo*, ulong*, ulong*, Vk.Result> vkGetCalibratedTimestampsEXT = null;
	public readonly delegate* unmanaged<Vk.Handle<Vk.Device>, Vk.EXT.DebugUtilsObjectNameInfo*, Vk.Result> vkSetDebugUtilsObjectNameEXT = null;
	public readonly delegate* unmanaged<Vk.Handle<Vk.Device>, Vk.EXT.DebugUtilsObjectTagInfo*, Vk.Result> vkSetDebugUtilsObjectTagEXT = null;
	public readonly delegate* unmanaged<Vk.Handle<Vk.Queue>, Vk.EXT.DebugUtilsLabel*, void> vkQueueBeginDebugUtilsLabelEXT = null;
	public readonly delegate* unmanaged<Vk.Handle<Vk.Queue>, void> vkQueueEndDebugUtilsLabelEXT = null;
	public readonly delegate* unmanaged<Vk.Handle<Vk.Queue>, Vk.EXT.DebugUtilsLabel*, void> vkQueueInsertDebugUtilsLabelEXT = null;
	public readonly delegate* unmanaged<Vk.Handle<Vk.CommandBuffer>, Vk.EXT.DebugUtilsLabel*, void> vkCmdBeginDebugUtilsLabelEXT = null;
	public readonly delegate* unmanaged<Vk.Handle<Vk.CommandBuffer>, void> vkCmdEndDebugUtilsLabelEXT = null;
	public readonly delegate* unmanaged<Vk.Handle<Vk.CommandBuffer>, Vk.EXT.DebugUtilsLabel*, void> vkCmdInsertDebugUtilsLabelEXT = null;
	public readonly delegate* unmanaged<Vk.Handle<Vk.Device>, Vk.ExternalMemoryHandleTypeFlags, void*, Vk.EXT.MemoryHostPointerProperties*, Vk.Result> vkGetMemoryHostPointerPropertiesEXT = null;
	public readonly delegate* unmanaged<Vk.Handle<Vk.CommandBuffer>, Vk.PipelineStageFlags, Vk.Handle<Vk.Buffer>, Vk.DeviceSize, uint, void> vkCmdWriteBufferMarkerAMD = null;
	public readonly delegate* unmanaged<Vk.Handle<Vk.Device>, Vk.RenderPassCreateInfo2*, Vk.AllocationCallbacks*, Vk.Handle<Vk.RenderPass>*, Vk.Result> vkCreateRenderPass2 = null;
	public readonly delegate* unmanaged<Vk.Handle<Vk.Device>, Vk.RenderPassCreateInfo2*, Vk.AllocationCallbacks*, Vk.Handle<Vk.RenderPass>*, Vk.Result> vkCreateRenderPass2KHR = null;
	public readonly delegate* unmanaged<Vk.Handle<Vk.CommandBuffer>, Vk.RenderPassBeginInfo*, Vk.SubpassBeginInfo*, void> vkCmdBeginRenderPass2 = null;
	public readonly delegate* unmanaged<Vk.Handle<Vk.CommandBuffer>, Vk.RenderPassBeginInfo*, Vk.SubpassBeginInfo*, void> vkCmdBeginRenderPass2KHR = null;
	public readonly delegate* unmanaged<Vk.Handle<Vk.CommandBuffer>, Vk.SubpassBeginInfo*, Vk.SubpassEndInfo*, void> vkCmdNextSubpass2 = null;
	public readonly delegate* unmanaged<Vk.Handle<Vk.CommandBuffer>, Vk.SubpassBeginInfo*, Vk.SubpassEndInfo*, void> vkCmdNextSubpass2KHR = null;
	public readonly delegate* unmanaged<Vk.Handle<Vk.CommandBuffer>, Vk.SubpassEndInfo*, void> vkCmdEndRenderPass2 = null;
	public readonly delegate* unmanaged<Vk.Handle<Vk.CommandBuffer>, Vk.SubpassEndInfo*, void> vkCmdEndRenderPass2KHR = null;
	public readonly delegate* unmanaged<Vk.Handle<Vk.Device>, Vk.Handle<Vk.Semaphore>, ulong*, Vk.Result> vkGetSemaphoreCounterValue = null;
	public readonly delegate* unmanaged<Vk.Handle<Vk.Device>, Vk.Handle<Vk.Semaphore>, ulong*, Vk.Result> vkGetSemaphoreCounterValueKHR = null;
	public readonly delegate* unmanaged<Vk.Handle<Vk.Device>, Vk.SemaphoreWaitInfo*, ulong, Vk.Result> vkWaitSemaphores = null;
	public readonly delegate* unmanaged<Vk.Handle<Vk.Device>, Vk.SemaphoreWaitInfo*, ulong, Vk.Result> vkWaitSemaphoresKHR = null;
	public readonly delegate* unmanaged<Vk.Handle<Vk.Device>, Vk.SemaphoreSignalInfo*, Vk.Result> vkSignalSemaphore = null;
	public readonly delegate* unmanaged<Vk.Handle<Vk.Device>, Vk.SemaphoreSignalInfo*, Vk.Result> vkSignalSemaphoreKHR = null;
	public readonly delegate* unmanaged<Vk.Handle<Vk.Device>, void*, Vk.ANDROID.AndroidHardwareBufferProperties*, Vk.Result> vkGetAndroidHardwareBufferPropertiesANDROID = null;
	public readonly delegate* unmanaged<Vk.Handle<Vk.Device>, Vk.ANDROID.MemoryGetAndroidHardwareBufferInfo*, void**, Vk.Result> vkGetMemoryAndroidHardwareBufferANDROID = null;
	public readonly delegate* unmanaged<Vk.Handle<Vk.CommandBuffer>, Vk.Handle<Vk.Buffer>, Vk.DeviceSize, Vk.Handle<Vk.Buffer>, Vk.DeviceSize, uint, uint, void> vkCmdDrawIndirectCount = null;
	public readonly delegate* unmanaged<Vk.Handle<Vk.CommandBuffer>, Vk.Handle<Vk.Buffer>, Vk.DeviceSize, Vk.Handle<Vk.Buffer>, Vk.DeviceSize, uint, uint, void> vkCmdDrawIndirectCountKHR = null;
	public readonly delegate* unmanaged<Vk.Handle<Vk.CommandBuffer>, Vk.Handle<Vk.Buffer>, Vk.DeviceSize, Vk.Handle<Vk.Buffer>, Vk.DeviceSize, uint, uint, void> vkCmdDrawIndirectCountAMD = null;
	public readonly delegate* unmanaged<Vk.Handle<Vk.CommandBuffer>, Vk.Handle<Vk.Buffer>, Vk.DeviceSize, Vk.Handle<Vk.Buffer>, Vk.DeviceSize, uint, uint, void> vkCmdDrawIndexedIndirectCount = null;
	public readonly delegate* unmanaged<Vk.Handle<Vk.CommandBuffer>, Vk.Handle<Vk.Buffer>, Vk.DeviceSize, Vk.Handle<Vk.Buffer>, Vk.DeviceSize, uint, uint, void> vkCmdDrawIndexedIndirectCountKHR = null;
	public readonly delegate* unmanaged<Vk.Handle<Vk.CommandBuffer>, Vk.Handle<Vk.Buffer>, Vk.DeviceSize, Vk.Handle<Vk.Buffer>, Vk.DeviceSize, uint, uint, void> vkCmdDrawIndexedIndirectCountAMD = null;
	public readonly delegate* unmanaged<Vk.Handle<Vk.CommandBuffer>, void*, void> vkCmdSetCheckpointNV = null;
	public readonly delegate* unmanaged<Vk.Handle<Vk.Queue>, uint*, Vk.NV.CheckpointData*, void> vkGetQueueCheckpointDataNV = null;
	public readonly delegate* unmanaged<Vk.Handle<Vk.CommandBuffer>, uint, uint, Vk.Handle<Vk.Buffer>*, Vk.DeviceSize*, Vk.DeviceSize*, void> vkCmdBindTransformFeedbackBuffersEXT = null;
	public readonly delegate* unmanaged<Vk.Handle<Vk.CommandBuffer>, uint, uint, Vk.Handle<Vk.Buffer>*, Vk.DeviceSize*, void> vkCmdBeginTransformFeedbackEXT = null;
	public readonly delegate* unmanaged<Vk.Handle<Vk.CommandBuffer>, uint, uint, Vk.Handle<Vk.Buffer>*, Vk.DeviceSize*, void> vkCmdEndTransformFeedbackEXT = null;
	public readonly delegate* unmanaged<Vk.Handle<Vk.CommandBuffer>, Vk.Handle<Vk.QueryPool>, uint, Vk.QueryControlFlags, uint, void> vkCmdBeginQueryIndexedEXT = null;
	public readonly delegate* unmanaged<Vk.Handle<Vk.CommandBuffer>, Vk.Handle<Vk.QueryPool>, uint, uint, void> vkCmdEndQueryIndexedEXT = null;
	public readonly delegate* unmanaged<Vk.Handle<Vk.CommandBuffer>, uint, uint, Vk.Handle<Vk.Buffer>, Vk.DeviceSize, uint, uint, void> vkCmdDrawIndirectByteCountEXT = null;
	public readonly delegate* unmanaged<Vk.Handle<Vk.CommandBuffer>, uint, uint, Vk.Rect2D*, void> vkCmdSetExclusiveScissorNV = null;
	public readonly delegate* unmanaged<Vk.Handle<Vk.CommandBuffer>, Vk.Handle<Vk.ImageView>, Vk.ImageLayout, void> vkCmdBindShadingRateImageNV = null;
	public readonly delegate* unmanaged<Vk.Handle<Vk.CommandBuffer>, uint, uint, Vk.NV.ShadingRatePalette*, void> vkCmdSetViewportShadingRatePaletteNV = null;
	public readonly delegate* unmanaged<Vk.Handle<Vk.CommandBuffer>, Vk.NV.CoarseSampleOrderType, uint, Vk.NV.CoarseSampleOrderCustom*, void> vkCmdSetCoarseSampleOrderNV = null;
	public readonly delegate* unmanaged<Vk.Handle<Vk.CommandBuffer>, uint, uint, void> vkCmdDrawMeshTasksNV = null;
	public readonly delegate* unmanaged<Vk.Handle<Vk.CommandBuffer>, Vk.Handle<Vk.Buffer>, Vk.DeviceSize, uint, uint, void> vkCmdDrawMeshTasksIndirectNV = null;
	public readonly delegate* unmanaged<Vk.Handle<Vk.CommandBuffer>, Vk.Handle<Vk.Buffer>, Vk.DeviceSize, Vk.Handle<Vk.Buffer>, Vk.DeviceSize, uint, uint, void> vkCmdDrawMeshTasksIndirectCountNV = null;
	public readonly delegate* unmanaged<Vk.Handle<Vk.Device>, Vk.Handle<Vk.Pipeline>, uint, Vk.Result> vkCompileDeferredNV = null;
	public readonly delegate* unmanaged<Vk.Handle<Vk.Device>, Vk.NV.AccelerationStructureCreateInfo*, Vk.AllocationCallbacks*, Vk.Handle<Vk.NV.AccelerationStructure>*, Vk.Result> vkCreateAccelerationStructureNV = null;
	public readonly delegate* unmanaged<Vk.Handle<Vk.Device>, Vk.Handle<Vk.KHR.AccelerationStructure>, Vk.AllocationCallbacks*, void> vkDestroyAccelerationStructureKHR = null;
	public readonly delegate* unmanaged<Vk.Handle<Vk.Device>, Vk.Handle<Vk.KHR.AccelerationStructure>, Vk.AllocationCallbacks*, void> vkDestroyAccelerationStructureNV = null;
	public readonly delegate* unmanaged<Vk.Handle<Vk.Device>, Vk.KHR.AccelerationStructureMemoryRequirementsInfo*, Vk.MemoryRequirements2*, void> vkGetAccelerationStructureMemoryRequirementsKHR = null;
	public readonly delegate* unmanaged<Vk.Handle<Vk.Device>, Vk.NV.AccelerationStructureMemoryRequirementsInfo*, Vk.KHR.MemoryRequirements2*, void> vkGetAccelerationStructureMemoryRequirementsNV = null;
	public readonly delegate* unmanaged<Vk.Handle<Vk.Device>, uint, Vk.KHR.BindAccelerationStructureMemoryInfo*, Vk.Result> vkBindAccelerationStructureMemoryKHR = null;
	public readonly delegate* unmanaged<Vk.Handle<Vk.Device>, uint, Vk.KHR.BindAccelerationStructureMemoryInfo*, Vk.Result> vkBindAccelerationStructureMemoryNV = null;
	public readonly delegate* unmanaged<Vk.Handle<Vk.CommandBuffer>, Vk.Handle<Vk.KHR.AccelerationStructure>, Vk.Handle<Vk.KHR.AccelerationStructure>, Vk.KHR.CopyAccelerationStructureMode, void> vkCmdCopyAccelerationStructureNV = null;
	public readonly delegate* unmanaged<Vk.Handle<Vk.CommandBuffer>, Vk.KHR.CopyAccelerationStructureInfo*, void> vkCmdCopyAccelerationStructureKHR = null;
	public readonly delegate* unmanaged<Vk.Handle<Vk.Device>, Vk.KHR.CopyAccelerationStructureInfo*, Vk.Result> vkCopyAccelerationStructureKHR = null;
	public readonly delegate* unmanaged<Vk.Handle<Vk.CommandBuffer>, Vk.KHR.CopyAccelerationStructureToMemoryInfo*, void> vkCmdCopyAccelerationStructureToMemoryKHR = null;
	public readonly delegate* unmanaged<Vk.Handle<Vk.Device>, Vk.KHR.CopyAccelerationStructureToMemoryInfo*, Vk.Result> vkCopyAccelerationStructureToMemoryKHR = null;
	public readonly delegate* unmanaged<Vk.Handle<Vk.CommandBuffer>, Vk.KHR.CopyMemoryToAccelerationStructureInfo*, void> vkCmdCopyMemoryToAccelerationStructureKHR = null;
	public readonly delegate* unmanaged<Vk.Handle<Vk.Device>, Vk.KHR.CopyMemoryToAccelerationStructureInfo*, Vk.Result> vkCopyMemoryToAccelerationStructureKHR = null;
	public readonly delegate* unmanaged<Vk.Handle<Vk.CommandBuffer>, uint, Vk.Handle<Vk.KHR.AccelerationStructure>*, Vk.QueryType, Vk.Handle<Vk.QueryPool>, uint, void> vkCmdWriteAccelerationStructuresPropertiesKHR = null;
	public readonly delegate* unmanaged<Vk.Handle<Vk.CommandBuffer>, uint, Vk.Handle<Vk.KHR.AccelerationStructure>*, Vk.QueryType, Vk.Handle<Vk.QueryPool>, uint, void> vkCmdWriteAccelerationStructuresPropertiesNV = null;
	public readonly delegate* unmanaged<Vk.Handle<Vk.CommandBuffer>, Vk.NV.AccelerationStructureInfo*, Vk.Handle<Vk.Buffer>, Vk.DeviceSize, Vk.Bool32, Vk.Handle<Vk.KHR.AccelerationStructure>, Vk.Handle<Vk.KHR.AccelerationStructure>, Vk.Handle<Vk.Buffer>, Vk.DeviceSize, void> vkCmdBuildAccelerationStructureNV = null;
	public readonly delegate* unmanaged<Vk.Handle<Vk.Device>, uint, Vk.Handle<Vk.KHR.AccelerationStructure>*, Vk.QueryType, ulong, void*, ulong, Vk.Result> vkWriteAccelerationStructuresPropertiesKHR = null;
	public readonly delegate* unmanaged<Vk.Handle<Vk.CommandBuffer>, Vk.KHR.StridedBufferRegion*, Vk.KHR.StridedBufferRegion*, Vk.KHR.StridedBufferRegion*, Vk.KHR.StridedBufferRegion*, uint, uint, uint, void> vkCmdTraceRaysKHR = null;
	public readonly delegate* unmanaged<Vk.Handle<Vk.CommandBuffer>, Vk.Handle<Vk.Buffer>, Vk.DeviceSize, Vk.Handle<Vk.Buffer>, Vk.DeviceSize, Vk.DeviceSize, Vk.Handle<Vk.Buffer>, Vk.DeviceSize, Vk.DeviceSize, Vk.Handle<Vk.Buffer>, Vk.DeviceSize, Vk.DeviceSize, uint, uint, uint, void> vkCmdTraceRaysNV = null;
	public readonly delegate* unmanaged<Vk.Handle<Vk.Device>, Vk.Handle<Vk.Pipeline>, uint, uint, ulong, void*, Vk.Result> vkGetRayTracingShaderGroupHandlesKHR = null;
	public readonly delegate* unmanaged<Vk.Handle<Vk.Device>, Vk.Handle<Vk.Pipeline>, uint, uint, ulong, void*, Vk.Result> vkGetRayTracingShaderGroupHandlesNV = null;
	public readonly delegate* unmanaged<Vk.Handle<Vk.Device>, Vk.Handle<Vk.Pipeline>, uint, uint, ulong, void*, Vk.Result> vkGetRayTracingCaptureReplayShaderGroupHandlesKHR = null;
	public readonly delegate* unmanaged<Vk.Handle<Vk.Device>, Vk.Handle<Vk.KHR.AccelerationStructure>, ulong, void*, Vk.Result> vkGetAccelerationStructureHandleNV = null;
	public readonly delegate* unmanaged<Vk.Handle<Vk.Device>, Vk.Handle<Vk.PipelineCache>, uint, Vk.NV.RayTracingPipelineCreateInfo*, Vk.AllocationCallbacks*, Vk.Handle<Vk.Pipeline>*, Vk.Result> vkCreateRayTracingPipelinesNV = null;
	public readonly delegate* unmanaged<Vk.Handle<Vk.Device>, Vk.Handle<Vk.PipelineCache>, uint, Vk.KHR.RayTracingPipelineCreateInfo*, Vk.AllocationCallbacks*, Vk.Handle<Vk.Pipeline>*, Vk.Result> vkCreateRayTracingPipelinesKHR = null;
	public readonly delegate* unmanaged<Vk.Handle<Vk.CommandBuffer>, Vk.KHR.StridedBufferRegion*, Vk.KHR.StridedBufferRegion*, Vk.KHR.StridedBufferRegion*, Vk.KHR.StridedBufferRegion*, Vk.Handle<Vk.Buffer>, Vk.DeviceSize, void> vkCmdTraceRaysIndirectKHR = null;
	public readonly delegate* unmanaged<Vk.Handle<Vk.Device>, Vk.KHR.AccelerationStructureVersion*, Vk.Result> vkGetDeviceAccelerationStructureCompatibilityKHR = null;
	public readonly delegate* unmanaged<Vk.Handle<Vk.Device>, Vk.NVX.ImageViewHandleInfo*, uint> vkGetImageViewHandleNVX = null;
	public readonly delegate* unmanaged<Vk.Handle<Vk.Device>, Vk.Handle<Vk.ImageView>, Vk.NVX.ImageViewAddressProperties*, Vk.Result> vkGetImageViewAddressNVX = null;
	public readonly delegate* unmanaged<Vk.Handle<Vk.Device>, Vk.KHR.PhysicalDeviceSurfaceInfo2*, Vk.KHR.DeviceGroupPresentModeFlags*, Vk.Result> vkGetDeviceGroupSurfacePresentModes2EXT = null;
	public readonly delegate* unmanaged<Vk.Handle<Vk.Device>, Vk.Handle<Vk.KHR.Swapchain>, Vk.Result> vkAcquireFullScreenExclusiveModeEXT = null;
	public readonly delegate* unmanaged<Vk.Handle<Vk.Device>, Vk.Handle<Vk.KHR.Swapchain>, Vk.Result> vkReleaseFullScreenExclusiveModeEXT = null;
	public readonly delegate* unmanaged<Vk.Handle<Vk.Device>, Vk.KHR.AcquireProfilingLockInfo*, Vk.Result> vkAcquireProfilingLockKHR = null;
	public readonly delegate* unmanaged<Vk.Handle<Vk.Device>, void> vkReleaseProfilingLockKHR = null;
	public readonly delegate* unmanaged<Vk.Handle<Vk.Device>, Vk.Handle<Vk.Image>, Vk.EXT.ImageDrmFormatModifierProperties*, Vk.Result> vkGetImageDrmFormatModifierPropertiesEXT = null;
	public readonly delegate* unmanaged<Vk.Handle<Vk.Device>, Vk.BufferDeviceAddressInfo*, ulong> vkGetBufferOpaqueCaptureAddress = null;
	public readonly delegate* unmanaged<Vk.Handle<Vk.Device>, Vk.BufferDeviceAddressInfo*, ulong> vkGetBufferOpaqueCaptureAddressKHR = null;
	public readonly delegate* unmanaged<Vk.Handle<Vk.Device>, Vk.BufferDeviceAddressInfo*, ulong> vkGetBufferDeviceAddress = null;
	public readonly delegate* unmanaged<Vk.Handle<Vk.Device>, Vk.BufferDeviceAddressInfo*, ulong> vkGetBufferDeviceAddressKHR = null;
	public readonly delegate* unmanaged<Vk.Handle<Vk.Device>, Vk.BufferDeviceAddressInfo*, ulong> vkGetBufferDeviceAddressEXT = null;
	public readonly delegate* unmanaged<Vk.Handle<Vk.Device>, Vk.INTEL.InitializePerformanceApiInfo*, Vk.Result> vkInitializePerformanceApiINTEL = null;
	public readonly delegate* unmanaged<Vk.Handle<Vk.Device>, void> vkUninitializePerformanceApiINTEL = null;
	public readonly delegate* unmanaged<Vk.Handle<Vk.CommandBuffer>, Vk.INTEL.PerformanceMarkerInfo*, Vk.Result> vkCmdSetPerformanceMarkerINTEL = null;
	public readonly delegate* unmanaged<Vk.Handle<Vk.CommandBuffer>, Vk.INTEL.PerformanceStreamMarkerInfo*, Vk.Result> vkCmdSetPerformanceStreamMarkerINTEL = null;
	public readonly delegate* unmanaged<Vk.Handle<Vk.CommandBuffer>, Vk.INTEL.PerformanceOverrideInfo*, Vk.Result> vkCmdSetPerformanceOverrideINTEL = null;
	public readonly delegate* unmanaged<Vk.Handle<Vk.Device>, Vk.INTEL.PerformanceConfigurationAcquireInfo*, Vk.Handle<Vk.INTEL.PerformanceConfiguration>*, Vk.Result> vkAcquirePerformanceConfigurationINTEL = null;
	public readonly delegate* unmanaged<Vk.Handle<Vk.Device>, Vk.Handle<Vk.INTEL.PerformanceConfiguration>, Vk.Result> vkReleasePerformanceConfigurationINTEL = null;
	public readonly delegate* unmanaged<Vk.Handle<Vk.Queue>, Vk.Handle<Vk.INTEL.PerformanceConfiguration>, Vk.Result> vkQueueSetPerformanceConfigurationINTEL = null;
	public readonly delegate* unmanaged<Vk.Handle<Vk.Device>, Vk.INTEL.PerformanceParameterType, Vk.INTEL.PerformanceValue*, Vk.Result> vkGetPerformanceParameterINTEL = null;
	public readonly delegate* unmanaged<Vk.Handle<Vk.Device>, Vk.DeviceMemoryOpaqueCaptureAddressInfo*, ulong> vkGetDeviceMemoryOpaqueCaptureAddress = null;
	public readonly delegate* unmanaged<Vk.Handle<Vk.Device>, Vk.DeviceMemoryOpaqueCaptureAddressInfo*, ulong> vkGetDeviceMemoryOpaqueCaptureAddressKHR = null;
	public readonly delegate* unmanaged<Vk.Handle<Vk.Device>, Vk.KHR.PipelineInfo*, uint*, Vk.KHR.PipelineExecutableProperties*, Vk.Result> vkGetPipelineExecutablePropertiesKHR = null;
	public readonly delegate* unmanaged<Vk.Handle<Vk.Device>, Vk.KHR.PipelineExecutableInfo*, uint*, Vk.KHR.PipelineExecutableStatistic*, Vk.Result> vkGetPipelineExecutableStatisticsKHR = null;
	public readonly delegate* unmanaged<Vk.Handle<Vk.Device>, Vk.KHR.PipelineExecutableInfo*, uint*, Vk.KHR.PipelineExecutableInternalRepresentation*, Vk.Result> vkGetPipelineExecutableInternalRepresentationsKHR = null;
	public readonly delegate* unmanaged<Vk.Handle<Vk.CommandBuffer>, uint, ushort, void> vkCmdSetLineStippleEXT = null;
	public readonly delegate* unmanaged<Vk.Handle<Vk.Device>, Vk.KHR.AccelerationStructureCreateInfo*, Vk.AllocationCallbacks*, Vk.Handle<Vk.KHR.AccelerationStructure>*, Vk.Result> vkCreateAccelerationStructureKHR = null;
	public readonly delegate* unmanaged<Vk.Handle<Vk.CommandBuffer>, uint, Vk.KHR.AccelerationStructureBuildGeometryInfo*, Vk.KHR.AccelerationStructureBuildOffsetInfo**, void> vkCmdBuildAccelerationStructureKHR = null;
	public readonly delegate* unmanaged<Vk.Handle<Vk.CommandBuffer>, Vk.KHR.AccelerationStructureBuildGeometryInfo*, Vk.Handle<Vk.Buffer>, Vk.DeviceSize, uint, void> vkCmdBuildAccelerationStructureIndirectKHR = null;
	public readonly delegate* unmanaged<Vk.Handle<Vk.Device>, uint, Vk.KHR.AccelerationStructureBuildGeometryInfo*, Vk.KHR.AccelerationStructureBuildOffsetInfo**, Vk.Result> vkBuildAccelerationStructureKHR = null;
	public readonly delegate* unmanaged<Vk.Handle<Vk.Device>, Vk.KHR.AccelerationStructureDeviceAddressInfo*, ulong> vkGetAccelerationStructureDeviceAddressKHR = null;
	public readonly delegate* unmanaged<Vk.Handle<Vk.Device>, Vk.AllocationCallbacks*, Vk.Handle<Vk.KHR.DeferredOperation>*, Vk.Result> vkCreateDeferredOperationKHR = null;
	public readonly delegate* unmanaged<Vk.Handle<Vk.Device>, Vk.Handle<Vk.KHR.DeferredOperation>, Vk.AllocationCallbacks*, void> vkDestroyDeferredOperationKHR = null;
	public readonly delegate* unmanaged<Vk.Handle<Vk.Device>, Vk.Handle<Vk.KHR.DeferredOperation>, uint> vkGetDeferredOperationMaxConcurrencyKHR = null;
	public readonly delegate* unmanaged<Vk.Handle<Vk.Device>, Vk.Handle<Vk.KHR.DeferredOperation>, Vk.Result> vkGetDeferredOperationResultKHR = null;
	public readonly delegate* unmanaged<Vk.Handle<Vk.Device>, Vk.Handle<Vk.KHR.DeferredOperation>, Vk.Result> vkDeferredOperationJoinKHR = null;
	public readonly delegate* unmanaged<Vk.Handle<Vk.CommandBuffer>, Vk.CullModeFlags, void> vkCmdSetCullModeEXT = null;
	public readonly delegate* unmanaged<Vk.Handle<Vk.CommandBuffer>, Vk.FrontFace, void> vkCmdSetFrontFaceEXT = null;
	public readonly delegate* unmanaged<Vk.Handle<Vk.CommandBuffer>, Vk.PrimitiveTopology, void> vkCmdSetPrimitiveTopologyEXT = null;
	public readonly delegate* unmanaged<Vk.Handle<Vk.CommandBuffer>, uint, Vk.Viewport*, void> vkCmdSetViewportWithCountEXT = null;
	public readonly delegate* unmanaged<Vk.Handle<Vk.CommandBuffer>, uint, Vk.Rect2D*, void> vkCmdSetScissorWithCountEXT = null;
	public readonly delegate* unmanaged<Vk.Handle<Vk.CommandBuffer>, uint, uint, Vk.Handle<Vk.Buffer>*, Vk.DeviceSize*, Vk.DeviceSize*, Vk.DeviceSize*, void> vkCmdBindVertexBuffers2EXT = null;
	public readonly delegate* unmanaged<Vk.Handle<Vk.CommandBuffer>, Vk.Bool32, void> vkCmdSetDepthTestEnableEXT = null;
	public readonly delegate* unmanaged<Vk.Handle<Vk.CommandBuffer>, Vk.Bool32, void> vkCmdSetDepthWriteEnableEXT = null;
	public readonly delegate* unmanaged<Vk.Handle<Vk.CommandBuffer>, Vk.CompareOp, void> vkCmdSetDepthCompareOpEXT = null;
	public readonly delegate* unmanaged<Vk.Handle<Vk.CommandBuffer>, Vk.Bool32, void> vkCmdSetDepthBoundsTestEnableEXT = null;
	public readonly delegate* unmanaged<Vk.Handle<Vk.CommandBuffer>, Vk.Bool32, void> vkCmdSetStencilTestEnableEXT = null;
	public readonly delegate* unmanaged<Vk.Handle<Vk.CommandBuffer>, Vk.StencilFaceFlags, Vk.StencilOp, Vk.StencilOp, Vk.StencilOp, Vk.CompareOp, void> vkCmdSetStencilOpEXT = null;
	public readonly delegate* unmanaged<Vk.Handle<Vk.Device>, Vk.EXT.PrivateDataSlotCreateInfo*, Vk.AllocationCallbacks*, Vk.Handle<Vk.EXT.PrivateDataSlot>*, Vk.Result> vkCreatePrivateDataSlotEXT = null;
	public readonly delegate* unmanaged<Vk.Handle<Vk.Device>, Vk.Handle<Vk.EXT.PrivateDataSlot>, Vk.AllocationCallbacks*, void> vkDestroyPrivateDataSlotEXT = null;
	public readonly delegate* unmanaged<Vk.Handle<Vk.Device>, Vk.ObjectType, ulong, Vk.Handle<Vk.EXT.PrivateDataSlot>, ulong, Vk.Result> vkSetPrivateDataEXT = null;
	public readonly delegate* unmanaged<Vk.Handle<Vk.Device>, Vk.ObjectType, ulong, Vk.Handle<Vk.EXT.PrivateDataSlot>, ulong*, void> vkGetPrivateDataEXT = null;
	public readonly delegate* unmanaged<Vk.Handle<Vk.CommandBuffer>, Vk.KHR.CopyBufferInfo2*, void> vkCmdCopyBuffer2KHR = null;
	public readonly delegate* unmanaged<Vk.Handle<Vk.CommandBuffer>, Vk.KHR.CopyImageInfo2*, void> vkCmdCopyImage2KHR = null;
	public readonly delegate* unmanaged<Vk.Handle<Vk.CommandBuffer>, Vk.KHR.BlitImageInfo2*, void> vkCmdBlitImage2KHR = null;
	public readonly delegate* unmanaged<Vk.Handle<Vk.CommandBuffer>, Vk.KHR.CopyBufferToImageInfo2*, void> vkCmdCopyBufferToImage2KHR = null;
	public readonly delegate* unmanaged<Vk.Handle<Vk.CommandBuffer>, Vk.KHR.CopyImageToBufferInfo2*, void> vkCmdCopyImageToBuffer2KHR = null;
	public readonly delegate* unmanaged<Vk.Handle<Vk.CommandBuffer>, Vk.KHR.ResolveImageInfo2*, void> vkCmdResolveImage2KHR = null;
	public readonly delegate* unmanaged<Vk.Handle<Vk.CommandBuffer>, Vk.Extent2D*, Vk.KHR.FragmentShadingRateCombinerOp*, void> vkCmdSetFragmentShadingRateKHR = null;

	/// <summary>Creates a new function table with all null pointers.</summary>
	public DeviceFunctionTable() { }

	/// <summary>
	/// Creates a new function table and loads the functions.
	/// </summary>
	/// <param name="dev">The device to load the functions for.</param>
	/// <param name="version">The core API version that the device was created with.</param>
	public DeviceFunctionTable(Vk.Handle<Vk.Device> dev, Vk.Version version)
	{
		void* addr = null;
		CoreVersion = version;
		Vk.Version V10 = new(1, 0, 0);
		Vk.Version V11 = new(1, 1, 0);
		Vk.Version V12 = new(1, 2, 0);

		if (version >= V10) {
			vkDestroyDevice =
				(delegate* unmanaged<Vk.Handle<Vk.Device>, Vk.AllocationCallbacks*, void>)LoadFunc(dev, "vkDestroyDevice");
		}
		if (version >= V10) {
			vkGetDeviceQueue =
				(delegate* unmanaged<Vk.Handle<Vk.Device>, uint, uint, Vk.Handle<Vk.Queue>*, void>)LoadFunc(dev, "vkGetDeviceQueue");
		}
		if (version >= V10) {
			vkQueueSubmit =
				(delegate* unmanaged<Vk.Handle<Vk.Queue>, uint, Vk.SubmitInfo*, Vk.Handle<Vk.Fence>, Vk.Result>)LoadFunc(dev, "vkQueueSubmit");
		}
		if (version >= V10) {
			vkQueueWaitIdle =
				(delegate* unmanaged<Vk.Handle<Vk.Queue>, Vk.Result>)LoadFunc(dev, "vkQueueWaitIdle");
		}
		if (version >= V10) {
			vkDeviceWaitIdle =
				(delegate* unmanaged<Vk.Handle<Vk.Device>, Vk.Result>)LoadFunc(dev, "vkDeviceWaitIdle");
		}
		if (version >= V10) {
			vkAllocateMemory =
				(delegate* unmanaged<Vk.Handle<Vk.Device>, Vk.MemoryAllocateInfo*, Vk.AllocationCallbacks*, Vk.Handle<Vk.DeviceMemory>*, Vk.Result>)LoadFunc(dev, "vkAllocateMemory");
		}
		if (version >= V10) {
			vkFreeMemory =
				(delegate* unmanaged<Vk.Handle<Vk.Device>, Vk.Handle<Vk.DeviceMemory>, Vk.AllocationCallbacks*, void>)LoadFunc(dev, "vkFreeMemory");
		}
		if (version >= V10) {
			vkMapMemory =
				(delegate* unmanaged<Vk.Handle<Vk.Device>, Vk.Handle<Vk.DeviceMemory>, Vk.DeviceSize, Vk.DeviceSize, Vk.MemoryMapFlags, void**, Vk.Result>)LoadFunc(dev, "vkMapMemory");
		}
		if (version >= V10) {
			vkUnmapMemory =
				(delegate* unmanaged<Vk.Handle<Vk.Device>, Vk.Handle<Vk.DeviceMemory>, void>)LoadFunc(dev, "vkUnmapMemory");
		}
		if (version >= V10) {
			vkFlushMappedMemoryRanges =
				(delegate* unmanaged<Vk.Handle<Vk.Device>, uint, Vk.MappedMemoryRange*, Vk.Result>)LoadFunc(dev, "vkFlushMappedMemoryRanges");
		}
		if (version >= V10) {
			vkInvalidateMappedMemoryRanges =
				(delegate* unmanaged<Vk.Handle<Vk.Device>, uint, Vk.MappedMemoryRange*, Vk.Result>)LoadFunc(dev, "vkInvalidateMappedMemoryRanges");
		}
		if (version >= V10) {
			vkGetDeviceMemoryCommitment =
				(delegate* unmanaged<Vk.Handle<Vk.Device>, Vk.Handle<Vk.DeviceMemory>, Vk.DeviceSize*, void>)LoadFunc(dev, "vkGetDeviceMemoryCommitment");
		}
		if (version >= V10) {
			vkGetBufferMemoryRequirements =
				(delegate* unmanaged<Vk.Handle<Vk.Device>, Vk.Handle<Vk.Buffer>, Vk.MemoryRequirements*, void>)LoadFunc(dev, "vkGetBufferMemoryRequirements");
		}
		if (version >= V10) {
			vkBindBufferMemory =
				(delegate* unmanaged<Vk.Handle<Vk.Device>, Vk.Handle<Vk.Buffer>, Vk.Handle<Vk.DeviceMemory>, Vk.DeviceSize, Vk.Result>)LoadFunc(dev, "vkBindBufferMemory");
		}
		if (version >= V10) {
			vkGetImageMemoryRequirements =
				(delegate* unmanaged<Vk.Handle<Vk.Device>, Vk.Handle<Vk.Image>, Vk.MemoryRequirements*, void>)LoadFunc(dev, "vkGetImageMemoryRequirements");
		}
		if (version >= V10) {
			vkBindImageMemory =
				(delegate* unmanaged<Vk.Handle<Vk.Device>, Vk.Handle<Vk.Image>, Vk.Handle<Vk.DeviceMemory>, Vk.DeviceSize, Vk.Result>)LoadFunc(dev, "vkBindImageMemory");
		}
		if (version >= V10) {
			vkGetImageSparseMemoryRequirements =
				(delegate* unmanaged<Vk.Handle<Vk.Device>, Vk.Handle<Vk.Image>, uint*, Vk.SparseImageMemoryRequirements*, void>)LoadFunc(dev, "vkGetImageSparseMemoryRequirements");
		}
		if (version >= V10) {
			vkQueueBindSparse =
				(delegate* unmanaged<Vk.Handle<Vk.Queue>, uint, Vk.BindSparseInfo*, Vk.Handle<Vk.Fence>, Vk.Result>)LoadFunc(dev, "vkQueueBindSparse");
		}
		if (version >= V10) {
			vkCreateFence =
				(delegate* unmanaged<Vk.Handle<Vk.Device>, Vk.FenceCreateInfo*, Vk.AllocationCallbacks*, Vk.Handle<Vk.Fence>*, Vk.Result>)LoadFunc(dev, "vkCreateFence");
		}
		if (version >= V10) {
			vkDestroyFence =
				(delegate* unmanaged<Vk.Handle<Vk.Device>, Vk.Handle<Vk.Fence>, Vk.AllocationCallbacks*, void>)LoadFunc(dev, "vkDestroyFence");
		}
		if (version >= V10) {
			vkResetFences =
				(delegate* unmanaged<Vk.Handle<Vk.Device>, uint, Vk.Handle<Vk.Fence>*, Vk.Result>)LoadFunc(dev, "vkResetFences");
		}
		if (version >= V10) {
			vkGetFenceStatus =
				(delegate* unmanaged<Vk.Handle<Vk.Device>, Vk.Handle<Vk.Fence>, Vk.Result>)LoadFunc(dev, "vkGetFenceStatus");
		}
		if (version >= V10) {
			vkWaitForFences =
				(delegate* unmanaged<Vk.Handle<Vk.Device>, uint, Vk.Handle<Vk.Fence>*, Vk.Bool32, ulong, Vk.Result>)LoadFunc(dev, "vkWaitForFences");
		}
		if (version >= V10) {
			vkCreateSemaphore =
				(delegate* unmanaged<Vk.Handle<Vk.Device>, Vk.SemaphoreCreateInfo*, Vk.AllocationCallbacks*, Vk.Handle<Vk.Semaphore>*, Vk.Result>)LoadFunc(dev, "vkCreateSemaphore");
		}
		if (version >= V10) {
			vkDestroySemaphore =
				(delegate* unmanaged<Vk.Handle<Vk.Device>, Vk.Handle<Vk.Semaphore>, Vk.AllocationCallbacks*, void>)LoadFunc(dev, "vkDestroySemaphore");
		}
		if (version >= V10) {
			vkCreateEvent =
				(delegate* unmanaged<Vk.Handle<Vk.Device>, Vk.EventCreateInfo*, Vk.AllocationCallbacks*, Vk.Handle<Vk.Event>*, Vk.Result>)LoadFunc(dev, "vkCreateEvent");
		}
		if (version >= V10) {
			vkDestroyEvent =
				(delegate* unmanaged<Vk.Handle<Vk.Device>, Vk.Handle<Vk.Event>, Vk.AllocationCallbacks*, void>)LoadFunc(dev, "vkDestroyEvent");
		}
		if (version >= V10) {
			vkGetEventStatus =
				(delegate* unmanaged<Vk.Handle<Vk.Device>, Vk.Handle<Vk.Event>, Vk.Result>)LoadFunc(dev, "vkGetEventStatus");
		}
		if (version >= V10) {
			vkSetEvent =
				(delegate* unmanaged<Vk.Handle<Vk.Device>, Vk.Handle<Vk.Event>, Vk.Result>)LoadFunc(dev, "vkSetEvent");
		}
		if (version >= V10) {
			vkResetEvent =
				(delegate* unmanaged<Vk.Handle<Vk.Device>, Vk.Handle<Vk.Event>, Vk.Result>)LoadFunc(dev, "vkResetEvent");
		}
		if (version >= V10) {
			vkCreateQueryPool =
				(delegate* unmanaged<Vk.Handle<Vk.Device>, Vk.QueryPoolCreateInfo*, Vk.AllocationCallbacks*, Vk.Handle<Vk.QueryPool>*, Vk.Result>)LoadFunc(dev, "vkCreateQueryPool");
		}
		if (version >= V10) {
			vkDestroyQueryPool =
				(delegate* unmanaged<Vk.Handle<Vk.Device>, Vk.Handle<Vk.QueryPool>, Vk.AllocationCallbacks*, void>)LoadFunc(dev, "vkDestroyQueryPool");
		}
		if (version >= V10) {
			vkGetQueryPoolResults =
				(delegate* unmanaged<Vk.Handle<Vk.Device>, Vk.Handle<Vk.QueryPool>, uint, uint, ulong, void*, Vk.DeviceSize, Vk.QueryResultFlags, Vk.Result>)LoadFunc(dev, "vkGetQueryPoolResults");
		}
		if (version >= V12) {
			vkResetQueryPool =
				(delegate* unmanaged<Vk.Handle<Vk.Device>, Vk.Handle<Vk.QueryPool>, uint, uint, void>)LoadFunc(dev, "vkResetQueryPool");
		}
		vkResetQueryPoolEXT = vkResetQueryPool;
		if ((vkResetQueryPoolEXT == null) && TryLoadFunc(dev, "vkResetQueryPoolEXT", out addr)) {
			vkResetQueryPoolEXT =
				(delegate* unmanaged<Vk.Handle<Vk.Device>, Vk.Handle<Vk.QueryPool>, uint, uint, void>)addr;
		}
		if (version >= V10) {
			vkCreateBuffer =
				(delegate* unmanaged<Vk.Handle<Vk.Device>, Vk.BufferCreateInfo*, Vk.AllocationCallbacks*, Vk.Handle<Vk.Buffer>*, Vk.Result>)LoadFunc(dev, "vkCreateBuffer");
		}
		if (version >= V10) {
			vkDestroyBuffer =
				(delegate* unmanaged<Vk.Handle<Vk.Device>, Vk.Handle<Vk.Buffer>, Vk.AllocationCallbacks*, void>)LoadFunc(dev, "vkDestroyBuffer");
		}
		if (version >= V10) {
			vkCreateBufferView =
				(delegate* unmanaged<Vk.Handle<Vk.Device>, Vk.BufferViewCreateInfo*, Vk.AllocationCallbacks*, Vk.Handle<Vk.BufferView>*, Vk.Result>)LoadFunc(dev, "vkCreateBufferView");
		}
		if (version >= V10) {
			vkDestroyBufferView =
				(delegate* unmanaged<Vk.Handle<Vk.Device>, Vk.Handle<Vk.BufferView>, Vk.AllocationCallbacks*, void>)LoadFunc(dev, "vkDestroyBufferView");
		}
		if (version >= V10) {
			vkCreateImage =
				(delegate* unmanaged<Vk.Handle<Vk.Device>, Vk.ImageCreateInfo*, Vk.AllocationCallbacks*, Vk.Handle<Vk.Image>*, Vk.Result>)LoadFunc(dev, "vkCreateImage");
		}
		if (version >= V10) {
			vkDestroyImage =
				(delegate* unmanaged<Vk.Handle<Vk.Device>, Vk.Handle<Vk.Image>, Vk.AllocationCallbacks*, void>)LoadFunc(dev, "vkDestroyImage");
		}
		if (version >= V10) {
			vkGetImageSubresourceLayout =
				(delegate* unmanaged<Vk.Handle<Vk.Device>, Vk.Handle<Vk.Image>, Vk.ImageSubresource*, Vk.SubresourceLayout*, void>)LoadFunc(dev, "vkGetImageSubresourceLayout");
		}
		if (version >= V10) {
			vkCreateImageView =
				(delegate* unmanaged<Vk.Handle<Vk.Device>, Vk.ImageViewCreateInfo*, Vk.AllocationCallbacks*, Vk.Handle<Vk.ImageView>*, Vk.Result>)LoadFunc(dev, "vkCreateImageView");
		}
		if (version >= V10) {
			vkDestroyImageView =
				(delegate* unmanaged<Vk.Handle<Vk.Device>, Vk.Handle<Vk.ImageView>, Vk.AllocationCallbacks*, void>)LoadFunc(dev, "vkDestroyImageView");
		}
		if (version >= V10) {
			vkCreateShaderModule =
				(delegate* unmanaged<Vk.Handle<Vk.Device>, Vk.ShaderModuleCreateInfo*, Vk.AllocationCallbacks*, Vk.Handle<Vk.ShaderModule>*, Vk.Result>)LoadFunc(dev, "vkCreateShaderModule");
		}
		if (version >= V10) {
			vkDestroyShaderModule =
				(delegate* unmanaged<Vk.Handle<Vk.Device>, Vk.Handle<Vk.ShaderModule>, Vk.AllocationCallbacks*, void>)LoadFunc(dev, "vkDestroyShaderModule");
		}
		if (version >= V10) {
			vkCreatePipelineCache =
				(delegate* unmanaged<Vk.Handle<Vk.Device>, Vk.PipelineCacheCreateInfo*, Vk.AllocationCallbacks*, Vk.Handle<Vk.PipelineCache>*, Vk.Result>)LoadFunc(dev, "vkCreatePipelineCache");
		}
		if (version >= V10) {
			vkDestroyPipelineCache =
				(delegate* unmanaged<Vk.Handle<Vk.Device>, Vk.Handle<Vk.PipelineCache>, Vk.AllocationCallbacks*, void>)LoadFunc(dev, "vkDestroyPipelineCache");
		}
		if (version >= V10) {
			vkGetPipelineCacheData =
				(delegate* unmanaged<Vk.Handle<Vk.Device>, Vk.Handle<Vk.PipelineCache>, ulong*, void*, Vk.Result>)LoadFunc(dev, "vkGetPipelineCacheData");
		}
		if (version >= V10) {
			vkMergePipelineCaches =
				(delegate* unmanaged<Vk.Handle<Vk.Device>, Vk.Handle<Vk.PipelineCache>, uint, Vk.Handle<Vk.PipelineCache>*, Vk.Result>)LoadFunc(dev, "vkMergePipelineCaches");
		}
		if (version >= V10) {
			vkCreateGraphicsPipelines =
				(delegate* unmanaged<Vk.Handle<Vk.Device>, Vk.Handle<Vk.PipelineCache>, uint, Vk.GraphicsPipelineCreateInfo*, Vk.AllocationCallbacks*, Vk.Handle<Vk.Pipeline>*, Vk.Result>)LoadFunc(dev, "vkCreateGraphicsPipelines");
		}
		if (version >= V10) {
			vkCreateComputePipelines =
				(delegate* unmanaged<Vk.Handle<Vk.Device>, Vk.Handle<Vk.PipelineCache>, uint, Vk.ComputePipelineCreateInfo*, Vk.AllocationCallbacks*, Vk.Handle<Vk.Pipeline>*, Vk.Result>)LoadFunc(dev, "vkCreateComputePipelines");
		}
		if (version >= V10) {
			vkDestroyPipeline =
				(delegate* unmanaged<Vk.Handle<Vk.Device>, Vk.Handle<Vk.Pipeline>, Vk.AllocationCallbacks*, void>)LoadFunc(dev, "vkDestroyPipeline");
		}
		if (version >= V10) {
			vkCreatePipelineLayout =
				(delegate* unmanaged<Vk.Handle<Vk.Device>, Vk.PipelineLayoutCreateInfo*, Vk.AllocationCallbacks*, Vk.Handle<Vk.PipelineLayout>*, Vk.Result>)LoadFunc(dev, "vkCreatePipelineLayout");
		}
		if (version >= V10) {
			vkDestroyPipelineLayout =
				(delegate* unmanaged<Vk.Handle<Vk.Device>, Vk.Handle<Vk.PipelineLayout>, Vk.AllocationCallbacks*, void>)LoadFunc(dev, "vkDestroyPipelineLayout");
		}
		if (version >= V10) {
			vkCreateSampler =
				(delegate* unmanaged<Vk.Handle<Vk.Device>, Vk.SamplerCreateInfo*, Vk.AllocationCallbacks*, Vk.Handle<Vk.Sampler>*, Vk.Result>)LoadFunc(dev, "vkCreateSampler");
		}
		if (version >= V10) {
			vkDestroySampler =
				(delegate* unmanaged<Vk.Handle<Vk.Device>, Vk.Handle<Vk.Sampler>, Vk.AllocationCallbacks*, void>)LoadFunc(dev, "vkDestroySampler");
		}
		if (version >= V10) {
			vkCreateDescriptorSetLayout =
				(delegate* unmanaged<Vk.Handle<Vk.Device>, Vk.DescriptorSetLayoutCreateInfo*, Vk.AllocationCallbacks*, Vk.Handle<Vk.DescriptorSetLayout>*, Vk.Result>)LoadFunc(dev, "vkCreateDescriptorSetLayout");
		}
		if (version >= V10) {
			vkDestroyDescriptorSetLayout =
				(delegate* unmanaged<Vk.Handle<Vk.Device>, Vk.Handle<Vk.DescriptorSetLayout>, Vk.AllocationCallbacks*, void>)LoadFunc(dev, "vkDestroyDescriptorSetLayout");
		}
		if (version >= V10) {
			vkCreateDescriptorPool =
				(delegate* unmanaged<Vk.Handle<Vk.Device>, Vk.DescriptorPoolCreateInfo*, Vk.AllocationCallbacks*, Vk.Handle<Vk.DescriptorPool>*, Vk.Result>)LoadFunc(dev, "vkCreateDescriptorPool");
		}
		if (version >= V10) {
			vkDestroyDescriptorPool =
				(delegate* unmanaged<Vk.Handle<Vk.Device>, Vk.Handle<Vk.DescriptorPool>, Vk.AllocationCallbacks*, void>)LoadFunc(dev, "vkDestroyDescriptorPool");
		}
		if (version >= V10) {
			vkResetDescriptorPool =
				(delegate* unmanaged<Vk.Handle<Vk.Device>, Vk.Handle<Vk.DescriptorPool>, Vk.DescriptorPoolResetFlags, Vk.Result>)LoadFunc(dev, "vkResetDescriptorPool");
		}
		if (version >= V10) {
			vkAllocateDescriptorSets =
				(delegate* unmanaged<Vk.Handle<Vk.Device>, Vk.DescriptorSetAllocateInfo*, Vk.Handle<Vk.DescriptorSet>*, Vk.Result>)LoadFunc(dev, "vkAllocateDescriptorSets");
		}
		if (version >= V10) {
			vkFreeDescriptorSets =
				(delegate* unmanaged<Vk.Handle<Vk.Device>, Vk.Handle<Vk.DescriptorPool>, uint, Vk.Handle<Vk.DescriptorSet>*, Vk.Result>)LoadFunc(dev, "vkFreeDescriptorSets");
		}
		if (version >= V10) {
			vkUpdateDescriptorSets =
				(delegate* unmanaged<Vk.Handle<Vk.Device>, uint, Vk.WriteDescriptorSet*, uint, Vk.CopyDescriptorSet*, void>)LoadFunc(dev, "vkUpdateDescriptorSets");
		}
		if (version >= V10) {
			vkCreateFramebuffer =
				(delegate* unmanaged<Vk.Handle<Vk.Device>, Vk.FramebufferCreateInfo*, Vk.AllocationCallbacks*, Vk.Handle<Vk.Framebuffer>*, Vk.Result>)LoadFunc(dev, "vkCreateFramebuffer");
		}
		if (version >= V10) {
			vkDestroyFramebuffer =
				(delegate* unmanaged<Vk.Handle<Vk.Device>, Vk.Handle<Vk.Framebuffer>, Vk.AllocationCallbacks*, void>)LoadFunc(dev, "vkDestroyFramebuffer");
		}
		if (version >= V10) {
			vkCreateRenderPass =
				(delegate* unmanaged<Vk.Handle<Vk.Device>, Vk.RenderPassCreateInfo*, Vk.AllocationCallbacks*, Vk.Handle<Vk.RenderPass>*, Vk.Result>)LoadFunc(dev, "vkCreateRenderPass");
		}
		if (version >= V10) {
			vkDestroyRenderPass =
				(delegate* unmanaged<Vk.Handle<Vk.Device>, Vk.Handle<Vk.RenderPass>, Vk.AllocationCallbacks*, void>)LoadFunc(dev, "vkDestroyRenderPass");
		}
		if (version >= V10) {
			vkGetRenderAreaGranularity =
				(delegate* unmanaged<Vk.Handle<Vk.Device>, Vk.Handle<Vk.RenderPass>, Vk.Extent2D*, void>)LoadFunc(dev, "vkGetRenderAreaGranularity");
		}
		if (version >= V10) {
			vkCreateCommandPool =
				(delegate* unmanaged<Vk.Handle<Vk.Device>, Vk.CommandPoolCreateInfo*, Vk.AllocationCallbacks*, Vk.Handle<Vk.CommandPool>*, Vk.Result>)LoadFunc(dev, "vkCreateCommandPool");
		}
		if (version >= V10) {
			vkDestroyCommandPool =
				(delegate* unmanaged<Vk.Handle<Vk.Device>, Vk.Handle<Vk.CommandPool>, Vk.AllocationCallbacks*, void>)LoadFunc(dev, "vkDestroyCommandPool");
		}
		if (version >= V10) {
			vkResetCommandPool =
				(delegate* unmanaged<Vk.Handle<Vk.Device>, Vk.Handle<Vk.CommandPool>, Vk.CommandPoolResetFlags, Vk.Result>)LoadFunc(dev, "vkResetCommandPool");
		}
		if (version >= V10) {
			vkAllocateCommandBuffers =
				(delegate* unmanaged<Vk.Handle<Vk.Device>, Vk.CommandBufferAllocateInfo*, Vk.Handle<Vk.CommandBuffer>*, Vk.Result>)LoadFunc(dev, "vkAllocateCommandBuffers");
		}
		if (version >= V10) {
			vkFreeCommandBuffers =
				(delegate* unmanaged<Vk.Handle<Vk.Device>, Vk.Handle<Vk.CommandPool>, uint, Vk.Handle<Vk.CommandBuffer>*, void>)LoadFunc(dev, "vkFreeCommandBuffers");
		}
		if (version >= V10) {
			vkBeginCommandBuffer =
				(delegate* unmanaged<Vk.Handle<Vk.CommandBuffer>, Vk.CommandBufferBeginInfo*, Vk.Result>)LoadFunc(dev, "vkBeginCommandBuffer");
		}
		if (version >= V10) {
			vkEndCommandBuffer =
				(delegate* unmanaged<Vk.Handle<Vk.CommandBuffer>, Vk.Result>)LoadFunc(dev, "vkEndCommandBuffer");
		}
		if (version >= V10) {
			vkResetCommandBuffer =
				(delegate* unmanaged<Vk.Handle<Vk.CommandBuffer>, Vk.CommandBufferResetFlags, Vk.Result>)LoadFunc(dev, "vkResetCommandBuffer");
		}
		if (version >= V10) {
			vkCmdBindPipeline =
				(delegate* unmanaged<Vk.Handle<Vk.CommandBuffer>, Vk.PipelineBindPoint, Vk.Handle<Vk.Pipeline>, void>)LoadFunc(dev, "vkCmdBindPipeline");
		}
		if (version >= V10) {
			vkCmdSetViewport =
				(delegate* unmanaged<Vk.Handle<Vk.CommandBuffer>, uint, uint, Vk.Viewport*, void>)LoadFunc(dev, "vkCmdSetViewport");
		}
		if (version >= V10) {
			vkCmdSetScissor =
				(delegate* unmanaged<Vk.Handle<Vk.CommandBuffer>, uint, uint, Vk.Rect2D*, void>)LoadFunc(dev, "vkCmdSetScissor");
		}
		if (version >= V10) {
			vkCmdSetLineWidth =
				(delegate* unmanaged<Vk.Handle<Vk.CommandBuffer>, float, void>)LoadFunc(dev, "vkCmdSetLineWidth");
		}
		if (version >= V10) {
			vkCmdSetDepthBias =
				(delegate* unmanaged<Vk.Handle<Vk.CommandBuffer>, float, float, float, void>)LoadFunc(dev, "vkCmdSetDepthBias");
		}
		if (version >= V10) {
			vkCmdSetBlendConstants =
				(delegate* unmanaged<Vk.Handle<Vk.CommandBuffer>, float*, void>)LoadFunc(dev, "vkCmdSetBlendConstants");
		}
		if (version >= V10) {
			vkCmdSetDepthBounds =
				(delegate* unmanaged<Vk.Handle<Vk.CommandBuffer>, float, float, void>)LoadFunc(dev, "vkCmdSetDepthBounds");
		}
		if (version >= V10) {
			vkCmdSetStencilCompareMask =
				(delegate* unmanaged<Vk.Handle<Vk.CommandBuffer>, Vk.StencilFaceFlags, uint, void>)LoadFunc(dev, "vkCmdSetStencilCompareMask");
		}
		if (version >= V10) {
			vkCmdSetStencilWriteMask =
				(delegate* unmanaged<Vk.Handle<Vk.CommandBuffer>, Vk.StencilFaceFlags, uint, void>)LoadFunc(dev, "vkCmdSetStencilWriteMask");
		}
		if (version >= V10) {
			vkCmdSetStencilReference =
				(delegate* unmanaged<Vk.Handle<Vk.CommandBuffer>, Vk.StencilFaceFlags, uint, void>)LoadFunc(dev, "vkCmdSetStencilReference");
		}
		if (version >= V10) {
			vkCmdBindDescriptorSets =
				(delegate* unmanaged<Vk.Handle<Vk.CommandBuffer>, Vk.PipelineBindPoint, Vk.Handle<Vk.PipelineLayout>, uint, uint, Vk.Handle<Vk.DescriptorSet>*, uint, uint*, void>)LoadFunc(dev, "vkCmdBindDescriptorSets");
		}
		if (version >= V10) {
			vkCmdBindIndexBuffer =
				(delegate* unmanaged<Vk.Handle<Vk.CommandBuffer>, Vk.Handle<Vk.Buffer>, Vk.DeviceSize, Vk.IndexType, void>)LoadFunc(dev, "vkCmdBindIndexBuffer");
		}
		if (version >= V10) {
			vkCmdBindVertexBuffers =
				(delegate* unmanaged<Vk.Handle<Vk.CommandBuffer>, uint, uint, Vk.Handle<Vk.Buffer>*, Vk.DeviceSize*, void>)LoadFunc(dev, "vkCmdBindVertexBuffers");
		}
		if (version >= V10) {
			vkCmdDraw =
				(delegate* unmanaged<Vk.Handle<Vk.CommandBuffer>, uint, uint, uint, uint, void>)LoadFunc(dev, "vkCmdDraw");
		}
		if (version >= V10) {
			vkCmdDrawIndexed =
				(delegate* unmanaged<Vk.Handle<Vk.CommandBuffer>, uint, uint, uint, int, uint, void>)LoadFunc(dev, "vkCmdDrawIndexed");
		}
		if (version >= V10) {
			vkCmdDrawIndirect =
				(delegate* unmanaged<Vk.Handle<Vk.CommandBuffer>, Vk.Handle<Vk.Buffer>, Vk.DeviceSize, uint, uint, void>)LoadFunc(dev, "vkCmdDrawIndirect");
		}
		if (version >= V10) {
			vkCmdDrawIndexedIndirect =
				(delegate* unmanaged<Vk.Handle<Vk.CommandBuffer>, Vk.Handle<Vk.Buffer>, Vk.DeviceSize, uint, uint, void>)LoadFunc(dev, "vkCmdDrawIndexedIndirect");
		}
		if (version >= V10) {
			vkCmdDispatch =
				(delegate* unmanaged<Vk.Handle<Vk.CommandBuffer>, uint, uint, uint, void>)LoadFunc(dev, "vkCmdDispatch");
		}
		if (version >= V10) {
			vkCmdDispatchIndirect =
				(delegate* unmanaged<Vk.Handle<Vk.CommandBuffer>, Vk.Handle<Vk.Buffer>, Vk.DeviceSize, void>)LoadFunc(dev, "vkCmdDispatchIndirect");
		}
		if (version >= V10) {
			vkCmdCopyBuffer =
				(delegate* unmanaged<Vk.Handle<Vk.CommandBuffer>, Vk.Handle<Vk.Buffer>, Vk.Handle<Vk.Buffer>, uint, Vk.BufferCopy*, void>)LoadFunc(dev, "vkCmdCopyBuffer");
		}
		if (version >= V10) {
			vkCmdCopyImage =
				(delegate* unmanaged<Vk.Handle<Vk.CommandBuffer>, Vk.Handle<Vk.Image>, Vk.ImageLayout, Vk.Handle<Vk.Image>, Vk.ImageLayout, uint, Vk.ImageCopy*, void>)LoadFunc(dev, "vkCmdCopyImage");
		}
		if (version >= V10) {
			vkCmdBlitImage =
				(delegate* unmanaged<Vk.Handle<Vk.CommandBuffer>, Vk.Handle<Vk.Image>, Vk.ImageLayout, Vk.Handle<Vk.Image>, Vk.ImageLayout, uint, Vk.ImageBlit*, Vk.Filter, void>)LoadFunc(dev, "vkCmdBlitImage");
		}
		if (version >= V10) {
			vkCmdCopyBufferToImage =
				(delegate* unmanaged<Vk.Handle<Vk.CommandBuffer>, Vk.Handle<Vk.Buffer>, Vk.Handle<Vk.Image>, Vk.ImageLayout, uint, Vk.BufferImageCopy*, void>)LoadFunc(dev, "vkCmdCopyBufferToImage");
		}
		if (version >= V10) {
			vkCmdCopyImageToBuffer =
				(delegate* unmanaged<Vk.Handle<Vk.CommandBuffer>, Vk.Handle<Vk.Image>, Vk.ImageLayout, Vk.Handle<Vk.Buffer>, uint, Vk.BufferImageCopy*, void>)LoadFunc(dev, "vkCmdCopyImageToBuffer");
		}
		if (version >= V10) {
			vkCmdUpdateBuffer =
				(delegate* unmanaged<Vk.Handle<Vk.CommandBuffer>, Vk.Handle<Vk.Buffer>, Vk.DeviceSize, Vk.DeviceSize, void*, void>)LoadFunc(dev, "vkCmdUpdateBuffer");
		}
		if (version >= V10) {
			vkCmdFillBuffer =
				(delegate* unmanaged<Vk.Handle<Vk.CommandBuffer>, Vk.Handle<Vk.Buffer>, Vk.DeviceSize, Vk.DeviceSize, uint, void>)LoadFunc(dev, "vkCmdFillBuffer");
		}
		if (version >= V10) {
			vkCmdClearColorImage =
				(delegate* unmanaged<Vk.Handle<Vk.CommandBuffer>, Vk.Handle<Vk.Image>, Vk.ImageLayout, Vk.ClearColorValue*, uint, Vk.ImageSubresourceRange*, void>)LoadFunc(dev, "vkCmdClearColorImage");
		}
		if (version >= V10) {
			vkCmdClearDepthStencilImage =
				(delegate* unmanaged<Vk.Handle<Vk.CommandBuffer>, Vk.Handle<Vk.Image>, Vk.ImageLayout, Vk.ClearDepthStencilValue*, uint, Vk.ImageSubresourceRange*, void>)LoadFunc(dev, "vkCmdClearDepthStencilImage");
		}
		if (version >= V10) {
			vkCmdClearAttachments =
				(delegate* unmanaged<Vk.Handle<Vk.CommandBuffer>, uint, Vk.ClearAttachment*, uint, Vk.ClearRect*, void>)LoadFunc(dev, "vkCmdClearAttachments");
		}
		if (version >= V10) {
			vkCmdResolveImage =
				(delegate* unmanaged<Vk.Handle<Vk.CommandBuffer>, Vk.Handle<Vk.Image>, Vk.ImageLayout, Vk.Handle<Vk.Image>, Vk.ImageLayout, uint, Vk.ImageResolve*, void>)LoadFunc(dev, "vkCmdResolveImage");
		}
		if (version >= V10) {
			vkCmdSetEvent =
				(delegate* unmanaged<Vk.Handle<Vk.CommandBuffer>, Vk.Handle<Vk.Event>, Vk.PipelineStageFlags, void>)LoadFunc(dev, "vkCmdSetEvent");
		}
		if (version >= V10) {
			vkCmdResetEvent =
				(delegate* unmanaged<Vk.Handle<Vk.CommandBuffer>, Vk.Handle<Vk.Event>, Vk.PipelineStageFlags, void>)LoadFunc(dev, "vkCmdResetEvent");
		}
		if (version >= V10) {
			vkCmdWaitEvents =
				(delegate* unmanaged<Vk.Handle<Vk.CommandBuffer>, uint, Vk.Handle<Vk.Event>*, Vk.PipelineStageFlags, Vk.PipelineStageFlags, uint, Vk.MemoryBarrier*, uint, Vk.BufferMemoryBarrier*, uint, Vk.ImageMemoryBarrier*, void>)LoadFunc(dev, "vkCmdWaitEvents");
		}
		if (version >= V10) {
			vkCmdPipelineBarrier =
				(delegate* unmanaged<Vk.Handle<Vk.CommandBuffer>, Vk.PipelineStageFlags, Vk.PipelineStageFlags, Vk.DependencyFlags, uint, Vk.MemoryBarrier*, uint, Vk.BufferMemoryBarrier*, uint, Vk.ImageMemoryBarrier*, void>)LoadFunc(dev, "vkCmdPipelineBarrier");
		}
		if (version >= V10) {
			vkCmdBeginQuery =
				(delegate* unmanaged<Vk.Handle<Vk.CommandBuffer>, Vk.Handle<Vk.QueryPool>, uint, Vk.QueryControlFlags, void>)LoadFunc(dev, "vkCmdBeginQuery");
		}
		if (version >= V10) {
			vkCmdEndQuery =
				(delegate* unmanaged<Vk.Handle<Vk.CommandBuffer>, Vk.Handle<Vk.QueryPool>, uint, void>)LoadFunc(dev, "vkCmdEndQuery");
		}
		if (TryLoadFunc(dev, "vkCmdBeginConditionalRenderingEXT", out addr)) {
			vkCmdBeginConditionalRenderingEXT =
				(delegate* unmanaged<Vk.Handle<Vk.CommandBuffer>, Vk.EXT.ConditionalRenderingBeginInfo*, void>)addr;
		}
		if (TryLoadFunc(dev, "vkCmdEndConditionalRenderingEXT", out addr)) {
			vkCmdEndConditionalRenderingEXT =
				(delegate* unmanaged<Vk.Handle<Vk.CommandBuffer>, void>)addr;
		}
		if (version >= V10) {
			vkCmdResetQueryPool =
				(delegate* unmanaged<Vk.Handle<Vk.CommandBuffer>, Vk.Handle<Vk.QueryPool>, uint, uint, void>)LoadFunc(dev, "vkCmdResetQueryPool");
		}
		if (version >= V10) {
			vkCmdWriteTimestamp =
				(delegate* unmanaged<Vk.Handle<Vk.CommandBuffer>, Vk.PipelineStageFlags, Vk.Handle<Vk.QueryPool>, uint, void>)LoadFunc(dev, "vkCmdWriteTimestamp");
		}
		if (version >= V10) {
			vkCmdCopyQueryPoolResults =
				(delegate* unmanaged<Vk.Handle<Vk.CommandBuffer>, Vk.Handle<Vk.QueryPool>, uint, uint, Vk.Handle<Vk.Buffer>, Vk.DeviceSize, Vk.DeviceSize, Vk.QueryResultFlags, void>)LoadFunc(dev, "vkCmdCopyQueryPoolResults");
		}
		if (version >= V10) {
			vkCmdPushConstants =
				(delegate* unmanaged<Vk.Handle<Vk.CommandBuffer>, Vk.Handle<Vk.PipelineLayout>, Vk.ShaderStageFlags, uint, uint, void*, void>)LoadFunc(dev, "vkCmdPushConstants");
		}
		if (version >= V10) {
			vkCmdBeginRenderPass =
				(delegate* unmanaged<Vk.Handle<Vk.CommandBuffer>, Vk.RenderPassBeginInfo*, Vk.SubpassContents, void>)LoadFunc(dev, "vkCmdBeginRenderPass");
		}
		if (version >= V10) {
			vkCmdNextSubpass =
				(delegate* unmanaged<Vk.Handle<Vk.CommandBuffer>, Vk.SubpassContents, void>)LoadFunc(dev, "vkCmdNextSubpass");
		}
		if (version >= V10) {
			vkCmdEndRenderPass =
				(delegate* unmanaged<Vk.Handle<Vk.CommandBuffer>, void>)LoadFunc(dev, "vkCmdEndRenderPass");
		}
		if (version >= V10) {
			vkCmdExecuteCommands =
				(delegate* unmanaged<Vk.Handle<Vk.CommandBuffer>, uint, Vk.Handle<Vk.CommandBuffer>*, void>)LoadFunc(dev, "vkCmdExecuteCommands");
		}
		if (TryLoadFunc(dev, "vkCreateSharedSwapchainsKHR", out addr)) {
			vkCreateSharedSwapchainsKHR =
				(delegate* unmanaged<Vk.Handle<Vk.Device>, uint, Vk.KHR.SwapchainCreateInfo*, Vk.AllocationCallbacks*, Vk.Handle<Vk.KHR.Swapchain>*, Vk.Result>)addr;
		}
		if (TryLoadFunc(dev, "vkCreateSwapchainKHR", out addr)) {
			vkCreateSwapchainKHR =
				(delegate* unmanaged<Vk.Handle<Vk.Device>, Vk.KHR.SwapchainCreateInfo*, Vk.AllocationCallbacks*, Vk.Handle<Vk.KHR.Swapchain>*, Vk.Result>)addr;
		}
		if (TryLoadFunc(dev, "vkDestroySwapchainKHR", out addr)) {
			vkDestroySwapchainKHR =
				(delegate* unmanaged<Vk.Handle<Vk.Device>, Vk.Handle<Vk.KHR.Swapchain>, Vk.AllocationCallbacks*, void>)addr;
		}
		if (TryLoadFunc(dev, "vkGetSwapchainImagesKHR", out addr)) {
			vkGetSwapchainImagesKHR =
				(delegate* unmanaged<Vk.Handle<Vk.Device>, Vk.Handle<Vk.KHR.Swapchain>, uint*, Vk.Handle<Vk.Image>*, Vk.Result>)addr;
		}
		if (TryLoadFunc(dev, "vkAcquireNextImageKHR", out addr)) {
			vkAcquireNextImageKHR =
				(delegate* unmanaged<Vk.Handle<Vk.Device>, Vk.Handle<Vk.KHR.Swapchain>, ulong, Vk.Handle<Vk.Semaphore>, Vk.Handle<Vk.Fence>, uint*, Vk.Result>)addr;
		}
		if (TryLoadFunc(dev, "vkQueuePresentKHR", out addr)) {
			vkQueuePresentKHR =
				(delegate* unmanaged<Vk.Handle<Vk.Queue>, Vk.KHR.PresentInfo*, Vk.Result>)addr;
		}
		if (TryLoadFunc(dev, "vkDebugMarkerSetObjectNameEXT", out addr)) {
			vkDebugMarkerSetObjectNameEXT =
				(delegate* unmanaged<Vk.Handle<Vk.Device>, Vk.EXT.DebugMarkerObjectNameInfo*, Vk.Result>)addr;
		}
		if (TryLoadFunc(dev, "vkDebugMarkerSetObjectTagEXT", out addr)) {
			vkDebugMarkerSetObjectTagEXT =
				(delegate* unmanaged<Vk.Handle<Vk.Device>, Vk.EXT.DebugMarkerObjectTagInfo*, Vk.Result>)addr;
		}
		if (TryLoadFunc(dev, "vkCmdDebugMarkerBeginEXT", out addr)) {
			vkCmdDebugMarkerBeginEXT =
				(delegate* unmanaged<Vk.Handle<Vk.CommandBuffer>, Vk.EXT.DebugMarkerMarkerInfo*, void>)addr;
		}
		if (TryLoadFunc(dev, "vkCmdDebugMarkerEndEXT", out addr)) {
			vkCmdDebugMarkerEndEXT =
				(delegate* unmanaged<Vk.Handle<Vk.CommandBuffer>, void>)addr;
		}
		if (TryLoadFunc(dev, "vkCmdDebugMarkerInsertEXT", out addr)) {
			vkCmdDebugMarkerInsertEXT =
				(delegate* unmanaged<Vk.Handle<Vk.CommandBuffer>, Vk.EXT.DebugMarkerMarkerInfo*, void>)addr;
		}
		if (TryLoadFunc(dev, "vkGetMemoryWin32HandleNV", out addr)) {
			vkGetMemoryWin32HandleNV =
				(delegate* unmanaged<Vk.Handle<Vk.Device>, Vk.Handle<Vk.DeviceMemory>, Vk.NV.ExternalMemoryHandleTypeFlags, void**, Vk.Result>)addr;
		}
		if (TryLoadFunc(dev, "vkCmdExecuteGeneratedCommandsNV", out addr)) {
			vkCmdExecuteGeneratedCommandsNV =
				(delegate* unmanaged<Vk.Handle<Vk.CommandBuffer>, Vk.Bool32, Vk.NV.GeneratedCommandsInfo*, void>)addr;
		}
		if (TryLoadFunc(dev, "vkCmdPreprocessGeneratedCommandsNV", out addr)) {
			vkCmdPreprocessGeneratedCommandsNV =
				(delegate* unmanaged<Vk.Handle<Vk.CommandBuffer>, Vk.NV.GeneratedCommandsInfo*, void>)addr;
		}
		if (TryLoadFunc(dev, "vkCmdBindPipelineShaderGroupNV", out addr)) {
			vkCmdBindPipelineShaderGroupNV =
				(delegate* unmanaged<Vk.Handle<Vk.CommandBuffer>, Vk.PipelineBindPoint, Vk.Handle<Vk.Pipeline>, uint, void>)addr;
		}
		if (TryLoadFunc(dev, "vkGetGeneratedCommandsMemoryRequirementsNV", out addr)) {
			vkGetGeneratedCommandsMemoryRequirementsNV =
				(delegate* unmanaged<Vk.Handle<Vk.Device>, Vk.NV.GeneratedCommandsMemoryRequirementsInfo*, Vk.MemoryRequirements2*, void>)addr;
		}
		if (TryLoadFunc(dev, "vkCreateIndirectCommandsLayoutNV", out addr)) {
			vkCreateIndirectCommandsLayoutNV =
				(delegate* unmanaged<Vk.Handle<Vk.Device>, Vk.NV.IndirectCommandsLayoutCreateInfo*, Vk.AllocationCallbacks*, Vk.Handle<Vk.NV.IndirectCommandsLayout>*, Vk.Result>)addr;
		}
		if (TryLoadFunc(dev, "vkDestroyIndirectCommandsLayoutNV", out addr)) {
			vkDestroyIndirectCommandsLayoutNV =
				(delegate* unmanaged<Vk.Handle<Vk.Device>, Vk.Handle<Vk.NV.IndirectCommandsLayout>, Vk.AllocationCallbacks*, void>)addr;
		}
		if (TryLoadFunc(dev, "vkCmdPushDescriptorSetKHR", out addr)) {
			vkCmdPushDescriptorSetKHR =
				(delegate* unmanaged<Vk.Handle<Vk.CommandBuffer>, Vk.PipelineBindPoint, Vk.Handle<Vk.PipelineLayout>, uint, uint, Vk.WriteDescriptorSet*, void>)addr;
		}
		if (version >= V11) {
			vkTrimCommandPool =
				(delegate* unmanaged<Vk.Handle<Vk.Device>, Vk.Handle<Vk.CommandPool>, Vk.CommandPoolTrimFlags, void>)LoadFunc(dev, "vkTrimCommandPool");
		}
		vkTrimCommandPoolKHR = vkTrimCommandPool;
		if ((vkTrimCommandPoolKHR == null) && TryLoadFunc(dev, "vkTrimCommandPoolKHR", out addr)) {
			vkTrimCommandPoolKHR =
				(delegate* unmanaged<Vk.Handle<Vk.Device>, Vk.Handle<Vk.CommandPool>, Vk.CommandPoolTrimFlags, void>)addr;
		}
		if (TryLoadFunc(dev, "vkGetMemoryWin32HandleKHR", out addr)) {
			vkGetMemoryWin32HandleKHR =
				(delegate* unmanaged<Vk.Handle<Vk.Device>, Vk.KHR.MemoryGetWin32HandleInfo*, void**, Vk.Result>)addr;
		}
		if (TryLoadFunc(dev, "vkGetMemoryWin32HandlePropertiesKHR", out addr)) {
			vkGetMemoryWin32HandlePropertiesKHR =
				(delegate* unmanaged<Vk.Handle<Vk.Device>, Vk.ExternalMemoryHandleTypeFlags, void*, Vk.KHR.MemoryWin32HandleProperties*, Vk.Result>)addr;
		}
		if (TryLoadFunc(dev, "vkGetMemoryFdKHR", out addr)) {
			vkGetMemoryFdKHR =
				(delegate* unmanaged<Vk.Handle<Vk.Device>, Vk.KHR.MemoryGetFdInfo*, int*, Vk.Result>)addr;
		}
		if (TryLoadFunc(dev, "vkGetMemoryFdPropertiesKHR", out addr)) {
			vkGetMemoryFdPropertiesKHR =
				(delegate* unmanaged<Vk.Handle<Vk.Device>, Vk.ExternalMemoryHandleTypeFlags, int, Vk.KHR.MemoryFdProperties*, Vk.Result>)addr;
		}
		if (TryLoadFunc(dev, "vkGetSemaphoreWin32HandleKHR", out addr)) {
			vkGetSemaphoreWin32HandleKHR =
				(delegate* unmanaged<Vk.Handle<Vk.Device>, Vk.KHR.SemaphoreGetWin32HandleInfo*, void**, Vk.Result>)addr;
		}
		if (TryLoadFunc(dev, "vkImportSemaphoreWin32HandleKHR", out addr)) {
			vkImportSemaphoreWin32HandleKHR =
				(delegate* unmanaged<Vk.Handle<Vk.Device>, Vk.KHR.ImportSemaphoreWin32HandleInfo*, Vk.Result>)addr;
		}
		if (TryLoadFunc(dev, "vkGetSemaphoreFdKHR", out addr)) {
			vkGetSemaphoreFdKHR =
				(delegate* unmanaged<Vk.Handle<Vk.Device>, Vk.KHR.SemaphoreGetFdInfo*, int*, Vk.Result>)addr;
		}
		if (TryLoadFunc(dev, "vkImportSemaphoreFdKHR", out addr)) {
			vkImportSemaphoreFdKHR =
				(delegate* unmanaged<Vk.Handle<Vk.Device>, Vk.KHR.ImportSemaphoreFdInfo*, Vk.Result>)addr;
		}
		if (TryLoadFunc(dev, "vkGetFenceWin32HandleKHR", out addr)) {
			vkGetFenceWin32HandleKHR =
				(delegate* unmanaged<Vk.Handle<Vk.Device>, Vk.KHR.FenceGetWin32HandleInfo*, void**, Vk.Result>)addr;
		}
		if (TryLoadFunc(dev, "vkImportFenceWin32HandleKHR", out addr)) {
			vkImportFenceWin32HandleKHR =
				(delegate* unmanaged<Vk.Handle<Vk.Device>, Vk.KHR.ImportFenceWin32HandleInfo*, Vk.Result>)addr;
		}
		if (TryLoadFunc(dev, "vkGetFenceFdKHR", out addr)) {
			vkGetFenceFdKHR =
				(delegate* unmanaged<Vk.Handle<Vk.Device>, Vk.KHR.FenceGetFdInfo*, int*, Vk.Result>)addr;
		}
		if (TryLoadFunc(dev, "vkImportFenceFdKHR", out addr)) {
			vkImportFenceFdKHR =
				(delegate* unmanaged<Vk.Handle<Vk.Device>, Vk.KHR.ImportFenceFdInfo*, Vk.Result>)addr;
		}
		if (TryLoadFunc(dev, "vkDisplayPowerControlEXT", out addr)) {
			vkDisplayPowerControlEXT =
				(delegate* unmanaged<Vk.Handle<Vk.Device>, Vk.Handle<Vk.KHR.Display>, Vk.EXT.DisplayPowerInfo*, Vk.Result>)addr;
		}
		if (TryLoadFunc(dev, "vkRegisterDeviceEventEXT", out addr)) {
			vkRegisterDeviceEventEXT =
				(delegate* unmanaged<Vk.Handle<Vk.Device>, Vk.EXT.DeviceEventInfo*, Vk.AllocationCallbacks*, Vk.Handle<Vk.Fence>*, Vk.Result>)addr;
		}
		if (TryLoadFunc(dev, "vkRegisterDisplayEventEXT", out addr)) {
			vkRegisterDisplayEventEXT =
				(delegate* unmanaged<Vk.Handle<Vk.Device>, Vk.Handle<Vk.KHR.Display>, Vk.EXT.DisplayEventInfo*, Vk.AllocationCallbacks*, Vk.Handle<Vk.Fence>*, Vk.Result>)addr;
		}
		if (TryLoadFunc(dev, "vkGetSwapchainCounterEXT", out addr)) {
			vkGetSwapchainCounterEXT =
				(delegate* unmanaged<Vk.Handle<Vk.Device>, Vk.Handle<Vk.KHR.Swapchain>, Vk.EXT.SurfaceCounterFlags, ulong*, Vk.Result>)addr;
		}
		if (version >= V11) {
			vkGetDeviceGroupPeerMemoryFeatures =
				(delegate* unmanaged<Vk.Handle<Vk.Device>, uint, uint, uint, Vk.PeerMemoryFeatureFlags*, void>)LoadFunc(dev, "vkGetDeviceGroupPeerMemoryFeatures");
		}
		vkGetDeviceGroupPeerMemoryFeaturesKHR = vkGetDeviceGroupPeerMemoryFeatures;
		if ((vkGetDeviceGroupPeerMemoryFeaturesKHR == null) && TryLoadFunc(dev, "vkGetDeviceGroupPeerMemoryFeaturesKHR", out addr)) {
			vkGetDeviceGroupPeerMemoryFeaturesKHR =
				(delegate* unmanaged<Vk.Handle<Vk.Device>, uint, uint, uint, Vk.PeerMemoryFeatureFlags*, void>)addr;
		}
		if (version >= V11) {
			vkBindBufferMemory2 =
				(delegate* unmanaged<Vk.Handle<Vk.Device>, uint, Vk.BindBufferMemoryInfo*, Vk.Result>)LoadFunc(dev, "vkBindBufferMemory2");
		}
		vkBindBufferMemory2KHR = vkBindBufferMemory2;
		if ((vkBindBufferMemory2KHR == null) && TryLoadFunc(dev, "vkBindBufferMemory2KHR", out addr)) {
			vkBindBufferMemory2KHR =
				(delegate* unmanaged<Vk.Handle<Vk.Device>, uint, Vk.BindBufferMemoryInfo*, Vk.Result>)addr;
		}
		if (version >= V11) {
			vkBindImageMemory2 =
				(delegate* unmanaged<Vk.Handle<Vk.Device>, uint, Vk.BindImageMemoryInfo*, Vk.Result>)LoadFunc(dev, "vkBindImageMemory2");
		}
		vkBindImageMemory2KHR = vkBindImageMemory2;
		if ((vkBindImageMemory2KHR == null) && TryLoadFunc(dev, "vkBindImageMemory2KHR", out addr)) {
			vkBindImageMemory2KHR =
				(delegate* unmanaged<Vk.Handle<Vk.Device>, uint, Vk.BindImageMemoryInfo*, Vk.Result>)addr;
		}
		if (version >= V11) {
			vkCmdSetDeviceMask =
				(delegate* unmanaged<Vk.Handle<Vk.CommandBuffer>, uint, void>)LoadFunc(dev, "vkCmdSetDeviceMask");
		}
		vkCmdSetDeviceMaskKHR = vkCmdSetDeviceMask;
		if ((vkCmdSetDeviceMaskKHR == null) && TryLoadFunc(dev, "vkCmdSetDeviceMaskKHR", out addr)) {
			vkCmdSetDeviceMaskKHR =
				(delegate* unmanaged<Vk.Handle<Vk.CommandBuffer>, uint, void>)addr;
		}
		if (TryLoadFunc(dev, "vkGetDeviceGroupPresentCapabilitiesKHR", out addr)) {
			vkGetDeviceGroupPresentCapabilitiesKHR =
				(delegate* unmanaged<Vk.Handle<Vk.Device>, Vk.KHR.DeviceGroupPresentCapabilities*, Vk.Result>)addr;
		}
		if (TryLoadFunc(dev, "vkGetDeviceGroupSurfacePresentModesKHR", out addr)) {
			vkGetDeviceGroupSurfacePresentModesKHR =
				(delegate* unmanaged<Vk.Handle<Vk.Device>, Vk.Handle<Vk.KHR.Surface>, Vk.KHR.DeviceGroupPresentModeFlags*, Vk.Result>)addr;
		}
		if (TryLoadFunc(dev, "vkAcquireNextImage2KHR", out addr)) {
			vkAcquireNextImage2KHR =
				(delegate* unmanaged<Vk.Handle<Vk.Device>, Vk.KHR.AcquireNextImageInfo*, uint*, Vk.Result>)addr;
		}
		if (version >= V11) {
			vkCmdDispatchBase =
				(delegate* unmanaged<Vk.Handle<Vk.CommandBuffer>, uint, uint, uint, uint, uint, uint, void>)LoadFunc(dev, "vkCmdDispatchBase");
		}
		vkCmdDispatchBaseKHR = vkCmdDispatchBase;
		if ((vkCmdDispatchBaseKHR == null) && TryLoadFunc(dev, "vkCmdDispatchBaseKHR", out addr)) {
			vkCmdDispatchBaseKHR =
				(delegate* unmanaged<Vk.Handle<Vk.CommandBuffer>, uint, uint, uint, uint, uint, uint, void>)addr;
		}
		if (version >= V11) {
			vkCreateDescriptorUpdateTemplate =
				(delegate* unmanaged<Vk.Handle<Vk.Device>, Vk.DescriptorUpdateTemplateCreateInfo*, Vk.AllocationCallbacks*, Vk.Handle<Vk.DescriptorUpdateTemplate>*, Vk.Result>)LoadFunc(dev, "vkCreateDescriptorUpdateTemplate");
		}
		vkCreateDescriptorUpdateTemplateKHR = vkCreateDescriptorUpdateTemplate;
		if ((vkCreateDescriptorUpdateTemplateKHR == null) && TryLoadFunc(dev, "vkCreateDescriptorUpdateTemplateKHR", out addr)) {
			vkCreateDescriptorUpdateTemplateKHR =
				(delegate* unmanaged<Vk.Handle<Vk.Device>, Vk.DescriptorUpdateTemplateCreateInfo*, Vk.AllocationCallbacks*, Vk.Handle<Vk.DescriptorUpdateTemplate>*, Vk.Result>)addr;
		}
		if (version >= V11) {
			vkDestroyDescriptorUpdateTemplate =
				(delegate* unmanaged<Vk.Handle<Vk.Device>, Vk.Handle<Vk.DescriptorUpdateTemplate>, Vk.AllocationCallbacks*, void>)LoadFunc(dev, "vkDestroyDescriptorUpdateTemplate");
		}
		vkDestroyDescriptorUpdateTemplateKHR = vkDestroyDescriptorUpdateTemplate;
		if ((vkDestroyDescriptorUpdateTemplateKHR == null) && TryLoadFunc(dev, "vkDestroyDescriptorUpdateTemplateKHR", out addr)) {
			vkDestroyDescriptorUpdateTemplateKHR =
				(delegate* unmanaged<Vk.Handle<Vk.Device>, Vk.Handle<Vk.DescriptorUpdateTemplate>, Vk.AllocationCallbacks*, void>)addr;
		}
		if (version >= V11) {
			vkUpdateDescriptorSetWithTemplate =
				(delegate* unmanaged<Vk.Handle<Vk.Device>, Vk.Handle<Vk.DescriptorSet>, Vk.Handle<Vk.DescriptorUpdateTemplate>, void*, void>)LoadFunc(dev, "vkUpdateDescriptorSetWithTemplate");
		}
		vkUpdateDescriptorSetWithTemplateKHR = vkUpdateDescriptorSetWithTemplate;
		if ((vkUpdateDescriptorSetWithTemplateKHR == null) && TryLoadFunc(dev, "vkUpdateDescriptorSetWithTemplateKHR", out addr)) {
			vkUpdateDescriptorSetWithTemplateKHR =
				(delegate* unmanaged<Vk.Handle<Vk.Device>, Vk.Handle<Vk.DescriptorSet>, Vk.Handle<Vk.DescriptorUpdateTemplate>, void*, void>)addr;
		}
		if (TryLoadFunc(dev, "vkCmdPushDescriptorSetWithTemplateKHR", out addr)) {
			vkCmdPushDescriptorSetWithTemplateKHR =
				(delegate* unmanaged<Vk.Handle<Vk.CommandBuffer>, Vk.Handle<Vk.DescriptorUpdateTemplate>, Vk.Handle<Vk.PipelineLayout>, uint, void*, void>)addr;
		}
		if (TryLoadFunc(dev, "vkSetHdrMetadataEXT", out addr)) {
			vkSetHdrMetadataEXT =
				(delegate* unmanaged<Vk.Handle<Vk.Device>, uint, Vk.Handle<Vk.KHR.Swapchain>*, Vk.EXT.HdrMetadata*, void>)addr;
		}
		if (TryLoadFunc(dev, "vkGetSwapchainStatusKHR", out addr)) {
			vkGetSwapchainStatusKHR =
				(delegate* unmanaged<Vk.Handle<Vk.Device>, Vk.Handle<Vk.KHR.Swapchain>, Vk.Result>)addr;
		}
		if (TryLoadFunc(dev, "vkGetRefreshCycleDurationGOOGLE", out addr)) {
			vkGetRefreshCycleDurationGOOGLE =
				(delegate* unmanaged<Vk.Handle<Vk.Device>, Vk.Handle<Vk.KHR.Swapchain>, Vk.GOOGLE.RefreshCycleDuration*, Vk.Result>)addr;
		}
		if (TryLoadFunc(dev, "vkGetPastPresentationTimingGOOGLE", out addr)) {
			vkGetPastPresentationTimingGOOGLE =
				(delegate* unmanaged<Vk.Handle<Vk.Device>, Vk.Handle<Vk.KHR.Swapchain>, uint*, Vk.GOOGLE.PastPresentationTiming*, Vk.Result>)addr;
		}
		if (TryLoadFunc(dev, "vkCmdSetViewportWScalingNV", out addr)) {
			vkCmdSetViewportWScalingNV =
				(delegate* unmanaged<Vk.Handle<Vk.CommandBuffer>, uint, uint, Vk.NV.ViewportWScaling*, void>)addr;
		}
		if (TryLoadFunc(dev, "vkCmdSetDiscardRectangleEXT", out addr)) {
			vkCmdSetDiscardRectangleEXT =
				(delegate* unmanaged<Vk.Handle<Vk.CommandBuffer>, uint, uint, Vk.Rect2D*, void>)addr;
		}
		if (TryLoadFunc(dev, "vkCmdSetSampleLocationsEXT", out addr)) {
			vkCmdSetSampleLocationsEXT =
				(delegate* unmanaged<Vk.Handle<Vk.CommandBuffer>, Vk.EXT.SampleLocationsInfo*, void>)addr;
		}
		if (version >= V11) {
			vkGetBufferMemoryRequirements2 =
				(delegate* unmanaged<Vk.Handle<Vk.Device>, Vk.BufferMemoryRequirementsInfo2*, Vk.MemoryRequirements2*, void>)LoadFunc(dev, "vkGetBufferMemoryRequirements2");
		}
		vkGetBufferMemoryRequirements2KHR = vkGetBufferMemoryRequirements2;
		if ((vkGetBufferMemoryRequirements2KHR == null) && TryLoadFunc(dev, "vkGetBufferMemoryRequirements2KHR", out addr)) {
			vkGetBufferMemoryRequirements2KHR =
				(delegate* unmanaged<Vk.Handle<Vk.Device>, Vk.BufferMemoryRequirementsInfo2*, Vk.MemoryRequirements2*, void>)addr;
		}
		if (version >= V11) {
			vkGetImageMemoryRequirements2 =
				(delegate* unmanaged<Vk.Handle<Vk.Device>, Vk.ImageMemoryRequirementsInfo2*, Vk.MemoryRequirements2*, void>)LoadFunc(dev, "vkGetImageMemoryRequirements2");
		}
		vkGetImageMemoryRequirements2KHR = vkGetImageMemoryRequirements2;
		if ((vkGetImageMemoryRequirements2KHR == null) && TryLoadFunc(dev, "vkGetImageMemoryRequirements2KHR", out addr)) {
			vkGetImageMemoryRequirements2KHR =
				(delegate* unmanaged<Vk.Handle<Vk.Device>, Vk.ImageMemoryRequirementsInfo2*, Vk.MemoryRequirements2*, void>)addr;
		}
		if (version >= V11) {
			vkGetImageSparseMemoryRequirements2 =
				(delegate* unmanaged<Vk.Handle<Vk.Device>, Vk.ImageSparseMemoryRequirementsInfo2*, uint*, Vk.SparseImageMemoryRequirements2*, void>)LoadFunc(dev, "vkGetImageSparseMemoryRequirements2");
		}
		vkGetImageSparseMemoryRequirements2KHR = vkGetImageSparseMemoryRequirements2;
		if ((vkGetImageSparseMemoryRequirements2KHR == null) && TryLoadFunc(dev, "vkGetImageSparseMemoryRequirements2KHR", out addr)) {
			vkGetImageSparseMemoryRequirements2KHR =
				(delegate* unmanaged<Vk.Handle<Vk.Device>, Vk.ImageSparseMemoryRequirementsInfo2*, uint*, Vk.SparseImageMemoryRequirements2*, void>)addr;
		}
		if (version >= V11) {
			vkCreateSamplerYcbcrConversion =
				(delegate* unmanaged<Vk.Handle<Vk.Device>, Vk.SamplerYcbcrConversionCreateInfo*, Vk.AllocationCallbacks*, Vk.Handle<Vk.SamplerYcbcrConversion>*, Vk.Result>)LoadFunc(dev, "vkCreateSamplerYcbcrConversion");
		}
		vkCreateSamplerYcbcrConversionKHR = vkCreateSamplerYcbcrConversion;
		if ((vkCreateSamplerYcbcrConversionKHR == null) && TryLoadFunc(dev, "vkCreateSamplerYcbcrConversionKHR", out addr)) {
			vkCreateSamplerYcbcrConversionKHR =
				(delegate* unmanaged<Vk.Handle<Vk.Device>, Vk.SamplerYcbcrConversionCreateInfo*, Vk.AllocationCallbacks*, Vk.Handle<Vk.SamplerYcbcrConversion>*, Vk.Result>)addr;
		}
		if (version >= V11) {
			vkDestroySamplerYcbcrConversion =
				(delegate* unmanaged<Vk.Handle<Vk.Device>, Vk.Handle<Vk.SamplerYcbcrConversion>, Vk.AllocationCallbacks*, void>)LoadFunc(dev, "vkDestroySamplerYcbcrConversion");
		}
		vkDestroySamplerYcbcrConversionKHR = vkDestroySamplerYcbcrConversion;
		if ((vkDestroySamplerYcbcrConversionKHR == null) && TryLoadFunc(dev, "vkDestroySamplerYcbcrConversionKHR", out addr)) {
			vkDestroySamplerYcbcrConversionKHR =
				(delegate* unmanaged<Vk.Handle<Vk.Device>, Vk.Handle<Vk.SamplerYcbcrConversion>, Vk.AllocationCallbacks*, void>)addr;
		}
		if (version >= V11) {
			vkGetDeviceQueue2 =
				(delegate* unmanaged<Vk.Handle<Vk.Device>, Vk.DeviceQueueInfo2*, Vk.Handle<Vk.Queue>*, void>)LoadFunc(dev, "vkGetDeviceQueue2");
		}
		if (TryLoadFunc(dev, "vkCreateValidationCacheEXT", out addr)) {
			vkCreateValidationCacheEXT =
				(delegate* unmanaged<Vk.Handle<Vk.Device>, Vk.EXT.ValidationCacheCreateInfo*, Vk.AllocationCallbacks*, Vk.Handle<Vk.EXT.ValidationCache>*, Vk.Result>)addr;
		}
		if (TryLoadFunc(dev, "vkDestroyValidationCacheEXT", out addr)) {
			vkDestroyValidationCacheEXT =
				(delegate* unmanaged<Vk.Handle<Vk.Device>, Vk.Handle<Vk.EXT.ValidationCache>, Vk.AllocationCallbacks*, void>)addr;
		}
		if (TryLoadFunc(dev, "vkGetValidationCacheDataEXT", out addr)) {
			vkGetValidationCacheDataEXT =
				(delegate* unmanaged<Vk.Handle<Vk.Device>, Vk.Handle<Vk.EXT.ValidationCache>, ulong*, void*, Vk.Result>)addr;
		}
		if (TryLoadFunc(dev, "vkMergeValidationCachesEXT", out addr)) {
			vkMergeValidationCachesEXT =
				(delegate* unmanaged<Vk.Handle<Vk.Device>, Vk.Handle<Vk.EXT.ValidationCache>, uint, Vk.Handle<Vk.EXT.ValidationCache>*, Vk.Result>)addr;
		}
		if (version >= V11) {
			vkGetDescriptorSetLayoutSupport =
				(delegate* unmanaged<Vk.Handle<Vk.Device>, Vk.DescriptorSetLayoutCreateInfo*, Vk.DescriptorSetLayoutSupport*, void>)LoadFunc(dev, "vkGetDescriptorSetLayoutSupport");
		}
		vkGetDescriptorSetLayoutSupportKHR = vkGetDescriptorSetLayoutSupport;
		if ((vkGetDescriptorSetLayoutSupportKHR == null) && TryLoadFunc(dev, "vkGetDescriptorSetLayoutSupportKHR", out addr)) {
			vkGetDescriptorSetLayoutSupportKHR =
				(delegate* unmanaged<Vk.Handle<Vk.Device>, Vk.DescriptorSetLayoutCreateInfo*, Vk.DescriptorSetLayoutSupport*, void>)addr;
		}
		if (TryLoadFunc(dev, "vkGetSwapchainGrallocUsageANDROID", out addr)) {
			vkGetSwapchainGrallocUsageANDROID =
				(delegate* unmanaged<Vk.Handle<Vk.Device>, Vk.Format, Vk.ImageUsageFlags, int*, Vk.Result>)addr;
		}
		if (TryLoadFunc(dev, "vkGetSwapchainGrallocUsage2ANDROID", out addr)) {
			vkGetSwapchainGrallocUsage2ANDROID =
				(delegate* unmanaged<Vk.Handle<Vk.Device>, Vk.Format, Vk.ImageUsageFlags, Vk.ANDROID.SwapchainImageUsageFlags, ulong*, ulong*, Vk.Result>)addr;
		}
		if (TryLoadFunc(dev, "vkAcquireImageANDROID", out addr)) {
			vkAcquireImageANDROID =
				(delegate* unmanaged<Vk.Handle<Vk.Device>, Vk.Handle<Vk.Image>, int, Vk.Handle<Vk.Semaphore>, Vk.Handle<Vk.Fence>, Vk.Result>)addr;
		}
		if (TryLoadFunc(dev, "vkQueueSignalReleaseImageANDROID", out addr)) {
			vkQueueSignalReleaseImageANDROID =
				(delegate* unmanaged<Vk.Handle<Vk.Queue>, uint, Vk.Handle<Vk.Semaphore>*, Vk.Handle<Vk.Image>, int*, Vk.Result>)addr;
		}
		if (TryLoadFunc(dev, "vkGetShaderInfoAMD", out addr)) {
			vkGetShaderInfoAMD =
				(delegate* unmanaged<Vk.Handle<Vk.Device>, Vk.Handle<Vk.Pipeline>, Vk.ShaderStageFlags, Vk.AMD.ShaderInfoType, ulong*, void*, Vk.Result>)addr;
		}
		if (TryLoadFunc(dev, "vkSetLocalDimmingAMD", out addr)) {
			vkSetLocalDimmingAMD =
				(delegate* unmanaged<Vk.Handle<Vk.Device>, Vk.Handle<Vk.KHR.Swapchain>, Vk.Bool32, void>)addr;
		}
		if (TryLoadFunc(dev, "vkGetCalibratedTimestampsEXT", out addr)) {
			vkGetCalibratedTimestampsEXT =
				(delegate* unmanaged<Vk.Handle<Vk.Device>, uint, Vk.EXT.CalibratedTimestampInfo*, ulong*, ulong*, Vk.Result>)addr;
		}
		if (TryLoadFunc(dev, "vkSetDebugUtilsObjectNameEXT", out addr)) {
			vkSetDebugUtilsObjectNameEXT =
				(delegate* unmanaged<Vk.Handle<Vk.Device>, Vk.EXT.DebugUtilsObjectNameInfo*, Vk.Result>)addr;
		}
		if (TryLoadFunc(dev, "vkSetDebugUtilsObjectTagEXT", out addr)) {
			vkSetDebugUtilsObjectTagEXT =
				(delegate* unmanaged<Vk.Handle<Vk.Device>, Vk.EXT.DebugUtilsObjectTagInfo*, Vk.Result>)addr;
		}
		if (TryLoadFunc(dev, "vkQueueBeginDebugUtilsLabelEXT", out addr)) {
			vkQueueBeginDebugUtilsLabelEXT =
				(delegate* unmanaged<Vk.Handle<Vk.Queue>, Vk.EXT.DebugUtilsLabel*, void>)addr;
		}
		if (TryLoadFunc(dev, "vkQueueEndDebugUtilsLabelEXT", out addr)) {
			vkQueueEndDebugUtilsLabelEXT =
				(delegate* unmanaged<Vk.Handle<Vk.Queue>, void>)addr;
		}
		if (TryLoadFunc(dev, "vkQueueInsertDebugUtilsLabelEXT", out addr)) {
			vkQueueInsertDebugUtilsLabelEXT =
				(delegate* unmanaged<Vk.Handle<Vk.Queue>, Vk.EXT.DebugUtilsLabel*, void>)addr;
		}
		if (TryLoadFunc(dev, "vkCmdBeginDebugUtilsLabelEXT", out addr)) {
			vkCmdBeginDebugUtilsLabelEXT =
				(delegate* unmanaged<Vk.Handle<Vk.CommandBuffer>, Vk.EXT.DebugUtilsLabel*, void>)addr;
		}
		if (TryLoadFunc(dev, "vkCmdEndDebugUtilsLabelEXT", out addr)) {
			vkCmdEndDebugUtilsLabelEXT =
				(delegate* unmanaged<Vk.Handle<Vk.CommandBuffer>, void>)addr;
		}
		if (TryLoadFunc(dev, "vkCmdInsertDebugUtilsLabelEXT", out addr)) {
			vkCmdInsertDebugUtilsLabelEXT =
				(delegate* unmanaged<Vk.Handle<Vk.CommandBuffer>, Vk.EXT.DebugUtilsLabel*, void>)addr;
		}
		if (TryLoadFunc(dev, "vkGetMemoryHostPointerPropertiesEXT", out addr)) {
			vkGetMemoryHostPointerPropertiesEXT =
				(delegate* unmanaged<Vk.Handle<Vk.Device>, Vk.ExternalMemoryHandleTypeFlags, void*, Vk.EXT.MemoryHostPointerProperties*, Vk.Result>)addr;
		}
		if (TryLoadFunc(dev, "vkCmdWriteBufferMarkerAMD", out addr)) {
			vkCmdWriteBufferMarkerAMD =
				(delegate* unmanaged<Vk.Handle<Vk.CommandBuffer>, Vk.PipelineStageFlags, Vk.Handle<Vk.Buffer>, Vk.DeviceSize, uint, void>)addr;
		}
		if (version >= V12) {
			vkCreateRenderPass2 =
				(delegate* unmanaged<Vk.Handle<Vk.Device>, Vk.RenderPassCreateInfo2*, Vk.AllocationCallbacks*, Vk.Handle<Vk.RenderPass>*, Vk.Result>)LoadFunc(dev, "vkCreateRenderPass2");
		}
		vkCreateRenderPass2KHR = vkCreateRenderPass2;
		if ((vkCreateRenderPass2KHR == null) && TryLoadFunc(dev, "vkCreateRenderPass2KHR", out addr)) {
			vkCreateRenderPass2KHR =
				(delegate* unmanaged<Vk.Handle<Vk.Device>, Vk.RenderPassCreateInfo2*, Vk.AllocationCallbacks*, Vk.Handle<Vk.RenderPass>*, Vk.Result>)addr;
		}
		if (version >= V12) {
			vkCmdBeginRenderPass2 =
				(delegate* unmanaged<Vk.Handle<Vk.CommandBuffer>, Vk.RenderPassBeginInfo*, Vk.SubpassBeginInfo*, void>)LoadFunc(dev, "vkCmdBeginRenderPass2");
		}
		vkCmdBeginRenderPass2KHR = vkCmdBeginRenderPass2;
		if ((vkCmdBeginRenderPass2KHR == null) && TryLoadFunc(dev, "vkCmdBeginRenderPass2KHR", out addr)) {
			vkCmdBeginRenderPass2KHR =
				(delegate* unmanaged<Vk.Handle<Vk.CommandBuffer>, Vk.RenderPassBeginInfo*, Vk.SubpassBeginInfo*, void>)addr;
		}
		if (version >= V12) {
			vkCmdNextSubpass2 =
				(delegate* unmanaged<Vk.Handle<Vk.CommandBuffer>, Vk.SubpassBeginInfo*, Vk.SubpassEndInfo*, void>)LoadFunc(dev, "vkCmdNextSubpass2");
		}
		vkCmdNextSubpass2KHR = vkCmdNextSubpass2;
		if ((vkCmdNextSubpass2KHR == null) && TryLoadFunc(dev, "vkCmdNextSubpass2KHR", out addr)) {
			vkCmdNextSubpass2KHR =
				(delegate* unmanaged<Vk.Handle<Vk.CommandBuffer>, Vk.SubpassBeginInfo*, Vk.SubpassEndInfo*, void>)addr;
		}
		if (version >= V12) {
			vkCmdEndRenderPass2 =
				(delegate* unmanaged<Vk.Handle<Vk.CommandBuffer>, Vk.SubpassEndInfo*, void>)LoadFunc(dev, "vkCmdEndRenderPass2");
		}
		vkCmdEndRenderPass2KHR = vkCmdEndRenderPass2;
		if ((vkCmdEndRenderPass2KHR == null) && TryLoadFunc(dev, "vkCmdEndRenderPass2KHR", out addr)) {
			vkCmdEndRenderPass2KHR =
				(delegate* unmanaged<Vk.Handle<Vk.CommandBuffer>, Vk.SubpassEndInfo*, void>)addr;
		}
		if (version >= V12) {
			vkGetSemaphoreCounterValue =
				(delegate* unmanaged<Vk.Handle<Vk.Device>, Vk.Handle<Vk.Semaphore>, ulong*, Vk.Result>)LoadFunc(dev, "vkGetSemaphoreCounterValue");
		}
		vkGetSemaphoreCounterValueKHR = vkGetSemaphoreCounterValue;
		if ((vkGetSemaphoreCounterValueKHR == null) && TryLoadFunc(dev, "vkGetSemaphoreCounterValueKHR", out addr)) {
			vkGetSemaphoreCounterValueKHR =
				(delegate* unmanaged<Vk.Handle<Vk.Device>, Vk.Handle<Vk.Semaphore>, ulong*, Vk.Result>)addr;
		}
		if (version >= V12) {
			vkWaitSemaphores =
				(delegate* unmanaged<Vk.Handle<Vk.Device>, Vk.SemaphoreWaitInfo*, ulong, Vk.Result>)LoadFunc(dev, "vkWaitSemaphores");
		}
		vkWaitSemaphoresKHR = vkWaitSemaphores;
		if ((vkWaitSemaphoresKHR == null) && TryLoadFunc(dev, "vkWaitSemaphoresKHR", out addr)) {
			vkWaitSemaphoresKHR =
				(delegate* unmanaged<Vk.Handle<Vk.Device>, Vk.SemaphoreWaitInfo*, ulong, Vk.Result>)addr;
		}
		if (version >= V12) {
			vkSignalSemaphore =
				(delegate* unmanaged<Vk.Handle<Vk.Device>, Vk.SemaphoreSignalInfo*, Vk.Result>)LoadFunc(dev, "vkSignalSemaphore");
		}
		vkSignalSemaphoreKHR = vkSignalSemaphore;
		if ((vkSignalSemaphoreKHR == null) && TryLoadFunc(dev, "vkSignalSemaphoreKHR", out addr)) {
			vkSignalSemaphoreKHR =
				(delegate* unmanaged<Vk.Handle<Vk.Device>, Vk.SemaphoreSignalInfo*, Vk.Result>)addr;
		}
		if (TryLoadFunc(dev, "vkGetAndroidHardwareBufferPropertiesANDROID", out addr)) {
			vkGetAndroidHardwareBufferPropertiesANDROID =
				(delegate* unmanaged<Vk.Handle<Vk.Device>, void*, Vk.ANDROID.AndroidHardwareBufferProperties*, Vk.Result>)addr;
		}
		if (TryLoadFunc(dev, "vkGetMemoryAndroidHardwareBufferANDROID", out addr)) {
			vkGetMemoryAndroidHardwareBufferANDROID =
				(delegate* unmanaged<Vk.Handle<Vk.Device>, Vk.ANDROID.MemoryGetAndroidHardwareBufferInfo*, void**, Vk.Result>)addr;
		}
		if (version >= V12) {
			vkCmdDrawIndirectCount =
				(delegate* unmanaged<Vk.Handle<Vk.CommandBuffer>, Vk.Handle<Vk.Buffer>, Vk.DeviceSize, Vk.Handle<Vk.Buffer>, Vk.DeviceSize, uint, uint, void>)LoadFunc(dev, "vkCmdDrawIndirectCount");
		}
		vkCmdDrawIndirectCountKHR = vkCmdDrawIndirectCount;
		if ((vkCmdDrawIndirectCountKHR == null) && TryLoadFunc(dev, "vkCmdDrawIndirectCountKHR", out addr)) {
			vkCmdDrawIndirectCountKHR =
				(delegate* unmanaged<Vk.Handle<Vk.CommandBuffer>, Vk.Handle<Vk.Buffer>, Vk.DeviceSize, Vk.Handle<Vk.Buffer>, Vk.DeviceSize, uint, uint, void>)addr;
		}
		vkCmdDrawIndirectCountAMD = vkCmdDrawIndirectCount;
		if ((vkCmdDrawIndirectCountAMD == null) && TryLoadFunc(dev, "vkCmdDrawIndirectCountAMD", out addr)) {
			vkCmdDrawIndirectCountAMD =
				(delegate* unmanaged<Vk.Handle<Vk.CommandBuffer>, Vk.Handle<Vk.Buffer>, Vk.DeviceSize, Vk.Handle<Vk.Buffer>, Vk.DeviceSize, uint, uint, void>)addr;
		}
		if (version >= V12) {
			vkCmdDrawIndexedIndirectCount =
				(delegate* unmanaged<Vk.Handle<Vk.CommandBuffer>, Vk.Handle<Vk.Buffer>, Vk.DeviceSize, Vk.Handle<Vk.Buffer>, Vk.DeviceSize, uint, uint, void>)LoadFunc(dev, "vkCmdDrawIndexedIndirectCount");
		}
		vkCmdDrawIndexedIndirectCountKHR = vkCmdDrawIndexedIndirectCount;
		if ((vkCmdDrawIndexedIndirectCountKHR == null) && TryLoadFunc(dev, "vkCmdDrawIndexedIndirectCountKHR", out addr)) {
			vkCmdDrawIndexedIndirectCountKHR =
				(delegate* unmanaged<Vk.Handle<Vk.CommandBuffer>, Vk.Handle<Vk.Buffer>, Vk.DeviceSize, Vk.Handle<Vk.Buffer>, Vk.DeviceSize, uint, uint, void>)addr;
		}
		vkCmdDrawIndexedIndirectCountAMD = vkCmdDrawIndexedIndirectCount;
		if ((vkCmdDrawIndexedIndirectCountAMD == null) && TryLoadFunc(dev, "vkCmdDrawIndexedIndirectCountAMD", out addr)) {
			vkCmdDrawIndexedIndirectCountAMD =
				(delegate* unmanaged<Vk.Handle<Vk.CommandBuffer>, Vk.Handle<Vk.Buffer>, Vk.DeviceSize, Vk.Handle<Vk.Buffer>, Vk.DeviceSize, uint, uint, void>)addr;
		}
		if (TryLoadFunc(dev, "vkCmdSetCheckpointNV", out addr)) {
			vkCmdSetCheckpointNV =
				(delegate* unmanaged<Vk.Handle<Vk.CommandBuffer>, void*, void>)addr;
		}
		if (TryLoadFunc(dev, "vkGetQueueCheckpointDataNV", out addr)) {
			vkGetQueueCheckpointDataNV =
				(delegate* unmanaged<Vk.Handle<Vk.Queue>, uint*, Vk.NV.CheckpointData*, void>)addr;
		}
		if (TryLoadFunc(dev, "vkCmdBindTransformFeedbackBuffersEXT", out addr)) {
			vkCmdBindTransformFeedbackBuffersEXT =
				(delegate* unmanaged<Vk.Handle<Vk.CommandBuffer>, uint, uint, Vk.Handle<Vk.Buffer>*, Vk.DeviceSize*, Vk.DeviceSize*, void>)addr;
		}
		if (TryLoadFunc(dev, "vkCmdBeginTransformFeedbackEXT", out addr)) {
			vkCmdBeginTransformFeedbackEXT =
				(delegate* unmanaged<Vk.Handle<Vk.CommandBuffer>, uint, uint, Vk.Handle<Vk.Buffer>*, Vk.DeviceSize*, void>)addr;
		}
		if (TryLoadFunc(dev, "vkCmdEndTransformFeedbackEXT", out addr)) {
			vkCmdEndTransformFeedbackEXT =
				(delegate* unmanaged<Vk.Handle<Vk.CommandBuffer>, uint, uint, Vk.Handle<Vk.Buffer>*, Vk.DeviceSize*, void>)addr;
		}
		if (TryLoadFunc(dev, "vkCmdBeginQueryIndexedEXT", out addr)) {
			vkCmdBeginQueryIndexedEXT =
				(delegate* unmanaged<Vk.Handle<Vk.CommandBuffer>, Vk.Handle<Vk.QueryPool>, uint, Vk.QueryControlFlags, uint, void>)addr;
		}
		if (TryLoadFunc(dev, "vkCmdEndQueryIndexedEXT", out addr)) {
			vkCmdEndQueryIndexedEXT =
				(delegate* unmanaged<Vk.Handle<Vk.CommandBuffer>, Vk.Handle<Vk.QueryPool>, uint, uint, void>)addr;
		}
		if (TryLoadFunc(dev, "vkCmdDrawIndirectByteCountEXT", out addr)) {
			vkCmdDrawIndirectByteCountEXT =
				(delegate* unmanaged<Vk.Handle<Vk.CommandBuffer>, uint, uint, Vk.Handle<Vk.Buffer>, Vk.DeviceSize, uint, uint, void>)addr;
		}
		if (TryLoadFunc(dev, "vkCmdSetExclusiveScissorNV", out addr)) {
			vkCmdSetExclusiveScissorNV =
				(delegate* unmanaged<Vk.Handle<Vk.CommandBuffer>, uint, uint, Vk.Rect2D*, void>)addr;
		}
		if (TryLoadFunc(dev, "vkCmdBindShadingRateImageNV", out addr)) {
			vkCmdBindShadingRateImageNV =
				(delegate* unmanaged<Vk.Handle<Vk.CommandBuffer>, Vk.Handle<Vk.ImageView>, Vk.ImageLayout, void>)addr;
		}
		if (TryLoadFunc(dev, "vkCmdSetViewportShadingRatePaletteNV", out addr)) {
			vkCmdSetViewportShadingRatePaletteNV =
				(delegate* unmanaged<Vk.Handle<Vk.CommandBuffer>, uint, uint, Vk.NV.ShadingRatePalette*, void>)addr;
		}
		if (TryLoadFunc(dev, "vkCmdSetCoarseSampleOrderNV", out addr)) {
			vkCmdSetCoarseSampleOrderNV =
				(delegate* unmanaged<Vk.Handle<Vk.CommandBuffer>, Vk.NV.CoarseSampleOrderType, uint, Vk.NV.CoarseSampleOrderCustom*, void>)addr;
		}
		if (TryLoadFunc(dev, "vkCmdDrawMeshTasksNV", out addr)) {
			vkCmdDrawMeshTasksNV =
				(delegate* unmanaged<Vk.Handle<Vk.CommandBuffer>, uint, uint, void>)addr;
		}
		if (TryLoadFunc(dev, "vkCmdDrawMeshTasksIndirectNV", out addr)) {
			vkCmdDrawMeshTasksIndirectNV =
				(delegate* unmanaged<Vk.Handle<Vk.CommandBuffer>, Vk.Handle<Vk.Buffer>, Vk.DeviceSize, uint, uint, void>)addr;
		}
		if (TryLoadFunc(dev, "vkCmdDrawMeshTasksIndirectCountNV", out addr)) {
			vkCmdDrawMeshTasksIndirectCountNV =
				(delegate* unmanaged<Vk.Handle<Vk.CommandBuffer>, Vk.Handle<Vk.Buffer>, Vk.DeviceSize, Vk.Handle<Vk.Buffer>, Vk.DeviceSize, uint, uint, void>)addr;
		}
		if (TryLoadFunc(dev, "vkCompileDeferredNV", out addr)) {
			vkCompileDeferredNV =
				(delegate* unmanaged<Vk.Handle<Vk.Device>, Vk.Handle<Vk.Pipeline>, uint, Vk.Result>)addr;
		}
		if (TryLoadFunc(dev, "vkCreateAccelerationStructureNV", out addr)) {
			vkCreateAccelerationStructureNV =
				(delegate* unmanaged<Vk.Handle<Vk.Device>, Vk.NV.AccelerationStructureCreateInfo*, Vk.AllocationCallbacks*, Vk.Handle<Vk.NV.AccelerationStructure>*, Vk.Result>)addr;
		}
		if (TryLoadFunc(dev, "vkDestroyAccelerationStructureKHR", out addr)) {
			vkDestroyAccelerationStructureKHR =
				(delegate* unmanaged<Vk.Handle<Vk.Device>, Vk.Handle<Vk.KHR.AccelerationStructure>, Vk.AllocationCallbacks*, void>)addr;
		}
		vkDestroyAccelerationStructureNV = vkDestroyAccelerationStructureKHR;
		if ((vkDestroyAccelerationStructureNV == null) && TryLoadFunc(dev, "vkDestroyAccelerationStructureNV", out addr)) {
			vkDestroyAccelerationStructureNV =
				(delegate* unmanaged<Vk.Handle<Vk.Device>, Vk.Handle<Vk.KHR.AccelerationStructure>, Vk.AllocationCallbacks*, void>)addr;
		}
		if (TryLoadFunc(dev, "vkGetAccelerationStructureMemoryRequirementsKHR", out addr)) {
			vkGetAccelerationStructureMemoryRequirementsKHR =
				(delegate* unmanaged<Vk.Handle<Vk.Device>, Vk.KHR.AccelerationStructureMemoryRequirementsInfo*, Vk.MemoryRequirements2*, void>)addr;
		}
		if (TryLoadFunc(dev, "vkGetAccelerationStructureMemoryRequirementsNV", out addr)) {
			vkGetAccelerationStructureMemoryRequirementsNV =
				(delegate* unmanaged<Vk.Handle<Vk.Device>, Vk.NV.AccelerationStructureMemoryRequirementsInfo*, Vk.KHR.MemoryRequirements2*, void>)addr;
		}
		if (TryLoadFunc(dev, "vkBindAccelerationStructureMemoryKHR", out addr)) {
			vkBindAccelerationStructureMemoryKHR =
				(delegate* unmanaged<Vk.Handle<Vk.Device>, uint, Vk.KHR.BindAccelerationStructureMemoryInfo*, Vk.Result>)addr;
		}
		vkBindAccelerationStructureMemoryNV = vkBindAccelerationStructureMemoryKHR;
		if ((vkBindAccelerationStructureMemoryNV == null) && TryLoadFunc(dev, "vkBindAccelerationStructureMemoryNV", out addr)) {
			vkBindAccelerationStructureMemoryNV =
				(delegate* unmanaged<Vk.Handle<Vk.Device>, uint, Vk.KHR.BindAccelerationStructureMemoryInfo*, Vk.Result>)addr;
		}
		if (TryLoadFunc(dev, "vkCmdCopyAccelerationStructureNV", out addr)) {
			vkCmdCopyAccelerationStructureNV =
				(delegate* unmanaged<Vk.Handle<Vk.CommandBuffer>, Vk.Handle<Vk.KHR.AccelerationStructure>, Vk.Handle<Vk.KHR.AccelerationStructure>, Vk.KHR.CopyAccelerationStructureMode, void>)addr;
		}
		if (TryLoadFunc(dev, "vkCmdCopyAccelerationStructureKHR", out addr)) {
			vkCmdCopyAccelerationStructureKHR =
				(delegate* unmanaged<Vk.Handle<Vk.CommandBuffer>, Vk.KHR.CopyAccelerationStructureInfo*, void>)addr;
		}
		if (TryLoadFunc(dev, "vkCopyAccelerationStructureKHR", out addr)) {
			vkCopyAccelerationStructureKHR =
				(delegate* unmanaged<Vk.Handle<Vk.Device>, Vk.KHR.CopyAccelerationStructureInfo*, Vk.Result>)addr;
		}
		if (TryLoadFunc(dev, "vkCmdCopyAccelerationStructureToMemoryKHR", out addr)) {
			vkCmdCopyAccelerationStructureToMemoryKHR =
				(delegate* unmanaged<Vk.Handle<Vk.CommandBuffer>, Vk.KHR.CopyAccelerationStructureToMemoryInfo*, void>)addr;
		}
		if (TryLoadFunc(dev, "vkCopyAccelerationStructureToMemoryKHR", out addr)) {
			vkCopyAccelerationStructureToMemoryKHR =
				(delegate* unmanaged<Vk.Handle<Vk.Device>, Vk.KHR.CopyAccelerationStructureToMemoryInfo*, Vk.Result>)addr;
		}
		if (TryLoadFunc(dev, "vkCmdCopyMemoryToAccelerationStructureKHR", out addr)) {
			vkCmdCopyMemoryToAccelerationStructureKHR =
				(delegate* unmanaged<Vk.Handle<Vk.CommandBuffer>, Vk.KHR.CopyMemoryToAccelerationStructureInfo*, void>)addr;
		}
		if (TryLoadFunc(dev, "vkCopyMemoryToAccelerationStructureKHR", out addr)) {
			vkCopyMemoryToAccelerationStructureKHR =
				(delegate* unmanaged<Vk.Handle<Vk.Device>, Vk.KHR.CopyMemoryToAccelerationStructureInfo*, Vk.Result>)addr;
		}
		if (TryLoadFunc(dev, "vkCmdWriteAccelerationStructuresPropertiesKHR", out addr)) {
			vkCmdWriteAccelerationStructuresPropertiesKHR =
				(delegate* unmanaged<Vk.Handle<Vk.CommandBuffer>, uint, Vk.Handle<Vk.KHR.AccelerationStructure>*, Vk.QueryType, Vk.Handle<Vk.QueryPool>, uint, void>)addr;
		}
		vkCmdWriteAccelerationStructuresPropertiesNV = vkCmdWriteAccelerationStructuresPropertiesKHR;
		if ((vkCmdWriteAccelerationStructuresPropertiesNV == null) && TryLoadFunc(dev, "vkCmdWriteAccelerationStructuresPropertiesNV", out addr)) {
			vkCmdWriteAccelerationStructuresPropertiesNV =
				(delegate* unmanaged<Vk.Handle<Vk.CommandBuffer>, uint, Vk.Handle<Vk.KHR.AccelerationStructure>*, Vk.QueryType, Vk.Handle<Vk.QueryPool>, uint, void>)addr;
		}
		if (TryLoadFunc(dev, "vkCmdBuildAccelerationStructureNV", out addr)) {
			vkCmdBuildAccelerationStructureNV =
				(delegate* unmanaged<Vk.Handle<Vk.CommandBuffer>, Vk.NV.AccelerationStructureInfo*, Vk.Handle<Vk.Buffer>, Vk.DeviceSize, Vk.Bool32, Vk.Handle<Vk.KHR.AccelerationStructure>, Vk.Handle<Vk.KHR.AccelerationStructure>, Vk.Handle<Vk.Buffer>, Vk.DeviceSize, void>)addr;
		}
		if (TryLoadFunc(dev, "vkWriteAccelerationStructuresPropertiesKHR", out addr)) {
			vkWriteAccelerationStructuresPropertiesKHR =
				(delegate* unmanaged<Vk.Handle<Vk.Device>, uint, Vk.Handle<Vk.KHR.AccelerationStructure>*, Vk.QueryType, ulong, void*, ulong, Vk.Result>)addr;
		}
		if (TryLoadFunc(dev, "vkCmdTraceRaysKHR", out addr)) {
			vkCmdTraceRaysKHR =
				(delegate* unmanaged<Vk.Handle<Vk.CommandBuffer>, Vk.KHR.StridedBufferRegion*, Vk.KHR.StridedBufferRegion*, Vk.KHR.StridedBufferRegion*, Vk.KHR.StridedBufferRegion*, uint, uint, uint, void>)addr;
		}
		if (TryLoadFunc(dev, "vkCmdTraceRaysNV", out addr)) {
			vkCmdTraceRaysNV =
				(delegate* unmanaged<Vk.Handle<Vk.CommandBuffer>, Vk.Handle<Vk.Buffer>, Vk.DeviceSize, Vk.Handle<Vk.Buffer>, Vk.DeviceSize, Vk.DeviceSize, Vk.Handle<Vk.Buffer>, Vk.DeviceSize, Vk.DeviceSize, Vk.Handle<Vk.Buffer>, Vk.DeviceSize, Vk.DeviceSize, uint, uint, uint, void>)addr;
		}
		if (TryLoadFunc(dev, "vkGetRayTracingShaderGroupHandlesKHR", out addr)) {
			vkGetRayTracingShaderGroupHandlesKHR =
				(delegate* unmanaged<Vk.Handle<Vk.Device>, Vk.Handle<Vk.Pipeline>, uint, uint, ulong, void*, Vk.Result>)addr;
		}
		vkGetRayTracingShaderGroupHandlesNV = vkGetRayTracingShaderGroupHandlesKHR;
		if ((vkGetRayTracingShaderGroupHandlesNV == null) && TryLoadFunc(dev, "vkGetRayTracingShaderGroupHandlesNV", out addr)) {
			vkGetRayTracingShaderGroupHandlesNV =
				(delegate* unmanaged<Vk.Handle<Vk.Device>, Vk.Handle<Vk.Pipeline>, uint, uint, ulong, void*, Vk.Result>)addr;
		}
		if (TryLoadFunc(dev, "vkGetRayTracingCaptureReplayShaderGroupHandlesKHR", out addr)) {
			vkGetRayTracingCaptureReplayShaderGroupHandlesKHR =
				(delegate* unmanaged<Vk.Handle<Vk.Device>, Vk.Handle<Vk.Pipeline>, uint, uint, ulong, void*, Vk.Result>)addr;
		}
		if (TryLoadFunc(dev, "vkGetAccelerationStructureHandleNV", out addr)) {
			vkGetAccelerationStructureHandleNV =
				(delegate* unmanaged<Vk.Handle<Vk.Device>, Vk.Handle<Vk.KHR.AccelerationStructure>, ulong, void*, Vk.Result>)addr;
		}
		if (TryLoadFunc(dev, "vkCreateRayTracingPipelinesNV", out addr)) {
			vkCreateRayTracingPipelinesNV =
				(delegate* unmanaged<Vk.Handle<Vk.Device>, Vk.Handle<Vk.PipelineCache>, uint, Vk.NV.RayTracingPipelineCreateInfo*, Vk.AllocationCallbacks*, Vk.Handle<Vk.Pipeline>*, Vk.Result>)addr;
		}
		if (TryLoadFunc(dev, "vkCreateRayTracingPipelinesKHR", out addr)) {
			vkCreateRayTracingPipelinesKHR =
				(delegate* unmanaged<Vk.Handle<Vk.Device>, Vk.Handle<Vk.PipelineCache>, uint, Vk.KHR.RayTracingPipelineCreateInfo*, Vk.AllocationCallbacks*, Vk.Handle<Vk.Pipeline>*, Vk.Result>)addr;
		}
		if (TryLoadFunc(dev, "vkCmdTraceRaysIndirectKHR", out addr)) {
			vkCmdTraceRaysIndirectKHR =
				(delegate* unmanaged<Vk.Handle<Vk.CommandBuffer>, Vk.KHR.StridedBufferRegion*, Vk.KHR.StridedBufferRegion*, Vk.KHR.StridedBufferRegion*, Vk.KHR.StridedBufferRegion*, Vk.Handle<Vk.Buffer>, Vk.DeviceSize, void>)addr;
		}
		if (TryLoadFunc(dev, "vkGetDeviceAccelerationStructureCompatibilityKHR", out addr)) {
			vkGetDeviceAccelerationStructureCompatibilityKHR =
				(delegate* unmanaged<Vk.Handle<Vk.Device>, Vk.KHR.AccelerationStructureVersion*, Vk.Result>)addr;
		}
		if (TryLoadFunc(dev, "vkGetImageViewHandleNVX", out addr)) {
			vkGetImageViewHandleNVX =
				(delegate* unmanaged<Vk.Handle<Vk.Device>, Vk.NVX.ImageViewHandleInfo*, uint>)addr;
		}
		if (TryLoadFunc(dev, "vkGetImageViewAddressNVX", out addr)) {
			vkGetImageViewAddressNVX =
				(delegate* unmanaged<Vk.Handle<Vk.Device>, Vk.Handle<Vk.ImageView>, Vk.NVX.ImageViewAddressProperties*, Vk.Result>)addr;
		}
		if (TryLoadFunc(dev, "vkGetDeviceGroupSurfacePresentModes2EXT", out addr)) {
			vkGetDeviceGroupSurfacePresentModes2EXT =
				(delegate* unmanaged<Vk.Handle<Vk.Device>, Vk.KHR.PhysicalDeviceSurfaceInfo2*, Vk.KHR.DeviceGroupPresentModeFlags*, Vk.Result>)addr;
		}
		if (TryLoadFunc(dev, "vkAcquireFullScreenExclusiveModeEXT", out addr)) {
			vkAcquireFullScreenExclusiveModeEXT =
				(delegate* unmanaged<Vk.Handle<Vk.Device>, Vk.Handle<Vk.KHR.Swapchain>, Vk.Result>)addr;
		}
		if (TryLoadFunc(dev, "vkReleaseFullScreenExclusiveModeEXT", out addr)) {
			vkReleaseFullScreenExclusiveModeEXT =
				(delegate* unmanaged<Vk.Handle<Vk.Device>, Vk.Handle<Vk.KHR.Swapchain>, Vk.Result>)addr;
		}
		if (TryLoadFunc(dev, "vkAcquireProfilingLockKHR", out addr)) {
			vkAcquireProfilingLockKHR =
				(delegate* unmanaged<Vk.Handle<Vk.Device>, Vk.KHR.AcquireProfilingLockInfo*, Vk.Result>)addr;
		}
		if (TryLoadFunc(dev, "vkReleaseProfilingLockKHR", out addr)) {
			vkReleaseProfilingLockKHR =
				(delegate* unmanaged<Vk.Handle<Vk.Device>, void>)addr;
		}
		if (TryLoadFunc(dev, "vkGetImageDrmFormatModifierPropertiesEXT", out addr)) {
			vkGetImageDrmFormatModifierPropertiesEXT =
				(delegate* unmanaged<Vk.Handle<Vk.Device>, Vk.Handle<Vk.Image>, Vk.EXT.ImageDrmFormatModifierProperties*, Vk.Result>)addr;
		}
		if (version >= V12) {
			vkGetBufferOpaqueCaptureAddress =
				(delegate* unmanaged<Vk.Handle<Vk.Device>, Vk.BufferDeviceAddressInfo*, ulong>)LoadFunc(dev, "vkGetBufferOpaqueCaptureAddress");
		}
		vkGetBufferOpaqueCaptureAddressKHR = vkGetBufferOpaqueCaptureAddress;
		if ((vkGetBufferOpaqueCaptureAddressKHR == null) && TryLoadFunc(dev, "vkGetBufferOpaqueCaptureAddressKHR", out addr)) {
			vkGetBufferOpaqueCaptureAddressKHR =
				(delegate* unmanaged<Vk.Handle<Vk.Device>, Vk.BufferDeviceAddressInfo*, ulong>)addr;
		}
		if (version >= V12) {
			vkGetBufferDeviceAddress =
				(delegate* unmanaged<Vk.Handle<Vk.Device>, Vk.BufferDeviceAddressInfo*, ulong>)LoadFunc(dev, "vkGetBufferDeviceAddress");
		}
		vkGetBufferDeviceAddressKHR = vkGetBufferDeviceAddress;
		if ((vkGetBufferDeviceAddressKHR == null) && TryLoadFunc(dev, "vkGetBufferDeviceAddressKHR", out addr)) {
			vkGetBufferDeviceAddressKHR =
				(delegate* unmanaged<Vk.Handle<Vk.Device>, Vk.BufferDeviceAddressInfo*, ulong>)addr;
		}
		vkGetBufferDeviceAddressEXT = vkGetBufferDeviceAddress;
		if ((vkGetBufferDeviceAddressEXT == null) && TryLoadFunc(dev, "vkGetBufferDeviceAddressEXT", out addr)) {
			vkGetBufferDeviceAddressEXT =
				(delegate* unmanaged<Vk.Handle<Vk.Device>, Vk.BufferDeviceAddressInfo*, ulong>)addr;
		}
		if (TryLoadFunc(dev, "vkInitializePerformanceApiINTEL", out addr)) {
			vkInitializePerformanceApiINTEL =
				(delegate* unmanaged<Vk.Handle<Vk.Device>, Vk.INTEL.InitializePerformanceApiInfo*, Vk.Result>)addr;
		}
		if (TryLoadFunc(dev, "vkUninitializePerformanceApiINTEL", out addr)) {
			vkUninitializePerformanceApiINTEL =
				(delegate* unmanaged<Vk.Handle<Vk.Device>, void>)addr;
		}
		if (TryLoadFunc(dev, "vkCmdSetPerformanceMarkerINTEL", out addr)) {
			vkCmdSetPerformanceMarkerINTEL =
				(delegate* unmanaged<Vk.Handle<Vk.CommandBuffer>, Vk.INTEL.PerformanceMarkerInfo*, Vk.Result>)addr;
		}
		if (TryLoadFunc(dev, "vkCmdSetPerformanceStreamMarkerINTEL", out addr)) {
			vkCmdSetPerformanceStreamMarkerINTEL =
				(delegate* unmanaged<Vk.Handle<Vk.CommandBuffer>, Vk.INTEL.PerformanceStreamMarkerInfo*, Vk.Result>)addr;
		}
		if (TryLoadFunc(dev, "vkCmdSetPerformanceOverrideINTEL", out addr)) {
			vkCmdSetPerformanceOverrideINTEL =
				(delegate* unmanaged<Vk.Handle<Vk.CommandBuffer>, Vk.INTEL.PerformanceOverrideInfo*, Vk.Result>)addr;
		}
		if (TryLoadFunc(dev, "vkAcquirePerformanceConfigurationINTEL", out addr)) {
			vkAcquirePerformanceConfigurationINTEL =
				(delegate* unmanaged<Vk.Handle<Vk.Device>, Vk.INTEL.PerformanceConfigurationAcquireInfo*, Vk.Handle<Vk.INTEL.PerformanceConfiguration>*, Vk.Result>)addr;
		}
		if (TryLoadFunc(dev, "vkReleasePerformanceConfigurationINTEL", out addr)) {
			vkReleasePerformanceConfigurationINTEL =
				(delegate* unmanaged<Vk.Handle<Vk.Device>, Vk.Handle<Vk.INTEL.PerformanceConfiguration>, Vk.Result>)addr;
		}
		if (TryLoadFunc(dev, "vkQueueSetPerformanceConfigurationINTEL", out addr)) {
			vkQueueSetPerformanceConfigurationINTEL =
				(delegate* unmanaged<Vk.Handle<Vk.Queue>, Vk.Handle<Vk.INTEL.PerformanceConfiguration>, Vk.Result>)addr;
		}
		if (TryLoadFunc(dev, "vkGetPerformanceParameterINTEL", out addr)) {
			vkGetPerformanceParameterINTEL =
				(delegate* unmanaged<Vk.Handle<Vk.Device>, Vk.INTEL.PerformanceParameterType, Vk.INTEL.PerformanceValue*, Vk.Result>)addr;
		}
		if (version >= V12) {
			vkGetDeviceMemoryOpaqueCaptureAddress =
				(delegate* unmanaged<Vk.Handle<Vk.Device>, Vk.DeviceMemoryOpaqueCaptureAddressInfo*, ulong>)LoadFunc(dev, "vkGetDeviceMemoryOpaqueCaptureAddress");
		}
		vkGetDeviceMemoryOpaqueCaptureAddressKHR = vkGetDeviceMemoryOpaqueCaptureAddress;
		if ((vkGetDeviceMemoryOpaqueCaptureAddressKHR == null) && TryLoadFunc(dev, "vkGetDeviceMemoryOpaqueCaptureAddressKHR", out addr)) {
			vkGetDeviceMemoryOpaqueCaptureAddressKHR =
				(delegate* unmanaged<Vk.Handle<Vk.Device>, Vk.DeviceMemoryOpaqueCaptureAddressInfo*, ulong>)addr;
		}
		if (TryLoadFunc(dev, "vkGetPipelineExecutablePropertiesKHR", out addr)) {
			vkGetPipelineExecutablePropertiesKHR =
				(delegate* unmanaged<Vk.Handle<Vk.Device>, Vk.KHR.PipelineInfo*, uint*, Vk.KHR.PipelineExecutableProperties*, Vk.Result>)addr;
		}
		if (TryLoadFunc(dev, "vkGetPipelineExecutableStatisticsKHR", out addr)) {
			vkGetPipelineExecutableStatisticsKHR =
				(delegate* unmanaged<Vk.Handle<Vk.Device>, Vk.KHR.PipelineExecutableInfo*, uint*, Vk.KHR.PipelineExecutableStatistic*, Vk.Result>)addr;
		}
		if (TryLoadFunc(dev, "vkGetPipelineExecutableInternalRepresentationsKHR", out addr)) {
			vkGetPipelineExecutableInternalRepresentationsKHR =
				(delegate* unmanaged<Vk.Handle<Vk.Device>, Vk.KHR.PipelineExecutableInfo*, uint*, Vk.KHR.PipelineExecutableInternalRepresentation*, Vk.Result>)addr;
		}
		if (TryLoadFunc(dev, "vkCmdSetLineStippleEXT", out addr)) {
			vkCmdSetLineStippleEXT =
				(delegate* unmanaged<Vk.Handle<Vk.CommandBuffer>, uint, ushort, void>)addr;
		}
		if (TryLoadFunc(dev, "vkCreateAccelerationStructureKHR", out addr)) {
			vkCreateAccelerationStructureKHR =
				(delegate* unmanaged<Vk.Handle<Vk.Device>, Vk.KHR.AccelerationStructureCreateInfo*, Vk.AllocationCallbacks*, Vk.Handle<Vk.KHR.AccelerationStructure>*, Vk.Result>)addr;
		}
		if (TryLoadFunc(dev, "vkCmdBuildAccelerationStructureKHR", out addr)) {
			vkCmdBuildAccelerationStructureKHR =
				(delegate* unmanaged<Vk.Handle<Vk.CommandBuffer>, uint, Vk.KHR.AccelerationStructureBuildGeometryInfo*, Vk.KHR.AccelerationStructureBuildOffsetInfo**, void>)addr;
		}
		if (TryLoadFunc(dev, "vkCmdBuildAccelerationStructureIndirectKHR", out addr)) {
			vkCmdBuildAccelerationStructureIndirectKHR =
				(delegate* unmanaged<Vk.Handle<Vk.CommandBuffer>, Vk.KHR.AccelerationStructureBuildGeometryInfo*, Vk.Handle<Vk.Buffer>, Vk.DeviceSize, uint, void>)addr;
		}
		if (TryLoadFunc(dev, "vkBuildAccelerationStructureKHR", out addr)) {
			vkBuildAccelerationStructureKHR =
				(delegate* unmanaged<Vk.Handle<Vk.Device>, uint, Vk.KHR.AccelerationStructureBuildGeometryInfo*, Vk.KHR.AccelerationStructureBuildOffsetInfo**, Vk.Result>)addr;
		}
		if (TryLoadFunc(dev, "vkGetAccelerationStructureDeviceAddressKHR", out addr)) {
			vkGetAccelerationStructureDeviceAddressKHR =
				(delegate* unmanaged<Vk.Handle<Vk.Device>, Vk.KHR.AccelerationStructureDeviceAddressInfo*, ulong>)addr;
		}
		if (TryLoadFunc(dev, "vkCreateDeferredOperationKHR", out addr)) {
			vkCreateDeferredOperationKHR =
				(delegate* unmanaged<Vk.Handle<Vk.Device>, Vk.AllocationCallbacks*, Vk.Handle<Vk.KHR.DeferredOperation>*, Vk.Result>)addr;
		}
		if (TryLoadFunc(dev, "vkDestroyDeferredOperationKHR", out addr)) {
			vkDestroyDeferredOperationKHR =
				(delegate* unmanaged<Vk.Handle<Vk.Device>, Vk.Handle<Vk.KHR.DeferredOperation>, Vk.AllocationCallbacks*, void>)addr;
		}
		if (TryLoadFunc(dev, "vkGetDeferredOperationMaxConcurrencyKHR", out addr)) {
			vkGetDeferredOperationMaxConcurrencyKHR =
				(delegate* unmanaged<Vk.Handle<Vk.Device>, Vk.Handle<Vk.KHR.DeferredOperation>, uint>)addr;
		}
		if (TryLoadFunc(dev, "vkGetDeferredOperationResultKHR", out addr)) {
			vkGetDeferredOperationResultKHR =
				(delegate* unmanaged<Vk.Handle<Vk.Device>, Vk.Handle<Vk.KHR.DeferredOperation>, Vk.Result>)addr;
		}
		if (TryLoadFunc(dev, "vkDeferredOperationJoinKHR", out addr)) {
			vkDeferredOperationJoinKHR =
				(delegate* unmanaged<Vk.Handle<Vk.Device>, Vk.Handle<Vk.KHR.DeferredOperation>, Vk.Result>)addr;
		}
		if (TryLoadFunc(dev, "vkCmdSetCullModeEXT", out addr)) {
			vkCmdSetCullModeEXT =
				(delegate* unmanaged<Vk.Handle<Vk.CommandBuffer>, Vk.CullModeFlags, void>)addr;
		}
		if (TryLoadFunc(dev, "vkCmdSetFrontFaceEXT", out addr)) {
			vkCmdSetFrontFaceEXT =
				(delegate* unmanaged<Vk.Handle<Vk.CommandBuffer>, Vk.FrontFace, void>)addr;
		}
		if (TryLoadFunc(dev, "vkCmdSetPrimitiveTopologyEXT", out addr)) {
			vkCmdSetPrimitiveTopologyEXT =
				(delegate* unmanaged<Vk.Handle<Vk.CommandBuffer>, Vk.PrimitiveTopology, void>)addr;
		}
		if (TryLoadFunc(dev, "vkCmdSetViewportWithCountEXT", out addr)) {
			vkCmdSetViewportWithCountEXT =
				(delegate* unmanaged<Vk.Handle<Vk.CommandBuffer>, uint, Vk.Viewport*, void>)addr;
		}
		if (TryLoadFunc(dev, "vkCmdSetScissorWithCountEXT", out addr)) {
			vkCmdSetScissorWithCountEXT =
				(delegate* unmanaged<Vk.Handle<Vk.CommandBuffer>, uint, Vk.Rect2D*, void>)addr;
		}
		if (TryLoadFunc(dev, "vkCmdBindVertexBuffers2EXT", out addr)) {
			vkCmdBindVertexBuffers2EXT =
				(delegate* unmanaged<Vk.Handle<Vk.CommandBuffer>, uint, uint, Vk.Handle<Vk.Buffer>*, Vk.DeviceSize*, Vk.DeviceSize*, Vk.DeviceSize*, void>)addr;
		}
		if (TryLoadFunc(dev, "vkCmdSetDepthTestEnableEXT", out addr)) {
			vkCmdSetDepthTestEnableEXT =
				(delegate* unmanaged<Vk.Handle<Vk.CommandBuffer>, Vk.Bool32, void>)addr;
		}
		if (TryLoadFunc(dev, "vkCmdSetDepthWriteEnableEXT", out addr)) {
			vkCmdSetDepthWriteEnableEXT =
				(delegate* unmanaged<Vk.Handle<Vk.CommandBuffer>, Vk.Bool32, void>)addr;
		}
		if (TryLoadFunc(dev, "vkCmdSetDepthCompareOpEXT", out addr)) {
			vkCmdSetDepthCompareOpEXT =
				(delegate* unmanaged<Vk.Handle<Vk.CommandBuffer>, Vk.CompareOp, void>)addr;
		}
		if (TryLoadFunc(dev, "vkCmdSetDepthBoundsTestEnableEXT", out addr)) {
			vkCmdSetDepthBoundsTestEnableEXT =
				(delegate* unmanaged<Vk.Handle<Vk.CommandBuffer>, Vk.Bool32, void>)addr;
		}
		if (TryLoadFunc(dev, "vkCmdSetStencilTestEnableEXT", out addr)) {
			vkCmdSetStencilTestEnableEXT =
				(delegate* unmanaged<Vk.Handle<Vk.CommandBuffer>, Vk.Bool32, void>)addr;
		}
		if (TryLoadFunc(dev, "vkCmdSetStencilOpEXT", out addr)) {
			vkCmdSetStencilOpEXT =
				(delegate* unmanaged<Vk.Handle<Vk.CommandBuffer>, Vk.StencilFaceFlags, Vk.StencilOp, Vk.StencilOp, Vk.StencilOp, Vk.CompareOp, void>)addr;
		}
		if (TryLoadFunc(dev, "vkCreatePrivateDataSlotEXT", out addr)) {
			vkCreatePrivateDataSlotEXT =
				(delegate* unmanaged<Vk.Handle<Vk.Device>, Vk.EXT.PrivateDataSlotCreateInfo*, Vk.AllocationCallbacks*, Vk.Handle<Vk.EXT.PrivateDataSlot>*, Vk.Result>)addr;
		}
		if (TryLoadFunc(dev, "vkDestroyPrivateDataSlotEXT", out addr)) {
			vkDestroyPrivateDataSlotEXT =
				(delegate* unmanaged<Vk.Handle<Vk.Device>, Vk.Handle<Vk.EXT.PrivateDataSlot>, Vk.AllocationCallbacks*, void>)addr;
		}
		if (TryLoadFunc(dev, "vkSetPrivateDataEXT", out addr)) {
			vkSetPrivateDataEXT =
				(delegate* unmanaged<Vk.Handle<Vk.Device>, Vk.ObjectType, ulong, Vk.Handle<Vk.EXT.PrivateDataSlot>, ulong, Vk.Result>)addr;
		}
		if (TryLoadFunc(dev, "vkGetPrivateDataEXT", out addr)) {
			vkGetPrivateDataEXT =
				(delegate* unmanaged<Vk.Handle<Vk.Device>, Vk.ObjectType, ulong, Vk.Handle<Vk.EXT.PrivateDataSlot>, ulong*, void>)addr;
		}
		if (TryLoadFunc(dev, "vkCmdCopyBuffer2KHR", out addr)) {
			vkCmdCopyBuffer2KHR =
				(delegate* unmanaged<Vk.Handle<Vk.CommandBuffer>, Vk.KHR.CopyBufferInfo2*, void>)addr;
		}
		if (TryLoadFunc(dev, "vkCmdCopyImage2KHR", out addr)) {
			vkCmdCopyImage2KHR =
				(delegate* unmanaged<Vk.Handle<Vk.CommandBuffer>, Vk.KHR.CopyImageInfo2*, void>)addr;
		}
		if (TryLoadFunc(dev, "vkCmdBlitImage2KHR", out addr)) {
			vkCmdBlitImage2KHR =
				(delegate* unmanaged<Vk.Handle<Vk.CommandBuffer>, Vk.KHR.BlitImageInfo2*, void>)addr;
		}
		if (TryLoadFunc(dev, "vkCmdCopyBufferToImage2KHR", out addr)) {
			vkCmdCopyBufferToImage2KHR =
				(delegate* unmanaged<Vk.Handle<Vk.CommandBuffer>, Vk.KHR.CopyBufferToImageInfo2*, void>)addr;
		}
		if (TryLoadFunc(dev, "vkCmdCopyImageToBuffer2KHR", out addr)) {
			vkCmdCopyImageToBuffer2KHR =
				(delegate* unmanaged<Vk.Handle<Vk.CommandBuffer>, Vk.KHR.CopyImageToBufferInfo2*, void>)addr;
		}
		if (TryLoadFunc(dev, "vkCmdResolveImage2KHR", out addr)) {
			vkCmdResolveImage2KHR =
				(delegate* unmanaged<Vk.Handle<Vk.CommandBuffer>, Vk.KHR.ResolveImageInfo2*, void>)addr;
		}
		if (TryLoadFunc(dev, "vkCmdSetFragmentShadingRateKHR", out addr)) {
			vkCmdSetFragmentShadingRateKHR =
				(delegate* unmanaged<Vk.Handle<Vk.CommandBuffer>, Vk.Extent2D*, Vk.KHR.FragmentShadingRateCombinerOp*, void>)addr;
		}
	}

}

} // namespace Vk
