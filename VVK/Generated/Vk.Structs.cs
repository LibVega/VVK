/*
 * MIT License - Copyright(c) 2020 Sean Moss
 * This file is subject to the terms and conditions of the MIT License, the text of which can be found in the 'LICENSE'
 * file at the root of this repository, or online at<https://opensource.org/licenses/MIT>.
 */

/// This file was generated by VVKGen. Edits to this file will be lost on next generation.

using System;
using System.Runtime.InteropServices;
using System.Runtime.CompilerServices;


namespace Vk
{

[StructLayout(LayoutKind.Sequential)]
public unsafe partial struct BaseOutStructure
{
	public const Vk.StructureType TYPE = (Vk.StructureType)0x7FFFFFFF;

	public Vk.StructureType sType;
	public Vk.BaseOutStructure* pNext;

	/// <summary>Creates a new BaseOutStructure value with the correct type field.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void New(out BaseOutStructure value) => value = new() { sType = TYPE };
	/// <summary>Initializes the sType and pNext fields to the correct default values.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void Init(ref BaseOutStructure value) { value.sType = TYPE; value.pNext = null; }
}

[StructLayout(LayoutKind.Sequential)]
public unsafe partial struct BaseInStructure
{
	public const Vk.StructureType TYPE = (Vk.StructureType)0x7FFFFFFF;

	public Vk.StructureType sType;
	public Vk.BaseInStructure* pNext;

	/// <summary>Creates a new BaseInStructure value with the correct type field.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void New(out BaseInStructure value) => value = new() { sType = TYPE };
	/// <summary>Initializes the sType and pNext fields to the correct default values.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void Init(ref BaseInStructure value) { value.sType = TYPE; value.pNext = null; }
}

[StructLayout(LayoutKind.Sequential)]
public unsafe partial struct Offset2D
{
	public int X;
	public int Y;
}

[StructLayout(LayoutKind.Sequential)]
public unsafe partial struct Offset3D
{
	public int X;
	public int Y;
	public int Z;
}

[StructLayout(LayoutKind.Sequential)]
public unsafe partial struct Extent2D
{
	public uint Width;
	public uint Height;
}

[StructLayout(LayoutKind.Sequential)]
public unsafe partial struct Extent3D
{
	public uint Width;
	public uint Height;
	public uint Depth;
}

[StructLayout(LayoutKind.Sequential)]
public unsafe partial struct Viewport
{
	public float X;
	public float Y;
	public float Width;
	public float Height;
	public float MinDepth;
	public float MaxDepth;
}

[StructLayout(LayoutKind.Sequential)]
public unsafe partial struct Rect2D
{
	public Vk.Offset2D Offset;
	public Vk.Extent2D Extent;
}

[StructLayout(LayoutKind.Sequential)]
public unsafe partial struct ClearRect
{
	public Vk.Rect2D Rect;
	public uint BaseArrayLayer;
	public uint LayerCount;
}

[StructLayout(LayoutKind.Sequential)]
public unsafe partial struct ComponentMapping
{
	public Vk.ComponentSwizzle R;
	public Vk.ComponentSwizzle G;
	public Vk.ComponentSwizzle B;
	public Vk.ComponentSwizzle A;
}

[StructLayout(LayoutKind.Sequential)]
public unsafe partial struct PhysicalDeviceProperties
{
	public uint ApiVersion;
	public uint DriverVersion;
	public uint VendorID;
	public uint DeviceID;
	public Vk.PhysicalDeviceType DeviceType;
	public Vk.FixedString DeviceName;
	public Vk.UUID PipelineCacheUUID;
	public Vk.PhysicalDeviceLimits Limits;
	public Vk.PhysicalDeviceSparseProperties SparseProperties;
}

[StructLayout(LayoutKind.Sequential)]
public unsafe partial struct ExtensionProperties
{
	public Vk.FixedString ExtensionName;
	public uint SpecVersion;
}

[StructLayout(LayoutKind.Sequential)]
public unsafe partial struct LayerProperties
{
	public Vk.FixedString LayerName;
	public uint SpecVersion;
	public uint ImplementationVersion;
	public Vk.FixedString Description;
}

[StructLayout(LayoutKind.Sequential)]
public unsafe partial struct ApplicationInfo
{
	public const Vk.StructureType TYPE = Vk.StructureType.ApplicationInfo;

	public Vk.StructureType sType;
	public void* pNext;
	public byte* ApplicationName;
	public uint ApplicationVersion;
	public byte* EngineName;
	public uint EngineVersion;
	public uint ApiVersion;

	/// <summary>Creates a new ApplicationInfo value with the correct type field.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void New(out ApplicationInfo value) => value = new() { sType = TYPE };
	/// <summary>Initializes the sType and pNext fields to the correct default values.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void Init(ref ApplicationInfo value) { value.sType = TYPE; value.pNext = null; }
}

[StructLayout(LayoutKind.Sequential)]
public unsafe partial struct AllocationCallbacks
{
	public void* UserData;
	public delegate* managed<void*, ulong, ulong, Vk.SystemAllocationScope, void*> Allocation;
	public delegate* managed<void*, void*, ulong, ulong, Vk.SystemAllocationScope, void*> Reallocation;
	public delegate* managed<void*, void*, void> Free;
	public delegate* managed<void*, ulong, Vk.InternalAllocationType, Vk.SystemAllocationScope, void> InternalAllocation;
	public delegate* managed<void*, ulong, Vk.InternalAllocationType, Vk.SystemAllocationScope, void> InternalFree;
}

[StructLayout(LayoutKind.Sequential)]
public unsafe partial struct DeviceQueueCreateInfo
{
	public const Vk.StructureType TYPE = Vk.StructureType.DeviceQueueCreateInfo;

	public Vk.StructureType sType;
	public void* pNext;
	public Vk.DeviceQueueCreateFlags Flags;
	public uint QueueFamilyIndex;
	public uint QueueCount;
	public float* QueuePriorities;

	/// <summary>Creates a new DeviceQueueCreateInfo value with the correct type field.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void New(out DeviceQueueCreateInfo value) => value = new() { sType = TYPE };
	/// <summary>Initializes the sType and pNext fields to the correct default values.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void Init(ref DeviceQueueCreateInfo value) { value.sType = TYPE; value.pNext = null; }
}

[StructLayout(LayoutKind.Sequential)]
public unsafe partial struct DeviceCreateInfo
{
	public const Vk.StructureType TYPE = Vk.StructureType.DeviceCreateInfo;

	public Vk.StructureType sType;
	public void* pNext;
	public Vk.DeviceCreateFlags Flags;
	public uint QueueCreateInfoCount;
	public Vk.DeviceQueueCreateInfo* QueueCreateInfos;
	public uint EnabledLayerCount;
	public byte** EnabledLayerNames;
	public uint EnabledExtensionCount;
	public byte** EnabledExtensionNames;
	public Vk.PhysicalDeviceFeatures* EnabledFeatures;

	/// <summary>Creates a new DeviceCreateInfo value with the correct type field.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void New(out DeviceCreateInfo value) => value = new() { sType = TYPE };
	/// <summary>Initializes the sType and pNext fields to the correct default values.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void Init(ref DeviceCreateInfo value) { value.sType = TYPE; value.pNext = null; }
}

[StructLayout(LayoutKind.Sequential)]
public unsafe partial struct InstanceCreateInfo
{
	public const Vk.StructureType TYPE = Vk.StructureType.InstanceCreateInfo;

	public Vk.StructureType sType;
	public void* pNext;
	public Vk.InstanceCreateFlags Flags;
	public Vk.ApplicationInfo* ApplicationInfo;
	public uint EnabledLayerCount;
	public byte** EnabledLayerNames;
	public uint EnabledExtensionCount;
	public byte** EnabledExtensionNames;

	/// <summary>Creates a new InstanceCreateInfo value with the correct type field.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void New(out InstanceCreateInfo value) => value = new() { sType = TYPE };
	/// <summary>Initializes the sType and pNext fields to the correct default values.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void Init(ref InstanceCreateInfo value) { value.sType = TYPE; value.pNext = null; }
}

[StructLayout(LayoutKind.Sequential)]
public unsafe partial struct QueueFamilyProperties
{
	public Vk.QueueFlags QueueFlags;
	public uint QueueCount;
	public uint TimestampValidBits;
	public Vk.Extent3D MinImageTransferGranularity;
}

[StructLayout(LayoutKind.Sequential)]
public unsafe partial struct PhysicalDeviceMemoryProperties
{
	public uint MemoryTypeCount;
	public Vk.MemoryType MemoryTypes_0;
	public Vk.MemoryType MemoryTypes_1;
	public Vk.MemoryType MemoryTypes_2;
	public Vk.MemoryType MemoryTypes_3;
	public Vk.MemoryType MemoryTypes_4;
	public Vk.MemoryType MemoryTypes_5;
	public Vk.MemoryType MemoryTypes_6;
	public Vk.MemoryType MemoryTypes_7;
	public Vk.MemoryType MemoryTypes_8;
	public Vk.MemoryType MemoryTypes_9;
	public Vk.MemoryType MemoryTypes_10;
	public Vk.MemoryType MemoryTypes_11;
	public Vk.MemoryType MemoryTypes_12;
	public Vk.MemoryType MemoryTypes_13;
	public Vk.MemoryType MemoryTypes_14;
	public Vk.MemoryType MemoryTypes_15;
	public Vk.MemoryType MemoryTypes_16;
	public Vk.MemoryType MemoryTypes_17;
	public Vk.MemoryType MemoryTypes_18;
	public Vk.MemoryType MemoryTypes_19;
	public Vk.MemoryType MemoryTypes_20;
	public Vk.MemoryType MemoryTypes_21;
	public Vk.MemoryType MemoryTypes_22;
	public Vk.MemoryType MemoryTypes_23;
	public Vk.MemoryType MemoryTypes_24;
	public Vk.MemoryType MemoryTypes_25;
	public Vk.MemoryType MemoryTypes_26;
	public Vk.MemoryType MemoryTypes_27;
	public Vk.MemoryType MemoryTypes_28;
	public Vk.MemoryType MemoryTypes_29;
	public Vk.MemoryType MemoryTypes_30;
	public Vk.MemoryType MemoryTypes_31;
	public uint MemoryHeapCount;
	public Vk.MemoryHeap MemoryHeaps_0;
	public Vk.MemoryHeap MemoryHeaps_1;
	public Vk.MemoryHeap MemoryHeaps_2;
	public Vk.MemoryHeap MemoryHeaps_3;
	public Vk.MemoryHeap MemoryHeaps_4;
	public Vk.MemoryHeap MemoryHeaps_5;
	public Vk.MemoryHeap MemoryHeaps_6;
	public Vk.MemoryHeap MemoryHeaps_7;
	public Vk.MemoryHeap MemoryHeaps_8;
	public Vk.MemoryHeap MemoryHeaps_9;
	public Vk.MemoryHeap MemoryHeaps_10;
	public Vk.MemoryHeap MemoryHeaps_11;
	public Vk.MemoryHeap MemoryHeaps_12;
	public Vk.MemoryHeap MemoryHeaps_13;
	public Vk.MemoryHeap MemoryHeaps_14;
	public Vk.MemoryHeap MemoryHeaps_15;
}

[StructLayout(LayoutKind.Sequential)]
public unsafe partial struct MemoryAllocateInfo
{
	public const Vk.StructureType TYPE = Vk.StructureType.MemoryAllocateInfo;

	public Vk.StructureType sType;
	public void* pNext;
	public Vk.DeviceSize AllocationSize;
	public uint MemoryTypeIndex;

	/// <summary>Creates a new MemoryAllocateInfo value with the correct type field.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void New(out MemoryAllocateInfo value) => value = new() { sType = TYPE };
	/// <summary>Initializes the sType and pNext fields to the correct default values.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void Init(ref MemoryAllocateInfo value) { value.sType = TYPE; value.pNext = null; }
}

[StructLayout(LayoutKind.Sequential)]
public unsafe partial struct MemoryRequirements
{
	public Vk.DeviceSize Size;
	public Vk.DeviceSize Alignment;
	public uint MemoryTypeBits;
}

[StructLayout(LayoutKind.Sequential)]
public unsafe partial struct SparseImageFormatProperties
{
	public Vk.ImageAspectFlags AspectMask;
	public Vk.Extent3D ImageGranularity;
	public Vk.SparseImageFormatFlags Flags;
}

[StructLayout(LayoutKind.Sequential)]
public unsafe partial struct SparseImageMemoryRequirements
{
	public Vk.SparseImageFormatProperties FormatProperties;
	public uint ImageMipTailFirstLod;
	public Vk.DeviceSize ImageMipTailSize;
	public Vk.DeviceSize ImageMipTailOffset;
	public Vk.DeviceSize ImageMipTailStride;
}

[StructLayout(LayoutKind.Sequential)]
public unsafe partial struct MemoryType
{
	public Vk.MemoryPropertyFlags PropertyFlags;
	public uint HeapIndex;
}

[StructLayout(LayoutKind.Sequential)]
public unsafe partial struct MemoryHeap
{
	public Vk.DeviceSize Size;
	public Vk.MemoryHeapFlags Flags;
}

[StructLayout(LayoutKind.Sequential)]
public unsafe partial struct MappedMemoryRange
{
	public const Vk.StructureType TYPE = Vk.StructureType.MappedMemoryRange;

	public Vk.StructureType sType;
	public void* pNext;
	public Vk.DeviceMemory Memory;
	public Vk.DeviceSize Offset;
	public Vk.DeviceSize Size;

	/// <summary>Creates a new MappedMemoryRange value with the correct type field.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void New(out MappedMemoryRange value) => value = new() { sType = TYPE };
	/// <summary>Initializes the sType and pNext fields to the correct default values.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void Init(ref MappedMemoryRange value) { value.sType = TYPE; value.pNext = null; }
}

[StructLayout(LayoutKind.Sequential)]
public unsafe partial struct FormatProperties
{
	public Vk.FormatFeatureFlags LinearTilingFeatures;
	public Vk.FormatFeatureFlags OptimalTilingFeatures;
	public Vk.FormatFeatureFlags BufferFeatures;
}

[StructLayout(LayoutKind.Sequential)]
public unsafe partial struct ImageFormatProperties
{
	public Vk.Extent3D MaxExtent;
	public uint MaxMipLevels;
	public uint MaxArrayLayers;
	public Vk.SampleCountFlags SampleCounts;
	public Vk.DeviceSize MaxResourceSize;
}

[StructLayout(LayoutKind.Sequential)]
public unsafe partial struct DescriptorBufferInfo
{
	public Vk.Buffer Buffer;
	public Vk.DeviceSize Offset;
	public Vk.DeviceSize Range;
}

[StructLayout(LayoutKind.Sequential)]
public unsafe partial struct DescriptorImageInfo
{
	public Vk.Sampler Sampler;
	public Vk.ImageView ImageView;
	public Vk.ImageLayout ImageLayout;
}

[StructLayout(LayoutKind.Sequential)]
public unsafe partial struct WriteDescriptorSet
{
	public const Vk.StructureType TYPE = Vk.StructureType.WriteDescriptorSet;

	public Vk.StructureType sType;
	public void* pNext;
	public Vk.DescriptorSet DstSet;
	public uint DstBinding;
	public uint DstArrayElement;
	public uint DescriptorCount;
	public Vk.DescriptorType DescriptorType;
	public Vk.DescriptorImageInfo* ImageInfo;
	public Vk.DescriptorBufferInfo* BufferInfo;
	public Vk.BufferView* TexelBufferView;

	/// <summary>Creates a new WriteDescriptorSet value with the correct type field.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void New(out WriteDescriptorSet value) => value = new() { sType = TYPE };
	/// <summary>Initializes the sType and pNext fields to the correct default values.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void Init(ref WriteDescriptorSet value) { value.sType = TYPE; value.pNext = null; }
}

[StructLayout(LayoutKind.Sequential)]
public unsafe partial struct CopyDescriptorSet
{
	public const Vk.StructureType TYPE = Vk.StructureType.CopyDescriptorSet;

	public Vk.StructureType sType;
	public void* pNext;
	public Vk.DescriptorSet SrcSet;
	public uint SrcBinding;
	public uint SrcArrayElement;
	public Vk.DescriptorSet DstSet;
	public uint DstBinding;
	public uint DstArrayElement;
	public uint DescriptorCount;

	/// <summary>Creates a new CopyDescriptorSet value with the correct type field.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void New(out CopyDescriptorSet value) => value = new() { sType = TYPE };
	/// <summary>Initializes the sType and pNext fields to the correct default values.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void Init(ref CopyDescriptorSet value) { value.sType = TYPE; value.pNext = null; }
}

[StructLayout(LayoutKind.Sequential)]
public unsafe partial struct BufferCreateInfo
{
	public const Vk.StructureType TYPE = Vk.StructureType.BufferCreateInfo;

	public Vk.StructureType sType;
	public void* pNext;
	public Vk.BufferCreateFlags Flags;
	public Vk.DeviceSize Size;
	public Vk.BufferUsageFlags Usage;
	public Vk.SharingMode SharingMode;
	public uint QueueFamilyIndexCount;
	public uint* QueueFamilyIndices;

	/// <summary>Creates a new BufferCreateInfo value with the correct type field.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void New(out BufferCreateInfo value) => value = new() { sType = TYPE };
	/// <summary>Initializes the sType and pNext fields to the correct default values.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void Init(ref BufferCreateInfo value) { value.sType = TYPE; value.pNext = null; }
}

[StructLayout(LayoutKind.Sequential)]
public unsafe partial struct BufferViewCreateInfo
{
	public const Vk.StructureType TYPE = Vk.StructureType.BufferViewCreateInfo;

	public Vk.StructureType sType;
	public void* pNext;
	public Vk.BufferViewCreateFlags Flags;
	public Vk.Buffer Buffer;
	public Vk.Format Format;
	public Vk.DeviceSize Offset;
	public Vk.DeviceSize Range;

	/// <summary>Creates a new BufferViewCreateInfo value with the correct type field.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void New(out BufferViewCreateInfo value) => value = new() { sType = TYPE };
	/// <summary>Initializes the sType and pNext fields to the correct default values.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void Init(ref BufferViewCreateInfo value) { value.sType = TYPE; value.pNext = null; }
}

[StructLayout(LayoutKind.Sequential)]
public unsafe partial struct ImageSubresource
{
	public Vk.ImageAspectFlags AspectMask;
	public uint MipLevel;
	public uint ArrayLayer;
}

[StructLayout(LayoutKind.Sequential)]
public unsafe partial struct ImageSubresourceLayers
{
	public Vk.ImageAspectFlags AspectMask;
	public uint MipLevel;
	public uint BaseArrayLayer;
	public uint LayerCount;
}

[StructLayout(LayoutKind.Sequential)]
public unsafe partial struct ImageSubresourceRange
{
	public Vk.ImageAspectFlags AspectMask;
	public uint BaseMipLevel;
	public uint LevelCount;
	public uint BaseArrayLayer;
	public uint LayerCount;
}

[StructLayout(LayoutKind.Sequential)]
public unsafe partial struct MemoryBarrier
{
	public const Vk.StructureType TYPE = Vk.StructureType.MemoryBarrier;

	public Vk.StructureType sType;
	public void* pNext;
	public Vk.AccessFlags SrcAccessMask;
	public Vk.AccessFlags DstAccessMask;

	/// <summary>Creates a new MemoryBarrier value with the correct type field.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void New(out MemoryBarrier value) => value = new() { sType = TYPE };
	/// <summary>Initializes the sType and pNext fields to the correct default values.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void Init(ref MemoryBarrier value) { value.sType = TYPE; value.pNext = null; }
}

[StructLayout(LayoutKind.Sequential)]
public unsafe partial struct BufferMemoryBarrier
{
	public const Vk.StructureType TYPE = Vk.StructureType.BufferMemoryBarrier;

	public Vk.StructureType sType;
	public void* pNext;
	public Vk.AccessFlags SrcAccessMask;
	public Vk.AccessFlags DstAccessMask;
	public uint SrcQueueFamilyIndex;
	public uint DstQueueFamilyIndex;
	public Vk.Buffer Buffer;
	public Vk.DeviceSize Offset;
	public Vk.DeviceSize Size;

	/// <summary>Creates a new BufferMemoryBarrier value with the correct type field.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void New(out BufferMemoryBarrier value) => value = new() { sType = TYPE };
	/// <summary>Initializes the sType and pNext fields to the correct default values.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void Init(ref BufferMemoryBarrier value) { value.sType = TYPE; value.pNext = null; }
}

[StructLayout(LayoutKind.Sequential)]
public unsafe partial struct ImageMemoryBarrier
{
	public const Vk.StructureType TYPE = Vk.StructureType.ImageMemoryBarrier;

	public Vk.StructureType sType;
	public void* pNext;
	public Vk.AccessFlags SrcAccessMask;
	public Vk.AccessFlags DstAccessMask;
	public Vk.ImageLayout OldLayout;
	public Vk.ImageLayout NewLayout;
	public uint SrcQueueFamilyIndex;
	public uint DstQueueFamilyIndex;
	public Vk.Image Image;
	public Vk.ImageSubresourceRange SubresourceRange;

	/// <summary>Creates a new ImageMemoryBarrier value with the correct type field.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void New(out ImageMemoryBarrier value) => value = new() { sType = TYPE };
	/// <summary>Initializes the sType and pNext fields to the correct default values.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void Init(ref ImageMemoryBarrier value) { value.sType = TYPE; value.pNext = null; }
}

[StructLayout(LayoutKind.Sequential)]
public unsafe partial struct ImageCreateInfo
{
	public const Vk.StructureType TYPE = Vk.StructureType.ImageCreateInfo;

	public Vk.StructureType sType;
	public void* pNext;
	public Vk.ImageCreateFlags Flags;
	public Vk.ImageType ImageType;
	public Vk.Format Format;
	public Vk.Extent3D Extent;
	public uint MipLevels;
	public uint ArrayLayers;
	public Vk.SampleCountFlags Samples;
	public Vk.ImageTiling Tiling;
	public Vk.ImageUsageFlags Usage;
	public Vk.SharingMode SharingMode;
	public uint QueueFamilyIndexCount;
	public uint* QueueFamilyIndices;
	public Vk.ImageLayout InitialLayout;

	/// <summary>Creates a new ImageCreateInfo value with the correct type field.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void New(out ImageCreateInfo value) => value = new() { sType = TYPE };
	/// <summary>Initializes the sType and pNext fields to the correct default values.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void Init(ref ImageCreateInfo value) { value.sType = TYPE; value.pNext = null; }
}

[StructLayout(LayoutKind.Sequential)]
public unsafe partial struct SubresourceLayout
{
	public Vk.DeviceSize Offset;
	public Vk.DeviceSize Size;
	public Vk.DeviceSize RowPitch;
	public Vk.DeviceSize ArrayPitch;
	public Vk.DeviceSize DepthPitch;
}

[StructLayout(LayoutKind.Sequential)]
public unsafe partial struct ImageViewCreateInfo
{
	public const Vk.StructureType TYPE = Vk.StructureType.ImageViewCreateInfo;

	public Vk.StructureType sType;
	public void* pNext;
	public Vk.ImageViewCreateFlags Flags;
	public Vk.Image Image;
	public Vk.ImageViewType ViewType;
	public Vk.Format Format;
	public Vk.ComponentMapping Components;
	public Vk.ImageSubresourceRange SubresourceRange;

	/// <summary>Creates a new ImageViewCreateInfo value with the correct type field.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void New(out ImageViewCreateInfo value) => value = new() { sType = TYPE };
	/// <summary>Initializes the sType and pNext fields to the correct default values.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void Init(ref ImageViewCreateInfo value) { value.sType = TYPE; value.pNext = null; }
}

[StructLayout(LayoutKind.Sequential)]
public unsafe partial struct BufferCopy
{
	public Vk.DeviceSize SrcOffset;
	public Vk.DeviceSize DstOffset;
	public Vk.DeviceSize Size;
}

[StructLayout(LayoutKind.Sequential)]
public unsafe partial struct SparseMemoryBind
{
	public Vk.DeviceSize ResourceOffset;
	public Vk.DeviceSize Size;
	public Vk.DeviceMemory Memory;
	public Vk.DeviceSize MemoryOffset;
	public Vk.SparseMemoryBindFlags Flags;
}

[StructLayout(LayoutKind.Sequential)]
public unsafe partial struct SparseImageMemoryBind
{
	public Vk.ImageSubresource Subresource;
	public Vk.Offset3D Offset;
	public Vk.Extent3D Extent;
	public Vk.DeviceMemory Memory;
	public Vk.DeviceSize MemoryOffset;
	public Vk.SparseMemoryBindFlags Flags;
}

[StructLayout(LayoutKind.Sequential)]
public unsafe partial struct SparseBufferMemoryBindInfo
{
	public Vk.Buffer Buffer;
	public uint BindCount;
	public Vk.SparseMemoryBind* Binds;
}

[StructLayout(LayoutKind.Sequential)]
public unsafe partial struct SparseImageOpaqueMemoryBindInfo
{
	public Vk.Image Image;
	public uint BindCount;
	public Vk.SparseMemoryBind* Binds;
}

[StructLayout(LayoutKind.Sequential)]
public unsafe partial struct SparseImageMemoryBindInfo
{
	public Vk.Image Image;
	public uint BindCount;
	public Vk.SparseImageMemoryBind* Binds;
}

[StructLayout(LayoutKind.Sequential)]
public unsafe partial struct BindSparseInfo
{
	public const Vk.StructureType TYPE = Vk.StructureType.BindSparseInfo;

	public Vk.StructureType sType;
	public void* pNext;
	public uint WaitSemaphoreCount;
	public Vk.Semaphore* WaitSemaphores;
	public uint BufferBindCount;
	public Vk.SparseBufferMemoryBindInfo* BufferBinds;
	public uint ImageOpaqueBindCount;
	public Vk.SparseImageOpaqueMemoryBindInfo* ImageOpaqueBinds;
	public uint ImageBindCount;
	public Vk.SparseImageMemoryBindInfo* ImageBinds;
	public uint SignalSemaphoreCount;
	public Vk.Semaphore* SignalSemaphores;

	/// <summary>Creates a new BindSparseInfo value with the correct type field.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void New(out BindSparseInfo value) => value = new() { sType = TYPE };
	/// <summary>Initializes the sType and pNext fields to the correct default values.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void Init(ref BindSparseInfo value) { value.sType = TYPE; value.pNext = null; }
}

[StructLayout(LayoutKind.Sequential)]
public unsafe partial struct ImageCopy
{
	public Vk.ImageSubresourceLayers SrcSubresource;
	public Vk.Offset3D SrcOffset;
	public Vk.ImageSubresourceLayers DstSubresource;
	public Vk.Offset3D DstOffset;
	public Vk.Extent3D Extent;
}

[StructLayout(LayoutKind.Sequential)]
public unsafe partial struct ImageBlit
{
	public Vk.ImageSubresourceLayers SrcSubresource;
	public Vk.Offset3D SrcOffsets_0;
	public Vk.Offset3D SrcOffsets_1;
	public Vk.ImageSubresourceLayers DstSubresource;
	public Vk.Offset3D DstOffsets_0;
	public Vk.Offset3D DstOffsets_1;
}

[StructLayout(LayoutKind.Sequential)]
public unsafe partial struct BufferImageCopy
{
	public Vk.DeviceSize BufferOffset;
	public uint BufferRowLength;
	public uint BufferImageHeight;
	public Vk.ImageSubresourceLayers ImageSubresource;
	public Vk.Offset3D ImageOffset;
	public Vk.Extent3D ImageExtent;
}

[StructLayout(LayoutKind.Sequential)]
public unsafe partial struct ImageResolve
{
	public Vk.ImageSubresourceLayers SrcSubresource;
	public Vk.Offset3D SrcOffset;
	public Vk.ImageSubresourceLayers DstSubresource;
	public Vk.Offset3D DstOffset;
	public Vk.Extent3D Extent;
}

[StructLayout(LayoutKind.Sequential)]
public unsafe partial struct ShaderModuleCreateInfo
{
	public const Vk.StructureType TYPE = Vk.StructureType.ShaderModuleCreateInfo;

	public Vk.StructureType sType;
	public void* pNext;
	public Vk.ShaderModuleCreateFlags Flags;
	public ulong CodeSize;
	public uint* Code;

	/// <summary>Creates a new ShaderModuleCreateInfo value with the correct type field.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void New(out ShaderModuleCreateInfo value) => value = new() { sType = TYPE };
	/// <summary>Initializes the sType and pNext fields to the correct default values.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void Init(ref ShaderModuleCreateInfo value) { value.sType = TYPE; value.pNext = null; }
}

[StructLayout(LayoutKind.Sequential)]
public unsafe partial struct DescriptorSetLayoutBinding
{
	public uint Binding;
	public Vk.DescriptorType DescriptorType;
	public uint DescriptorCount;
	public Vk.ShaderStageFlags StageFlags;
	public Vk.Sampler* ImmutableSamplers;
}

[StructLayout(LayoutKind.Sequential)]
public unsafe partial struct DescriptorSetLayoutCreateInfo
{
	public const Vk.StructureType TYPE = Vk.StructureType.DescriptorSetLayoutCreateInfo;

	public Vk.StructureType sType;
	public void* pNext;
	public Vk.DescriptorSetLayoutCreateFlags Flags;
	public uint BindingCount;
	public Vk.DescriptorSetLayoutBinding* Bindings;

	/// <summary>Creates a new DescriptorSetLayoutCreateInfo value with the correct type field.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void New(out DescriptorSetLayoutCreateInfo value) => value = new() { sType = TYPE };
	/// <summary>Initializes the sType and pNext fields to the correct default values.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void Init(ref DescriptorSetLayoutCreateInfo value) { value.sType = TYPE; value.pNext = null; }
}

[StructLayout(LayoutKind.Sequential)]
public unsafe partial struct DescriptorPoolSize
{
	public Vk.DescriptorType Type;
	public uint DescriptorCount;
}

[StructLayout(LayoutKind.Sequential)]
public unsafe partial struct DescriptorPoolCreateInfo
{
	public const Vk.StructureType TYPE = Vk.StructureType.DescriptorPoolCreateInfo;

	public Vk.StructureType sType;
	public void* pNext;
	public Vk.DescriptorPoolCreateFlags Flags;
	public uint MaxSets;
	public uint PoolSizeCount;
	public Vk.DescriptorPoolSize* PoolSizes;

	/// <summary>Creates a new DescriptorPoolCreateInfo value with the correct type field.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void New(out DescriptorPoolCreateInfo value) => value = new() { sType = TYPE };
	/// <summary>Initializes the sType and pNext fields to the correct default values.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void Init(ref DescriptorPoolCreateInfo value) { value.sType = TYPE; value.pNext = null; }
}

[StructLayout(LayoutKind.Sequential)]
public unsafe partial struct DescriptorSetAllocateInfo
{
	public const Vk.StructureType TYPE = Vk.StructureType.DescriptorSetAllocateInfo;

	public Vk.StructureType sType;
	public void* pNext;
	public Vk.DescriptorPool DescriptorPool;
	public uint DescriptorSetCount;
	public Vk.DescriptorSetLayout* SetLayouts;

	/// <summary>Creates a new DescriptorSetAllocateInfo value with the correct type field.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void New(out DescriptorSetAllocateInfo value) => value = new() { sType = TYPE };
	/// <summary>Initializes the sType and pNext fields to the correct default values.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void Init(ref DescriptorSetAllocateInfo value) { value.sType = TYPE; value.pNext = null; }
}

[StructLayout(LayoutKind.Sequential)]
public unsafe partial struct SpecializationMapEntry
{
	public uint ConstantID;
	public uint Offset;
	public ulong Size;
}

[StructLayout(LayoutKind.Sequential)]
public unsafe partial struct SpecializationInfo
{
	public uint MapEntryCount;
	public Vk.SpecializationMapEntry* MapEntries;
	public ulong DataSize;
	public void* Data;
}

[StructLayout(LayoutKind.Sequential)]
public unsafe partial struct PipelineShaderStageCreateInfo
{
	public const Vk.StructureType TYPE = Vk.StructureType.PipelineShaderStageCreateInfo;

	public Vk.StructureType sType;
	public void* pNext;
	public Vk.PipelineShaderStageCreateFlags Flags;
	public Vk.ShaderStageFlags Stage;
	public Vk.ShaderModule Module;
	public byte* Name;
	public Vk.SpecializationInfo* SpecializationInfo;

	/// <summary>Creates a new PipelineShaderStageCreateInfo value with the correct type field.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void New(out PipelineShaderStageCreateInfo value) => value = new() { sType = TYPE };
	/// <summary>Initializes the sType and pNext fields to the correct default values.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void Init(ref PipelineShaderStageCreateInfo value) { value.sType = TYPE; value.pNext = null; }
}

[StructLayout(LayoutKind.Sequential)]
public unsafe partial struct ComputePipelineCreateInfo
{
	public const Vk.StructureType TYPE = Vk.StructureType.ComputePipelineCreateInfo;

	public Vk.StructureType sType;
	public void* pNext;
	public Vk.PipelineCreateFlags Flags;
	public Vk.PipelineShaderStageCreateInfo Stage;
	public Vk.PipelineLayout Layout;
	public Vk.Pipeline BasePipelineHandle;
	public int BasePipelineIndex;

	/// <summary>Creates a new ComputePipelineCreateInfo value with the correct type field.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void New(out ComputePipelineCreateInfo value) => value = new() { sType = TYPE };
	/// <summary>Initializes the sType and pNext fields to the correct default values.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void Init(ref ComputePipelineCreateInfo value) { value.sType = TYPE; value.pNext = null; }
}

[StructLayout(LayoutKind.Sequential)]
public unsafe partial struct VertexInputBindingDescription
{
	public uint Binding;
	public uint Stride;
	public Vk.VertexInputRate InputRate;
}

[StructLayout(LayoutKind.Sequential)]
public unsafe partial struct VertexInputAttributeDescription
{
	public uint Location;
	public uint Binding;
	public Vk.Format Format;
	public uint Offset;
}

[StructLayout(LayoutKind.Sequential)]
public unsafe partial struct PipelineVertexInputStateCreateInfo
{
	public const Vk.StructureType TYPE = Vk.StructureType.PipelineVertexInputStateCreateInfo;

	public Vk.StructureType sType;
	public void* pNext;
	public Vk.PipelineVertexInputStateCreateFlags Flags;
	public uint VertexBindingDescriptionCount;
	public Vk.VertexInputBindingDescription* VertexBindingDescriptions;
	public uint VertexAttributeDescriptionCount;
	public Vk.VertexInputAttributeDescription* VertexAttributeDescriptions;

	/// <summary>Creates a new PipelineVertexInputStateCreateInfo value with the correct type field.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void New(out PipelineVertexInputStateCreateInfo value) => value = new() { sType = TYPE };
	/// <summary>Initializes the sType and pNext fields to the correct default values.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void Init(ref PipelineVertexInputStateCreateInfo value) { value.sType = TYPE; value.pNext = null; }
}

[StructLayout(LayoutKind.Sequential)]
public unsafe partial struct PipelineInputAssemblyStateCreateInfo
{
	public const Vk.StructureType TYPE = Vk.StructureType.PipelineInputAssemblyStateCreateInfo;

	public Vk.StructureType sType;
	public void* pNext;
	public Vk.PipelineInputAssemblyStateCreateFlags Flags;
	public Vk.PrimitiveTopology Topology;
	public Vk.Bool32 PrimitiveRestartEnable;

	/// <summary>Creates a new PipelineInputAssemblyStateCreateInfo value with the correct type field.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void New(out PipelineInputAssemblyStateCreateInfo value) => value = new() { sType = TYPE };
	/// <summary>Initializes the sType and pNext fields to the correct default values.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void Init(ref PipelineInputAssemblyStateCreateInfo value) { value.sType = TYPE; value.pNext = null; }
}

[StructLayout(LayoutKind.Sequential)]
public unsafe partial struct PipelineTessellationStateCreateInfo
{
	public const Vk.StructureType TYPE = Vk.StructureType.PipelineTessellationStateCreateInfo;

	public Vk.StructureType sType;
	public void* pNext;
	public Vk.PipelineTessellationStateCreateFlags Flags;
	public uint PatchControlPoints;

	/// <summary>Creates a new PipelineTessellationStateCreateInfo value with the correct type field.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void New(out PipelineTessellationStateCreateInfo value) => value = new() { sType = TYPE };
	/// <summary>Initializes the sType and pNext fields to the correct default values.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void Init(ref PipelineTessellationStateCreateInfo value) { value.sType = TYPE; value.pNext = null; }
}

[StructLayout(LayoutKind.Sequential)]
public unsafe partial struct PipelineViewportStateCreateInfo
{
	public const Vk.StructureType TYPE = Vk.StructureType.PipelineViewportStateCreateInfo;

	public Vk.StructureType sType;
	public void* pNext;
	public Vk.PipelineViewportStateCreateFlags Flags;
	public uint ViewportCount;
	public Vk.Viewport* Viewports;
	public uint ScissorCount;
	public Vk.Rect2D* Scissors;

	/// <summary>Creates a new PipelineViewportStateCreateInfo value with the correct type field.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void New(out PipelineViewportStateCreateInfo value) => value = new() { sType = TYPE };
	/// <summary>Initializes the sType and pNext fields to the correct default values.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void Init(ref PipelineViewportStateCreateInfo value) { value.sType = TYPE; value.pNext = null; }
}

[StructLayout(LayoutKind.Sequential)]
public unsafe partial struct PipelineRasterizationStateCreateInfo
{
	public const Vk.StructureType TYPE = Vk.StructureType.PipelineRasterizationStateCreateInfo;

	public Vk.StructureType sType;
	public void* pNext;
	public Vk.PipelineRasterizationStateCreateFlags Flags;
	public Vk.Bool32 DepthClampEnable;
	public Vk.Bool32 RasterizerDiscardEnable;
	public Vk.PolygonMode PolygonMode;
	public Vk.CullModeFlags CullMode;
	public Vk.FrontFace FrontFace;
	public Vk.Bool32 DepthBiasEnable;
	public float DepthBiasConstantFactor;
	public float DepthBiasClamp;
	public float DepthBiasSlopeFactor;
	public float LineWidth;

	/// <summary>Creates a new PipelineRasterizationStateCreateInfo value with the correct type field.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void New(out PipelineRasterizationStateCreateInfo value) => value = new() { sType = TYPE };
	/// <summary>Initializes the sType and pNext fields to the correct default values.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void Init(ref PipelineRasterizationStateCreateInfo value) { value.sType = TYPE; value.pNext = null; }
}

[StructLayout(LayoutKind.Sequential)]
public unsafe partial struct PipelineMultisampleStateCreateInfo
{
	public const Vk.StructureType TYPE = Vk.StructureType.PipelineMultisampleStateCreateInfo;

	public Vk.StructureType sType;
	public void* pNext;
	public Vk.PipelineMultisampleStateCreateFlags Flags;
	public Vk.SampleCountFlags RasterizationSamples;
	public Vk.Bool32 SampleShadingEnable;
	public float MinSampleShading;
	public uint* SampleMask;
	public Vk.Bool32 AlphaToCoverageEnable;
	public Vk.Bool32 AlphaToOneEnable;

	/// <summary>Creates a new PipelineMultisampleStateCreateInfo value with the correct type field.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void New(out PipelineMultisampleStateCreateInfo value) => value = new() { sType = TYPE };
	/// <summary>Initializes the sType and pNext fields to the correct default values.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void Init(ref PipelineMultisampleStateCreateInfo value) { value.sType = TYPE; value.pNext = null; }
}

[StructLayout(LayoutKind.Sequential)]
public unsafe partial struct PipelineColorBlendAttachmentState
{
	public Vk.Bool32 BlendEnable;
	public Vk.BlendFactor SrcColorBlendFactor;
	public Vk.BlendFactor DstColorBlendFactor;
	public Vk.BlendOp ColorBlendOp;
	public Vk.BlendFactor SrcAlphaBlendFactor;
	public Vk.BlendFactor DstAlphaBlendFactor;
	public Vk.BlendOp AlphaBlendOp;
	public Vk.ColorComponentFlags ColorWriteMask;
}

[StructLayout(LayoutKind.Sequential)]
public unsafe partial struct PipelineColorBlendStateCreateInfo
{
	public const Vk.StructureType TYPE = Vk.StructureType.PipelineColorBlendStateCreateInfo;

	public Vk.StructureType sType;
	public void* pNext;
	public Vk.PipelineColorBlendStateCreateFlags Flags;
	public Vk.Bool32 LogicOpEnable;
	public Vk.LogicOp LogicOp;
	public uint AttachmentCount;
	public Vk.PipelineColorBlendAttachmentState* Attachments;
	public fixed float BlendConstants[4];

	/// <summary>Creates a new PipelineColorBlendStateCreateInfo value with the correct type field.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void New(out PipelineColorBlendStateCreateInfo value) => value = new() { sType = TYPE };
	/// <summary>Initializes the sType and pNext fields to the correct default values.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void Init(ref PipelineColorBlendStateCreateInfo value) { value.sType = TYPE; value.pNext = null; }
}

[StructLayout(LayoutKind.Sequential)]
public unsafe partial struct PipelineDynamicStateCreateInfo
{
	public const Vk.StructureType TYPE = Vk.StructureType.PipelineDynamicStateCreateInfo;

	public Vk.StructureType sType;
	public void* pNext;
	public Vk.PipelineDynamicStateCreateFlags Flags;
	public uint DynamicStateCount;
	public Vk.DynamicState* DynamicStates;

	/// <summary>Creates a new PipelineDynamicStateCreateInfo value with the correct type field.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void New(out PipelineDynamicStateCreateInfo value) => value = new() { sType = TYPE };
	/// <summary>Initializes the sType and pNext fields to the correct default values.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void Init(ref PipelineDynamicStateCreateInfo value) { value.sType = TYPE; value.pNext = null; }
}

[StructLayout(LayoutKind.Sequential)]
public unsafe partial struct StencilOpState
{
	public Vk.StencilOp FailOp;
	public Vk.StencilOp PassOp;
	public Vk.StencilOp DepthFailOp;
	public Vk.CompareOp CompareOp;
	public uint CompareMask;
	public uint WriteMask;
	public uint Reference;
}

[StructLayout(LayoutKind.Sequential)]
public unsafe partial struct PipelineDepthStencilStateCreateInfo
{
	public const Vk.StructureType TYPE = Vk.StructureType.PipelineDepthStencilStateCreateInfo;

	public Vk.StructureType sType;
	public void* pNext;
	public Vk.PipelineDepthStencilStateCreateFlags Flags;
	public Vk.Bool32 DepthTestEnable;
	public Vk.Bool32 DepthWriteEnable;
	public Vk.CompareOp DepthCompareOp;
	public Vk.Bool32 DepthBoundsTestEnable;
	public Vk.Bool32 StencilTestEnable;
	public Vk.StencilOpState Front;
	public Vk.StencilOpState Back;
	public float MinDepthBounds;
	public float MaxDepthBounds;

	/// <summary>Creates a new PipelineDepthStencilStateCreateInfo value with the correct type field.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void New(out PipelineDepthStencilStateCreateInfo value) => value = new() { sType = TYPE };
	/// <summary>Initializes the sType and pNext fields to the correct default values.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void Init(ref PipelineDepthStencilStateCreateInfo value) { value.sType = TYPE; value.pNext = null; }
}

[StructLayout(LayoutKind.Sequential)]
public unsafe partial struct GraphicsPipelineCreateInfo
{
	public const Vk.StructureType TYPE = Vk.StructureType.GraphicsPipelineCreateInfo;

	public Vk.StructureType sType;
	public void* pNext;
	public Vk.PipelineCreateFlags Flags;
	public uint StageCount;
	public Vk.PipelineShaderStageCreateInfo* Stages;
	public Vk.PipelineVertexInputStateCreateInfo* VertexInputState;
	public Vk.PipelineInputAssemblyStateCreateInfo* InputAssemblyState;
	public Vk.PipelineTessellationStateCreateInfo* TessellationState;
	public Vk.PipelineViewportStateCreateInfo* ViewportState;
	public Vk.PipelineRasterizationStateCreateInfo* RasterizationState;
	public Vk.PipelineMultisampleStateCreateInfo* MultisampleState;
	public Vk.PipelineDepthStencilStateCreateInfo* DepthStencilState;
	public Vk.PipelineColorBlendStateCreateInfo* ColorBlendState;
	public Vk.PipelineDynamicStateCreateInfo* DynamicState;
	public Vk.PipelineLayout Layout;
	public Vk.RenderPass RenderPass;
	public uint Subpass;
	public Vk.Pipeline BasePipelineHandle;
	public int BasePipelineIndex;

	/// <summary>Creates a new GraphicsPipelineCreateInfo value with the correct type field.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void New(out GraphicsPipelineCreateInfo value) => value = new() { sType = TYPE };
	/// <summary>Initializes the sType and pNext fields to the correct default values.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void Init(ref GraphicsPipelineCreateInfo value) { value.sType = TYPE; value.pNext = null; }
}

[StructLayout(LayoutKind.Sequential)]
public unsafe partial struct PipelineCacheCreateInfo
{
	public const Vk.StructureType TYPE = Vk.StructureType.PipelineCacheCreateInfo;

	public Vk.StructureType sType;
	public void* pNext;
	public Vk.PipelineCacheCreateFlags Flags;
	public ulong InitialDataSize;
	public void* InitialData;

	/// <summary>Creates a new PipelineCacheCreateInfo value with the correct type field.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void New(out PipelineCacheCreateInfo value) => value = new() { sType = TYPE };
	/// <summary>Initializes the sType and pNext fields to the correct default values.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void Init(ref PipelineCacheCreateInfo value) { value.sType = TYPE; value.pNext = null; }
}

[StructLayout(LayoutKind.Sequential)]
public unsafe partial struct PushConstantRange
{
	public Vk.ShaderStageFlags StageFlags;
	public uint Offset;
	public uint Size;
}

[StructLayout(LayoutKind.Sequential)]
public unsafe partial struct PipelineLayoutCreateInfo
{
	public const Vk.StructureType TYPE = Vk.StructureType.PipelineLayoutCreateInfo;

	public Vk.StructureType sType;
	public void* pNext;
	public Vk.PipelineLayoutCreateFlags Flags;
	public uint SetLayoutCount;
	public Vk.DescriptorSetLayout* SetLayouts;
	public uint PushConstantRangeCount;
	public Vk.PushConstantRange* PushConstantRanges;

	/// <summary>Creates a new PipelineLayoutCreateInfo value with the correct type field.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void New(out PipelineLayoutCreateInfo value) => value = new() { sType = TYPE };
	/// <summary>Initializes the sType and pNext fields to the correct default values.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void Init(ref PipelineLayoutCreateInfo value) { value.sType = TYPE; value.pNext = null; }
}

[StructLayout(LayoutKind.Sequential)]
public unsafe partial struct SamplerCreateInfo
{
	public const Vk.StructureType TYPE = Vk.StructureType.SamplerCreateInfo;

	public Vk.StructureType sType;
	public void* pNext;
	public Vk.SamplerCreateFlags Flags;
	public Vk.Filter MagFilter;
	public Vk.Filter MinFilter;
	public Vk.SamplerMipmapMode MipmapMode;
	public Vk.SamplerAddressMode AddressModeU;
	public Vk.SamplerAddressMode AddressModeV;
	public Vk.SamplerAddressMode AddressModeW;
	public float MipLodBias;
	public Vk.Bool32 AnisotropyEnable;
	public float MaxAnisotropy;
	public Vk.Bool32 CompareEnable;
	public Vk.CompareOp CompareOp;
	public float MinLod;
	public float MaxLod;
	public Vk.BorderColor BorderColor;
	public Vk.Bool32 UnnormalizedCoordinates;

	/// <summary>Creates a new SamplerCreateInfo value with the correct type field.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void New(out SamplerCreateInfo value) => value = new() { sType = TYPE };
	/// <summary>Initializes the sType and pNext fields to the correct default values.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void Init(ref SamplerCreateInfo value) { value.sType = TYPE; value.pNext = null; }
}

[StructLayout(LayoutKind.Sequential)]
public unsafe partial struct CommandPoolCreateInfo
{
	public const Vk.StructureType TYPE = Vk.StructureType.CommandPoolCreateInfo;

	public Vk.StructureType sType;
	public void* pNext;
	public Vk.CommandPoolCreateFlags Flags;
	public uint QueueFamilyIndex;

	/// <summary>Creates a new CommandPoolCreateInfo value with the correct type field.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void New(out CommandPoolCreateInfo value) => value = new() { sType = TYPE };
	/// <summary>Initializes the sType and pNext fields to the correct default values.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void Init(ref CommandPoolCreateInfo value) { value.sType = TYPE; value.pNext = null; }
}

[StructLayout(LayoutKind.Sequential)]
public unsafe partial struct CommandBufferAllocateInfo
{
	public const Vk.StructureType TYPE = Vk.StructureType.CommandBufferAllocateInfo;

	public Vk.StructureType sType;
	public void* pNext;
	public Vk.CommandPool CommandPool;
	public Vk.CommandBufferLevel Level;
	public uint CommandBufferCount;

	/// <summary>Creates a new CommandBufferAllocateInfo value with the correct type field.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void New(out CommandBufferAllocateInfo value) => value = new() { sType = TYPE };
	/// <summary>Initializes the sType and pNext fields to the correct default values.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void Init(ref CommandBufferAllocateInfo value) { value.sType = TYPE; value.pNext = null; }
}

[StructLayout(LayoutKind.Sequential)]
public unsafe partial struct CommandBufferInheritanceInfo
{
	public const Vk.StructureType TYPE = Vk.StructureType.CommandBufferInheritanceInfo;

	public Vk.StructureType sType;
	public void* pNext;
	public Vk.RenderPass RenderPass;
	public uint Subpass;
	public Vk.Framebuffer Framebuffer;
	public Vk.Bool32 OcclusionQueryEnable;
	public Vk.QueryControlFlags QueryFlags;
	public Vk.QueryPipelineStatisticFlags PipelineStatistics;

	/// <summary>Creates a new CommandBufferInheritanceInfo value with the correct type field.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void New(out CommandBufferInheritanceInfo value) => value = new() { sType = TYPE };
	/// <summary>Initializes the sType and pNext fields to the correct default values.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void Init(ref CommandBufferInheritanceInfo value) { value.sType = TYPE; value.pNext = null; }
}

[StructLayout(LayoutKind.Sequential)]
public unsafe partial struct CommandBufferBeginInfo
{
	public const Vk.StructureType TYPE = Vk.StructureType.CommandBufferBeginInfo;

	public Vk.StructureType sType;
	public void* pNext;
	public Vk.CommandBufferUsageFlags Flags;
	public Vk.CommandBufferInheritanceInfo* InheritanceInfo;

	/// <summary>Creates a new CommandBufferBeginInfo value with the correct type field.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void New(out CommandBufferBeginInfo value) => value = new() { sType = TYPE };
	/// <summary>Initializes the sType and pNext fields to the correct default values.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void Init(ref CommandBufferBeginInfo value) { value.sType = TYPE; value.pNext = null; }
}

[StructLayout(LayoutKind.Sequential)]
public unsafe partial struct RenderPassBeginInfo
{
	public const Vk.StructureType TYPE = Vk.StructureType.RenderPassBeginInfo;

	public Vk.StructureType sType;
	public void* pNext;
	public Vk.RenderPass RenderPass;
	public Vk.Framebuffer Framebuffer;
	public Vk.Rect2D RenderArea;
	public uint ClearValueCount;
	public Vk.ClearValue* ClearValues;

	/// <summary>Creates a new RenderPassBeginInfo value with the correct type field.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void New(out RenderPassBeginInfo value) => value = new() { sType = TYPE };
	/// <summary>Initializes the sType and pNext fields to the correct default values.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void Init(ref RenderPassBeginInfo value) { value.sType = TYPE; value.pNext = null; }
}

[StructLayout(LayoutKind.Explicit)]
public unsafe partial struct ClearColorValue
{
	[FieldOffset(0)] public fixed float Float32[4];
	[FieldOffset(0)] public fixed int Int32[4];
	[FieldOffset(0)] public fixed uint Uint32[4];
}

[StructLayout(LayoutKind.Sequential)]
public unsafe partial struct ClearDepthStencilValue
{
	public float Depth;
	public uint Stencil;
}

[StructLayout(LayoutKind.Explicit)]
public unsafe partial struct ClearValue
{
	[FieldOffset(0)] public Vk.ClearColorValue Color;
	[FieldOffset(0)] public Vk.ClearDepthStencilValue DepthStencil;
}

[StructLayout(LayoutKind.Sequential)]
public unsafe partial struct ClearAttachment
{
	public Vk.ImageAspectFlags AspectMask;
	public uint ColorAttachment;
	public Vk.ClearValue ClearValue;
}

[StructLayout(LayoutKind.Sequential)]
public unsafe partial struct AttachmentDescription
{
	public Vk.AttachmentDescriptionFlags Flags;
	public Vk.Format Format;
	public Vk.SampleCountFlags Samples;
	public Vk.AttachmentLoadOp LoadOp;
	public Vk.AttachmentStoreOp StoreOp;
	public Vk.AttachmentLoadOp StencilLoadOp;
	public Vk.AttachmentStoreOp StencilStoreOp;
	public Vk.ImageLayout InitialLayout;
	public Vk.ImageLayout FinalLayout;
}

[StructLayout(LayoutKind.Sequential)]
public unsafe partial struct AttachmentReference
{
	public uint Attachment;
	public Vk.ImageLayout Layout;
}

[StructLayout(LayoutKind.Sequential)]
public unsafe partial struct SubpassDescription
{
	public Vk.SubpassDescriptionFlags Flags;
	public Vk.PipelineBindPoint PipelineBindPoint;
	public uint InputAttachmentCount;
	public Vk.AttachmentReference* InputAttachments;
	public uint ColorAttachmentCount;
	public Vk.AttachmentReference* ColorAttachments;
	public Vk.AttachmentReference* ResolveAttachments;
	public Vk.AttachmentReference* DepthStencilAttachment;
	public uint PreserveAttachmentCount;
	public uint* PreserveAttachments;
}

[StructLayout(LayoutKind.Sequential)]
public unsafe partial struct SubpassDependency
{
	public uint SrcSubpass;
	public uint DstSubpass;
	public Vk.PipelineStageFlags SrcStageMask;
	public Vk.PipelineStageFlags DstStageMask;
	public Vk.AccessFlags SrcAccessMask;
	public Vk.AccessFlags DstAccessMask;
	public Vk.DependencyFlags DependencyFlags;
}

[StructLayout(LayoutKind.Sequential)]
public unsafe partial struct RenderPassCreateInfo
{
	public const Vk.StructureType TYPE = Vk.StructureType.RenderPassCreateInfo;

	public Vk.StructureType sType;
	public void* pNext;
	public Vk.RenderPassCreateFlags Flags;
	public uint AttachmentCount;
	public Vk.AttachmentDescription* Attachments;
	public uint SubpassCount;
	public Vk.SubpassDescription* Subpasses;
	public uint DependencyCount;
	public Vk.SubpassDependency* Dependencies;

	/// <summary>Creates a new RenderPassCreateInfo value with the correct type field.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void New(out RenderPassCreateInfo value) => value = new() { sType = TYPE };
	/// <summary>Initializes the sType and pNext fields to the correct default values.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void Init(ref RenderPassCreateInfo value) { value.sType = TYPE; value.pNext = null; }
}

[StructLayout(LayoutKind.Sequential)]
public unsafe partial struct EventCreateInfo
{
	public const Vk.StructureType TYPE = Vk.StructureType.EventCreateInfo;

	public Vk.StructureType sType;
	public void* pNext;
	public Vk.EventCreateFlags Flags;

	/// <summary>Creates a new EventCreateInfo value with the correct type field.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void New(out EventCreateInfo value) => value = new() { sType = TYPE };
	/// <summary>Initializes the sType and pNext fields to the correct default values.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void Init(ref EventCreateInfo value) { value.sType = TYPE; value.pNext = null; }
}

[StructLayout(LayoutKind.Sequential)]
public unsafe partial struct FenceCreateInfo
{
	public const Vk.StructureType TYPE = Vk.StructureType.FenceCreateInfo;

	public Vk.StructureType sType;
	public void* pNext;
	public Vk.FenceCreateFlags Flags;

	/// <summary>Creates a new FenceCreateInfo value with the correct type field.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void New(out FenceCreateInfo value) => value = new() { sType = TYPE };
	/// <summary>Initializes the sType and pNext fields to the correct default values.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void Init(ref FenceCreateInfo value) { value.sType = TYPE; value.pNext = null; }
}

[StructLayout(LayoutKind.Sequential)]
public unsafe partial struct PhysicalDeviceFeatures
{
	public Vk.Bool32 RobustBufferAccess;
	public Vk.Bool32 FullDrawIndexUint32;
	public Vk.Bool32 ImageCubeArray;
	public Vk.Bool32 IndependentBlend;
	public Vk.Bool32 GeometryShader;
	public Vk.Bool32 TessellationShader;
	public Vk.Bool32 SampleRateShading;
	public Vk.Bool32 DualSrcBlend;
	public Vk.Bool32 LogicOp;
	public Vk.Bool32 MultiDrawIndirect;
	public Vk.Bool32 DrawIndirectFirstInstance;
	public Vk.Bool32 DepthClamp;
	public Vk.Bool32 DepthBiasClamp;
	public Vk.Bool32 FillModeNonSolid;
	public Vk.Bool32 DepthBounds;
	public Vk.Bool32 WideLines;
	public Vk.Bool32 LargePoints;
	public Vk.Bool32 AlphaToOne;
	public Vk.Bool32 MultiViewport;
	public Vk.Bool32 SamplerAnisotropy;
	public Vk.Bool32 TextureCompressionETC2;
	public Vk.Bool32 TextureCompressionASTC_LDR;
	public Vk.Bool32 TextureCompressionBC;
	public Vk.Bool32 OcclusionQueryPrecise;
	public Vk.Bool32 PipelineStatisticsQuery;
	public Vk.Bool32 VertexPipelineStoresAndAtomics;
	public Vk.Bool32 FragmentStoresAndAtomics;
	public Vk.Bool32 ShaderTessellationAndGeometryPointSize;
	public Vk.Bool32 ShaderImageGatherExtended;
	public Vk.Bool32 ShaderStorageImageExtendedFormats;
	public Vk.Bool32 ShaderStorageImageMultisample;
	public Vk.Bool32 ShaderStorageImageReadWithoutFormat;
	public Vk.Bool32 ShaderStorageImageWriteWithoutFormat;
	public Vk.Bool32 ShaderUniformBufferArrayDynamicIndexing;
	public Vk.Bool32 ShaderSampledImageArrayDynamicIndexing;
	public Vk.Bool32 ShaderStorageBufferArrayDynamicIndexing;
	public Vk.Bool32 ShaderStorageImageArrayDynamicIndexing;
	public Vk.Bool32 ShaderClipDistance;
	public Vk.Bool32 ShaderCullDistance;
	public Vk.Bool32 ShaderFloat64;
	public Vk.Bool32 ShaderInt64;
	public Vk.Bool32 ShaderInt16;
	public Vk.Bool32 ShaderResourceResidency;
	public Vk.Bool32 ShaderResourceMinLod;
	public Vk.Bool32 SparseBinding;
	public Vk.Bool32 SparseResidencyBuffer;
	public Vk.Bool32 SparseResidencyImage2D;
	public Vk.Bool32 SparseResidencyImage3D;
	public Vk.Bool32 SparseResidency2Samples;
	public Vk.Bool32 SparseResidency4Samples;
	public Vk.Bool32 SparseResidency8Samples;
	public Vk.Bool32 SparseResidency16Samples;
	public Vk.Bool32 SparseResidencyAliased;
	public Vk.Bool32 VariableMultisampleRate;
	public Vk.Bool32 InheritedQueries;
}

[StructLayout(LayoutKind.Sequential)]
public unsafe partial struct PhysicalDeviceSparseProperties
{
	public Vk.Bool32 ResidencyStandard2DBlockShape;
	public Vk.Bool32 ResidencyStandard2DMultisampleBlockShape;
	public Vk.Bool32 ResidencyStandard3DBlockShape;
	public Vk.Bool32 ResidencyAlignedMipSize;
	public Vk.Bool32 ResidencyNonResidentStrict;
}

[StructLayout(LayoutKind.Sequential)]
public unsafe partial struct PhysicalDeviceLimits
{
	public uint MaxImageDimension1D;
	public uint MaxImageDimension2D;
	public uint MaxImageDimension3D;
	public uint MaxImageDimensionCube;
	public uint MaxImageArrayLayers;
	public uint MaxTexelBufferElements;
	public uint MaxUniformBufferRange;
	public uint MaxStorageBufferRange;
	public uint MaxPushConstantsSize;
	public uint MaxMemoryAllocationCount;
	public uint MaxSamplerAllocationCount;
	public Vk.DeviceSize BufferImageGranularity;
	public Vk.DeviceSize SparseAddressSpaceSize;
	public uint MaxBoundDescriptorSets;
	public uint MaxPerStageDescriptorSamplers;
	public uint MaxPerStageDescriptorUniformBuffers;
	public uint MaxPerStageDescriptorStorageBuffers;
	public uint MaxPerStageDescriptorSampledImages;
	public uint MaxPerStageDescriptorStorageImages;
	public uint MaxPerStageDescriptorInputAttachments;
	public uint MaxPerStageResources;
	public uint MaxDescriptorSetSamplers;
	public uint MaxDescriptorSetUniformBuffers;
	public uint MaxDescriptorSetUniformBuffersDynamic;
	public uint MaxDescriptorSetStorageBuffers;
	public uint MaxDescriptorSetStorageBuffersDynamic;
	public uint MaxDescriptorSetSampledImages;
	public uint MaxDescriptorSetStorageImages;
	public uint MaxDescriptorSetInputAttachments;
	public uint MaxVertexInputAttributes;
	public uint MaxVertexInputBindings;
	public uint MaxVertexInputAttributeOffset;
	public uint MaxVertexInputBindingStride;
	public uint MaxVertexOutputComponents;
	public uint MaxTessellationGenerationLevel;
	public uint MaxTessellationPatchSize;
	public uint MaxTessellationControlPerVertexInputComponents;
	public uint MaxTessellationControlPerVertexOutputComponents;
	public uint MaxTessellationControlPerPatchOutputComponents;
	public uint MaxTessellationControlTotalOutputComponents;
	public uint MaxTessellationEvaluationInputComponents;
	public uint MaxTessellationEvaluationOutputComponents;
	public uint MaxGeometryShaderInvocations;
	public uint MaxGeometryInputComponents;
	public uint MaxGeometryOutputComponents;
	public uint MaxGeometryOutputVertices;
	public uint MaxGeometryTotalOutputComponents;
	public uint MaxFragmentInputComponents;
	public uint MaxFragmentOutputAttachments;
	public uint MaxFragmentDualSrcAttachments;
	public uint MaxFragmentCombinedOutputResources;
	public uint MaxComputeSharedMemorySize;
	public fixed uint MaxComputeWorkGroupCount[3];
	public uint MaxComputeWorkGroupInvocations;
	public fixed uint MaxComputeWorkGroupSize[3];
	public uint SubPixelPrecisionBits;
	public uint SubTexelPrecisionBits;
	public uint MipmapPrecisionBits;
	public uint MaxDrawIndexedIndexValue;
	public uint MaxDrawIndirectCount;
	public float MaxSamplerLodBias;
	public float MaxSamplerAnisotropy;
	public uint MaxViewports;
	public fixed uint MaxViewportDimensions[2];
	public fixed float ViewportBoundsRange[2];
	public uint ViewportSubPixelBits;
	public ulong MinMemoryMapAlignment;
	public Vk.DeviceSize MinTexelBufferOffsetAlignment;
	public Vk.DeviceSize MinUniformBufferOffsetAlignment;
	public Vk.DeviceSize MinStorageBufferOffsetAlignment;
	public int MinTexelOffset;
	public uint MaxTexelOffset;
	public int MinTexelGatherOffset;
	public uint MaxTexelGatherOffset;
	public float MinInterpolationOffset;
	public float MaxInterpolationOffset;
	public uint SubPixelInterpolationOffsetBits;
	public uint MaxFramebufferWidth;
	public uint MaxFramebufferHeight;
	public uint MaxFramebufferLayers;
	public Vk.SampleCountFlags FramebufferColorSampleCounts;
	public Vk.SampleCountFlags FramebufferDepthSampleCounts;
	public Vk.SampleCountFlags FramebufferStencilSampleCounts;
	public Vk.SampleCountFlags FramebufferNoAttachmentsSampleCounts;
	public uint MaxColorAttachments;
	public Vk.SampleCountFlags SampledImageColorSampleCounts;
	public Vk.SampleCountFlags SampledImageIntegerSampleCounts;
	public Vk.SampleCountFlags SampledImageDepthSampleCounts;
	public Vk.SampleCountFlags SampledImageStencilSampleCounts;
	public Vk.SampleCountFlags StorageImageSampleCounts;
	public uint MaxSampleMaskWords;
	public Vk.Bool32 TimestampComputeAndGraphics;
	public float TimestampPeriod;
	public uint MaxClipDistances;
	public uint MaxCullDistances;
	public uint MaxCombinedClipAndCullDistances;
	public uint DiscreteQueuePriorities;
	public fixed float PointSizeRange[2];
	public fixed float LineWidthRange[2];
	public float PointSizeGranularity;
	public float LineWidthGranularity;
	public Vk.Bool32 StrictLines;
	public Vk.Bool32 StandardSampleLocations;
	public Vk.DeviceSize OptimalBufferCopyOffsetAlignment;
	public Vk.DeviceSize OptimalBufferCopyRowPitchAlignment;
	public Vk.DeviceSize NonCoherentAtomSize;
}

[StructLayout(LayoutKind.Sequential)]
public unsafe partial struct SemaphoreCreateInfo
{
	public const Vk.StructureType TYPE = Vk.StructureType.SemaphoreCreateInfo;

	public Vk.StructureType sType;
	public void* pNext;
	public Vk.SemaphoreCreateFlags Flags;

	/// <summary>Creates a new SemaphoreCreateInfo value with the correct type field.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void New(out SemaphoreCreateInfo value) => value = new() { sType = TYPE };
	/// <summary>Initializes the sType and pNext fields to the correct default values.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void Init(ref SemaphoreCreateInfo value) { value.sType = TYPE; value.pNext = null; }
}

[StructLayout(LayoutKind.Sequential)]
public unsafe partial struct QueryPoolCreateInfo
{
	public const Vk.StructureType TYPE = Vk.StructureType.QueryPoolCreateInfo;

	public Vk.StructureType sType;
	public void* pNext;
	public Vk.QueryPoolCreateFlags Flags;
	public Vk.QueryType QueryType;
	public uint QueryCount;
	public Vk.QueryPipelineStatisticFlags PipelineStatistics;

	/// <summary>Creates a new QueryPoolCreateInfo value with the correct type field.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void New(out QueryPoolCreateInfo value) => value = new() { sType = TYPE };
	/// <summary>Initializes the sType and pNext fields to the correct default values.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void Init(ref QueryPoolCreateInfo value) { value.sType = TYPE; value.pNext = null; }
}

[StructLayout(LayoutKind.Sequential)]
public unsafe partial struct FramebufferCreateInfo
{
	public const Vk.StructureType TYPE = Vk.StructureType.FramebufferCreateInfo;

	public Vk.StructureType sType;
	public void* pNext;
	public Vk.FramebufferCreateFlags Flags;
	public Vk.RenderPass RenderPass;
	public uint AttachmentCount;
	public Vk.ImageView* Attachments;
	public uint Width;
	public uint Height;
	public uint Layers;

	/// <summary>Creates a new FramebufferCreateInfo value with the correct type field.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void New(out FramebufferCreateInfo value) => value = new() { sType = TYPE };
	/// <summary>Initializes the sType and pNext fields to the correct default values.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void Init(ref FramebufferCreateInfo value) { value.sType = TYPE; value.pNext = null; }
}

[StructLayout(LayoutKind.Sequential)]
public unsafe partial struct DrawIndirectCommand
{
	public uint VertexCount;
	public uint InstanceCount;
	public uint FirstVertex;
	public uint FirstInstance;
}

[StructLayout(LayoutKind.Sequential)]
public unsafe partial struct DrawIndexedIndirectCommand
{
	public uint IndexCount;
	public uint InstanceCount;
	public uint FirstIndex;
	public int VertexOffset;
	public uint FirstInstance;
}

[StructLayout(LayoutKind.Sequential)]
public unsafe partial struct DispatchIndirectCommand
{
	public uint X;
	public uint Y;
	public uint Z;
}

[StructLayout(LayoutKind.Sequential)]
public unsafe partial struct SubmitInfo
{
	public const Vk.StructureType TYPE = Vk.StructureType.SubmitInfo;

	public Vk.StructureType sType;
	public void* pNext;
	public uint WaitSemaphoreCount;
	public Vk.Semaphore* WaitSemaphores;
	public Vk.PipelineStageFlags* WaitDstStageMask;
	public uint CommandBufferCount;
	public Vk.CommandBuffer* CommandBuffers;
	public uint SignalSemaphoreCount;
	public Vk.Semaphore* SignalSemaphores;

	/// <summary>Creates a new SubmitInfo value with the correct type field.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void New(out SubmitInfo value) => value = new() { sType = TYPE };
	/// <summary>Initializes the sType and pNext fields to the correct default values.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void Init(ref SubmitInfo value) { value.sType = TYPE; value.pNext = null; }
}

[StructLayout(LayoutKind.Sequential)]
public unsafe partial struct PhysicalDeviceFeatures2
{
	public const Vk.StructureType TYPE = Vk.StructureType.PhysicalDeviceFeatures2;

	public Vk.StructureType sType;
	public void* pNext;
	public Vk.PhysicalDeviceFeatures Features;

	/// <summary>Creates a new PhysicalDeviceFeatures2 value with the correct type field.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void New(out PhysicalDeviceFeatures2 value) => value = new() { sType = TYPE };
	/// <summary>Initializes the sType and pNext fields to the correct default values.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void Init(ref PhysicalDeviceFeatures2 value) { value.sType = TYPE; value.pNext = null; }
}

[StructLayout(LayoutKind.Sequential)]
public unsafe partial struct PhysicalDeviceProperties2
{
	public const Vk.StructureType TYPE = Vk.StructureType.PhysicalDeviceProperties2;

	public Vk.StructureType sType;
	public void* pNext;
	public Vk.PhysicalDeviceProperties Properties;

	/// <summary>Creates a new PhysicalDeviceProperties2 value with the correct type field.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void New(out PhysicalDeviceProperties2 value) => value = new() { sType = TYPE };
	/// <summary>Initializes the sType and pNext fields to the correct default values.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void Init(ref PhysicalDeviceProperties2 value) { value.sType = TYPE; value.pNext = null; }
}

[StructLayout(LayoutKind.Sequential)]
public unsafe partial struct FormatProperties2
{
	public const Vk.StructureType TYPE = Vk.StructureType.FormatProperties2;

	public Vk.StructureType sType;
	public void* pNext;
	public Vk.FormatProperties FormatProperties;

	/// <summary>Creates a new FormatProperties2 value with the correct type field.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void New(out FormatProperties2 value) => value = new() { sType = TYPE };
	/// <summary>Initializes the sType and pNext fields to the correct default values.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void Init(ref FormatProperties2 value) { value.sType = TYPE; value.pNext = null; }
}

[StructLayout(LayoutKind.Sequential)]
public unsafe partial struct ImageFormatProperties2
{
	public const Vk.StructureType TYPE = Vk.StructureType.ImageFormatProperties2;

	public Vk.StructureType sType;
	public void* pNext;
	public Vk.ImageFormatProperties ImageFormatProperties;

	/// <summary>Creates a new ImageFormatProperties2 value with the correct type field.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void New(out ImageFormatProperties2 value) => value = new() { sType = TYPE };
	/// <summary>Initializes the sType and pNext fields to the correct default values.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void Init(ref ImageFormatProperties2 value) { value.sType = TYPE; value.pNext = null; }
}

[StructLayout(LayoutKind.Sequential)]
public unsafe partial struct PhysicalDeviceImageFormatInfo2
{
	public const Vk.StructureType TYPE = Vk.StructureType.PhysicalDeviceImageFormatInfo2;

	public Vk.StructureType sType;
	public void* pNext;
	public Vk.Format Format;
	public Vk.ImageType Type;
	public Vk.ImageTiling Tiling;
	public Vk.ImageUsageFlags Usage;
	public Vk.ImageCreateFlags Flags;

	/// <summary>Creates a new PhysicalDeviceImageFormatInfo2 value with the correct type field.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void New(out PhysicalDeviceImageFormatInfo2 value) => value = new() { sType = TYPE };
	/// <summary>Initializes the sType and pNext fields to the correct default values.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void Init(ref PhysicalDeviceImageFormatInfo2 value) { value.sType = TYPE; value.pNext = null; }
}

[StructLayout(LayoutKind.Sequential)]
public unsafe partial struct QueueFamilyProperties2
{
	public const Vk.StructureType TYPE = Vk.StructureType.QueueFamilyProperties2;

	public Vk.StructureType sType;
	public void* pNext;
	public Vk.QueueFamilyProperties QueueFamilyProperties;

	/// <summary>Creates a new QueueFamilyProperties2 value with the correct type field.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void New(out QueueFamilyProperties2 value) => value = new() { sType = TYPE };
	/// <summary>Initializes the sType and pNext fields to the correct default values.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void Init(ref QueueFamilyProperties2 value) { value.sType = TYPE; value.pNext = null; }
}

[StructLayout(LayoutKind.Sequential)]
public unsafe partial struct PhysicalDeviceMemoryProperties2
{
	public const Vk.StructureType TYPE = Vk.StructureType.PhysicalDeviceMemoryProperties2;

	public Vk.StructureType sType;
	public void* pNext;
	public Vk.PhysicalDeviceMemoryProperties MemoryProperties;

	/// <summary>Creates a new PhysicalDeviceMemoryProperties2 value with the correct type field.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void New(out PhysicalDeviceMemoryProperties2 value) => value = new() { sType = TYPE };
	/// <summary>Initializes the sType and pNext fields to the correct default values.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void Init(ref PhysicalDeviceMemoryProperties2 value) { value.sType = TYPE; value.pNext = null; }
}

[StructLayout(LayoutKind.Sequential)]
public unsafe partial struct SparseImageFormatProperties2
{
	public const Vk.StructureType TYPE = Vk.StructureType.SparseImageFormatProperties2;

	public Vk.StructureType sType;
	public void* pNext;
	public Vk.SparseImageFormatProperties Properties;

	/// <summary>Creates a new SparseImageFormatProperties2 value with the correct type field.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void New(out SparseImageFormatProperties2 value) => value = new() { sType = TYPE };
	/// <summary>Initializes the sType and pNext fields to the correct default values.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void Init(ref SparseImageFormatProperties2 value) { value.sType = TYPE; value.pNext = null; }
}

[StructLayout(LayoutKind.Sequential)]
public unsafe partial struct PhysicalDeviceSparseImageFormatInfo2
{
	public const Vk.StructureType TYPE = Vk.StructureType.PhysicalDeviceSparseImageFormatInfo2;

	public Vk.StructureType sType;
	public void* pNext;
	public Vk.Format Format;
	public Vk.ImageType Type;
	public Vk.SampleCountFlags Samples;
	public Vk.ImageUsageFlags Usage;
	public Vk.ImageTiling Tiling;

	/// <summary>Creates a new PhysicalDeviceSparseImageFormatInfo2 value with the correct type field.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void New(out PhysicalDeviceSparseImageFormatInfo2 value) => value = new() { sType = TYPE };
	/// <summary>Initializes the sType and pNext fields to the correct default values.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void Init(ref PhysicalDeviceSparseImageFormatInfo2 value) { value.sType = TYPE; value.pNext = null; }
}

[StructLayout(LayoutKind.Sequential)]
public unsafe partial struct ConformanceVersion
{
	public byte Major;
	public byte Minor;
	public byte Subminor;
	public byte Patch;
}

[StructLayout(LayoutKind.Sequential)]
public unsafe partial struct PhysicalDeviceDriverProperties
{
	public const Vk.StructureType TYPE = Vk.StructureType.PhysicalDeviceDriverProperties;

	public Vk.StructureType sType;
	public void* pNext;
	public Vk.DriverId DriverID;
	public Vk.FixedString DriverName;
	public Vk.FixedString DriverInfo;
	public Vk.ConformanceVersion ConformanceVersion;

	/// <summary>Creates a new PhysicalDeviceDriverProperties value with the correct type field.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void New(out PhysicalDeviceDriverProperties value) => value = new() { sType = TYPE };
	/// <summary>Initializes the sType and pNext fields to the correct default values.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void Init(ref PhysicalDeviceDriverProperties value) { value.sType = TYPE; value.pNext = null; }
}

[StructLayout(LayoutKind.Sequential)]
public unsafe partial struct PhysicalDeviceVariablePointersFeatures
{
	public const Vk.StructureType TYPE = Vk.StructureType.PhysicalDeviceVariablePointersFeatures;

	public Vk.StructureType sType;
	public void* pNext;
	public Vk.Bool32 VariablePointersStorageBuffer;
	public Vk.Bool32 VariablePointers;

	/// <summary>Creates a new PhysicalDeviceVariablePointersFeatures value with the correct type field.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void New(out PhysicalDeviceVariablePointersFeatures value) => value = new() { sType = TYPE };
	/// <summary>Initializes the sType and pNext fields to the correct default values.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void Init(ref PhysicalDeviceVariablePointersFeatures value) { value.sType = TYPE; value.pNext = null; }
}

[StructLayout(LayoutKind.Sequential)]
public unsafe partial struct PhysicalDeviceVariablePointerFeatures
{
	public const Vk.StructureType TYPE = Vk.StructureType.PhysicalDeviceVariablePointersFeatures;

	public Vk.StructureType sType;
	public void* pNext;
	public Vk.Bool32 VariablePointersStorageBuffer;
	public Vk.Bool32 VariablePointers;

	/// <summary>Creates a new PhysicalDeviceVariablePointerFeatures value with the correct type field.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void New(out PhysicalDeviceVariablePointerFeatures value) => value = new() { sType = TYPE };
	/// <summary>Initializes the sType and pNext fields to the correct default values.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void Init(ref PhysicalDeviceVariablePointerFeatures value) { value.sType = TYPE; value.pNext = null; }
}

[StructLayout(LayoutKind.Sequential)]
public unsafe partial struct ExternalMemoryProperties
{
	public Vk.ExternalMemoryFeatureFlags ExternalMemoryFeatures;
	public Vk.ExternalMemoryHandleTypeFlags ExportFromImportedHandleTypes;
	public Vk.ExternalMemoryHandleTypeFlags CompatibleHandleTypes;
}

[StructLayout(LayoutKind.Sequential)]
public unsafe partial struct PhysicalDeviceExternalImageFormatInfo
{
	public const Vk.StructureType TYPE = Vk.StructureType.PhysicalDeviceExternalImageFormatInfo;

	public Vk.StructureType sType;
	public void* pNext;
	public Vk.ExternalMemoryHandleTypeFlags HandleType;

	/// <summary>Creates a new PhysicalDeviceExternalImageFormatInfo value with the correct type field.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void New(out PhysicalDeviceExternalImageFormatInfo value) => value = new() { sType = TYPE };
	/// <summary>Initializes the sType and pNext fields to the correct default values.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void Init(ref PhysicalDeviceExternalImageFormatInfo value) { value.sType = TYPE; value.pNext = null; }
}

[StructLayout(LayoutKind.Sequential)]
public unsafe partial struct ExternalImageFormatProperties
{
	public const Vk.StructureType TYPE = Vk.StructureType.ExternalImageFormatProperties;

	public Vk.StructureType sType;
	public void* pNext;
	public Vk.ExternalMemoryProperties ExternalMemoryProperties;

	/// <summary>Creates a new ExternalImageFormatProperties value with the correct type field.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void New(out ExternalImageFormatProperties value) => value = new() { sType = TYPE };
	/// <summary>Initializes the sType and pNext fields to the correct default values.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void Init(ref ExternalImageFormatProperties value) { value.sType = TYPE; value.pNext = null; }
}

[StructLayout(LayoutKind.Sequential)]
public unsafe partial struct PhysicalDeviceExternalBufferInfo
{
	public const Vk.StructureType TYPE = Vk.StructureType.PhysicalDeviceExternalBufferInfo;

	public Vk.StructureType sType;
	public void* pNext;
	public Vk.BufferCreateFlags Flags;
	public Vk.BufferUsageFlags Usage;
	public Vk.ExternalMemoryHandleTypeFlags HandleType;

	/// <summary>Creates a new PhysicalDeviceExternalBufferInfo value with the correct type field.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void New(out PhysicalDeviceExternalBufferInfo value) => value = new() { sType = TYPE };
	/// <summary>Initializes the sType and pNext fields to the correct default values.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void Init(ref PhysicalDeviceExternalBufferInfo value) { value.sType = TYPE; value.pNext = null; }
}

[StructLayout(LayoutKind.Sequential)]
public unsafe partial struct ExternalBufferProperties
{
	public const Vk.StructureType TYPE = Vk.StructureType.ExternalBufferProperties;

	public Vk.StructureType sType;
	public void* pNext;
	public Vk.ExternalMemoryProperties ExternalMemoryProperties;

	/// <summary>Creates a new ExternalBufferProperties value with the correct type field.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void New(out ExternalBufferProperties value) => value = new() { sType = TYPE };
	/// <summary>Initializes the sType and pNext fields to the correct default values.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void Init(ref ExternalBufferProperties value) { value.sType = TYPE; value.pNext = null; }
}

[StructLayout(LayoutKind.Sequential)]
public unsafe partial struct PhysicalDeviceIDProperties
{
	public const Vk.StructureType TYPE = Vk.StructureType.PhysicalDeviceIdProperties;

	public Vk.StructureType sType;
	public void* pNext;
	public Vk.UUID DeviceUUID;
	public Vk.UUID DriverUUID;
	public Vk.LUID DeviceLUID;
	public uint DeviceNodeMask;
	public Vk.Bool32 DeviceLUIDValid;

	/// <summary>Creates a new PhysicalDeviceIDProperties value with the correct type field.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void New(out PhysicalDeviceIDProperties value) => value = new() { sType = TYPE };
	/// <summary>Initializes the sType and pNext fields to the correct default values.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void Init(ref PhysicalDeviceIDProperties value) { value.sType = TYPE; value.pNext = null; }
}

[StructLayout(LayoutKind.Sequential)]
public unsafe partial struct ExternalMemoryImageCreateInfo
{
	public const Vk.StructureType TYPE = Vk.StructureType.ExternalMemoryImageCreateInfo;

	public Vk.StructureType sType;
	public void* pNext;
	public Vk.ExternalMemoryHandleTypeFlags HandleTypes;

	/// <summary>Creates a new ExternalMemoryImageCreateInfo value with the correct type field.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void New(out ExternalMemoryImageCreateInfo value) => value = new() { sType = TYPE };
	/// <summary>Initializes the sType and pNext fields to the correct default values.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void Init(ref ExternalMemoryImageCreateInfo value) { value.sType = TYPE; value.pNext = null; }
}

[StructLayout(LayoutKind.Sequential)]
public unsafe partial struct ExternalMemoryBufferCreateInfo
{
	public const Vk.StructureType TYPE = Vk.StructureType.ExternalMemoryBufferCreateInfo;

	public Vk.StructureType sType;
	public void* pNext;
	public Vk.ExternalMemoryHandleTypeFlags HandleTypes;

	/// <summary>Creates a new ExternalMemoryBufferCreateInfo value with the correct type field.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void New(out ExternalMemoryBufferCreateInfo value) => value = new() { sType = TYPE };
	/// <summary>Initializes the sType and pNext fields to the correct default values.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void Init(ref ExternalMemoryBufferCreateInfo value) { value.sType = TYPE; value.pNext = null; }
}

[StructLayout(LayoutKind.Sequential)]
public unsafe partial struct ExportMemoryAllocateInfo
{
	public const Vk.StructureType TYPE = Vk.StructureType.ExportMemoryAllocateInfo;

	public Vk.StructureType sType;
	public void* pNext;
	public Vk.ExternalMemoryHandleTypeFlags HandleTypes;

	/// <summary>Creates a new ExportMemoryAllocateInfo value with the correct type field.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void New(out ExportMemoryAllocateInfo value) => value = new() { sType = TYPE };
	/// <summary>Initializes the sType and pNext fields to the correct default values.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void Init(ref ExportMemoryAllocateInfo value) { value.sType = TYPE; value.pNext = null; }
}

[StructLayout(LayoutKind.Sequential)]
public unsafe partial struct PhysicalDeviceExternalSemaphoreInfo
{
	public const Vk.StructureType TYPE = Vk.StructureType.PhysicalDeviceExternalSemaphoreInfo;

	public Vk.StructureType sType;
	public void* pNext;
	public Vk.ExternalSemaphoreHandleTypeFlags HandleType;

	/// <summary>Creates a new PhysicalDeviceExternalSemaphoreInfo value with the correct type field.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void New(out PhysicalDeviceExternalSemaphoreInfo value) => value = new() { sType = TYPE };
	/// <summary>Initializes the sType and pNext fields to the correct default values.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void Init(ref PhysicalDeviceExternalSemaphoreInfo value) { value.sType = TYPE; value.pNext = null; }
}

[StructLayout(LayoutKind.Sequential)]
public unsafe partial struct ExternalSemaphoreProperties
{
	public const Vk.StructureType TYPE = Vk.StructureType.ExternalSemaphoreProperties;

	public Vk.StructureType sType;
	public void* pNext;
	public Vk.ExternalSemaphoreHandleTypeFlags ExportFromImportedHandleTypes;
	public Vk.ExternalSemaphoreHandleTypeFlags CompatibleHandleTypes;
	public Vk.ExternalSemaphoreFeatureFlags ExternalSemaphoreFeatures;

	/// <summary>Creates a new ExternalSemaphoreProperties value with the correct type field.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void New(out ExternalSemaphoreProperties value) => value = new() { sType = TYPE };
	/// <summary>Initializes the sType and pNext fields to the correct default values.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void Init(ref ExternalSemaphoreProperties value) { value.sType = TYPE; value.pNext = null; }
}

[StructLayout(LayoutKind.Sequential)]
public unsafe partial struct ExportSemaphoreCreateInfo
{
	public const Vk.StructureType TYPE = Vk.StructureType.ExportSemaphoreCreateInfo;

	public Vk.StructureType sType;
	public void* pNext;
	public Vk.ExternalSemaphoreHandleTypeFlags HandleTypes;

	/// <summary>Creates a new ExportSemaphoreCreateInfo value with the correct type field.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void New(out ExportSemaphoreCreateInfo value) => value = new() { sType = TYPE };
	/// <summary>Initializes the sType and pNext fields to the correct default values.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void Init(ref ExportSemaphoreCreateInfo value) { value.sType = TYPE; value.pNext = null; }
}

[StructLayout(LayoutKind.Sequential)]
public unsafe partial struct PhysicalDeviceExternalFenceInfo
{
	public const Vk.StructureType TYPE = Vk.StructureType.PhysicalDeviceExternalFenceInfo;

	public Vk.StructureType sType;
	public void* pNext;
	public Vk.ExternalFenceHandleTypeFlags HandleType;

	/// <summary>Creates a new PhysicalDeviceExternalFenceInfo value with the correct type field.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void New(out PhysicalDeviceExternalFenceInfo value) => value = new() { sType = TYPE };
	/// <summary>Initializes the sType and pNext fields to the correct default values.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void Init(ref PhysicalDeviceExternalFenceInfo value) { value.sType = TYPE; value.pNext = null; }
}

[StructLayout(LayoutKind.Sequential)]
public unsafe partial struct ExternalFenceProperties
{
	public const Vk.StructureType TYPE = Vk.StructureType.ExternalFenceProperties;

	public Vk.StructureType sType;
	public void* pNext;
	public Vk.ExternalFenceHandleTypeFlags ExportFromImportedHandleTypes;
	public Vk.ExternalFenceHandleTypeFlags CompatibleHandleTypes;
	public Vk.ExternalFenceFeatureFlags ExternalFenceFeatures;

	/// <summary>Creates a new ExternalFenceProperties value with the correct type field.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void New(out ExternalFenceProperties value) => value = new() { sType = TYPE };
	/// <summary>Initializes the sType and pNext fields to the correct default values.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void Init(ref ExternalFenceProperties value) { value.sType = TYPE; value.pNext = null; }
}

[StructLayout(LayoutKind.Sequential)]
public unsafe partial struct ExportFenceCreateInfo
{
	public const Vk.StructureType TYPE = Vk.StructureType.ExportFenceCreateInfo;

	public Vk.StructureType sType;
	public void* pNext;
	public Vk.ExternalFenceHandleTypeFlags HandleTypes;

	/// <summary>Creates a new ExportFenceCreateInfo value with the correct type field.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void New(out ExportFenceCreateInfo value) => value = new() { sType = TYPE };
	/// <summary>Initializes the sType and pNext fields to the correct default values.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void Init(ref ExportFenceCreateInfo value) { value.sType = TYPE; value.pNext = null; }
}

[StructLayout(LayoutKind.Sequential)]
public unsafe partial struct PhysicalDeviceMultiviewFeatures
{
	public const Vk.StructureType TYPE = Vk.StructureType.PhysicalDeviceMultiviewFeatures;

	public Vk.StructureType sType;
	public void* pNext;
	public Vk.Bool32 Multiview;
	public Vk.Bool32 MultiviewGeometryShader;
	public Vk.Bool32 MultiviewTessellationShader;

	/// <summary>Creates a new PhysicalDeviceMultiviewFeatures value with the correct type field.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void New(out PhysicalDeviceMultiviewFeatures value) => value = new() { sType = TYPE };
	/// <summary>Initializes the sType and pNext fields to the correct default values.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void Init(ref PhysicalDeviceMultiviewFeatures value) { value.sType = TYPE; value.pNext = null; }
}

[StructLayout(LayoutKind.Sequential)]
public unsafe partial struct PhysicalDeviceMultiviewProperties
{
	public const Vk.StructureType TYPE = Vk.StructureType.PhysicalDeviceMultiviewProperties;

	public Vk.StructureType sType;
	public void* pNext;
	public uint MaxMultiviewViewCount;
	public uint MaxMultiviewInstanceIndex;

	/// <summary>Creates a new PhysicalDeviceMultiviewProperties value with the correct type field.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void New(out PhysicalDeviceMultiviewProperties value) => value = new() { sType = TYPE };
	/// <summary>Initializes the sType and pNext fields to the correct default values.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void Init(ref PhysicalDeviceMultiviewProperties value) { value.sType = TYPE; value.pNext = null; }
}

[StructLayout(LayoutKind.Sequential)]
public unsafe partial struct RenderPassMultiviewCreateInfo
{
	public const Vk.StructureType TYPE = Vk.StructureType.RenderPassMultiviewCreateInfo;

	public Vk.StructureType sType;
	public void* pNext;
	public uint SubpassCount;
	public uint* ViewMasks;
	public uint DependencyCount;
	public int* ViewOffsets;
	public uint CorrelationMaskCount;
	public uint* CorrelationMasks;

	/// <summary>Creates a new RenderPassMultiviewCreateInfo value with the correct type field.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void New(out RenderPassMultiviewCreateInfo value) => value = new() { sType = TYPE };
	/// <summary>Initializes the sType and pNext fields to the correct default values.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void Init(ref RenderPassMultiviewCreateInfo value) { value.sType = TYPE; value.pNext = null; }
}

[StructLayout(LayoutKind.Sequential)]
public unsafe partial struct PhysicalDeviceGroupProperties
{
	public const Vk.StructureType TYPE = Vk.StructureType.PhysicalDeviceGroupProperties;

	public Vk.StructureType sType;
	public void* pNext;
	public uint PhysicalDeviceCount;
	public Vk.PhysicalDevice PhysicalDevices_0;
	public Vk.PhysicalDevice PhysicalDevices_1;
	public Vk.PhysicalDevice PhysicalDevices_2;
	public Vk.PhysicalDevice PhysicalDevices_3;
	public Vk.PhysicalDevice PhysicalDevices_4;
	public Vk.PhysicalDevice PhysicalDevices_5;
	public Vk.PhysicalDevice PhysicalDevices_6;
	public Vk.PhysicalDevice PhysicalDevices_7;
	public Vk.PhysicalDevice PhysicalDevices_8;
	public Vk.PhysicalDevice PhysicalDevices_9;
	public Vk.PhysicalDevice PhysicalDevices_10;
	public Vk.PhysicalDevice PhysicalDevices_11;
	public Vk.PhysicalDevice PhysicalDevices_12;
	public Vk.PhysicalDevice PhysicalDevices_13;
	public Vk.PhysicalDevice PhysicalDevices_14;
	public Vk.PhysicalDevice PhysicalDevices_15;
	public Vk.PhysicalDevice PhysicalDevices_16;
	public Vk.PhysicalDevice PhysicalDevices_17;
	public Vk.PhysicalDevice PhysicalDevices_18;
	public Vk.PhysicalDevice PhysicalDevices_19;
	public Vk.PhysicalDevice PhysicalDevices_20;
	public Vk.PhysicalDevice PhysicalDevices_21;
	public Vk.PhysicalDevice PhysicalDevices_22;
	public Vk.PhysicalDevice PhysicalDevices_23;
	public Vk.PhysicalDevice PhysicalDevices_24;
	public Vk.PhysicalDevice PhysicalDevices_25;
	public Vk.PhysicalDevice PhysicalDevices_26;
	public Vk.PhysicalDevice PhysicalDevices_27;
	public Vk.PhysicalDevice PhysicalDevices_28;
	public Vk.PhysicalDevice PhysicalDevices_29;
	public Vk.PhysicalDevice PhysicalDevices_30;
	public Vk.PhysicalDevice PhysicalDevices_31;
	public Vk.Bool32 SubsetAllocation;

	/// <summary>Creates a new PhysicalDeviceGroupProperties value with the correct type field.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void New(out PhysicalDeviceGroupProperties value) => value = new() { sType = TYPE };
	/// <summary>Initializes the sType and pNext fields to the correct default values.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void Init(ref PhysicalDeviceGroupProperties value) { value.sType = TYPE; value.pNext = null; }
}

[StructLayout(LayoutKind.Sequential)]
public unsafe partial struct MemoryAllocateFlagsInfo
{
	public const Vk.StructureType TYPE = Vk.StructureType.MemoryAllocateFlagsInfo;

	public Vk.StructureType sType;
	public void* pNext;
	public Vk.MemoryAllocateFlags Flags;
	public uint DeviceMask;

	/// <summary>Creates a new MemoryAllocateFlagsInfo value with the correct type field.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void New(out MemoryAllocateFlagsInfo value) => value = new() { sType = TYPE };
	/// <summary>Initializes the sType and pNext fields to the correct default values.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void Init(ref MemoryAllocateFlagsInfo value) { value.sType = TYPE; value.pNext = null; }
}

[StructLayout(LayoutKind.Sequential)]
public unsafe partial struct BindBufferMemoryInfo
{
	public const Vk.StructureType TYPE = Vk.StructureType.BindBufferMemoryInfo;

	public Vk.StructureType sType;
	public void* pNext;
	public Vk.Buffer Buffer;
	public Vk.DeviceMemory Memory;
	public Vk.DeviceSize MemoryOffset;

	/// <summary>Creates a new BindBufferMemoryInfo value with the correct type field.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void New(out BindBufferMemoryInfo value) => value = new() { sType = TYPE };
	/// <summary>Initializes the sType and pNext fields to the correct default values.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void Init(ref BindBufferMemoryInfo value) { value.sType = TYPE; value.pNext = null; }
}

[StructLayout(LayoutKind.Sequential)]
public unsafe partial struct BindBufferMemoryDeviceGroupInfo
{
	public const Vk.StructureType TYPE = Vk.StructureType.BindBufferMemoryDeviceGroupInfo;

	public Vk.StructureType sType;
	public void* pNext;
	public uint DeviceIndexCount;
	public uint* DeviceIndices;

	/// <summary>Creates a new BindBufferMemoryDeviceGroupInfo value with the correct type field.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void New(out BindBufferMemoryDeviceGroupInfo value) => value = new() { sType = TYPE };
	/// <summary>Initializes the sType and pNext fields to the correct default values.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void Init(ref BindBufferMemoryDeviceGroupInfo value) { value.sType = TYPE; value.pNext = null; }
}

[StructLayout(LayoutKind.Sequential)]
public unsafe partial struct BindImageMemoryInfo
{
	public const Vk.StructureType TYPE = Vk.StructureType.BindImageMemoryInfo;

	public Vk.StructureType sType;
	public void* pNext;
	public Vk.Image Image;
	public Vk.DeviceMemory Memory;
	public Vk.DeviceSize MemoryOffset;

	/// <summary>Creates a new BindImageMemoryInfo value with the correct type field.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void New(out BindImageMemoryInfo value) => value = new() { sType = TYPE };
	/// <summary>Initializes the sType and pNext fields to the correct default values.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void Init(ref BindImageMemoryInfo value) { value.sType = TYPE; value.pNext = null; }
}

[StructLayout(LayoutKind.Sequential)]
public unsafe partial struct BindImageMemoryDeviceGroupInfo
{
	public const Vk.StructureType TYPE = Vk.StructureType.BindImageMemoryDeviceGroupInfo;

	public Vk.StructureType sType;
	public void* pNext;
	public uint DeviceIndexCount;
	public uint* DeviceIndices;
	public uint SplitInstanceBindRegionCount;
	public Vk.Rect2D* SplitInstanceBindRegions;

	/// <summary>Creates a new BindImageMemoryDeviceGroupInfo value with the correct type field.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void New(out BindImageMemoryDeviceGroupInfo value) => value = new() { sType = TYPE };
	/// <summary>Initializes the sType and pNext fields to the correct default values.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void Init(ref BindImageMemoryDeviceGroupInfo value) { value.sType = TYPE; value.pNext = null; }
}

[StructLayout(LayoutKind.Sequential)]
public unsafe partial struct DeviceGroupRenderPassBeginInfo
{
	public const Vk.StructureType TYPE = Vk.StructureType.DeviceGroupRenderPassBeginInfo;

	public Vk.StructureType sType;
	public void* pNext;
	public uint DeviceMask;
	public uint DeviceRenderAreaCount;
	public Vk.Rect2D* DeviceRenderAreas;

	/// <summary>Creates a new DeviceGroupRenderPassBeginInfo value with the correct type field.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void New(out DeviceGroupRenderPassBeginInfo value) => value = new() { sType = TYPE };
	/// <summary>Initializes the sType and pNext fields to the correct default values.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void Init(ref DeviceGroupRenderPassBeginInfo value) { value.sType = TYPE; value.pNext = null; }
}

[StructLayout(LayoutKind.Sequential)]
public unsafe partial struct DeviceGroupCommandBufferBeginInfo
{
	public const Vk.StructureType TYPE = Vk.StructureType.DeviceGroupCommandBufferBeginInfo;

	public Vk.StructureType sType;
	public void* pNext;
	public uint DeviceMask;

	/// <summary>Creates a new DeviceGroupCommandBufferBeginInfo value with the correct type field.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void New(out DeviceGroupCommandBufferBeginInfo value) => value = new() { sType = TYPE };
	/// <summary>Initializes the sType and pNext fields to the correct default values.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void Init(ref DeviceGroupCommandBufferBeginInfo value) { value.sType = TYPE; value.pNext = null; }
}

[StructLayout(LayoutKind.Sequential)]
public unsafe partial struct DeviceGroupSubmitInfo
{
	public const Vk.StructureType TYPE = Vk.StructureType.DeviceGroupSubmitInfo;

	public Vk.StructureType sType;
	public void* pNext;
	public uint WaitSemaphoreCount;
	public uint* WaitSemaphoreDeviceIndices;
	public uint CommandBufferCount;
	public uint* CommandBufferDeviceMasks;
	public uint SignalSemaphoreCount;
	public uint* SignalSemaphoreDeviceIndices;

	/// <summary>Creates a new DeviceGroupSubmitInfo value with the correct type field.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void New(out DeviceGroupSubmitInfo value) => value = new() { sType = TYPE };
	/// <summary>Initializes the sType and pNext fields to the correct default values.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void Init(ref DeviceGroupSubmitInfo value) { value.sType = TYPE; value.pNext = null; }
}

[StructLayout(LayoutKind.Sequential)]
public unsafe partial struct DeviceGroupBindSparseInfo
{
	public const Vk.StructureType TYPE = Vk.StructureType.DeviceGroupBindSparseInfo;

	public Vk.StructureType sType;
	public void* pNext;
	public uint ResourceDeviceIndex;
	public uint MemoryDeviceIndex;

	/// <summary>Creates a new DeviceGroupBindSparseInfo value with the correct type field.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void New(out DeviceGroupBindSparseInfo value) => value = new() { sType = TYPE };
	/// <summary>Initializes the sType and pNext fields to the correct default values.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void Init(ref DeviceGroupBindSparseInfo value) { value.sType = TYPE; value.pNext = null; }
}

[StructLayout(LayoutKind.Sequential)]
public unsafe partial struct DeviceGroupDeviceCreateInfo
{
	public const Vk.StructureType TYPE = Vk.StructureType.DeviceGroupDeviceCreateInfo;

	public Vk.StructureType sType;
	public void* pNext;
	public uint PhysicalDeviceCount;
	public Vk.PhysicalDevice* PhysicalDevices;

	/// <summary>Creates a new DeviceGroupDeviceCreateInfo value with the correct type field.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void New(out DeviceGroupDeviceCreateInfo value) => value = new() { sType = TYPE };
	/// <summary>Initializes the sType and pNext fields to the correct default values.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void Init(ref DeviceGroupDeviceCreateInfo value) { value.sType = TYPE; value.pNext = null; }
}

[StructLayout(LayoutKind.Sequential)]
public unsafe partial struct DescriptorUpdateTemplateEntry
{
	public uint DstBinding;
	public uint DstArrayElement;
	public uint DescriptorCount;
	public Vk.DescriptorType DescriptorType;
	public ulong Offset;
	public ulong Stride;
}

[StructLayout(LayoutKind.Sequential)]
public unsafe partial struct DescriptorUpdateTemplateCreateInfo
{
	public const Vk.StructureType TYPE = Vk.StructureType.DescriptorUpdateTemplateCreateInfo;

	public Vk.StructureType sType;
	public void* pNext;
	public Vk.DescriptorUpdateTemplateCreateFlags Flags;
	public uint DescriptorUpdateEntryCount;
	public Vk.DescriptorUpdateTemplateEntry* DescriptorUpdateEntries;
	public Vk.DescriptorUpdateTemplateType TemplateType;
	public Vk.DescriptorSetLayout DescriptorSetLayout;
	public Vk.PipelineBindPoint PipelineBindPoint;
	public Vk.PipelineLayout PipelineLayout;
	public uint Set;

	/// <summary>Creates a new DescriptorUpdateTemplateCreateInfo value with the correct type field.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void New(out DescriptorUpdateTemplateCreateInfo value) => value = new() { sType = TYPE };
	/// <summary>Initializes the sType and pNext fields to the correct default values.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void Init(ref DescriptorUpdateTemplateCreateInfo value) { value.sType = TYPE; value.pNext = null; }
}

[StructLayout(LayoutKind.Sequential)]
public unsafe partial struct InputAttachmentAspectReference
{
	public uint Subpass;
	public uint InputAttachmentIndex;
	public Vk.ImageAspectFlags AspectMask;
}

[StructLayout(LayoutKind.Sequential)]
public unsafe partial struct RenderPassInputAttachmentAspectCreateInfo
{
	public const Vk.StructureType TYPE = Vk.StructureType.RenderPassInputAttachmentAspectCreateInfo;

	public Vk.StructureType sType;
	public void* pNext;
	public uint AspectReferenceCount;
	public Vk.InputAttachmentAspectReference* AspectReferences;

	/// <summary>Creates a new RenderPassInputAttachmentAspectCreateInfo value with the correct type field.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void New(out RenderPassInputAttachmentAspectCreateInfo value) => value = new() { sType = TYPE };
	/// <summary>Initializes the sType and pNext fields to the correct default values.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void Init(ref RenderPassInputAttachmentAspectCreateInfo value) { value.sType = TYPE; value.pNext = null; }
}

[StructLayout(LayoutKind.Sequential)]
public unsafe partial struct PhysicalDevice16BitStorageFeatures
{
	public const Vk.StructureType TYPE = Vk.StructureType.PhysicalDevice16BitStorageFeatures;

	public Vk.StructureType sType;
	public void* pNext;
	public Vk.Bool32 StorageBuffer16BitAccess;
	public Vk.Bool32 UniformAndStorageBuffer16BitAccess;
	public Vk.Bool32 StoragePushConstant16;
	public Vk.Bool32 StorageInputOutput16;

	/// <summary>Creates a new PhysicalDevice16BitStorageFeatures value with the correct type field.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void New(out PhysicalDevice16BitStorageFeatures value) => value = new() { sType = TYPE };
	/// <summary>Initializes the sType and pNext fields to the correct default values.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void Init(ref PhysicalDevice16BitStorageFeatures value) { value.sType = TYPE; value.pNext = null; }
}

[StructLayout(LayoutKind.Sequential)]
public unsafe partial struct PhysicalDeviceSubgroupProperties
{
	public const Vk.StructureType TYPE = Vk.StructureType.PhysicalDeviceSubgroupProperties;

	public Vk.StructureType sType;
	public void* pNext;
	public uint SubgroupSize;
	public Vk.ShaderStageFlags SupportedStages;
	public Vk.SubgroupFeatureFlags SupportedOperations;
	public Vk.Bool32 QuadOperationsInAllStages;

	/// <summary>Creates a new PhysicalDeviceSubgroupProperties value with the correct type field.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void New(out PhysicalDeviceSubgroupProperties value) => value = new() { sType = TYPE };
	/// <summary>Initializes the sType and pNext fields to the correct default values.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void Init(ref PhysicalDeviceSubgroupProperties value) { value.sType = TYPE; value.pNext = null; }
}

[StructLayout(LayoutKind.Sequential)]
public unsafe partial struct PhysicalDeviceShaderSubgroupExtendedTypesFeatures
{
	public const Vk.StructureType TYPE = Vk.StructureType.PhysicalDeviceShaderSubgroupExtendedTypesFeatures;

	public Vk.StructureType sType;
	public void* pNext;
	public Vk.Bool32 ShaderSubgroupExtendedTypes;

	/// <summary>Creates a new PhysicalDeviceShaderSubgroupExtendedTypesFeatures value with the correct type field.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void New(out PhysicalDeviceShaderSubgroupExtendedTypesFeatures value) => value = new() { sType = TYPE };
	/// <summary>Initializes the sType and pNext fields to the correct default values.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void Init(ref PhysicalDeviceShaderSubgroupExtendedTypesFeatures value) { value.sType = TYPE; value.pNext = null; }
}

[StructLayout(LayoutKind.Sequential)]
public unsafe partial struct BufferMemoryRequirementsInfo2
{
	public const Vk.StructureType TYPE = Vk.StructureType.BufferMemoryRequirementsInfo2;

	public Vk.StructureType sType;
	public void* pNext;
	public Vk.Buffer Buffer;

	/// <summary>Creates a new BufferMemoryRequirementsInfo2 value with the correct type field.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void New(out BufferMemoryRequirementsInfo2 value) => value = new() { sType = TYPE };
	/// <summary>Initializes the sType and pNext fields to the correct default values.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void Init(ref BufferMemoryRequirementsInfo2 value) { value.sType = TYPE; value.pNext = null; }
}

[StructLayout(LayoutKind.Sequential)]
public unsafe partial struct ImageMemoryRequirementsInfo2
{
	public const Vk.StructureType TYPE = Vk.StructureType.ImageMemoryRequirementsInfo2;

	public Vk.StructureType sType;
	public void* pNext;
	public Vk.Image Image;

	/// <summary>Creates a new ImageMemoryRequirementsInfo2 value with the correct type field.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void New(out ImageMemoryRequirementsInfo2 value) => value = new() { sType = TYPE };
	/// <summary>Initializes the sType and pNext fields to the correct default values.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void Init(ref ImageMemoryRequirementsInfo2 value) { value.sType = TYPE; value.pNext = null; }
}

[StructLayout(LayoutKind.Sequential)]
public unsafe partial struct ImageSparseMemoryRequirementsInfo2
{
	public const Vk.StructureType TYPE = Vk.StructureType.ImageSparseMemoryRequirementsInfo2;

	public Vk.StructureType sType;
	public void* pNext;
	public Vk.Image Image;

	/// <summary>Creates a new ImageSparseMemoryRequirementsInfo2 value with the correct type field.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void New(out ImageSparseMemoryRequirementsInfo2 value) => value = new() { sType = TYPE };
	/// <summary>Initializes the sType and pNext fields to the correct default values.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void Init(ref ImageSparseMemoryRequirementsInfo2 value) { value.sType = TYPE; value.pNext = null; }
}

[StructLayout(LayoutKind.Sequential)]
public unsafe partial struct MemoryRequirements2
{
	public const Vk.StructureType TYPE = Vk.StructureType.MemoryRequirements2;

	public Vk.StructureType sType;
	public void* pNext;
	public Vk.MemoryRequirements MemoryRequirements;

	/// <summary>Creates a new MemoryRequirements2 value with the correct type field.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void New(out MemoryRequirements2 value) => value = new() { sType = TYPE };
	/// <summary>Initializes the sType and pNext fields to the correct default values.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void Init(ref MemoryRequirements2 value) { value.sType = TYPE; value.pNext = null; }
}

[StructLayout(LayoutKind.Sequential)]
public unsafe partial struct SparseImageMemoryRequirements2
{
	public const Vk.StructureType TYPE = Vk.StructureType.SparseImageMemoryRequirements2;

	public Vk.StructureType sType;
	public void* pNext;
	public Vk.SparseImageMemoryRequirements MemoryRequirements;

	/// <summary>Creates a new SparseImageMemoryRequirements2 value with the correct type field.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void New(out SparseImageMemoryRequirements2 value) => value = new() { sType = TYPE };
	/// <summary>Initializes the sType and pNext fields to the correct default values.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void Init(ref SparseImageMemoryRequirements2 value) { value.sType = TYPE; value.pNext = null; }
}

[StructLayout(LayoutKind.Sequential)]
public unsafe partial struct PhysicalDevicePointClippingProperties
{
	public const Vk.StructureType TYPE = Vk.StructureType.PhysicalDevicePointClippingProperties;

	public Vk.StructureType sType;
	public void* pNext;
	public Vk.PointClippingBehavior PointClippingBehavior;

	/// <summary>Creates a new PhysicalDevicePointClippingProperties value with the correct type field.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void New(out PhysicalDevicePointClippingProperties value) => value = new() { sType = TYPE };
	/// <summary>Initializes the sType and pNext fields to the correct default values.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void Init(ref PhysicalDevicePointClippingProperties value) { value.sType = TYPE; value.pNext = null; }
}

[StructLayout(LayoutKind.Sequential)]
public unsafe partial struct MemoryDedicatedRequirements
{
	public const Vk.StructureType TYPE = Vk.StructureType.MemoryDedicatedRequirements;

	public Vk.StructureType sType;
	public void* pNext;
	public Vk.Bool32 PrefersDedicatedAllocation;
	public Vk.Bool32 RequiresDedicatedAllocation;

	/// <summary>Creates a new MemoryDedicatedRequirements value with the correct type field.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void New(out MemoryDedicatedRequirements value) => value = new() { sType = TYPE };
	/// <summary>Initializes the sType and pNext fields to the correct default values.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void Init(ref MemoryDedicatedRequirements value) { value.sType = TYPE; value.pNext = null; }
}

[StructLayout(LayoutKind.Sequential)]
public unsafe partial struct MemoryDedicatedAllocateInfo
{
	public const Vk.StructureType TYPE = Vk.StructureType.MemoryDedicatedAllocateInfo;

	public Vk.StructureType sType;
	public void* pNext;
	public Vk.Image Image;
	public Vk.Buffer Buffer;

	/// <summary>Creates a new MemoryDedicatedAllocateInfo value with the correct type field.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void New(out MemoryDedicatedAllocateInfo value) => value = new() { sType = TYPE };
	/// <summary>Initializes the sType and pNext fields to the correct default values.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void Init(ref MemoryDedicatedAllocateInfo value) { value.sType = TYPE; value.pNext = null; }
}

[StructLayout(LayoutKind.Sequential)]
public unsafe partial struct ImageViewUsageCreateInfo
{
	public const Vk.StructureType TYPE = Vk.StructureType.ImageViewUsageCreateInfo;

	public Vk.StructureType sType;
	public void* pNext;
	public Vk.ImageUsageFlags Usage;

	/// <summary>Creates a new ImageViewUsageCreateInfo value with the correct type field.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void New(out ImageViewUsageCreateInfo value) => value = new() { sType = TYPE };
	/// <summary>Initializes the sType and pNext fields to the correct default values.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void Init(ref ImageViewUsageCreateInfo value) { value.sType = TYPE; value.pNext = null; }
}

[StructLayout(LayoutKind.Sequential)]
public unsafe partial struct PipelineTessellationDomainOriginStateCreateInfo
{
	public const Vk.StructureType TYPE = Vk.StructureType.PipelineTessellationDomainOriginStateCreateInfo;

	public Vk.StructureType sType;
	public void* pNext;
	public Vk.TessellationDomainOrigin DomainOrigin;

	/// <summary>Creates a new PipelineTessellationDomainOriginStateCreateInfo value with the correct type field.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void New(out PipelineTessellationDomainOriginStateCreateInfo value) => value = new() { sType = TYPE };
	/// <summary>Initializes the sType and pNext fields to the correct default values.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void Init(ref PipelineTessellationDomainOriginStateCreateInfo value) { value.sType = TYPE; value.pNext = null; }
}

[StructLayout(LayoutKind.Sequential)]
public unsafe partial struct SamplerYcbcrConversionInfo
{
	public const Vk.StructureType TYPE = Vk.StructureType.SamplerYcbcrConversionInfo;

	public Vk.StructureType sType;
	public void* pNext;
	public Vk.SamplerYcbcrConversion Conversion;

	/// <summary>Creates a new SamplerYcbcrConversionInfo value with the correct type field.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void New(out SamplerYcbcrConversionInfo value) => value = new() { sType = TYPE };
	/// <summary>Initializes the sType and pNext fields to the correct default values.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void Init(ref SamplerYcbcrConversionInfo value) { value.sType = TYPE; value.pNext = null; }
}

[StructLayout(LayoutKind.Sequential)]
public unsafe partial struct SamplerYcbcrConversionCreateInfo
{
	public const Vk.StructureType TYPE = Vk.StructureType.SamplerYcbcrConversionCreateInfo;

	public Vk.StructureType sType;
	public void* pNext;
	public Vk.Format Format;
	public Vk.SamplerYcbcrModelConversion YcbcrModel;
	public Vk.SamplerYcbcrRange YcbcrRange;
	public Vk.ComponentMapping Components;
	public Vk.ChromaLocation XChromaOffset;
	public Vk.ChromaLocation YChromaOffset;
	public Vk.Filter ChromaFilter;
	public Vk.Bool32 ForceExplicitReconstruction;

	/// <summary>Creates a new SamplerYcbcrConversionCreateInfo value with the correct type field.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void New(out SamplerYcbcrConversionCreateInfo value) => value = new() { sType = TYPE };
	/// <summary>Initializes the sType and pNext fields to the correct default values.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void Init(ref SamplerYcbcrConversionCreateInfo value) { value.sType = TYPE; value.pNext = null; }
}

[StructLayout(LayoutKind.Sequential)]
public unsafe partial struct BindImagePlaneMemoryInfo
{
	public const Vk.StructureType TYPE = Vk.StructureType.BindImagePlaneMemoryInfo;

	public Vk.StructureType sType;
	public void* pNext;
	public Vk.ImageAspectFlags PlaneAspect;

	/// <summary>Creates a new BindImagePlaneMemoryInfo value with the correct type field.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void New(out BindImagePlaneMemoryInfo value) => value = new() { sType = TYPE };
	/// <summary>Initializes the sType and pNext fields to the correct default values.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void Init(ref BindImagePlaneMemoryInfo value) { value.sType = TYPE; value.pNext = null; }
}

[StructLayout(LayoutKind.Sequential)]
public unsafe partial struct ImagePlaneMemoryRequirementsInfo
{
	public const Vk.StructureType TYPE = Vk.StructureType.ImagePlaneMemoryRequirementsInfo;

	public Vk.StructureType sType;
	public void* pNext;
	public Vk.ImageAspectFlags PlaneAspect;

	/// <summary>Creates a new ImagePlaneMemoryRequirementsInfo value with the correct type field.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void New(out ImagePlaneMemoryRequirementsInfo value) => value = new() { sType = TYPE };
	/// <summary>Initializes the sType and pNext fields to the correct default values.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void Init(ref ImagePlaneMemoryRequirementsInfo value) { value.sType = TYPE; value.pNext = null; }
}

[StructLayout(LayoutKind.Sequential)]
public unsafe partial struct PhysicalDeviceSamplerYcbcrConversionFeatures
{
	public const Vk.StructureType TYPE = Vk.StructureType.PhysicalDeviceSamplerYcbcrConversionFeatures;

	public Vk.StructureType sType;
	public void* pNext;
	public Vk.Bool32 SamplerYcbcrConversion;

	/// <summary>Creates a new PhysicalDeviceSamplerYcbcrConversionFeatures value with the correct type field.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void New(out PhysicalDeviceSamplerYcbcrConversionFeatures value) => value = new() { sType = TYPE };
	/// <summary>Initializes the sType and pNext fields to the correct default values.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void Init(ref PhysicalDeviceSamplerYcbcrConversionFeatures value) { value.sType = TYPE; value.pNext = null; }
}

[StructLayout(LayoutKind.Sequential)]
public unsafe partial struct SamplerYcbcrConversionImageFormatProperties
{
	public const Vk.StructureType TYPE = Vk.StructureType.SamplerYcbcrConversionImageFormatProperties;

	public Vk.StructureType sType;
	public void* pNext;
	public uint CombinedImageSamplerDescriptorCount;

	/// <summary>Creates a new SamplerYcbcrConversionImageFormatProperties value with the correct type field.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void New(out SamplerYcbcrConversionImageFormatProperties value) => value = new() { sType = TYPE };
	/// <summary>Initializes the sType and pNext fields to the correct default values.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void Init(ref SamplerYcbcrConversionImageFormatProperties value) { value.sType = TYPE; value.pNext = null; }
}

[StructLayout(LayoutKind.Sequential)]
public unsafe partial struct ProtectedSubmitInfo
{
	public const Vk.StructureType TYPE = Vk.StructureType.ProtectedSubmitInfo;

	public Vk.StructureType sType;
	public void* pNext;
	public Vk.Bool32 ProtectedSubmit;

	/// <summary>Creates a new ProtectedSubmitInfo value with the correct type field.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void New(out ProtectedSubmitInfo value) => value = new() { sType = TYPE };
	/// <summary>Initializes the sType and pNext fields to the correct default values.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void Init(ref ProtectedSubmitInfo value) { value.sType = TYPE; value.pNext = null; }
}

[StructLayout(LayoutKind.Sequential)]
public unsafe partial struct PhysicalDeviceProtectedMemoryFeatures
{
	public const Vk.StructureType TYPE = Vk.StructureType.PhysicalDeviceProtectedMemoryFeatures;

	public Vk.StructureType sType;
	public void* pNext;
	public Vk.Bool32 ProtectedMemory;

	/// <summary>Creates a new PhysicalDeviceProtectedMemoryFeatures value with the correct type field.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void New(out PhysicalDeviceProtectedMemoryFeatures value) => value = new() { sType = TYPE };
	/// <summary>Initializes the sType and pNext fields to the correct default values.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void Init(ref PhysicalDeviceProtectedMemoryFeatures value) { value.sType = TYPE; value.pNext = null; }
}

[StructLayout(LayoutKind.Sequential)]
public unsafe partial struct PhysicalDeviceProtectedMemoryProperties
{
	public const Vk.StructureType TYPE = Vk.StructureType.PhysicalDeviceProtectedMemoryProperties;

	public Vk.StructureType sType;
	public void* pNext;
	public Vk.Bool32 ProtectedNoFault;

	/// <summary>Creates a new PhysicalDeviceProtectedMemoryProperties value with the correct type field.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void New(out PhysicalDeviceProtectedMemoryProperties value) => value = new() { sType = TYPE };
	/// <summary>Initializes the sType and pNext fields to the correct default values.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void Init(ref PhysicalDeviceProtectedMemoryProperties value) { value.sType = TYPE; value.pNext = null; }
}

[StructLayout(LayoutKind.Sequential)]
public unsafe partial struct DeviceQueueInfo2
{
	public const Vk.StructureType TYPE = Vk.StructureType.DeviceQueueInfo2;

	public Vk.StructureType sType;
	public void* pNext;
	public Vk.DeviceQueueCreateFlags Flags;
	public uint QueueFamilyIndex;
	public uint QueueIndex;

	/// <summary>Creates a new DeviceQueueInfo2 value with the correct type field.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void New(out DeviceQueueInfo2 value) => value = new() { sType = TYPE };
	/// <summary>Initializes the sType and pNext fields to the correct default values.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void Init(ref DeviceQueueInfo2 value) { value.sType = TYPE; value.pNext = null; }
}

[StructLayout(LayoutKind.Sequential)]
public unsafe partial struct PhysicalDeviceSamplerFilterMinmaxProperties
{
	public const Vk.StructureType TYPE = Vk.StructureType.PhysicalDeviceSamplerFilterMinmaxProperties;

	public Vk.StructureType sType;
	public void* pNext;
	public Vk.Bool32 FilterMinmaxSingleComponentFormats;
	public Vk.Bool32 FilterMinmaxImageComponentMapping;

	/// <summary>Creates a new PhysicalDeviceSamplerFilterMinmaxProperties value with the correct type field.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void New(out PhysicalDeviceSamplerFilterMinmaxProperties value) => value = new() { sType = TYPE };
	/// <summary>Initializes the sType and pNext fields to the correct default values.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void Init(ref PhysicalDeviceSamplerFilterMinmaxProperties value) { value.sType = TYPE; value.pNext = null; }
}

[StructLayout(LayoutKind.Sequential)]
public unsafe partial struct SamplerReductionModeCreateInfo
{
	public const Vk.StructureType TYPE = Vk.StructureType.SamplerReductionModeCreateInfo;

	public Vk.StructureType sType;
	public void* pNext;
	public Vk.SamplerReductionMode ReductionMode;

	/// <summary>Creates a new SamplerReductionModeCreateInfo value with the correct type field.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void New(out SamplerReductionModeCreateInfo value) => value = new() { sType = TYPE };
	/// <summary>Initializes the sType and pNext fields to the correct default values.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void Init(ref SamplerReductionModeCreateInfo value) { value.sType = TYPE; value.pNext = null; }
}

[StructLayout(LayoutKind.Sequential)]
public unsafe partial struct ImageFormatListCreateInfo
{
	public const Vk.StructureType TYPE = Vk.StructureType.ImageFormatListCreateInfo;

	public Vk.StructureType sType;
	public void* pNext;
	public uint ViewFormatCount;
	public Vk.Format* ViewFormats;

	/// <summary>Creates a new ImageFormatListCreateInfo value with the correct type field.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void New(out ImageFormatListCreateInfo value) => value = new() { sType = TYPE };
	/// <summary>Initializes the sType and pNext fields to the correct default values.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void Init(ref ImageFormatListCreateInfo value) { value.sType = TYPE; value.pNext = null; }
}

[StructLayout(LayoutKind.Sequential)]
public unsafe partial struct PhysicalDeviceMaintenance3Properties
{
	public const Vk.StructureType TYPE = Vk.StructureType.PhysicalDeviceMaintenance3Properties;

	public Vk.StructureType sType;
	public void* pNext;
	public uint MaxPerSetDescriptors;
	public Vk.DeviceSize MaxMemoryAllocationSize;

	/// <summary>Creates a new PhysicalDeviceMaintenance3Properties value with the correct type field.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void New(out PhysicalDeviceMaintenance3Properties value) => value = new() { sType = TYPE };
	/// <summary>Initializes the sType and pNext fields to the correct default values.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void Init(ref PhysicalDeviceMaintenance3Properties value) { value.sType = TYPE; value.pNext = null; }
}

[StructLayout(LayoutKind.Sequential)]
public unsafe partial struct DescriptorSetLayoutSupport
{
	public const Vk.StructureType TYPE = Vk.StructureType.DescriptorSetLayoutSupport;

	public Vk.StructureType sType;
	public void* pNext;
	public Vk.Bool32 Supported;

	/// <summary>Creates a new DescriptorSetLayoutSupport value with the correct type field.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void New(out DescriptorSetLayoutSupport value) => value = new() { sType = TYPE };
	/// <summary>Initializes the sType and pNext fields to the correct default values.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void Init(ref DescriptorSetLayoutSupport value) { value.sType = TYPE; value.pNext = null; }
}

[StructLayout(LayoutKind.Sequential)]
public unsafe partial struct PhysicalDeviceShaderDrawParametersFeatures
{
	public const Vk.StructureType TYPE = Vk.StructureType.PhysicalDeviceShaderDrawParametersFeatures;

	public Vk.StructureType sType;
	public void* pNext;
	public Vk.Bool32 ShaderDrawParameters;

	/// <summary>Creates a new PhysicalDeviceShaderDrawParametersFeatures value with the correct type field.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void New(out PhysicalDeviceShaderDrawParametersFeatures value) => value = new() { sType = TYPE };
	/// <summary>Initializes the sType and pNext fields to the correct default values.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void Init(ref PhysicalDeviceShaderDrawParametersFeatures value) { value.sType = TYPE; value.pNext = null; }
}

[StructLayout(LayoutKind.Sequential)]
public unsafe partial struct PhysicalDeviceShaderDrawParameterFeatures
{
	public const Vk.StructureType TYPE = Vk.StructureType.PhysicalDeviceShaderDrawParametersFeatures;

	public Vk.StructureType sType;
	public void* pNext;
	public Vk.Bool32 ShaderDrawParameters;

	/// <summary>Creates a new PhysicalDeviceShaderDrawParameterFeatures value with the correct type field.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void New(out PhysicalDeviceShaderDrawParameterFeatures value) => value = new() { sType = TYPE };
	/// <summary>Initializes the sType and pNext fields to the correct default values.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void Init(ref PhysicalDeviceShaderDrawParameterFeatures value) { value.sType = TYPE; value.pNext = null; }
}

[StructLayout(LayoutKind.Sequential)]
public unsafe partial struct PhysicalDeviceShaderFloat16Int8Features
{
	public const Vk.StructureType TYPE = Vk.StructureType.PhysicalDeviceShaderFloat16Int8Features;

	public Vk.StructureType sType;
	public void* pNext;
	public Vk.Bool32 ShaderFloat16;
	public Vk.Bool32 ShaderInt8;

	/// <summary>Creates a new PhysicalDeviceShaderFloat16Int8Features value with the correct type field.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void New(out PhysicalDeviceShaderFloat16Int8Features value) => value = new() { sType = TYPE };
	/// <summary>Initializes the sType and pNext fields to the correct default values.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void Init(ref PhysicalDeviceShaderFloat16Int8Features value) { value.sType = TYPE; value.pNext = null; }
}

[StructLayout(LayoutKind.Sequential)]
public unsafe partial struct PhysicalDeviceFloatControlsProperties
{
	public const Vk.StructureType TYPE = Vk.StructureType.PhysicalDeviceFloatControlsProperties;

	public Vk.StructureType sType;
	public void* pNext;
	public Vk.ShaderFloatControlsIndependence DenormBehaviorIndependence;
	public Vk.ShaderFloatControlsIndependence RoundingModeIndependence;
	public Vk.Bool32 ShaderSignedZeroInfNanPreserveFloat16;
	public Vk.Bool32 ShaderSignedZeroInfNanPreserveFloat32;
	public Vk.Bool32 ShaderSignedZeroInfNanPreserveFloat64;
	public Vk.Bool32 ShaderDenormPreserveFloat16;
	public Vk.Bool32 ShaderDenormPreserveFloat32;
	public Vk.Bool32 ShaderDenormPreserveFloat64;
	public Vk.Bool32 ShaderDenormFlushToZeroFloat16;
	public Vk.Bool32 ShaderDenormFlushToZeroFloat32;
	public Vk.Bool32 ShaderDenormFlushToZeroFloat64;
	public Vk.Bool32 ShaderRoundingModeRTEFloat16;
	public Vk.Bool32 ShaderRoundingModeRTEFloat32;
	public Vk.Bool32 ShaderRoundingModeRTEFloat64;
	public Vk.Bool32 ShaderRoundingModeRTZFloat16;
	public Vk.Bool32 ShaderRoundingModeRTZFloat32;
	public Vk.Bool32 ShaderRoundingModeRTZFloat64;

	/// <summary>Creates a new PhysicalDeviceFloatControlsProperties value with the correct type field.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void New(out PhysicalDeviceFloatControlsProperties value) => value = new() { sType = TYPE };
	/// <summary>Initializes the sType and pNext fields to the correct default values.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void Init(ref PhysicalDeviceFloatControlsProperties value) { value.sType = TYPE; value.pNext = null; }
}

[StructLayout(LayoutKind.Sequential)]
public unsafe partial struct PhysicalDeviceHostQueryResetFeatures
{
	public const Vk.StructureType TYPE = Vk.StructureType.PhysicalDeviceHostQueryResetFeatures;

	public Vk.StructureType sType;
	public void* pNext;
	public Vk.Bool32 HostQueryReset;

	/// <summary>Creates a new PhysicalDeviceHostQueryResetFeatures value with the correct type field.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void New(out PhysicalDeviceHostQueryResetFeatures value) => value = new() { sType = TYPE };
	/// <summary>Initializes the sType and pNext fields to the correct default values.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void Init(ref PhysicalDeviceHostQueryResetFeatures value) { value.sType = TYPE; value.pNext = null; }
}

[StructLayout(LayoutKind.Sequential)]
public unsafe partial struct PhysicalDeviceDescriptorIndexingFeatures
{
	public const Vk.StructureType TYPE = Vk.StructureType.PhysicalDeviceDescriptorIndexingFeatures;

	public Vk.StructureType sType;
	public void* pNext;
	public Vk.Bool32 ShaderInputAttachmentArrayDynamicIndexing;
	public Vk.Bool32 ShaderUniformTexelBufferArrayDynamicIndexing;
	public Vk.Bool32 ShaderStorageTexelBufferArrayDynamicIndexing;
	public Vk.Bool32 ShaderUniformBufferArrayNonUniformIndexing;
	public Vk.Bool32 ShaderSampledImageArrayNonUniformIndexing;
	public Vk.Bool32 ShaderStorageBufferArrayNonUniformIndexing;
	public Vk.Bool32 ShaderStorageImageArrayNonUniformIndexing;
	public Vk.Bool32 ShaderInputAttachmentArrayNonUniformIndexing;
	public Vk.Bool32 ShaderUniformTexelBufferArrayNonUniformIndexing;
	public Vk.Bool32 ShaderStorageTexelBufferArrayNonUniformIndexing;
	public Vk.Bool32 DescriptorBindingUniformBufferUpdateAfterBind;
	public Vk.Bool32 DescriptorBindingSampledImageUpdateAfterBind;
	public Vk.Bool32 DescriptorBindingStorageImageUpdateAfterBind;
	public Vk.Bool32 DescriptorBindingStorageBufferUpdateAfterBind;
	public Vk.Bool32 DescriptorBindingUniformTexelBufferUpdateAfterBind;
	public Vk.Bool32 DescriptorBindingStorageTexelBufferUpdateAfterBind;
	public Vk.Bool32 DescriptorBindingUpdateUnusedWhilePending;
	public Vk.Bool32 DescriptorBindingPartiallyBound;
	public Vk.Bool32 DescriptorBindingVariableDescriptorCount;
	public Vk.Bool32 RuntimeDescriptorArray;

	/// <summary>Creates a new PhysicalDeviceDescriptorIndexingFeatures value with the correct type field.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void New(out PhysicalDeviceDescriptorIndexingFeatures value) => value = new() { sType = TYPE };
	/// <summary>Initializes the sType and pNext fields to the correct default values.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void Init(ref PhysicalDeviceDescriptorIndexingFeatures value) { value.sType = TYPE; value.pNext = null; }
}

[StructLayout(LayoutKind.Sequential)]
public unsafe partial struct PhysicalDeviceDescriptorIndexingProperties
{
	public const Vk.StructureType TYPE = Vk.StructureType.PhysicalDeviceDescriptorIndexingProperties;

	public Vk.StructureType sType;
	public void* pNext;
	public uint MaxUpdateAfterBindDescriptorsInAllPools;
	public Vk.Bool32 ShaderUniformBufferArrayNonUniformIndexingNative;
	public Vk.Bool32 ShaderSampledImageArrayNonUniformIndexingNative;
	public Vk.Bool32 ShaderStorageBufferArrayNonUniformIndexingNative;
	public Vk.Bool32 ShaderStorageImageArrayNonUniformIndexingNative;
	public Vk.Bool32 ShaderInputAttachmentArrayNonUniformIndexingNative;
	public Vk.Bool32 RobustBufferAccessUpdateAfterBind;
	public Vk.Bool32 QuadDivergentImplicitLod;
	public uint MaxPerStageDescriptorUpdateAfterBindSamplers;
	public uint MaxPerStageDescriptorUpdateAfterBindUniformBuffers;
	public uint MaxPerStageDescriptorUpdateAfterBindStorageBuffers;
	public uint MaxPerStageDescriptorUpdateAfterBindSampledImages;
	public uint MaxPerStageDescriptorUpdateAfterBindStorageImages;
	public uint MaxPerStageDescriptorUpdateAfterBindInputAttachments;
	public uint MaxPerStageUpdateAfterBindResources;
	public uint MaxDescriptorSetUpdateAfterBindSamplers;
	public uint MaxDescriptorSetUpdateAfterBindUniformBuffers;
	public uint MaxDescriptorSetUpdateAfterBindUniformBuffersDynamic;
	public uint MaxDescriptorSetUpdateAfterBindStorageBuffers;
	public uint MaxDescriptorSetUpdateAfterBindStorageBuffersDynamic;
	public uint MaxDescriptorSetUpdateAfterBindSampledImages;
	public uint MaxDescriptorSetUpdateAfterBindStorageImages;
	public uint MaxDescriptorSetUpdateAfterBindInputAttachments;

	/// <summary>Creates a new PhysicalDeviceDescriptorIndexingProperties value with the correct type field.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void New(out PhysicalDeviceDescriptorIndexingProperties value) => value = new() { sType = TYPE };
	/// <summary>Initializes the sType and pNext fields to the correct default values.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void Init(ref PhysicalDeviceDescriptorIndexingProperties value) { value.sType = TYPE; value.pNext = null; }
}

[StructLayout(LayoutKind.Sequential)]
public unsafe partial struct DescriptorSetLayoutBindingFlagsCreateInfo
{
	public const Vk.StructureType TYPE = Vk.StructureType.DescriptorSetLayoutBindingFlagsCreateInfo;

	public Vk.StructureType sType;
	public void* pNext;
	public uint BindingCount;
	public Vk.DescriptorBindingFlags* BindingFlags;

	/// <summary>Creates a new DescriptorSetLayoutBindingFlagsCreateInfo value with the correct type field.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void New(out DescriptorSetLayoutBindingFlagsCreateInfo value) => value = new() { sType = TYPE };
	/// <summary>Initializes the sType and pNext fields to the correct default values.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void Init(ref DescriptorSetLayoutBindingFlagsCreateInfo value) { value.sType = TYPE; value.pNext = null; }
}

[StructLayout(LayoutKind.Sequential)]
public unsafe partial struct DescriptorSetVariableDescriptorCountAllocateInfo
{
	public const Vk.StructureType TYPE = Vk.StructureType.DescriptorSetVariableDescriptorCountAllocateInfo;

	public Vk.StructureType sType;
	public void* pNext;
	public uint DescriptorSetCount;
	public uint* DescriptorCounts;

	/// <summary>Creates a new DescriptorSetVariableDescriptorCountAllocateInfo value with the correct type field.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void New(out DescriptorSetVariableDescriptorCountAllocateInfo value) => value = new() { sType = TYPE };
	/// <summary>Initializes the sType and pNext fields to the correct default values.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void Init(ref DescriptorSetVariableDescriptorCountAllocateInfo value) { value.sType = TYPE; value.pNext = null; }
}

[StructLayout(LayoutKind.Sequential)]
public unsafe partial struct DescriptorSetVariableDescriptorCountLayoutSupport
{
	public const Vk.StructureType TYPE = Vk.StructureType.DescriptorSetVariableDescriptorCountLayoutSupport;

	public Vk.StructureType sType;
	public void* pNext;
	public uint MaxVariableDescriptorCount;

	/// <summary>Creates a new DescriptorSetVariableDescriptorCountLayoutSupport value with the correct type field.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void New(out DescriptorSetVariableDescriptorCountLayoutSupport value) => value = new() { sType = TYPE };
	/// <summary>Initializes the sType and pNext fields to the correct default values.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void Init(ref DescriptorSetVariableDescriptorCountLayoutSupport value) { value.sType = TYPE; value.pNext = null; }
}

[StructLayout(LayoutKind.Sequential)]
public unsafe partial struct AttachmentDescription2
{
	public const Vk.StructureType TYPE = Vk.StructureType.AttachmentDescription2;

	public Vk.StructureType sType;
	public void* pNext;
	public Vk.AttachmentDescriptionFlags Flags;
	public Vk.Format Format;
	public Vk.SampleCountFlags Samples;
	public Vk.AttachmentLoadOp LoadOp;
	public Vk.AttachmentStoreOp StoreOp;
	public Vk.AttachmentLoadOp StencilLoadOp;
	public Vk.AttachmentStoreOp StencilStoreOp;
	public Vk.ImageLayout InitialLayout;
	public Vk.ImageLayout FinalLayout;

	/// <summary>Creates a new AttachmentDescription2 value with the correct type field.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void New(out AttachmentDescription2 value) => value = new() { sType = TYPE };
	/// <summary>Initializes the sType and pNext fields to the correct default values.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void Init(ref AttachmentDescription2 value) { value.sType = TYPE; value.pNext = null; }
}

[StructLayout(LayoutKind.Sequential)]
public unsafe partial struct AttachmentReference2
{
	public const Vk.StructureType TYPE = Vk.StructureType.AttachmentReference2;

	public Vk.StructureType sType;
	public void* pNext;
	public uint Attachment;
	public Vk.ImageLayout Layout;
	public Vk.ImageAspectFlags AspectMask;

	/// <summary>Creates a new AttachmentReference2 value with the correct type field.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void New(out AttachmentReference2 value) => value = new() { sType = TYPE };
	/// <summary>Initializes the sType and pNext fields to the correct default values.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void Init(ref AttachmentReference2 value) { value.sType = TYPE; value.pNext = null; }
}

[StructLayout(LayoutKind.Sequential)]
public unsafe partial struct SubpassDescription2
{
	public const Vk.StructureType TYPE = Vk.StructureType.SubpassDescription2;

	public Vk.StructureType sType;
	public void* pNext;
	public Vk.SubpassDescriptionFlags Flags;
	public Vk.PipelineBindPoint PipelineBindPoint;
	public uint ViewMask;
	public uint InputAttachmentCount;
	public Vk.AttachmentReference2* InputAttachments;
	public uint ColorAttachmentCount;
	public Vk.AttachmentReference2* ColorAttachments;
	public Vk.AttachmentReference2* ResolveAttachments;
	public Vk.AttachmentReference2* DepthStencilAttachment;
	public uint PreserveAttachmentCount;
	public uint* PreserveAttachments;

	/// <summary>Creates a new SubpassDescription2 value with the correct type field.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void New(out SubpassDescription2 value) => value = new() { sType = TYPE };
	/// <summary>Initializes the sType and pNext fields to the correct default values.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void Init(ref SubpassDescription2 value) { value.sType = TYPE; value.pNext = null; }
}

[StructLayout(LayoutKind.Sequential)]
public unsafe partial struct SubpassDependency2
{
	public const Vk.StructureType TYPE = Vk.StructureType.SubpassDependency2;

	public Vk.StructureType sType;
	public void* pNext;
	public uint SrcSubpass;
	public uint DstSubpass;
	public Vk.PipelineStageFlags SrcStageMask;
	public Vk.PipelineStageFlags DstStageMask;
	public Vk.AccessFlags SrcAccessMask;
	public Vk.AccessFlags DstAccessMask;
	public Vk.DependencyFlags DependencyFlags;
	public int ViewOffset;

	/// <summary>Creates a new SubpassDependency2 value with the correct type field.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void New(out SubpassDependency2 value) => value = new() { sType = TYPE };
	/// <summary>Initializes the sType and pNext fields to the correct default values.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void Init(ref SubpassDependency2 value) { value.sType = TYPE; value.pNext = null; }
}

[StructLayout(LayoutKind.Sequential)]
public unsafe partial struct RenderPassCreateInfo2
{
	public const Vk.StructureType TYPE = Vk.StructureType.RenderPassCreateInfo2;

	public Vk.StructureType sType;
	public void* pNext;
	public Vk.RenderPassCreateFlags Flags;
	public uint AttachmentCount;
	public Vk.AttachmentDescription2* Attachments;
	public uint SubpassCount;
	public Vk.SubpassDescription2* Subpasses;
	public uint DependencyCount;
	public Vk.SubpassDependency2* Dependencies;
	public uint CorrelatedViewMaskCount;
	public uint* CorrelatedViewMasks;

	/// <summary>Creates a new RenderPassCreateInfo2 value with the correct type field.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void New(out RenderPassCreateInfo2 value) => value = new() { sType = TYPE };
	/// <summary>Initializes the sType and pNext fields to the correct default values.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void Init(ref RenderPassCreateInfo2 value) { value.sType = TYPE; value.pNext = null; }
}

[StructLayout(LayoutKind.Sequential)]
public unsafe partial struct SubpassBeginInfo
{
	public const Vk.StructureType TYPE = Vk.StructureType.SubpassBeginInfo;

	public Vk.StructureType sType;
	public void* pNext;
	public Vk.SubpassContents Contents;

	/// <summary>Creates a new SubpassBeginInfo value with the correct type field.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void New(out SubpassBeginInfo value) => value = new() { sType = TYPE };
	/// <summary>Initializes the sType and pNext fields to the correct default values.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void Init(ref SubpassBeginInfo value) { value.sType = TYPE; value.pNext = null; }
}

[StructLayout(LayoutKind.Sequential)]
public unsafe partial struct SubpassEndInfo
{
	public const Vk.StructureType TYPE = Vk.StructureType.SubpassEndInfo;

	public Vk.StructureType sType;
	public void* pNext;

	/// <summary>Creates a new SubpassEndInfo value with the correct type field.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void New(out SubpassEndInfo value) => value = new() { sType = TYPE };
	/// <summary>Initializes the sType and pNext fields to the correct default values.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void Init(ref SubpassEndInfo value) { value.sType = TYPE; value.pNext = null; }
}

[StructLayout(LayoutKind.Sequential)]
public unsafe partial struct PhysicalDeviceTimelineSemaphoreFeatures
{
	public const Vk.StructureType TYPE = Vk.StructureType.PhysicalDeviceTimelineSemaphoreFeatures;

	public Vk.StructureType sType;
	public void* pNext;
	public Vk.Bool32 TimelineSemaphore;

	/// <summary>Creates a new PhysicalDeviceTimelineSemaphoreFeatures value with the correct type field.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void New(out PhysicalDeviceTimelineSemaphoreFeatures value) => value = new() { sType = TYPE };
	/// <summary>Initializes the sType and pNext fields to the correct default values.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void Init(ref PhysicalDeviceTimelineSemaphoreFeatures value) { value.sType = TYPE; value.pNext = null; }
}

[StructLayout(LayoutKind.Sequential)]
public unsafe partial struct PhysicalDeviceTimelineSemaphoreProperties
{
	public const Vk.StructureType TYPE = Vk.StructureType.PhysicalDeviceTimelineSemaphoreProperties;

	public Vk.StructureType sType;
	public void* pNext;
	public ulong MaxTimelineSemaphoreValueDifference;

	/// <summary>Creates a new PhysicalDeviceTimelineSemaphoreProperties value with the correct type field.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void New(out PhysicalDeviceTimelineSemaphoreProperties value) => value = new() { sType = TYPE };
	/// <summary>Initializes the sType and pNext fields to the correct default values.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void Init(ref PhysicalDeviceTimelineSemaphoreProperties value) { value.sType = TYPE; value.pNext = null; }
}

[StructLayout(LayoutKind.Sequential)]
public unsafe partial struct SemaphoreTypeCreateInfo
{
	public const Vk.StructureType TYPE = Vk.StructureType.SemaphoreTypeCreateInfo;

	public Vk.StructureType sType;
	public void* pNext;
	public Vk.SemaphoreType SemaphoreType;
	public ulong InitialValue;

	/// <summary>Creates a new SemaphoreTypeCreateInfo value with the correct type field.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void New(out SemaphoreTypeCreateInfo value) => value = new() { sType = TYPE };
	/// <summary>Initializes the sType and pNext fields to the correct default values.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void Init(ref SemaphoreTypeCreateInfo value) { value.sType = TYPE; value.pNext = null; }
}

[StructLayout(LayoutKind.Sequential)]
public unsafe partial struct TimelineSemaphoreSubmitInfo
{
	public const Vk.StructureType TYPE = Vk.StructureType.TimelineSemaphoreSubmitInfo;

	public Vk.StructureType sType;
	public void* pNext;
	public uint WaitSemaphoreValueCount;
	public ulong* WaitSemaphoreValues;
	public uint SignalSemaphoreValueCount;
	public ulong* SignalSemaphoreValues;

	/// <summary>Creates a new TimelineSemaphoreSubmitInfo value with the correct type field.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void New(out TimelineSemaphoreSubmitInfo value) => value = new() { sType = TYPE };
	/// <summary>Initializes the sType and pNext fields to the correct default values.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void Init(ref TimelineSemaphoreSubmitInfo value) { value.sType = TYPE; value.pNext = null; }
}

[StructLayout(LayoutKind.Sequential)]
public unsafe partial struct SemaphoreWaitInfo
{
	public const Vk.StructureType TYPE = Vk.StructureType.SemaphoreWaitInfo;

	public Vk.StructureType sType;
	public void* pNext;
	public Vk.SemaphoreWaitFlags Flags;
	public uint SemaphoreCount;
	public Vk.Semaphore* Semaphores;
	public ulong* Values;

	/// <summary>Creates a new SemaphoreWaitInfo value with the correct type field.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void New(out SemaphoreWaitInfo value) => value = new() { sType = TYPE };
	/// <summary>Initializes the sType and pNext fields to the correct default values.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void Init(ref SemaphoreWaitInfo value) { value.sType = TYPE; value.pNext = null; }
}

[StructLayout(LayoutKind.Sequential)]
public unsafe partial struct SemaphoreSignalInfo
{
	public const Vk.StructureType TYPE = Vk.StructureType.SemaphoreSignalInfo;

	public Vk.StructureType sType;
	public void* pNext;
	public Vk.Semaphore Semaphore;
	public ulong Value;

	/// <summary>Creates a new SemaphoreSignalInfo value with the correct type field.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void New(out SemaphoreSignalInfo value) => value = new() { sType = TYPE };
	/// <summary>Initializes the sType and pNext fields to the correct default values.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void Init(ref SemaphoreSignalInfo value) { value.sType = TYPE; value.pNext = null; }
}

[StructLayout(LayoutKind.Sequential)]
public unsafe partial struct PhysicalDevice8BitStorageFeatures
{
	public const Vk.StructureType TYPE = Vk.StructureType.PhysicalDevice8BitStorageFeatures;

	public Vk.StructureType sType;
	public void* pNext;
	public Vk.Bool32 StorageBuffer8BitAccess;
	public Vk.Bool32 UniformAndStorageBuffer8BitAccess;
	public Vk.Bool32 StoragePushConstant8;

	/// <summary>Creates a new PhysicalDevice8BitStorageFeatures value with the correct type field.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void New(out PhysicalDevice8BitStorageFeatures value) => value = new() { sType = TYPE };
	/// <summary>Initializes the sType and pNext fields to the correct default values.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void Init(ref PhysicalDevice8BitStorageFeatures value) { value.sType = TYPE; value.pNext = null; }
}

[StructLayout(LayoutKind.Sequential)]
public unsafe partial struct PhysicalDeviceVulkanMemoryModelFeatures
{
	public const Vk.StructureType TYPE = Vk.StructureType.PhysicalDeviceVulkanMemoryModelFeatures;

	public Vk.StructureType sType;
	public void* pNext;
	public Vk.Bool32 VulkanMemoryModel;
	public Vk.Bool32 VulkanMemoryModelDeviceScope;
	public Vk.Bool32 VulkanMemoryModelAvailabilityVisibilityChains;

	/// <summary>Creates a new PhysicalDeviceVulkanMemoryModelFeatures value with the correct type field.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void New(out PhysicalDeviceVulkanMemoryModelFeatures value) => value = new() { sType = TYPE };
	/// <summary>Initializes the sType and pNext fields to the correct default values.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void Init(ref PhysicalDeviceVulkanMemoryModelFeatures value) { value.sType = TYPE; value.pNext = null; }
}

[StructLayout(LayoutKind.Sequential)]
public unsafe partial struct PhysicalDeviceShaderAtomicInt64Features
{
	public const Vk.StructureType TYPE = Vk.StructureType.PhysicalDeviceShaderAtomicInt64Features;

	public Vk.StructureType sType;
	public void* pNext;
	public Vk.Bool32 ShaderBufferInt64Atomics;
	public Vk.Bool32 ShaderSharedInt64Atomics;

	/// <summary>Creates a new PhysicalDeviceShaderAtomicInt64Features value with the correct type field.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void New(out PhysicalDeviceShaderAtomicInt64Features value) => value = new() { sType = TYPE };
	/// <summary>Initializes the sType and pNext fields to the correct default values.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void Init(ref PhysicalDeviceShaderAtomicInt64Features value) { value.sType = TYPE; value.pNext = null; }
}

[StructLayout(LayoutKind.Sequential)]
public unsafe partial struct PhysicalDeviceDepthStencilResolveProperties
{
	public const Vk.StructureType TYPE = Vk.StructureType.PhysicalDeviceDepthStencilResolveProperties;

	public Vk.StructureType sType;
	public void* pNext;
	public Vk.ResolveModeFlags SupportedDepthResolveModes;
	public Vk.ResolveModeFlags SupportedStencilResolveModes;
	public Vk.Bool32 IndependentResolveNone;
	public Vk.Bool32 IndependentResolve;

	/// <summary>Creates a new PhysicalDeviceDepthStencilResolveProperties value with the correct type field.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void New(out PhysicalDeviceDepthStencilResolveProperties value) => value = new() { sType = TYPE };
	/// <summary>Initializes the sType and pNext fields to the correct default values.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void Init(ref PhysicalDeviceDepthStencilResolveProperties value) { value.sType = TYPE; value.pNext = null; }
}

[StructLayout(LayoutKind.Sequential)]
public unsafe partial struct SubpassDescriptionDepthStencilResolve
{
	public const Vk.StructureType TYPE = Vk.StructureType.SubpassDescriptionDepthStencilResolve;

	public Vk.StructureType sType;
	public void* pNext;
	public Vk.ResolveModeFlags DepthResolveMode;
	public Vk.ResolveModeFlags StencilResolveMode;
	public Vk.AttachmentReference2* DepthStencilResolveAttachment;

	/// <summary>Creates a new SubpassDescriptionDepthStencilResolve value with the correct type field.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void New(out SubpassDescriptionDepthStencilResolve value) => value = new() { sType = TYPE };
	/// <summary>Initializes the sType and pNext fields to the correct default values.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void Init(ref SubpassDescriptionDepthStencilResolve value) { value.sType = TYPE; value.pNext = null; }
}

[StructLayout(LayoutKind.Sequential)]
public unsafe partial struct ImageStencilUsageCreateInfo
{
	public const Vk.StructureType TYPE = Vk.StructureType.ImageStencilUsageCreateInfo;

	public Vk.StructureType sType;
	public void* pNext;
	public Vk.ImageUsageFlags StencilUsage;

	/// <summary>Creates a new ImageStencilUsageCreateInfo value with the correct type field.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void New(out ImageStencilUsageCreateInfo value) => value = new() { sType = TYPE };
	/// <summary>Initializes the sType and pNext fields to the correct default values.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void Init(ref ImageStencilUsageCreateInfo value) { value.sType = TYPE; value.pNext = null; }
}

[StructLayout(LayoutKind.Sequential)]
public unsafe partial struct PhysicalDeviceScalarBlockLayoutFeatures
{
	public const Vk.StructureType TYPE = Vk.StructureType.PhysicalDeviceScalarBlockLayoutFeatures;

	public Vk.StructureType sType;
	public void* pNext;
	public Vk.Bool32 ScalarBlockLayout;

	/// <summary>Creates a new PhysicalDeviceScalarBlockLayoutFeatures value with the correct type field.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void New(out PhysicalDeviceScalarBlockLayoutFeatures value) => value = new() { sType = TYPE };
	/// <summary>Initializes the sType and pNext fields to the correct default values.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void Init(ref PhysicalDeviceScalarBlockLayoutFeatures value) { value.sType = TYPE; value.pNext = null; }
}

[StructLayout(LayoutKind.Sequential)]
public unsafe partial struct PhysicalDeviceUniformBufferStandardLayoutFeatures
{
	public const Vk.StructureType TYPE = Vk.StructureType.PhysicalDeviceUniformBufferStandardLayoutFeatures;

	public Vk.StructureType sType;
	public void* pNext;
	public Vk.Bool32 UniformBufferStandardLayout;

	/// <summary>Creates a new PhysicalDeviceUniformBufferStandardLayoutFeatures value with the correct type field.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void New(out PhysicalDeviceUniformBufferStandardLayoutFeatures value) => value = new() { sType = TYPE };
	/// <summary>Initializes the sType and pNext fields to the correct default values.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void Init(ref PhysicalDeviceUniformBufferStandardLayoutFeatures value) { value.sType = TYPE; value.pNext = null; }
}

[StructLayout(LayoutKind.Sequential)]
public unsafe partial struct PhysicalDeviceBufferDeviceAddressFeatures
{
	public const Vk.StructureType TYPE = Vk.StructureType.PhysicalDeviceBufferDeviceAddressFeatures;

	public Vk.StructureType sType;
	public void* pNext;
	public Vk.Bool32 BufferDeviceAddress;
	public Vk.Bool32 BufferDeviceAddressCaptureReplay;
	public Vk.Bool32 BufferDeviceAddressMultiDevice;

	/// <summary>Creates a new PhysicalDeviceBufferDeviceAddressFeatures value with the correct type field.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void New(out PhysicalDeviceBufferDeviceAddressFeatures value) => value = new() { sType = TYPE };
	/// <summary>Initializes the sType and pNext fields to the correct default values.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void Init(ref PhysicalDeviceBufferDeviceAddressFeatures value) { value.sType = TYPE; value.pNext = null; }
}

[StructLayout(LayoutKind.Sequential)]
public unsafe partial struct BufferDeviceAddressInfo
{
	public const Vk.StructureType TYPE = Vk.StructureType.BufferDeviceAddressInfo;

	public Vk.StructureType sType;
	public void* pNext;
	public Vk.Buffer Buffer;

	/// <summary>Creates a new BufferDeviceAddressInfo value with the correct type field.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void New(out BufferDeviceAddressInfo value) => value = new() { sType = TYPE };
	/// <summary>Initializes the sType and pNext fields to the correct default values.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void Init(ref BufferDeviceAddressInfo value) { value.sType = TYPE; value.pNext = null; }
}

[StructLayout(LayoutKind.Sequential)]
public unsafe partial struct BufferOpaqueCaptureAddressCreateInfo
{
	public const Vk.StructureType TYPE = Vk.StructureType.BufferOpaqueCaptureAddressCreateInfo;

	public Vk.StructureType sType;
	public void* pNext;
	public ulong OpaqueCaptureAddress;

	/// <summary>Creates a new BufferOpaqueCaptureAddressCreateInfo value with the correct type field.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void New(out BufferOpaqueCaptureAddressCreateInfo value) => value = new() { sType = TYPE };
	/// <summary>Initializes the sType and pNext fields to the correct default values.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void Init(ref BufferOpaqueCaptureAddressCreateInfo value) { value.sType = TYPE; value.pNext = null; }
}

[StructLayout(LayoutKind.Sequential)]
public unsafe partial struct PhysicalDeviceImagelessFramebufferFeatures
{
	public const Vk.StructureType TYPE = Vk.StructureType.PhysicalDeviceImagelessFramebufferFeatures;

	public Vk.StructureType sType;
	public void* pNext;
	public Vk.Bool32 ImagelessFramebuffer;

	/// <summary>Creates a new PhysicalDeviceImagelessFramebufferFeatures value with the correct type field.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void New(out PhysicalDeviceImagelessFramebufferFeatures value) => value = new() { sType = TYPE };
	/// <summary>Initializes the sType and pNext fields to the correct default values.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void Init(ref PhysicalDeviceImagelessFramebufferFeatures value) { value.sType = TYPE; value.pNext = null; }
}

[StructLayout(LayoutKind.Sequential)]
public unsafe partial struct FramebufferAttachmentsCreateInfo
{
	public const Vk.StructureType TYPE = Vk.StructureType.FramebufferAttachmentsCreateInfo;

	public Vk.StructureType sType;
	public void* pNext;
	public uint AttachmentImageInfoCount;
	public Vk.FramebufferAttachmentImageInfo* AttachmentImageInfos;

	/// <summary>Creates a new FramebufferAttachmentsCreateInfo value with the correct type field.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void New(out FramebufferAttachmentsCreateInfo value) => value = new() { sType = TYPE };
	/// <summary>Initializes the sType and pNext fields to the correct default values.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void Init(ref FramebufferAttachmentsCreateInfo value) { value.sType = TYPE; value.pNext = null; }
}

[StructLayout(LayoutKind.Sequential)]
public unsafe partial struct FramebufferAttachmentImageInfo
{
	public const Vk.StructureType TYPE = Vk.StructureType.FramebufferAttachmentImageInfo;

	public Vk.StructureType sType;
	public void* pNext;
	public Vk.ImageCreateFlags Flags;
	public Vk.ImageUsageFlags Usage;
	public uint Width;
	public uint Height;
	public uint LayerCount;
	public uint ViewFormatCount;
	public Vk.Format* ViewFormats;

	/// <summary>Creates a new FramebufferAttachmentImageInfo value with the correct type field.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void New(out FramebufferAttachmentImageInfo value) => value = new() { sType = TYPE };
	/// <summary>Initializes the sType and pNext fields to the correct default values.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void Init(ref FramebufferAttachmentImageInfo value) { value.sType = TYPE; value.pNext = null; }
}

[StructLayout(LayoutKind.Sequential)]
public unsafe partial struct RenderPassAttachmentBeginInfo
{
	public const Vk.StructureType TYPE = Vk.StructureType.RenderPassAttachmentBeginInfo;

	public Vk.StructureType sType;
	public void* pNext;
	public uint AttachmentCount;
	public Vk.ImageView* Attachments;

	/// <summary>Creates a new RenderPassAttachmentBeginInfo value with the correct type field.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void New(out RenderPassAttachmentBeginInfo value) => value = new() { sType = TYPE };
	/// <summary>Initializes the sType and pNext fields to the correct default values.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void Init(ref RenderPassAttachmentBeginInfo value) { value.sType = TYPE; value.pNext = null; }
}

[StructLayout(LayoutKind.Sequential)]
public unsafe partial struct PhysicalDeviceSeparateDepthStencilLayoutsFeatures
{
	public const Vk.StructureType TYPE = Vk.StructureType.PhysicalDeviceSeparateDepthStencilLayoutsFeatures;

	public Vk.StructureType sType;
	public void* pNext;
	public Vk.Bool32 SeparateDepthStencilLayouts;

	/// <summary>Creates a new PhysicalDeviceSeparateDepthStencilLayoutsFeatures value with the correct type field.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void New(out PhysicalDeviceSeparateDepthStencilLayoutsFeatures value) => value = new() { sType = TYPE };
	/// <summary>Initializes the sType and pNext fields to the correct default values.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void Init(ref PhysicalDeviceSeparateDepthStencilLayoutsFeatures value) { value.sType = TYPE; value.pNext = null; }
}

[StructLayout(LayoutKind.Sequential)]
public unsafe partial struct AttachmentReferenceStencilLayout
{
	public const Vk.StructureType TYPE = Vk.StructureType.AttachmentReferenceStencilLayout;

	public Vk.StructureType sType;
	public void* pNext;
	public Vk.ImageLayout StencilLayout;

	/// <summary>Creates a new AttachmentReferenceStencilLayout value with the correct type field.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void New(out AttachmentReferenceStencilLayout value) => value = new() { sType = TYPE };
	/// <summary>Initializes the sType and pNext fields to the correct default values.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void Init(ref AttachmentReferenceStencilLayout value) { value.sType = TYPE; value.pNext = null; }
}

[StructLayout(LayoutKind.Sequential)]
public unsafe partial struct AttachmentDescriptionStencilLayout
{
	public const Vk.StructureType TYPE = Vk.StructureType.AttachmentDescriptionStencilLayout;

	public Vk.StructureType sType;
	public void* pNext;
	public Vk.ImageLayout StencilInitialLayout;
	public Vk.ImageLayout StencilFinalLayout;

	/// <summary>Creates a new AttachmentDescriptionStencilLayout value with the correct type field.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void New(out AttachmentDescriptionStencilLayout value) => value = new() { sType = TYPE };
	/// <summary>Initializes the sType and pNext fields to the correct default values.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void Init(ref AttachmentDescriptionStencilLayout value) { value.sType = TYPE; value.pNext = null; }
}

[StructLayout(LayoutKind.Sequential)]
public unsafe partial struct MemoryOpaqueCaptureAddressAllocateInfo
{
	public const Vk.StructureType TYPE = Vk.StructureType.MemoryOpaqueCaptureAddressAllocateInfo;

	public Vk.StructureType sType;
	public void* pNext;
	public ulong OpaqueCaptureAddress;

	/// <summary>Creates a new MemoryOpaqueCaptureAddressAllocateInfo value with the correct type field.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void New(out MemoryOpaqueCaptureAddressAllocateInfo value) => value = new() { sType = TYPE };
	/// <summary>Initializes the sType and pNext fields to the correct default values.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void Init(ref MemoryOpaqueCaptureAddressAllocateInfo value) { value.sType = TYPE; value.pNext = null; }
}

[StructLayout(LayoutKind.Sequential)]
public unsafe partial struct DeviceMemoryOpaqueCaptureAddressInfo
{
	public const Vk.StructureType TYPE = Vk.StructureType.DeviceMemoryOpaqueCaptureAddressInfo;

	public Vk.StructureType sType;
	public void* pNext;
	public Vk.DeviceMemory Memory;

	/// <summary>Creates a new DeviceMemoryOpaqueCaptureAddressInfo value with the correct type field.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void New(out DeviceMemoryOpaqueCaptureAddressInfo value) => value = new() { sType = TYPE };
	/// <summary>Initializes the sType and pNext fields to the correct default values.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void Init(ref DeviceMemoryOpaqueCaptureAddressInfo value) { value.sType = TYPE; value.pNext = null; }
}

[StructLayout(LayoutKind.Sequential)]
public unsafe partial struct PhysicalDeviceVulkan11Features
{
	public const Vk.StructureType TYPE = Vk.StructureType.PhysicalDeviceVulkan11Features;

	public Vk.StructureType sType;
	public void* pNext;
	public Vk.Bool32 StorageBuffer16BitAccess;
	public Vk.Bool32 UniformAndStorageBuffer16BitAccess;
	public Vk.Bool32 StoragePushConstant16;
	public Vk.Bool32 StorageInputOutput16;
	public Vk.Bool32 Multiview;
	public Vk.Bool32 MultiviewGeometryShader;
	public Vk.Bool32 MultiviewTessellationShader;
	public Vk.Bool32 VariablePointersStorageBuffer;
	public Vk.Bool32 VariablePointers;
	public Vk.Bool32 ProtectedMemory;
	public Vk.Bool32 SamplerYcbcrConversion;
	public Vk.Bool32 ShaderDrawParameters;

	/// <summary>Creates a new PhysicalDeviceVulkan11Features value with the correct type field.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void New(out PhysicalDeviceVulkan11Features value) => value = new() { sType = TYPE };
	/// <summary>Initializes the sType and pNext fields to the correct default values.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void Init(ref PhysicalDeviceVulkan11Features value) { value.sType = TYPE; value.pNext = null; }
}

[StructLayout(LayoutKind.Sequential)]
public unsafe partial struct PhysicalDeviceVulkan11Properties
{
	public const Vk.StructureType TYPE = Vk.StructureType.PhysicalDeviceVulkan11Properties;

	public Vk.StructureType sType;
	public void* pNext;
	public Vk.UUID DeviceUUID;
	public Vk.UUID DriverUUID;
	public Vk.LUID DeviceLUID;
	public uint DeviceNodeMask;
	public Vk.Bool32 DeviceLUIDValid;
	public uint SubgroupSize;
	public Vk.ShaderStageFlags SubgroupSupportedStages;
	public Vk.SubgroupFeatureFlags SubgroupSupportedOperations;
	public Vk.Bool32 SubgroupQuadOperationsInAllStages;
	public Vk.PointClippingBehavior PointClippingBehavior;
	public uint MaxMultiviewViewCount;
	public uint MaxMultiviewInstanceIndex;
	public Vk.Bool32 ProtectedNoFault;
	public uint MaxPerSetDescriptors;
	public Vk.DeviceSize MaxMemoryAllocationSize;

	/// <summary>Creates a new PhysicalDeviceVulkan11Properties value with the correct type field.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void New(out PhysicalDeviceVulkan11Properties value) => value = new() { sType = TYPE };
	/// <summary>Initializes the sType and pNext fields to the correct default values.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void Init(ref PhysicalDeviceVulkan11Properties value) { value.sType = TYPE; value.pNext = null; }
}

[StructLayout(LayoutKind.Sequential)]
public unsafe partial struct PhysicalDeviceVulkan12Features
{
	public const Vk.StructureType TYPE = Vk.StructureType.PhysicalDeviceVulkan12Features;

	public Vk.StructureType sType;
	public void* pNext;
	public Vk.Bool32 SamplerMirrorClampToEdge;
	public Vk.Bool32 DrawIndirectCount;
	public Vk.Bool32 StorageBuffer8BitAccess;
	public Vk.Bool32 UniformAndStorageBuffer8BitAccess;
	public Vk.Bool32 StoragePushConstant8;
	public Vk.Bool32 ShaderBufferInt64Atomics;
	public Vk.Bool32 ShaderSharedInt64Atomics;
	public Vk.Bool32 ShaderFloat16;
	public Vk.Bool32 ShaderInt8;
	public Vk.Bool32 DescriptorIndexing;
	public Vk.Bool32 ShaderInputAttachmentArrayDynamicIndexing;
	public Vk.Bool32 ShaderUniformTexelBufferArrayDynamicIndexing;
	public Vk.Bool32 ShaderStorageTexelBufferArrayDynamicIndexing;
	public Vk.Bool32 ShaderUniformBufferArrayNonUniformIndexing;
	public Vk.Bool32 ShaderSampledImageArrayNonUniformIndexing;
	public Vk.Bool32 ShaderStorageBufferArrayNonUniformIndexing;
	public Vk.Bool32 ShaderStorageImageArrayNonUniformIndexing;
	public Vk.Bool32 ShaderInputAttachmentArrayNonUniformIndexing;
	public Vk.Bool32 ShaderUniformTexelBufferArrayNonUniformIndexing;
	public Vk.Bool32 ShaderStorageTexelBufferArrayNonUniformIndexing;
	public Vk.Bool32 DescriptorBindingUniformBufferUpdateAfterBind;
	public Vk.Bool32 DescriptorBindingSampledImageUpdateAfterBind;
	public Vk.Bool32 DescriptorBindingStorageImageUpdateAfterBind;
	public Vk.Bool32 DescriptorBindingStorageBufferUpdateAfterBind;
	public Vk.Bool32 DescriptorBindingUniformTexelBufferUpdateAfterBind;
	public Vk.Bool32 DescriptorBindingStorageTexelBufferUpdateAfterBind;
	public Vk.Bool32 DescriptorBindingUpdateUnusedWhilePending;
	public Vk.Bool32 DescriptorBindingPartiallyBound;
	public Vk.Bool32 DescriptorBindingVariableDescriptorCount;
	public Vk.Bool32 RuntimeDescriptorArray;
	public Vk.Bool32 SamplerFilterMinmax;
	public Vk.Bool32 ScalarBlockLayout;
	public Vk.Bool32 ImagelessFramebuffer;
	public Vk.Bool32 UniformBufferStandardLayout;
	public Vk.Bool32 ShaderSubgroupExtendedTypes;
	public Vk.Bool32 SeparateDepthStencilLayouts;
	public Vk.Bool32 HostQueryReset;
	public Vk.Bool32 TimelineSemaphore;
	public Vk.Bool32 BufferDeviceAddress;
	public Vk.Bool32 BufferDeviceAddressCaptureReplay;
	public Vk.Bool32 BufferDeviceAddressMultiDevice;
	public Vk.Bool32 VulkanMemoryModel;
	public Vk.Bool32 VulkanMemoryModelDeviceScope;
	public Vk.Bool32 VulkanMemoryModelAvailabilityVisibilityChains;
	public Vk.Bool32 ShaderOutputViewportIndex;
	public Vk.Bool32 ShaderOutputLayer;
	public Vk.Bool32 SubgroupBroadcastDynamicId;

	/// <summary>Creates a new PhysicalDeviceVulkan12Features value with the correct type field.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void New(out PhysicalDeviceVulkan12Features value) => value = new() { sType = TYPE };
	/// <summary>Initializes the sType and pNext fields to the correct default values.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void Init(ref PhysicalDeviceVulkan12Features value) { value.sType = TYPE; value.pNext = null; }
}

[StructLayout(LayoutKind.Sequential)]
public unsafe partial struct PhysicalDeviceVulkan12Properties
{
	public const Vk.StructureType TYPE = Vk.StructureType.PhysicalDeviceVulkan12Properties;

	public Vk.StructureType sType;
	public void* pNext;
	public Vk.DriverId DriverID;
	public Vk.FixedString DriverName;
	public Vk.FixedString DriverInfo;
	public Vk.ConformanceVersion ConformanceVersion;
	public Vk.ShaderFloatControlsIndependence DenormBehaviorIndependence;
	public Vk.ShaderFloatControlsIndependence RoundingModeIndependence;
	public Vk.Bool32 ShaderSignedZeroInfNanPreserveFloat16;
	public Vk.Bool32 ShaderSignedZeroInfNanPreserveFloat32;
	public Vk.Bool32 ShaderSignedZeroInfNanPreserveFloat64;
	public Vk.Bool32 ShaderDenormPreserveFloat16;
	public Vk.Bool32 ShaderDenormPreserveFloat32;
	public Vk.Bool32 ShaderDenormPreserveFloat64;
	public Vk.Bool32 ShaderDenormFlushToZeroFloat16;
	public Vk.Bool32 ShaderDenormFlushToZeroFloat32;
	public Vk.Bool32 ShaderDenormFlushToZeroFloat64;
	public Vk.Bool32 ShaderRoundingModeRTEFloat16;
	public Vk.Bool32 ShaderRoundingModeRTEFloat32;
	public Vk.Bool32 ShaderRoundingModeRTEFloat64;
	public Vk.Bool32 ShaderRoundingModeRTZFloat16;
	public Vk.Bool32 ShaderRoundingModeRTZFloat32;
	public Vk.Bool32 ShaderRoundingModeRTZFloat64;
	public uint MaxUpdateAfterBindDescriptorsInAllPools;
	public Vk.Bool32 ShaderUniformBufferArrayNonUniformIndexingNative;
	public Vk.Bool32 ShaderSampledImageArrayNonUniformIndexingNative;
	public Vk.Bool32 ShaderStorageBufferArrayNonUniformIndexingNative;
	public Vk.Bool32 ShaderStorageImageArrayNonUniformIndexingNative;
	public Vk.Bool32 ShaderInputAttachmentArrayNonUniformIndexingNative;
	public Vk.Bool32 RobustBufferAccessUpdateAfterBind;
	public Vk.Bool32 QuadDivergentImplicitLod;
	public uint MaxPerStageDescriptorUpdateAfterBindSamplers;
	public uint MaxPerStageDescriptorUpdateAfterBindUniformBuffers;
	public uint MaxPerStageDescriptorUpdateAfterBindStorageBuffers;
	public uint MaxPerStageDescriptorUpdateAfterBindSampledImages;
	public uint MaxPerStageDescriptorUpdateAfterBindStorageImages;
	public uint MaxPerStageDescriptorUpdateAfterBindInputAttachments;
	public uint MaxPerStageUpdateAfterBindResources;
	public uint MaxDescriptorSetUpdateAfterBindSamplers;
	public uint MaxDescriptorSetUpdateAfterBindUniformBuffers;
	public uint MaxDescriptorSetUpdateAfterBindUniformBuffersDynamic;
	public uint MaxDescriptorSetUpdateAfterBindStorageBuffers;
	public uint MaxDescriptorSetUpdateAfterBindStorageBuffersDynamic;
	public uint MaxDescriptorSetUpdateAfterBindSampledImages;
	public uint MaxDescriptorSetUpdateAfterBindStorageImages;
	public uint MaxDescriptorSetUpdateAfterBindInputAttachments;
	public Vk.ResolveModeFlags SupportedDepthResolveModes;
	public Vk.ResolveModeFlags SupportedStencilResolveModes;
	public Vk.Bool32 IndependentResolveNone;
	public Vk.Bool32 IndependentResolve;
	public Vk.Bool32 FilterMinmaxSingleComponentFormats;
	public Vk.Bool32 FilterMinmaxImageComponentMapping;
	public ulong MaxTimelineSemaphoreValueDifference;
	public Vk.SampleCountFlags FramebufferIntegerColorSampleCounts;

	/// <summary>Creates a new PhysicalDeviceVulkan12Properties value with the correct type field.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void New(out PhysicalDeviceVulkan12Properties value) => value = new() { sType = TYPE };
	/// <summary>Initializes the sType and pNext fields to the correct default values.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void Init(ref PhysicalDeviceVulkan12Properties value) { value.sType = TYPE; value.pNext = null; }
}

} // namespace Vk
