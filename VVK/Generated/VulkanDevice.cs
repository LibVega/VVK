/*
 * MIT License - Copyright(c) 2020 Sean Moss
 * This file is subject to the terms and conditions of the MIT License, the text of which can be found in the 'LICENSE'
 * file at the root of this repository, or online at<https://opensource.org/licenses/MIT>.
 */

/// This file was generated by VVKGen. Edits to this file will be lost on next generation.

using System;
using System.Runtime.InteropServices;
using System.Runtime.CompilerServices;


namespace VVK
{

public unsafe sealed partial class VulkanDevice : IDisposable
{
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void DestroyDevice(Vk.Device device, Vk.AllocationCallbacks* pAllocator)
		=> Functions.vkDestroyDevice(device, pAllocator);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void GetDeviceQueue(Vk.Device device, uint queueFamilyIndex, uint queueIndex, Vk.Queue* pQueue)
		=> Functions.vkGetDeviceQueue(device, queueFamilyIndex, queueIndex, pQueue);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result QueueSubmit(Vk.Queue queue, uint submitCount, Vk.SubmitInfo* pSubmits, Vk.Fence fence)
		=> Functions.vkQueueSubmit(queue, submitCount, pSubmits, fence);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result QueueWaitIdle(Vk.Queue queue)
		=> Functions.vkQueueWaitIdle(queue);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result DeviceWaitIdle(Vk.Device device)
		=> Functions.vkDeviceWaitIdle(device);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result AllocateMemory(Vk.Device device, Vk.MemoryAllocateInfo* pAllocateInfo, Vk.AllocationCallbacks* pAllocator, Vk.DeviceMemory* pMemory)
		=> Functions.vkAllocateMemory(device, pAllocateInfo, pAllocator, pMemory);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void FreeMemory(Vk.Device device, Vk.DeviceMemory memory, Vk.AllocationCallbacks* pAllocator)
		=> Functions.vkFreeMemory(device, memory, pAllocator);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result MapMemory(Vk.Device device, Vk.DeviceMemory memory, Vk.DeviceSize offset, Vk.DeviceSize size, Vk.MemoryMapFlags flags, void** ppData)
		=> Functions.vkMapMemory(device, memory, offset, size, flags, ppData);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void UnmapMemory(Vk.Device device, Vk.DeviceMemory memory)
		=> Functions.vkUnmapMemory(device, memory);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result FlushMappedMemoryRanges(Vk.Device device, uint memoryRangeCount, Vk.MappedMemoryRange* pMemoryRanges)
		=> Functions.vkFlushMappedMemoryRanges(device, memoryRangeCount, pMemoryRanges);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result InvalidateMappedMemoryRanges(Vk.Device device, uint memoryRangeCount, Vk.MappedMemoryRange* pMemoryRanges)
		=> Functions.vkInvalidateMappedMemoryRanges(device, memoryRangeCount, pMemoryRanges);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void GetDeviceMemoryCommitment(Vk.Device device, Vk.DeviceMemory memory, Vk.DeviceSize* pCommittedMemoryInBytes)
		=> Functions.vkGetDeviceMemoryCommitment(device, memory, pCommittedMemoryInBytes);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void GetBufferMemoryRequirements(Vk.Device device, Vk.Buffer buffer, Vk.MemoryRequirements* pMemoryRequirements)
		=> Functions.vkGetBufferMemoryRequirements(device, buffer, pMemoryRequirements);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result BindBufferMemory(Vk.Device device, Vk.Buffer buffer, Vk.DeviceMemory memory, Vk.DeviceSize memoryOffset)
		=> Functions.vkBindBufferMemory(device, buffer, memory, memoryOffset);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void GetImageMemoryRequirements(Vk.Device device, Vk.Image image, Vk.MemoryRequirements* pMemoryRequirements)
		=> Functions.vkGetImageMemoryRequirements(device, image, pMemoryRequirements);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result BindImageMemory(Vk.Device device, Vk.Image image, Vk.DeviceMemory memory, Vk.DeviceSize memoryOffset)
		=> Functions.vkBindImageMemory(device, image, memory, memoryOffset);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void GetImageSparseMemoryRequirements(Vk.Device device, Vk.Image image, uint* pSparseMemoryRequirementCount, Vk.SparseImageMemoryRequirements* pSparseMemoryRequirements)
		=> Functions.vkGetImageSparseMemoryRequirements(device, image, pSparseMemoryRequirementCount, pSparseMemoryRequirements);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result QueueBindSparse(Vk.Queue queue, uint bindInfoCount, Vk.BindSparseInfo* pBindInfo, Vk.Fence fence)
		=> Functions.vkQueueBindSparse(queue, bindInfoCount, pBindInfo, fence);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result CreateFence(Vk.Device device, Vk.FenceCreateInfo* pCreateInfo, Vk.AllocationCallbacks* pAllocator, Vk.Fence* pFence)
		=> Functions.vkCreateFence(device, pCreateInfo, pAllocator, pFence);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void DestroyFence(Vk.Device device, Vk.Fence fence, Vk.AllocationCallbacks* pAllocator)
		=> Functions.vkDestroyFence(device, fence, pAllocator);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result ResetFences(Vk.Device device, uint fenceCount, Vk.Fence* pFences)
		=> Functions.vkResetFences(device, fenceCount, pFences);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result GetFenceStatus(Vk.Device device, Vk.Fence fence)
		=> Functions.vkGetFenceStatus(device, fence);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result WaitForFences(Vk.Device device, uint fenceCount, Vk.Fence* pFences, Vk.Bool32 waitAll, ulong timeout)
		=> Functions.vkWaitForFences(device, fenceCount, pFences, waitAll, timeout);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result CreateSemaphore(Vk.Device device, Vk.SemaphoreCreateInfo* pCreateInfo, Vk.AllocationCallbacks* pAllocator, Vk.Semaphore* pSemaphore)
		=> Functions.vkCreateSemaphore(device, pCreateInfo, pAllocator, pSemaphore);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void DestroySemaphore(Vk.Device device, Vk.Semaphore semaphore, Vk.AllocationCallbacks* pAllocator)
		=> Functions.vkDestroySemaphore(device, semaphore, pAllocator);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result CreateEvent(Vk.Device device, Vk.EventCreateInfo* pCreateInfo, Vk.AllocationCallbacks* pAllocator, Vk.Event* pEvent)
		=> Functions.vkCreateEvent(device, pCreateInfo, pAllocator, pEvent);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void DestroyEvent(Vk.Device device, Vk.Event @event, Vk.AllocationCallbacks* pAllocator)
		=> Functions.vkDestroyEvent(device, @event, pAllocator);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result GetEventStatus(Vk.Device device, Vk.Event @event)
		=> Functions.vkGetEventStatus(device, @event);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result SetEvent(Vk.Device device, Vk.Event @event)
		=> Functions.vkSetEvent(device, @event);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result ResetEvent(Vk.Device device, Vk.Event @event)
		=> Functions.vkResetEvent(device, @event);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result CreateQueryPool(Vk.Device device, Vk.QueryPoolCreateInfo* pCreateInfo, Vk.AllocationCallbacks* pAllocator, Vk.QueryPool* pQueryPool)
		=> Functions.vkCreateQueryPool(device, pCreateInfo, pAllocator, pQueryPool);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void DestroyQueryPool(Vk.Device device, Vk.QueryPool queryPool, Vk.AllocationCallbacks* pAllocator)
		=> Functions.vkDestroyQueryPool(device, queryPool, pAllocator);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result GetQueryPoolResults(Vk.Device device, Vk.QueryPool queryPool, uint firstQuery, uint queryCount, ulong dataSize, void* pData, Vk.DeviceSize stride, Vk.QueryResultFlags flags)
		=> Functions.vkGetQueryPoolResults(device, queryPool, firstQuery, queryCount, dataSize, pData, stride, flags);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void ResetQueryPool(Vk.Device device, Vk.QueryPool queryPool, uint firstQuery, uint queryCount)
		=> Functions.vkResetQueryPool(device, queryPool, firstQuery, queryCount);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void ResetQueryPoolEXT(Vk.Device device, Vk.QueryPool queryPool, uint firstQuery, uint queryCount)
	{
		if (Functions.vkResetQueryPoolEXT == null) { throw new VVK.FunctionNotLoadedException("vkResetQueryPoolEXT"); }
		Functions.vkResetQueryPoolEXT(device, queryPool, firstQuery, queryCount);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result CreateBuffer(Vk.Device device, Vk.BufferCreateInfo* pCreateInfo, Vk.AllocationCallbacks* pAllocator, Vk.Buffer* pBuffer)
		=> Functions.vkCreateBuffer(device, pCreateInfo, pAllocator, pBuffer);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void DestroyBuffer(Vk.Device device, Vk.Buffer buffer, Vk.AllocationCallbacks* pAllocator)
		=> Functions.vkDestroyBuffer(device, buffer, pAllocator);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result CreateBufferView(Vk.Device device, Vk.BufferViewCreateInfo* pCreateInfo, Vk.AllocationCallbacks* pAllocator, Vk.BufferView* pView)
		=> Functions.vkCreateBufferView(device, pCreateInfo, pAllocator, pView);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void DestroyBufferView(Vk.Device device, Vk.BufferView bufferView, Vk.AllocationCallbacks* pAllocator)
		=> Functions.vkDestroyBufferView(device, bufferView, pAllocator);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result CreateImage(Vk.Device device, Vk.ImageCreateInfo* pCreateInfo, Vk.AllocationCallbacks* pAllocator, Vk.Image* pImage)
		=> Functions.vkCreateImage(device, pCreateInfo, pAllocator, pImage);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void DestroyImage(Vk.Device device, Vk.Image image, Vk.AllocationCallbacks* pAllocator)
		=> Functions.vkDestroyImage(device, image, pAllocator);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void GetImageSubresourceLayout(Vk.Device device, Vk.Image image, Vk.ImageSubresource* pSubresource, Vk.SubresourceLayout* pLayout)
		=> Functions.vkGetImageSubresourceLayout(device, image, pSubresource, pLayout);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result CreateImageView(Vk.Device device, Vk.ImageViewCreateInfo* pCreateInfo, Vk.AllocationCallbacks* pAllocator, Vk.ImageView* pView)
		=> Functions.vkCreateImageView(device, pCreateInfo, pAllocator, pView);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void DestroyImageView(Vk.Device device, Vk.ImageView imageView, Vk.AllocationCallbacks* pAllocator)
		=> Functions.vkDestroyImageView(device, imageView, pAllocator);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result CreateShaderModule(Vk.Device device, Vk.ShaderModuleCreateInfo* pCreateInfo, Vk.AllocationCallbacks* pAllocator, Vk.ShaderModule* pShaderModule)
		=> Functions.vkCreateShaderModule(device, pCreateInfo, pAllocator, pShaderModule);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void DestroyShaderModule(Vk.Device device, Vk.ShaderModule shaderModule, Vk.AllocationCallbacks* pAllocator)
		=> Functions.vkDestroyShaderModule(device, shaderModule, pAllocator);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result CreatePipelineCache(Vk.Device device, Vk.PipelineCacheCreateInfo* pCreateInfo, Vk.AllocationCallbacks* pAllocator, Vk.PipelineCache* pPipelineCache)
		=> Functions.vkCreatePipelineCache(device, pCreateInfo, pAllocator, pPipelineCache);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void DestroyPipelineCache(Vk.Device device, Vk.PipelineCache pipelineCache, Vk.AllocationCallbacks* pAllocator)
		=> Functions.vkDestroyPipelineCache(device, pipelineCache, pAllocator);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result GetPipelineCacheData(Vk.Device device, Vk.PipelineCache pipelineCache, ulong* pDataSize, void* pData)
		=> Functions.vkGetPipelineCacheData(device, pipelineCache, pDataSize, pData);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result MergePipelineCaches(Vk.Device device, Vk.PipelineCache dstCache, uint srcCacheCount, Vk.PipelineCache* pSrcCaches)
		=> Functions.vkMergePipelineCaches(device, dstCache, srcCacheCount, pSrcCaches);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result CreateGraphicsPipelines(Vk.Device device, Vk.PipelineCache pipelineCache, uint createInfoCount, Vk.GraphicsPipelineCreateInfo* pCreateInfos, Vk.AllocationCallbacks* pAllocator, Vk.Pipeline* pPipelines)
		=> Functions.vkCreateGraphicsPipelines(device, pipelineCache, createInfoCount, pCreateInfos, pAllocator, pPipelines);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result CreateComputePipelines(Vk.Device device, Vk.PipelineCache pipelineCache, uint createInfoCount, Vk.ComputePipelineCreateInfo* pCreateInfos, Vk.AllocationCallbacks* pAllocator, Vk.Pipeline* pPipelines)
		=> Functions.vkCreateComputePipelines(device, pipelineCache, createInfoCount, pCreateInfos, pAllocator, pPipelines);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void DestroyPipeline(Vk.Device device, Vk.Pipeline pipeline, Vk.AllocationCallbacks* pAllocator)
		=> Functions.vkDestroyPipeline(device, pipeline, pAllocator);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result CreatePipelineLayout(Vk.Device device, Vk.PipelineLayoutCreateInfo* pCreateInfo, Vk.AllocationCallbacks* pAllocator, Vk.PipelineLayout* pPipelineLayout)
		=> Functions.vkCreatePipelineLayout(device, pCreateInfo, pAllocator, pPipelineLayout);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void DestroyPipelineLayout(Vk.Device device, Vk.PipelineLayout pipelineLayout, Vk.AllocationCallbacks* pAllocator)
		=> Functions.vkDestroyPipelineLayout(device, pipelineLayout, pAllocator);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result CreateSampler(Vk.Device device, Vk.SamplerCreateInfo* pCreateInfo, Vk.AllocationCallbacks* pAllocator, Vk.Sampler* pSampler)
		=> Functions.vkCreateSampler(device, pCreateInfo, pAllocator, pSampler);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void DestroySampler(Vk.Device device, Vk.Sampler sampler, Vk.AllocationCallbacks* pAllocator)
		=> Functions.vkDestroySampler(device, sampler, pAllocator);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result CreateDescriptorSetLayout(Vk.Device device, Vk.DescriptorSetLayoutCreateInfo* pCreateInfo, Vk.AllocationCallbacks* pAllocator, Vk.DescriptorSetLayout* pSetLayout)
		=> Functions.vkCreateDescriptorSetLayout(device, pCreateInfo, pAllocator, pSetLayout);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void DestroyDescriptorSetLayout(Vk.Device device, Vk.DescriptorSetLayout descriptorSetLayout, Vk.AllocationCallbacks* pAllocator)
		=> Functions.vkDestroyDescriptorSetLayout(device, descriptorSetLayout, pAllocator);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result CreateDescriptorPool(Vk.Device device, Vk.DescriptorPoolCreateInfo* pCreateInfo, Vk.AllocationCallbacks* pAllocator, Vk.DescriptorPool* pDescriptorPool)
		=> Functions.vkCreateDescriptorPool(device, pCreateInfo, pAllocator, pDescriptorPool);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void DestroyDescriptorPool(Vk.Device device, Vk.DescriptorPool descriptorPool, Vk.AllocationCallbacks* pAllocator)
		=> Functions.vkDestroyDescriptorPool(device, descriptorPool, pAllocator);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result ResetDescriptorPool(Vk.Device device, Vk.DescriptorPool descriptorPool, Vk.DescriptorPoolResetFlags flags)
		=> Functions.vkResetDescriptorPool(device, descriptorPool, flags);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result AllocateDescriptorSets(Vk.Device device, Vk.DescriptorSetAllocateInfo* pAllocateInfo, Vk.DescriptorSet* pDescriptorSets)
		=> Functions.vkAllocateDescriptorSets(device, pAllocateInfo, pDescriptorSets);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result FreeDescriptorSets(Vk.Device device, Vk.DescriptorPool descriptorPool, uint descriptorSetCount, Vk.DescriptorSet* pDescriptorSets)
		=> Functions.vkFreeDescriptorSets(device, descriptorPool, descriptorSetCount, pDescriptorSets);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void UpdateDescriptorSets(Vk.Device device, uint descriptorWriteCount, Vk.WriteDescriptorSet* pDescriptorWrites, uint descriptorCopyCount, Vk.CopyDescriptorSet* pDescriptorCopies)
		=> Functions.vkUpdateDescriptorSets(device, descriptorWriteCount, pDescriptorWrites, descriptorCopyCount, pDescriptorCopies);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result CreateFramebuffer(Vk.Device device, Vk.FramebufferCreateInfo* pCreateInfo, Vk.AllocationCallbacks* pAllocator, Vk.Framebuffer* pFramebuffer)
		=> Functions.vkCreateFramebuffer(device, pCreateInfo, pAllocator, pFramebuffer);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void DestroyFramebuffer(Vk.Device device, Vk.Framebuffer framebuffer, Vk.AllocationCallbacks* pAllocator)
		=> Functions.vkDestroyFramebuffer(device, framebuffer, pAllocator);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result CreateRenderPass(Vk.Device device, Vk.RenderPassCreateInfo* pCreateInfo, Vk.AllocationCallbacks* pAllocator, Vk.RenderPass* pRenderPass)
		=> Functions.vkCreateRenderPass(device, pCreateInfo, pAllocator, pRenderPass);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void DestroyRenderPass(Vk.Device device, Vk.RenderPass renderPass, Vk.AllocationCallbacks* pAllocator)
		=> Functions.vkDestroyRenderPass(device, renderPass, pAllocator);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void GetRenderAreaGranularity(Vk.Device device, Vk.RenderPass renderPass, Vk.Extent2D* pGranularity)
		=> Functions.vkGetRenderAreaGranularity(device, renderPass, pGranularity);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result CreateCommandPool(Vk.Device device, Vk.CommandPoolCreateInfo* pCreateInfo, Vk.AllocationCallbacks* pAllocator, Vk.CommandPool* pCommandPool)
		=> Functions.vkCreateCommandPool(device, pCreateInfo, pAllocator, pCommandPool);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void DestroyCommandPool(Vk.Device device, Vk.CommandPool commandPool, Vk.AllocationCallbacks* pAllocator)
		=> Functions.vkDestroyCommandPool(device, commandPool, pAllocator);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result ResetCommandPool(Vk.Device device, Vk.CommandPool commandPool, Vk.CommandPoolResetFlags flags)
		=> Functions.vkResetCommandPool(device, commandPool, flags);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result AllocateCommandBuffers(Vk.Device device, Vk.CommandBufferAllocateInfo* pAllocateInfo, Vk.CommandBuffer* pCommandBuffers)
		=> Functions.vkAllocateCommandBuffers(device, pAllocateInfo, pCommandBuffers);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void FreeCommandBuffers(Vk.Device device, Vk.CommandPool commandPool, uint commandBufferCount, Vk.CommandBuffer* pCommandBuffers)
		=> Functions.vkFreeCommandBuffers(device, commandPool, commandBufferCount, pCommandBuffers);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result BeginCommandBuffer(Vk.CommandBuffer commandBuffer, Vk.CommandBufferBeginInfo* pBeginInfo)
		=> Functions.vkBeginCommandBuffer(commandBuffer, pBeginInfo);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result EndCommandBuffer(Vk.CommandBuffer commandBuffer)
		=> Functions.vkEndCommandBuffer(commandBuffer);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result ResetCommandBuffer(Vk.CommandBuffer commandBuffer, Vk.CommandBufferResetFlags flags)
		=> Functions.vkResetCommandBuffer(commandBuffer, flags);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void CmdBindPipeline(Vk.CommandBuffer commandBuffer, Vk.PipelineBindPoint pipelineBindPoint, Vk.Pipeline pipeline)
		=> Functions.vkCmdBindPipeline(commandBuffer, pipelineBindPoint, pipeline);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void CmdSetViewport(Vk.CommandBuffer commandBuffer, uint firstViewport, uint viewportCount, Vk.Viewport* pViewports)
		=> Functions.vkCmdSetViewport(commandBuffer, firstViewport, viewportCount, pViewports);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void CmdSetScissor(Vk.CommandBuffer commandBuffer, uint firstScissor, uint scissorCount, Vk.Rect2D* pScissors)
		=> Functions.vkCmdSetScissor(commandBuffer, firstScissor, scissorCount, pScissors);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void CmdSetLineWidth(Vk.CommandBuffer commandBuffer, float lineWidth)
		=> Functions.vkCmdSetLineWidth(commandBuffer, lineWidth);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void CmdSetDepthBias(Vk.CommandBuffer commandBuffer, float depthBiasConstantFactor, float depthBiasClamp, float depthBiasSlopeFactor)
		=> Functions.vkCmdSetDepthBias(commandBuffer, depthBiasConstantFactor, depthBiasClamp, depthBiasSlopeFactor);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void CmdSetBlendConstants(Vk.CommandBuffer commandBuffer, float* blendConstants)
		=> Functions.vkCmdSetBlendConstants(commandBuffer, blendConstants);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void CmdSetDepthBounds(Vk.CommandBuffer commandBuffer, float minDepthBounds, float maxDepthBounds)
		=> Functions.vkCmdSetDepthBounds(commandBuffer, minDepthBounds, maxDepthBounds);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void CmdSetStencilCompareMask(Vk.CommandBuffer commandBuffer, Vk.StencilFaceFlags faceMask, uint compareMask)
		=> Functions.vkCmdSetStencilCompareMask(commandBuffer, faceMask, compareMask);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void CmdSetStencilWriteMask(Vk.CommandBuffer commandBuffer, Vk.StencilFaceFlags faceMask, uint writeMask)
		=> Functions.vkCmdSetStencilWriteMask(commandBuffer, faceMask, writeMask);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void CmdSetStencilReference(Vk.CommandBuffer commandBuffer, Vk.StencilFaceFlags faceMask, uint reference)
		=> Functions.vkCmdSetStencilReference(commandBuffer, faceMask, reference);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void CmdBindDescriptorSets(Vk.CommandBuffer commandBuffer, Vk.PipelineBindPoint pipelineBindPoint, Vk.PipelineLayout layout, uint firstSet, uint descriptorSetCount, Vk.DescriptorSet* pDescriptorSets, uint dynamicOffsetCount, uint* pDynamicOffsets)
		=> Functions.vkCmdBindDescriptorSets(commandBuffer, pipelineBindPoint, layout, firstSet, descriptorSetCount, pDescriptorSets, dynamicOffsetCount, pDynamicOffsets);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void CmdBindIndexBuffer(Vk.CommandBuffer commandBuffer, Vk.Buffer buffer, Vk.DeviceSize offset, Vk.IndexType indexType)
		=> Functions.vkCmdBindIndexBuffer(commandBuffer, buffer, offset, indexType);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void CmdBindVertexBuffers(Vk.CommandBuffer commandBuffer, uint firstBinding, uint bindingCount, Vk.Buffer* pBuffers, Vk.DeviceSize* pOffsets)
		=> Functions.vkCmdBindVertexBuffers(commandBuffer, firstBinding, bindingCount, pBuffers, pOffsets);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void CmdDraw(Vk.CommandBuffer commandBuffer, uint vertexCount, uint instanceCount, uint firstVertex, uint firstInstance)
		=> Functions.vkCmdDraw(commandBuffer, vertexCount, instanceCount, firstVertex, firstInstance);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void CmdDrawIndexed(Vk.CommandBuffer commandBuffer, uint indexCount, uint instanceCount, uint firstIndex, int vertexOffset, uint firstInstance)
		=> Functions.vkCmdDrawIndexed(commandBuffer, indexCount, instanceCount, firstIndex, vertexOffset, firstInstance);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void CmdDrawIndirect(Vk.CommandBuffer commandBuffer, Vk.Buffer buffer, Vk.DeviceSize offset, uint drawCount, uint stride)
		=> Functions.vkCmdDrawIndirect(commandBuffer, buffer, offset, drawCount, stride);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void CmdDrawIndexedIndirect(Vk.CommandBuffer commandBuffer, Vk.Buffer buffer, Vk.DeviceSize offset, uint drawCount, uint stride)
		=> Functions.vkCmdDrawIndexedIndirect(commandBuffer, buffer, offset, drawCount, stride);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void CmdDispatch(Vk.CommandBuffer commandBuffer, uint groupCountX, uint groupCountY, uint groupCountZ)
		=> Functions.vkCmdDispatch(commandBuffer, groupCountX, groupCountY, groupCountZ);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void CmdDispatchIndirect(Vk.CommandBuffer commandBuffer, Vk.Buffer buffer, Vk.DeviceSize offset)
		=> Functions.vkCmdDispatchIndirect(commandBuffer, buffer, offset);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void CmdCopyBuffer(Vk.CommandBuffer commandBuffer, Vk.Buffer srcBuffer, Vk.Buffer dstBuffer, uint regionCount, Vk.BufferCopy* pRegions)
		=> Functions.vkCmdCopyBuffer(commandBuffer, srcBuffer, dstBuffer, regionCount, pRegions);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void CmdCopyImage(Vk.CommandBuffer commandBuffer, Vk.Image srcImage, Vk.ImageLayout srcImageLayout, Vk.Image dstImage, Vk.ImageLayout dstImageLayout, uint regionCount, Vk.ImageCopy* pRegions)
		=> Functions.vkCmdCopyImage(commandBuffer, srcImage, srcImageLayout, dstImage, dstImageLayout, regionCount, pRegions);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void CmdBlitImage(Vk.CommandBuffer commandBuffer, Vk.Image srcImage, Vk.ImageLayout srcImageLayout, Vk.Image dstImage, Vk.ImageLayout dstImageLayout, uint regionCount, Vk.ImageBlit* pRegions, Vk.Filter filter)
		=> Functions.vkCmdBlitImage(commandBuffer, srcImage, srcImageLayout, dstImage, dstImageLayout, regionCount, pRegions, filter);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void CmdCopyBufferToImage(Vk.CommandBuffer commandBuffer, Vk.Buffer srcBuffer, Vk.Image dstImage, Vk.ImageLayout dstImageLayout, uint regionCount, Vk.BufferImageCopy* pRegions)
		=> Functions.vkCmdCopyBufferToImage(commandBuffer, srcBuffer, dstImage, dstImageLayout, regionCount, pRegions);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void CmdCopyImageToBuffer(Vk.CommandBuffer commandBuffer, Vk.Image srcImage, Vk.ImageLayout srcImageLayout, Vk.Buffer dstBuffer, uint regionCount, Vk.BufferImageCopy* pRegions)
		=> Functions.vkCmdCopyImageToBuffer(commandBuffer, srcImage, srcImageLayout, dstBuffer, regionCount, pRegions);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void CmdUpdateBuffer(Vk.CommandBuffer commandBuffer, Vk.Buffer dstBuffer, Vk.DeviceSize dstOffset, Vk.DeviceSize dataSize, void* pData)
		=> Functions.vkCmdUpdateBuffer(commandBuffer, dstBuffer, dstOffset, dataSize, pData);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void CmdFillBuffer(Vk.CommandBuffer commandBuffer, Vk.Buffer dstBuffer, Vk.DeviceSize dstOffset, Vk.DeviceSize size, uint data)
		=> Functions.vkCmdFillBuffer(commandBuffer, dstBuffer, dstOffset, size, data);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void CmdClearColorImage(Vk.CommandBuffer commandBuffer, Vk.Image image, Vk.ImageLayout imageLayout, Vk.ClearColorValue* pColor, uint rangeCount, Vk.ImageSubresourceRange* pRanges)
		=> Functions.vkCmdClearColorImage(commandBuffer, image, imageLayout, pColor, rangeCount, pRanges);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void CmdClearDepthStencilImage(Vk.CommandBuffer commandBuffer, Vk.Image image, Vk.ImageLayout imageLayout, Vk.ClearDepthStencilValue* pDepthStencil, uint rangeCount, Vk.ImageSubresourceRange* pRanges)
		=> Functions.vkCmdClearDepthStencilImage(commandBuffer, image, imageLayout, pDepthStencil, rangeCount, pRanges);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void CmdClearAttachments(Vk.CommandBuffer commandBuffer, uint attachmentCount, Vk.ClearAttachment* pAttachments, uint rectCount, Vk.ClearRect* pRects)
		=> Functions.vkCmdClearAttachments(commandBuffer, attachmentCount, pAttachments, rectCount, pRects);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void CmdResolveImage(Vk.CommandBuffer commandBuffer, Vk.Image srcImage, Vk.ImageLayout srcImageLayout, Vk.Image dstImage, Vk.ImageLayout dstImageLayout, uint regionCount, Vk.ImageResolve* pRegions)
		=> Functions.vkCmdResolveImage(commandBuffer, srcImage, srcImageLayout, dstImage, dstImageLayout, regionCount, pRegions);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void CmdSetEvent(Vk.CommandBuffer commandBuffer, Vk.Event @event, Vk.PipelineStageFlags stageMask)
		=> Functions.vkCmdSetEvent(commandBuffer, @event, stageMask);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void CmdResetEvent(Vk.CommandBuffer commandBuffer, Vk.Event @event, Vk.PipelineStageFlags stageMask)
		=> Functions.vkCmdResetEvent(commandBuffer, @event, stageMask);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void CmdWaitEvents(Vk.CommandBuffer commandBuffer, uint eventCount, Vk.Event* pEvents, Vk.PipelineStageFlags srcStageMask, Vk.PipelineStageFlags dstStageMask, uint memoryBarrierCount, Vk.MemoryBarrier* pMemoryBarriers, uint bufferMemoryBarrierCount, Vk.BufferMemoryBarrier* pBufferMemoryBarriers, uint imageMemoryBarrierCount, Vk.ImageMemoryBarrier* pImageMemoryBarriers)
		=> Functions.vkCmdWaitEvents(commandBuffer, eventCount, pEvents, srcStageMask, dstStageMask, memoryBarrierCount, pMemoryBarriers, bufferMemoryBarrierCount, pBufferMemoryBarriers, imageMemoryBarrierCount, pImageMemoryBarriers);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void CmdPipelineBarrier(Vk.CommandBuffer commandBuffer, Vk.PipelineStageFlags srcStageMask, Vk.PipelineStageFlags dstStageMask, Vk.DependencyFlags dependencyFlags, uint memoryBarrierCount, Vk.MemoryBarrier* pMemoryBarriers, uint bufferMemoryBarrierCount, Vk.BufferMemoryBarrier* pBufferMemoryBarriers, uint imageMemoryBarrierCount, Vk.ImageMemoryBarrier* pImageMemoryBarriers)
		=> Functions.vkCmdPipelineBarrier(commandBuffer, srcStageMask, dstStageMask, dependencyFlags, memoryBarrierCount, pMemoryBarriers, bufferMemoryBarrierCount, pBufferMemoryBarriers, imageMemoryBarrierCount, pImageMemoryBarriers);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void CmdBeginQuery(Vk.CommandBuffer commandBuffer, Vk.QueryPool queryPool, uint query, Vk.QueryControlFlags flags)
		=> Functions.vkCmdBeginQuery(commandBuffer, queryPool, query, flags);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void CmdEndQuery(Vk.CommandBuffer commandBuffer, Vk.QueryPool queryPool, uint query)
		=> Functions.vkCmdEndQuery(commandBuffer, queryPool, query);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void CmdBeginConditionalRenderingEXT(Vk.CommandBuffer commandBuffer, Vk.EXT.ConditionalRenderingBeginInfo* pConditionalRenderingBegin)
	{
		if (Functions.vkCmdBeginConditionalRenderingEXT == null) { throw new VVK.FunctionNotLoadedException("vkCmdBeginConditionalRenderingEXT"); }
		Functions.vkCmdBeginConditionalRenderingEXT(commandBuffer, pConditionalRenderingBegin);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void CmdEndConditionalRenderingEXT(Vk.CommandBuffer commandBuffer)
	{
		if (Functions.vkCmdEndConditionalRenderingEXT == null) { throw new VVK.FunctionNotLoadedException("vkCmdEndConditionalRenderingEXT"); }
		Functions.vkCmdEndConditionalRenderingEXT(commandBuffer);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void CmdResetQueryPool(Vk.CommandBuffer commandBuffer, Vk.QueryPool queryPool, uint firstQuery, uint queryCount)
		=> Functions.vkCmdResetQueryPool(commandBuffer, queryPool, firstQuery, queryCount);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void CmdWriteTimestamp(Vk.CommandBuffer commandBuffer, Vk.PipelineStageFlags pipelineStage, Vk.QueryPool queryPool, uint query)
		=> Functions.vkCmdWriteTimestamp(commandBuffer, pipelineStage, queryPool, query);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void CmdCopyQueryPoolResults(Vk.CommandBuffer commandBuffer, Vk.QueryPool queryPool, uint firstQuery, uint queryCount, Vk.Buffer dstBuffer, Vk.DeviceSize dstOffset, Vk.DeviceSize stride, Vk.QueryResultFlags flags)
		=> Functions.vkCmdCopyQueryPoolResults(commandBuffer, queryPool, firstQuery, queryCount, dstBuffer, dstOffset, stride, flags);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void CmdPushConstants(Vk.CommandBuffer commandBuffer, Vk.PipelineLayout layout, Vk.ShaderStageFlags stageFlags, uint offset, uint size, void* pValues)
		=> Functions.vkCmdPushConstants(commandBuffer, layout, stageFlags, offset, size, pValues);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void CmdBeginRenderPass(Vk.CommandBuffer commandBuffer, Vk.RenderPassBeginInfo* pRenderPassBegin, Vk.SubpassContents contents)
		=> Functions.vkCmdBeginRenderPass(commandBuffer, pRenderPassBegin, contents);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void CmdNextSubpass(Vk.CommandBuffer commandBuffer, Vk.SubpassContents contents)
		=> Functions.vkCmdNextSubpass(commandBuffer, contents);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void CmdEndRenderPass(Vk.CommandBuffer commandBuffer)
		=> Functions.vkCmdEndRenderPass(commandBuffer);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void CmdExecuteCommands(Vk.CommandBuffer commandBuffer, uint commandBufferCount, Vk.CommandBuffer* pCommandBuffers)
		=> Functions.vkCmdExecuteCommands(commandBuffer, commandBufferCount, pCommandBuffers);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result CreateSharedSwapchainsKHR(Vk.Device device, uint swapchainCount, Vk.KHR.SwapchainCreateInfo* pCreateInfos, Vk.AllocationCallbacks* pAllocator, Vk.KHR.Swapchain* pSwapchains)
	{
		if (Functions.vkCreateSharedSwapchainsKHR == null) { throw new VVK.FunctionNotLoadedException("vkCreateSharedSwapchainsKHR"); }
		return Functions.vkCreateSharedSwapchainsKHR(device, swapchainCount, pCreateInfos, pAllocator, pSwapchains);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result CreateSwapchainKHR(Vk.Device device, Vk.KHR.SwapchainCreateInfo* pCreateInfo, Vk.AllocationCallbacks* pAllocator, Vk.KHR.Swapchain* pSwapchain)
	{
		if (Functions.vkCreateSwapchainKHR == null) { throw new VVK.FunctionNotLoadedException("vkCreateSwapchainKHR"); }
		return Functions.vkCreateSwapchainKHR(device, pCreateInfo, pAllocator, pSwapchain);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void DestroySwapchainKHR(Vk.Device device, Vk.KHR.Swapchain swapchain, Vk.AllocationCallbacks* pAllocator)
	{
		if (Functions.vkDestroySwapchainKHR == null) { throw new VVK.FunctionNotLoadedException("vkDestroySwapchainKHR"); }
		Functions.vkDestroySwapchainKHR(device, swapchain, pAllocator);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result GetSwapchainImagesKHR(Vk.Device device, Vk.KHR.Swapchain swapchain, uint* pSwapchainImageCount, Vk.Image* pSwapchainImages)
	{
		if (Functions.vkGetSwapchainImagesKHR == null) { throw new VVK.FunctionNotLoadedException("vkGetSwapchainImagesKHR"); }
		return Functions.vkGetSwapchainImagesKHR(device, swapchain, pSwapchainImageCount, pSwapchainImages);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result AcquireNextImageKHR(Vk.Device device, Vk.KHR.Swapchain swapchain, ulong timeout, Vk.Semaphore semaphore, Vk.Fence fence, uint* pImageIndex)
	{
		if (Functions.vkAcquireNextImageKHR == null) { throw new VVK.FunctionNotLoadedException("vkAcquireNextImageKHR"); }
		return Functions.vkAcquireNextImageKHR(device, swapchain, timeout, semaphore, fence, pImageIndex);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result QueuePresentKHR(Vk.Queue queue, Vk.KHR.PresentInfo* pPresentInfo)
	{
		if (Functions.vkQueuePresentKHR == null) { throw new VVK.FunctionNotLoadedException("vkQueuePresentKHR"); }
		return Functions.vkQueuePresentKHR(queue, pPresentInfo);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result DebugMarkerSetObjectNameEXT(Vk.Device device, Vk.EXT.DebugMarkerObjectNameInfo* pNameInfo)
	{
		if (Functions.vkDebugMarkerSetObjectNameEXT == null) { throw new VVK.FunctionNotLoadedException("vkDebugMarkerSetObjectNameEXT"); }
		return Functions.vkDebugMarkerSetObjectNameEXT(device, pNameInfo);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result DebugMarkerSetObjectTagEXT(Vk.Device device, Vk.EXT.DebugMarkerObjectTagInfo* pTagInfo)
	{
		if (Functions.vkDebugMarkerSetObjectTagEXT == null) { throw new VVK.FunctionNotLoadedException("vkDebugMarkerSetObjectTagEXT"); }
		return Functions.vkDebugMarkerSetObjectTagEXT(device, pTagInfo);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void CmdDebugMarkerBeginEXT(Vk.CommandBuffer commandBuffer, Vk.EXT.DebugMarkerMarkerInfo* pMarkerInfo)
	{
		if (Functions.vkCmdDebugMarkerBeginEXT == null) { throw new VVK.FunctionNotLoadedException("vkCmdDebugMarkerBeginEXT"); }
		Functions.vkCmdDebugMarkerBeginEXT(commandBuffer, pMarkerInfo);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void CmdDebugMarkerEndEXT(Vk.CommandBuffer commandBuffer)
	{
		if (Functions.vkCmdDebugMarkerEndEXT == null) { throw new VVK.FunctionNotLoadedException("vkCmdDebugMarkerEndEXT"); }
		Functions.vkCmdDebugMarkerEndEXT(commandBuffer);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void CmdDebugMarkerInsertEXT(Vk.CommandBuffer commandBuffer, Vk.EXT.DebugMarkerMarkerInfo* pMarkerInfo)
	{
		if (Functions.vkCmdDebugMarkerInsertEXT == null) { throw new VVK.FunctionNotLoadedException("vkCmdDebugMarkerInsertEXT"); }
		Functions.vkCmdDebugMarkerInsertEXT(commandBuffer, pMarkerInfo);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result GetMemoryWin32HandleNV(Vk.Device device, Vk.DeviceMemory memory, Vk.NV.ExternalMemoryHandleTypeFlags handleType, void** pHandle)
	{
		if (Functions.vkGetMemoryWin32HandleNV == null) { throw new VVK.FunctionNotLoadedException("vkGetMemoryWin32HandleNV"); }
		return Functions.vkGetMemoryWin32HandleNV(device, memory, handleType, pHandle);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void CmdExecuteGeneratedCommandsNV(Vk.CommandBuffer commandBuffer, Vk.Bool32 isPreprocessed, Vk.NV.GeneratedCommandsInfo* pGeneratedCommandsInfo)
	{
		if (Functions.vkCmdExecuteGeneratedCommandsNV == null) { throw new VVK.FunctionNotLoadedException("vkCmdExecuteGeneratedCommandsNV"); }
		Functions.vkCmdExecuteGeneratedCommandsNV(commandBuffer, isPreprocessed, pGeneratedCommandsInfo);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void CmdPreprocessGeneratedCommandsNV(Vk.CommandBuffer commandBuffer, Vk.NV.GeneratedCommandsInfo* pGeneratedCommandsInfo)
	{
		if (Functions.vkCmdPreprocessGeneratedCommandsNV == null) { throw new VVK.FunctionNotLoadedException("vkCmdPreprocessGeneratedCommandsNV"); }
		Functions.vkCmdPreprocessGeneratedCommandsNV(commandBuffer, pGeneratedCommandsInfo);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void CmdBindPipelineShaderGroupNV(Vk.CommandBuffer commandBuffer, Vk.PipelineBindPoint pipelineBindPoint, Vk.Pipeline pipeline, uint groupIndex)
	{
		if (Functions.vkCmdBindPipelineShaderGroupNV == null) { throw new VVK.FunctionNotLoadedException("vkCmdBindPipelineShaderGroupNV"); }
		Functions.vkCmdBindPipelineShaderGroupNV(commandBuffer, pipelineBindPoint, pipeline, groupIndex);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void GetGeneratedCommandsMemoryRequirementsNV(Vk.Device device, Vk.NV.GeneratedCommandsMemoryRequirementsInfo* pInfo, Vk.MemoryRequirements2* pMemoryRequirements)
	{
		if (Functions.vkGetGeneratedCommandsMemoryRequirementsNV == null) { throw new VVK.FunctionNotLoadedException("vkGetGeneratedCommandsMemoryRequirementsNV"); }
		Functions.vkGetGeneratedCommandsMemoryRequirementsNV(device, pInfo, pMemoryRequirements);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result CreateIndirectCommandsLayoutNV(Vk.Device device, Vk.NV.IndirectCommandsLayoutCreateInfo* pCreateInfo, Vk.AllocationCallbacks* pAllocator, Vk.NV.IndirectCommandsLayout* pIndirectCommandsLayout)
	{
		if (Functions.vkCreateIndirectCommandsLayoutNV == null) { throw new VVK.FunctionNotLoadedException("vkCreateIndirectCommandsLayoutNV"); }
		return Functions.vkCreateIndirectCommandsLayoutNV(device, pCreateInfo, pAllocator, pIndirectCommandsLayout);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void DestroyIndirectCommandsLayoutNV(Vk.Device device, Vk.NV.IndirectCommandsLayout indirectCommandsLayout, Vk.AllocationCallbacks* pAllocator)
	{
		if (Functions.vkDestroyIndirectCommandsLayoutNV == null) { throw new VVK.FunctionNotLoadedException("vkDestroyIndirectCommandsLayoutNV"); }
		Functions.vkDestroyIndirectCommandsLayoutNV(device, indirectCommandsLayout, pAllocator);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void CmdPushDescriptorSetKHR(Vk.CommandBuffer commandBuffer, Vk.PipelineBindPoint pipelineBindPoint, Vk.PipelineLayout layout, uint set, uint descriptorWriteCount, Vk.WriteDescriptorSet* pDescriptorWrites)
	{
		if (Functions.vkCmdPushDescriptorSetKHR == null) { throw new VVK.FunctionNotLoadedException("vkCmdPushDescriptorSetKHR"); }
		Functions.vkCmdPushDescriptorSetKHR(commandBuffer, pipelineBindPoint, layout, set, descriptorWriteCount, pDescriptorWrites);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void TrimCommandPool(Vk.Device device, Vk.CommandPool commandPool, Vk.CommandPoolTrimFlags flags)
		=> Functions.vkTrimCommandPool(device, commandPool, flags);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void TrimCommandPoolKHR(Vk.Device device, Vk.CommandPool commandPool, Vk.CommandPoolTrimFlags flags)
	{
		if (Functions.vkTrimCommandPoolKHR == null) { throw new VVK.FunctionNotLoadedException("vkTrimCommandPoolKHR"); }
		Functions.vkTrimCommandPoolKHR(device, commandPool, flags);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result GetMemoryWin32HandleKHR(Vk.Device device, Vk.KHR.MemoryGetWin32HandleInfo* pGetWin32HandleInfo, void** pHandle)
	{
		if (Functions.vkGetMemoryWin32HandleKHR == null) { throw new VVK.FunctionNotLoadedException("vkGetMemoryWin32HandleKHR"); }
		return Functions.vkGetMemoryWin32HandleKHR(device, pGetWin32HandleInfo, pHandle);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result GetMemoryWin32HandlePropertiesKHR(Vk.Device device, Vk.ExternalMemoryHandleTypeFlags handleType, void* handle, Vk.KHR.MemoryWin32HandleProperties* pMemoryWin32HandleProperties)
	{
		if (Functions.vkGetMemoryWin32HandlePropertiesKHR == null) { throw new VVK.FunctionNotLoadedException("vkGetMemoryWin32HandlePropertiesKHR"); }
		return Functions.vkGetMemoryWin32HandlePropertiesKHR(device, handleType, handle, pMemoryWin32HandleProperties);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result GetMemoryFdKHR(Vk.Device device, Vk.KHR.MemoryGetFdInfo* pGetFdInfo, int* pFd)
	{
		if (Functions.vkGetMemoryFdKHR == null) { throw new VVK.FunctionNotLoadedException("vkGetMemoryFdKHR"); }
		return Functions.vkGetMemoryFdKHR(device, pGetFdInfo, pFd);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result GetMemoryFdPropertiesKHR(Vk.Device device, Vk.ExternalMemoryHandleTypeFlags handleType, int fd, Vk.KHR.MemoryFdProperties* pMemoryFdProperties)
	{
		if (Functions.vkGetMemoryFdPropertiesKHR == null) { throw new VVK.FunctionNotLoadedException("vkGetMemoryFdPropertiesKHR"); }
		return Functions.vkGetMemoryFdPropertiesKHR(device, handleType, fd, pMemoryFdProperties);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result GetSemaphoreWin32HandleKHR(Vk.Device device, Vk.KHR.SemaphoreGetWin32HandleInfo* pGetWin32HandleInfo, void** pHandle)
	{
		if (Functions.vkGetSemaphoreWin32HandleKHR == null) { throw new VVK.FunctionNotLoadedException("vkGetSemaphoreWin32HandleKHR"); }
		return Functions.vkGetSemaphoreWin32HandleKHR(device, pGetWin32HandleInfo, pHandle);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result ImportSemaphoreWin32HandleKHR(Vk.Device device, Vk.KHR.ImportSemaphoreWin32HandleInfo* pImportSemaphoreWin32HandleInfo)
	{
		if (Functions.vkImportSemaphoreWin32HandleKHR == null) { throw new VVK.FunctionNotLoadedException("vkImportSemaphoreWin32HandleKHR"); }
		return Functions.vkImportSemaphoreWin32HandleKHR(device, pImportSemaphoreWin32HandleInfo);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result GetSemaphoreFdKHR(Vk.Device device, Vk.KHR.SemaphoreGetFdInfo* pGetFdInfo, int* pFd)
	{
		if (Functions.vkGetSemaphoreFdKHR == null) { throw new VVK.FunctionNotLoadedException("vkGetSemaphoreFdKHR"); }
		return Functions.vkGetSemaphoreFdKHR(device, pGetFdInfo, pFd);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result ImportSemaphoreFdKHR(Vk.Device device, Vk.KHR.ImportSemaphoreFdInfo* pImportSemaphoreFdInfo)
	{
		if (Functions.vkImportSemaphoreFdKHR == null) { throw new VVK.FunctionNotLoadedException("vkImportSemaphoreFdKHR"); }
		return Functions.vkImportSemaphoreFdKHR(device, pImportSemaphoreFdInfo);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result GetFenceWin32HandleKHR(Vk.Device device, Vk.KHR.FenceGetWin32HandleInfo* pGetWin32HandleInfo, void** pHandle)
	{
		if (Functions.vkGetFenceWin32HandleKHR == null) { throw new VVK.FunctionNotLoadedException("vkGetFenceWin32HandleKHR"); }
		return Functions.vkGetFenceWin32HandleKHR(device, pGetWin32HandleInfo, pHandle);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result ImportFenceWin32HandleKHR(Vk.Device device, Vk.KHR.ImportFenceWin32HandleInfo* pImportFenceWin32HandleInfo)
	{
		if (Functions.vkImportFenceWin32HandleKHR == null) { throw new VVK.FunctionNotLoadedException("vkImportFenceWin32HandleKHR"); }
		return Functions.vkImportFenceWin32HandleKHR(device, pImportFenceWin32HandleInfo);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result GetFenceFdKHR(Vk.Device device, Vk.KHR.FenceGetFdInfo* pGetFdInfo, int* pFd)
	{
		if (Functions.vkGetFenceFdKHR == null) { throw new VVK.FunctionNotLoadedException("vkGetFenceFdKHR"); }
		return Functions.vkGetFenceFdKHR(device, pGetFdInfo, pFd);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result ImportFenceFdKHR(Vk.Device device, Vk.KHR.ImportFenceFdInfo* pImportFenceFdInfo)
	{
		if (Functions.vkImportFenceFdKHR == null) { throw new VVK.FunctionNotLoadedException("vkImportFenceFdKHR"); }
		return Functions.vkImportFenceFdKHR(device, pImportFenceFdInfo);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result DisplayPowerControlEXT(Vk.Device device, Vk.KHR.Display display, Vk.EXT.DisplayPowerInfo* pDisplayPowerInfo)
	{
		if (Functions.vkDisplayPowerControlEXT == null) { throw new VVK.FunctionNotLoadedException("vkDisplayPowerControlEXT"); }
		return Functions.vkDisplayPowerControlEXT(device, display, pDisplayPowerInfo);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result RegisterDeviceEventEXT(Vk.Device device, Vk.EXT.DeviceEventInfo* pDeviceEventInfo, Vk.AllocationCallbacks* pAllocator, Vk.Fence* pFence)
	{
		if (Functions.vkRegisterDeviceEventEXT == null) { throw new VVK.FunctionNotLoadedException("vkRegisterDeviceEventEXT"); }
		return Functions.vkRegisterDeviceEventEXT(device, pDeviceEventInfo, pAllocator, pFence);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result RegisterDisplayEventEXT(Vk.Device device, Vk.KHR.Display display, Vk.EXT.DisplayEventInfo* pDisplayEventInfo, Vk.AllocationCallbacks* pAllocator, Vk.Fence* pFence)
	{
		if (Functions.vkRegisterDisplayEventEXT == null) { throw new VVK.FunctionNotLoadedException("vkRegisterDisplayEventEXT"); }
		return Functions.vkRegisterDisplayEventEXT(device, display, pDisplayEventInfo, pAllocator, pFence);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result GetSwapchainCounterEXT(Vk.Device device, Vk.KHR.Swapchain swapchain, Vk.EXT.SurfaceCounterFlags counter, ulong* pCounterValue)
	{
		if (Functions.vkGetSwapchainCounterEXT == null) { throw new VVK.FunctionNotLoadedException("vkGetSwapchainCounterEXT"); }
		return Functions.vkGetSwapchainCounterEXT(device, swapchain, counter, pCounterValue);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void GetDeviceGroupPeerMemoryFeatures(Vk.Device device, uint heapIndex, uint localDeviceIndex, uint remoteDeviceIndex, Vk.PeerMemoryFeatureFlags* pPeerMemoryFeatures)
		=> Functions.vkGetDeviceGroupPeerMemoryFeatures(device, heapIndex, localDeviceIndex, remoteDeviceIndex, pPeerMemoryFeatures);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void GetDeviceGroupPeerMemoryFeaturesKHR(Vk.Device device, uint heapIndex, uint localDeviceIndex, uint remoteDeviceIndex, Vk.PeerMemoryFeatureFlags* pPeerMemoryFeatures)
	{
		if (Functions.vkGetDeviceGroupPeerMemoryFeaturesKHR == null) { throw new VVK.FunctionNotLoadedException("vkGetDeviceGroupPeerMemoryFeaturesKHR"); }
		Functions.vkGetDeviceGroupPeerMemoryFeaturesKHR(device, heapIndex, localDeviceIndex, remoteDeviceIndex, pPeerMemoryFeatures);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result BindBufferMemory2(Vk.Device device, uint bindInfoCount, Vk.BindBufferMemoryInfo* pBindInfos)
		=> Functions.vkBindBufferMemory2(device, bindInfoCount, pBindInfos);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result BindBufferMemory2KHR(Vk.Device device, uint bindInfoCount, Vk.BindBufferMemoryInfo* pBindInfos)
	{
		if (Functions.vkBindBufferMemory2KHR == null) { throw new VVK.FunctionNotLoadedException("vkBindBufferMemory2KHR"); }
		return Functions.vkBindBufferMemory2KHR(device, bindInfoCount, pBindInfos);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result BindImageMemory2(Vk.Device device, uint bindInfoCount, Vk.BindImageMemoryInfo* pBindInfos)
		=> Functions.vkBindImageMemory2(device, bindInfoCount, pBindInfos);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result BindImageMemory2KHR(Vk.Device device, uint bindInfoCount, Vk.BindImageMemoryInfo* pBindInfos)
	{
		if (Functions.vkBindImageMemory2KHR == null) { throw new VVK.FunctionNotLoadedException("vkBindImageMemory2KHR"); }
		return Functions.vkBindImageMemory2KHR(device, bindInfoCount, pBindInfos);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void CmdSetDeviceMask(Vk.CommandBuffer commandBuffer, uint deviceMask)
		=> Functions.vkCmdSetDeviceMask(commandBuffer, deviceMask);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void CmdSetDeviceMaskKHR(Vk.CommandBuffer commandBuffer, uint deviceMask)
	{
		if (Functions.vkCmdSetDeviceMaskKHR == null) { throw new VVK.FunctionNotLoadedException("vkCmdSetDeviceMaskKHR"); }
		Functions.vkCmdSetDeviceMaskKHR(commandBuffer, deviceMask);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result GetDeviceGroupPresentCapabilitiesKHR(Vk.Device device, Vk.KHR.DeviceGroupPresentCapabilities* pDeviceGroupPresentCapabilities)
	{
		if (Functions.vkGetDeviceGroupPresentCapabilitiesKHR == null) { throw new VVK.FunctionNotLoadedException("vkGetDeviceGroupPresentCapabilitiesKHR"); }
		return Functions.vkGetDeviceGroupPresentCapabilitiesKHR(device, pDeviceGroupPresentCapabilities);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result GetDeviceGroupSurfacePresentModesKHR(Vk.Device device, Vk.KHR.Surface surface, Vk.KHR.DeviceGroupPresentModeFlags* pModes)
	{
		if (Functions.vkGetDeviceGroupSurfacePresentModesKHR == null) { throw new VVK.FunctionNotLoadedException("vkGetDeviceGroupSurfacePresentModesKHR"); }
		return Functions.vkGetDeviceGroupSurfacePresentModesKHR(device, surface, pModes);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result AcquireNextImage2KHR(Vk.Device device, Vk.KHR.AcquireNextImageInfo* pAcquireInfo, uint* pImageIndex)
	{
		if (Functions.vkAcquireNextImage2KHR == null) { throw new VVK.FunctionNotLoadedException("vkAcquireNextImage2KHR"); }
		return Functions.vkAcquireNextImage2KHR(device, pAcquireInfo, pImageIndex);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void CmdDispatchBase(Vk.CommandBuffer commandBuffer, uint baseGroupX, uint baseGroupY, uint baseGroupZ, uint groupCountX, uint groupCountY, uint groupCountZ)
		=> Functions.vkCmdDispatchBase(commandBuffer, baseGroupX, baseGroupY, baseGroupZ, groupCountX, groupCountY, groupCountZ);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void CmdDispatchBaseKHR(Vk.CommandBuffer commandBuffer, uint baseGroupX, uint baseGroupY, uint baseGroupZ, uint groupCountX, uint groupCountY, uint groupCountZ)
	{
		if (Functions.vkCmdDispatchBaseKHR == null) { throw new VVK.FunctionNotLoadedException("vkCmdDispatchBaseKHR"); }
		Functions.vkCmdDispatchBaseKHR(commandBuffer, baseGroupX, baseGroupY, baseGroupZ, groupCountX, groupCountY, groupCountZ);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result CreateDescriptorUpdateTemplate(Vk.Device device, Vk.DescriptorUpdateTemplateCreateInfo* pCreateInfo, Vk.AllocationCallbacks* pAllocator, Vk.DescriptorUpdateTemplate* pDescriptorUpdateTemplate)
		=> Functions.vkCreateDescriptorUpdateTemplate(device, pCreateInfo, pAllocator, pDescriptorUpdateTemplate);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result CreateDescriptorUpdateTemplateKHR(Vk.Device device, Vk.DescriptorUpdateTemplateCreateInfo* pCreateInfo, Vk.AllocationCallbacks* pAllocator, Vk.DescriptorUpdateTemplate* pDescriptorUpdateTemplate)
	{
		if (Functions.vkCreateDescriptorUpdateTemplateKHR == null) { throw new VVK.FunctionNotLoadedException("vkCreateDescriptorUpdateTemplateKHR"); }
		return Functions.vkCreateDescriptorUpdateTemplateKHR(device, pCreateInfo, pAllocator, pDescriptorUpdateTemplate);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void DestroyDescriptorUpdateTemplate(Vk.Device device, Vk.DescriptorUpdateTemplate descriptorUpdateTemplate, Vk.AllocationCallbacks* pAllocator)
		=> Functions.vkDestroyDescriptorUpdateTemplate(device, descriptorUpdateTemplate, pAllocator);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void DestroyDescriptorUpdateTemplateKHR(Vk.Device device, Vk.DescriptorUpdateTemplate descriptorUpdateTemplate, Vk.AllocationCallbacks* pAllocator)
	{
		if (Functions.vkDestroyDescriptorUpdateTemplateKHR == null) { throw new VVK.FunctionNotLoadedException("vkDestroyDescriptorUpdateTemplateKHR"); }
		Functions.vkDestroyDescriptorUpdateTemplateKHR(device, descriptorUpdateTemplate, pAllocator);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void UpdateDescriptorSetWithTemplate(Vk.Device device, Vk.DescriptorSet descriptorSet, Vk.DescriptorUpdateTemplate descriptorUpdateTemplate, void* pData)
		=> Functions.vkUpdateDescriptorSetWithTemplate(device, descriptorSet, descriptorUpdateTemplate, pData);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void UpdateDescriptorSetWithTemplateKHR(Vk.Device device, Vk.DescriptorSet descriptorSet, Vk.DescriptorUpdateTemplate descriptorUpdateTemplate, void* pData)
	{
		if (Functions.vkUpdateDescriptorSetWithTemplateKHR == null) { throw new VVK.FunctionNotLoadedException("vkUpdateDescriptorSetWithTemplateKHR"); }
		Functions.vkUpdateDescriptorSetWithTemplateKHR(device, descriptorSet, descriptorUpdateTemplate, pData);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void CmdPushDescriptorSetWithTemplateKHR(Vk.CommandBuffer commandBuffer, Vk.DescriptorUpdateTemplate descriptorUpdateTemplate, Vk.PipelineLayout layout, uint set, void* pData)
	{
		if (Functions.vkCmdPushDescriptorSetWithTemplateKHR == null) { throw new VVK.FunctionNotLoadedException("vkCmdPushDescriptorSetWithTemplateKHR"); }
		Functions.vkCmdPushDescriptorSetWithTemplateKHR(commandBuffer, descriptorUpdateTemplate, layout, set, pData);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void SetHdrMetadataEXT(Vk.Device device, uint swapchainCount, Vk.KHR.Swapchain* pSwapchains, Vk.EXT.HdrMetadata* pMetadata)
	{
		if (Functions.vkSetHdrMetadataEXT == null) { throw new VVK.FunctionNotLoadedException("vkSetHdrMetadataEXT"); }
		Functions.vkSetHdrMetadataEXT(device, swapchainCount, pSwapchains, pMetadata);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result GetSwapchainStatusKHR(Vk.Device device, Vk.KHR.Swapchain swapchain)
	{
		if (Functions.vkGetSwapchainStatusKHR == null) { throw new VVK.FunctionNotLoadedException("vkGetSwapchainStatusKHR"); }
		return Functions.vkGetSwapchainStatusKHR(device, swapchain);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result GetRefreshCycleDurationGOOGLE(Vk.Device device, Vk.KHR.Swapchain swapchain, Vk.GOOGLE.RefreshCycleDuration* pDisplayTimingProperties)
	{
		if (Functions.vkGetRefreshCycleDurationGOOGLE == null) { throw new VVK.FunctionNotLoadedException("vkGetRefreshCycleDurationGOOGLE"); }
		return Functions.vkGetRefreshCycleDurationGOOGLE(device, swapchain, pDisplayTimingProperties);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result GetPastPresentationTimingGOOGLE(Vk.Device device, Vk.KHR.Swapchain swapchain, uint* pPresentationTimingCount, Vk.GOOGLE.PastPresentationTiming* pPresentationTimings)
	{
		if (Functions.vkGetPastPresentationTimingGOOGLE == null) { throw new VVK.FunctionNotLoadedException("vkGetPastPresentationTimingGOOGLE"); }
		return Functions.vkGetPastPresentationTimingGOOGLE(device, swapchain, pPresentationTimingCount, pPresentationTimings);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void CmdSetViewportWScalingNV(Vk.CommandBuffer commandBuffer, uint firstViewport, uint viewportCount, Vk.NV.ViewportWScaling* pViewportWScalings)
	{
		if (Functions.vkCmdSetViewportWScalingNV == null) { throw new VVK.FunctionNotLoadedException("vkCmdSetViewportWScalingNV"); }
		Functions.vkCmdSetViewportWScalingNV(commandBuffer, firstViewport, viewportCount, pViewportWScalings);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void CmdSetDiscardRectangleEXT(Vk.CommandBuffer commandBuffer, uint firstDiscardRectangle, uint discardRectangleCount, Vk.Rect2D* pDiscardRectangles)
	{
		if (Functions.vkCmdSetDiscardRectangleEXT == null) { throw new VVK.FunctionNotLoadedException("vkCmdSetDiscardRectangleEXT"); }
		Functions.vkCmdSetDiscardRectangleEXT(commandBuffer, firstDiscardRectangle, discardRectangleCount, pDiscardRectangles);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void CmdSetSampleLocationsEXT(Vk.CommandBuffer commandBuffer, Vk.EXT.SampleLocationsInfo* pSampleLocationsInfo)
	{
		if (Functions.vkCmdSetSampleLocationsEXT == null) { throw new VVK.FunctionNotLoadedException("vkCmdSetSampleLocationsEXT"); }
		Functions.vkCmdSetSampleLocationsEXT(commandBuffer, pSampleLocationsInfo);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void GetBufferMemoryRequirements2(Vk.Device device, Vk.BufferMemoryRequirementsInfo2* pInfo, Vk.MemoryRequirements2* pMemoryRequirements)
		=> Functions.vkGetBufferMemoryRequirements2(device, pInfo, pMemoryRequirements);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void GetBufferMemoryRequirements2KHR(Vk.Device device, Vk.BufferMemoryRequirementsInfo2* pInfo, Vk.MemoryRequirements2* pMemoryRequirements)
	{
		if (Functions.vkGetBufferMemoryRequirements2KHR == null) { throw new VVK.FunctionNotLoadedException("vkGetBufferMemoryRequirements2KHR"); }
		Functions.vkGetBufferMemoryRequirements2KHR(device, pInfo, pMemoryRequirements);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void GetImageMemoryRequirements2(Vk.Device device, Vk.ImageMemoryRequirementsInfo2* pInfo, Vk.MemoryRequirements2* pMemoryRequirements)
		=> Functions.vkGetImageMemoryRequirements2(device, pInfo, pMemoryRequirements);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void GetImageMemoryRequirements2KHR(Vk.Device device, Vk.ImageMemoryRequirementsInfo2* pInfo, Vk.MemoryRequirements2* pMemoryRequirements)
	{
		if (Functions.vkGetImageMemoryRequirements2KHR == null) { throw new VVK.FunctionNotLoadedException("vkGetImageMemoryRequirements2KHR"); }
		Functions.vkGetImageMemoryRequirements2KHR(device, pInfo, pMemoryRequirements);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void GetImageSparseMemoryRequirements2(Vk.Device device, Vk.ImageSparseMemoryRequirementsInfo2* pInfo, uint* pSparseMemoryRequirementCount, Vk.SparseImageMemoryRequirements2* pSparseMemoryRequirements)
		=> Functions.vkGetImageSparseMemoryRequirements2(device, pInfo, pSparseMemoryRequirementCount, pSparseMemoryRequirements);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void GetImageSparseMemoryRequirements2KHR(Vk.Device device, Vk.ImageSparseMemoryRequirementsInfo2* pInfo, uint* pSparseMemoryRequirementCount, Vk.SparseImageMemoryRequirements2* pSparseMemoryRequirements)
	{
		if (Functions.vkGetImageSparseMemoryRequirements2KHR == null) { throw new VVK.FunctionNotLoadedException("vkGetImageSparseMemoryRequirements2KHR"); }
		Functions.vkGetImageSparseMemoryRequirements2KHR(device, pInfo, pSparseMemoryRequirementCount, pSparseMemoryRequirements);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result CreateSamplerYcbcrConversion(Vk.Device device, Vk.SamplerYcbcrConversionCreateInfo* pCreateInfo, Vk.AllocationCallbacks* pAllocator, Vk.SamplerYcbcrConversion* pYcbcrConversion)
		=> Functions.vkCreateSamplerYcbcrConversion(device, pCreateInfo, pAllocator, pYcbcrConversion);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result CreateSamplerYcbcrConversionKHR(Vk.Device device, Vk.SamplerYcbcrConversionCreateInfo* pCreateInfo, Vk.AllocationCallbacks* pAllocator, Vk.SamplerYcbcrConversion* pYcbcrConversion)
	{
		if (Functions.vkCreateSamplerYcbcrConversionKHR == null) { throw new VVK.FunctionNotLoadedException("vkCreateSamplerYcbcrConversionKHR"); }
		return Functions.vkCreateSamplerYcbcrConversionKHR(device, pCreateInfo, pAllocator, pYcbcrConversion);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void DestroySamplerYcbcrConversion(Vk.Device device, Vk.SamplerYcbcrConversion ycbcrConversion, Vk.AllocationCallbacks* pAllocator)
		=> Functions.vkDestroySamplerYcbcrConversion(device, ycbcrConversion, pAllocator);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void DestroySamplerYcbcrConversionKHR(Vk.Device device, Vk.SamplerYcbcrConversion ycbcrConversion, Vk.AllocationCallbacks* pAllocator)
	{
		if (Functions.vkDestroySamplerYcbcrConversionKHR == null) { throw new VVK.FunctionNotLoadedException("vkDestroySamplerYcbcrConversionKHR"); }
		Functions.vkDestroySamplerYcbcrConversionKHR(device, ycbcrConversion, pAllocator);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void GetDeviceQueue2(Vk.Device device, Vk.DeviceQueueInfo2* pQueueInfo, Vk.Queue* pQueue)
		=> Functions.vkGetDeviceQueue2(device, pQueueInfo, pQueue);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result CreateValidationCacheEXT(Vk.Device device, Vk.EXT.ValidationCacheCreateInfo* pCreateInfo, Vk.AllocationCallbacks* pAllocator, Vk.EXT.ValidationCache* pValidationCache)
	{
		if (Functions.vkCreateValidationCacheEXT == null) { throw new VVK.FunctionNotLoadedException("vkCreateValidationCacheEXT"); }
		return Functions.vkCreateValidationCacheEXT(device, pCreateInfo, pAllocator, pValidationCache);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void DestroyValidationCacheEXT(Vk.Device device, Vk.EXT.ValidationCache validationCache, Vk.AllocationCallbacks* pAllocator)
	{
		if (Functions.vkDestroyValidationCacheEXT == null) { throw new VVK.FunctionNotLoadedException("vkDestroyValidationCacheEXT"); }
		Functions.vkDestroyValidationCacheEXT(device, validationCache, pAllocator);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result GetValidationCacheDataEXT(Vk.Device device, Vk.EXT.ValidationCache validationCache, ulong* pDataSize, void* pData)
	{
		if (Functions.vkGetValidationCacheDataEXT == null) { throw new VVK.FunctionNotLoadedException("vkGetValidationCacheDataEXT"); }
		return Functions.vkGetValidationCacheDataEXT(device, validationCache, pDataSize, pData);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result MergeValidationCachesEXT(Vk.Device device, Vk.EXT.ValidationCache dstCache, uint srcCacheCount, Vk.EXT.ValidationCache* pSrcCaches)
	{
		if (Functions.vkMergeValidationCachesEXT == null) { throw new VVK.FunctionNotLoadedException("vkMergeValidationCachesEXT"); }
		return Functions.vkMergeValidationCachesEXT(device, dstCache, srcCacheCount, pSrcCaches);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void GetDescriptorSetLayoutSupport(Vk.Device device, Vk.DescriptorSetLayoutCreateInfo* pCreateInfo, Vk.DescriptorSetLayoutSupport* pSupport)
		=> Functions.vkGetDescriptorSetLayoutSupport(device, pCreateInfo, pSupport);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void GetDescriptorSetLayoutSupportKHR(Vk.Device device, Vk.DescriptorSetLayoutCreateInfo* pCreateInfo, Vk.DescriptorSetLayoutSupport* pSupport)
	{
		if (Functions.vkGetDescriptorSetLayoutSupportKHR == null) { throw new VVK.FunctionNotLoadedException("vkGetDescriptorSetLayoutSupportKHR"); }
		Functions.vkGetDescriptorSetLayoutSupportKHR(device, pCreateInfo, pSupport);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result GetSwapchainGrallocUsageANDROID(Vk.Device device, Vk.Format format, Vk.ImageUsageFlags imageUsage, int* grallocUsage)
	{
		if (Functions.vkGetSwapchainGrallocUsageANDROID == null) { throw new VVK.FunctionNotLoadedException("vkGetSwapchainGrallocUsageANDROID"); }
		return Functions.vkGetSwapchainGrallocUsageANDROID(device, format, imageUsage, grallocUsage);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result GetSwapchainGrallocUsage2ANDROID(Vk.Device device, Vk.Format format, Vk.ImageUsageFlags imageUsage, Vk.ANDROID.SwapchainImageUsageFlags swapchainImageUsage, ulong* grallocConsumerUsage, ulong* grallocProducerUsage)
	{
		if (Functions.vkGetSwapchainGrallocUsage2ANDROID == null) { throw new VVK.FunctionNotLoadedException("vkGetSwapchainGrallocUsage2ANDROID"); }
		return Functions.vkGetSwapchainGrallocUsage2ANDROID(device, format, imageUsage, swapchainImageUsage, grallocConsumerUsage, grallocProducerUsage);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result AcquireImageANDROID(Vk.Device device, Vk.Image image, int nativeFenceFd, Vk.Semaphore semaphore, Vk.Fence fence)
	{
		if (Functions.vkAcquireImageANDROID == null) { throw new VVK.FunctionNotLoadedException("vkAcquireImageANDROID"); }
		return Functions.vkAcquireImageANDROID(device, image, nativeFenceFd, semaphore, fence);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result QueueSignalReleaseImageANDROID(Vk.Queue queue, uint waitSemaphoreCount, Vk.Semaphore* pWaitSemaphores, Vk.Image image, int* pNativeFenceFd)
	{
		if (Functions.vkQueueSignalReleaseImageANDROID == null) { throw new VVK.FunctionNotLoadedException("vkQueueSignalReleaseImageANDROID"); }
		return Functions.vkQueueSignalReleaseImageANDROID(queue, waitSemaphoreCount, pWaitSemaphores, image, pNativeFenceFd);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result GetShaderInfoAMD(Vk.Device device, Vk.Pipeline pipeline, Vk.ShaderStageFlags shaderStage, Vk.AMD.ShaderInfoType infoType, ulong* pInfoSize, void* pInfo)
	{
		if (Functions.vkGetShaderInfoAMD == null) { throw new VVK.FunctionNotLoadedException("vkGetShaderInfoAMD"); }
		return Functions.vkGetShaderInfoAMD(device, pipeline, shaderStage, infoType, pInfoSize, pInfo);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void SetLocalDimmingAMD(Vk.Device device, Vk.KHR.Swapchain swapChain, Vk.Bool32 localDimmingEnable)
	{
		if (Functions.vkSetLocalDimmingAMD == null) { throw new VVK.FunctionNotLoadedException("vkSetLocalDimmingAMD"); }
		Functions.vkSetLocalDimmingAMD(device, swapChain, localDimmingEnable);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result GetCalibratedTimestampsEXT(Vk.Device device, uint timestampCount, Vk.EXT.CalibratedTimestampInfo* pTimestampInfos, ulong* pTimestamps, ulong* pMaxDeviation)
	{
		if (Functions.vkGetCalibratedTimestampsEXT == null) { throw new VVK.FunctionNotLoadedException("vkGetCalibratedTimestampsEXT"); }
		return Functions.vkGetCalibratedTimestampsEXT(device, timestampCount, pTimestampInfos, pTimestamps, pMaxDeviation);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result SetDebugUtilsObjectNameEXT(Vk.Device device, Vk.EXT.DebugUtilsObjectNameInfo* pNameInfo)
	{
		if (Functions.vkSetDebugUtilsObjectNameEXT == null) { throw new VVK.FunctionNotLoadedException("vkSetDebugUtilsObjectNameEXT"); }
		return Functions.vkSetDebugUtilsObjectNameEXT(device, pNameInfo);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result SetDebugUtilsObjectTagEXT(Vk.Device device, Vk.EXT.DebugUtilsObjectTagInfo* pTagInfo)
	{
		if (Functions.vkSetDebugUtilsObjectTagEXT == null) { throw new VVK.FunctionNotLoadedException("vkSetDebugUtilsObjectTagEXT"); }
		return Functions.vkSetDebugUtilsObjectTagEXT(device, pTagInfo);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void QueueBeginDebugUtilsLabelEXT(Vk.Queue queue, Vk.EXT.DebugUtilsLabel* pLabelInfo)
	{
		if (Functions.vkQueueBeginDebugUtilsLabelEXT == null) { throw new VVK.FunctionNotLoadedException("vkQueueBeginDebugUtilsLabelEXT"); }
		Functions.vkQueueBeginDebugUtilsLabelEXT(queue, pLabelInfo);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void QueueEndDebugUtilsLabelEXT(Vk.Queue queue)
	{
		if (Functions.vkQueueEndDebugUtilsLabelEXT == null) { throw new VVK.FunctionNotLoadedException("vkQueueEndDebugUtilsLabelEXT"); }
		Functions.vkQueueEndDebugUtilsLabelEXT(queue);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void QueueInsertDebugUtilsLabelEXT(Vk.Queue queue, Vk.EXT.DebugUtilsLabel* pLabelInfo)
	{
		if (Functions.vkQueueInsertDebugUtilsLabelEXT == null) { throw new VVK.FunctionNotLoadedException("vkQueueInsertDebugUtilsLabelEXT"); }
		Functions.vkQueueInsertDebugUtilsLabelEXT(queue, pLabelInfo);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void CmdBeginDebugUtilsLabelEXT(Vk.CommandBuffer commandBuffer, Vk.EXT.DebugUtilsLabel* pLabelInfo)
	{
		if (Functions.vkCmdBeginDebugUtilsLabelEXT == null) { throw new VVK.FunctionNotLoadedException("vkCmdBeginDebugUtilsLabelEXT"); }
		Functions.vkCmdBeginDebugUtilsLabelEXT(commandBuffer, pLabelInfo);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void CmdEndDebugUtilsLabelEXT(Vk.CommandBuffer commandBuffer)
	{
		if (Functions.vkCmdEndDebugUtilsLabelEXT == null) { throw new VVK.FunctionNotLoadedException("vkCmdEndDebugUtilsLabelEXT"); }
		Functions.vkCmdEndDebugUtilsLabelEXT(commandBuffer);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void CmdInsertDebugUtilsLabelEXT(Vk.CommandBuffer commandBuffer, Vk.EXT.DebugUtilsLabel* pLabelInfo)
	{
		if (Functions.vkCmdInsertDebugUtilsLabelEXT == null) { throw new VVK.FunctionNotLoadedException("vkCmdInsertDebugUtilsLabelEXT"); }
		Functions.vkCmdInsertDebugUtilsLabelEXT(commandBuffer, pLabelInfo);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result GetMemoryHostPointerPropertiesEXT(Vk.Device device, Vk.ExternalMemoryHandleTypeFlags handleType, void* pHostPointer, Vk.EXT.MemoryHostPointerProperties* pMemoryHostPointerProperties)
	{
		if (Functions.vkGetMemoryHostPointerPropertiesEXT == null) { throw new VVK.FunctionNotLoadedException("vkGetMemoryHostPointerPropertiesEXT"); }
		return Functions.vkGetMemoryHostPointerPropertiesEXT(device, handleType, pHostPointer, pMemoryHostPointerProperties);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void CmdWriteBufferMarkerAMD(Vk.CommandBuffer commandBuffer, Vk.PipelineStageFlags pipelineStage, Vk.Buffer dstBuffer, Vk.DeviceSize dstOffset, uint marker)
	{
		if (Functions.vkCmdWriteBufferMarkerAMD == null) { throw new VVK.FunctionNotLoadedException("vkCmdWriteBufferMarkerAMD"); }
		Functions.vkCmdWriteBufferMarkerAMD(commandBuffer, pipelineStage, dstBuffer, dstOffset, marker);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result CreateRenderPass2(Vk.Device device, Vk.RenderPassCreateInfo2* pCreateInfo, Vk.AllocationCallbacks* pAllocator, Vk.RenderPass* pRenderPass)
		=> Functions.vkCreateRenderPass2(device, pCreateInfo, pAllocator, pRenderPass);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result CreateRenderPass2KHR(Vk.Device device, Vk.RenderPassCreateInfo2* pCreateInfo, Vk.AllocationCallbacks* pAllocator, Vk.RenderPass* pRenderPass)
	{
		if (Functions.vkCreateRenderPass2KHR == null) { throw new VVK.FunctionNotLoadedException("vkCreateRenderPass2KHR"); }
		return Functions.vkCreateRenderPass2KHR(device, pCreateInfo, pAllocator, pRenderPass);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void CmdBeginRenderPass2(Vk.CommandBuffer commandBuffer, Vk.RenderPassBeginInfo* pRenderPassBegin, Vk.SubpassBeginInfo* pSubpassBeginInfo)
		=> Functions.vkCmdBeginRenderPass2(commandBuffer, pRenderPassBegin, pSubpassBeginInfo);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void CmdBeginRenderPass2KHR(Vk.CommandBuffer commandBuffer, Vk.RenderPassBeginInfo* pRenderPassBegin, Vk.SubpassBeginInfo* pSubpassBeginInfo)
	{
		if (Functions.vkCmdBeginRenderPass2KHR == null) { throw new VVK.FunctionNotLoadedException("vkCmdBeginRenderPass2KHR"); }
		Functions.vkCmdBeginRenderPass2KHR(commandBuffer, pRenderPassBegin, pSubpassBeginInfo);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void CmdNextSubpass2(Vk.CommandBuffer commandBuffer, Vk.SubpassBeginInfo* pSubpassBeginInfo, Vk.SubpassEndInfo* pSubpassEndInfo)
		=> Functions.vkCmdNextSubpass2(commandBuffer, pSubpassBeginInfo, pSubpassEndInfo);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void CmdNextSubpass2KHR(Vk.CommandBuffer commandBuffer, Vk.SubpassBeginInfo* pSubpassBeginInfo, Vk.SubpassEndInfo* pSubpassEndInfo)
	{
		if (Functions.vkCmdNextSubpass2KHR == null) { throw new VVK.FunctionNotLoadedException("vkCmdNextSubpass2KHR"); }
		Functions.vkCmdNextSubpass2KHR(commandBuffer, pSubpassBeginInfo, pSubpassEndInfo);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void CmdEndRenderPass2(Vk.CommandBuffer commandBuffer, Vk.SubpassEndInfo* pSubpassEndInfo)
		=> Functions.vkCmdEndRenderPass2(commandBuffer, pSubpassEndInfo);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void CmdEndRenderPass2KHR(Vk.CommandBuffer commandBuffer, Vk.SubpassEndInfo* pSubpassEndInfo)
	{
		if (Functions.vkCmdEndRenderPass2KHR == null) { throw new VVK.FunctionNotLoadedException("vkCmdEndRenderPass2KHR"); }
		Functions.vkCmdEndRenderPass2KHR(commandBuffer, pSubpassEndInfo);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result GetSemaphoreCounterValue(Vk.Device device, Vk.Semaphore semaphore, ulong* pValue)
		=> Functions.vkGetSemaphoreCounterValue(device, semaphore, pValue);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result GetSemaphoreCounterValueKHR(Vk.Device device, Vk.Semaphore semaphore, ulong* pValue)
	{
		if (Functions.vkGetSemaphoreCounterValueKHR == null) { throw new VVK.FunctionNotLoadedException("vkGetSemaphoreCounterValueKHR"); }
		return Functions.vkGetSemaphoreCounterValueKHR(device, semaphore, pValue);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result WaitSemaphores(Vk.Device device, Vk.SemaphoreWaitInfo* pWaitInfo, ulong timeout)
		=> Functions.vkWaitSemaphores(device, pWaitInfo, timeout);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result WaitSemaphoresKHR(Vk.Device device, Vk.SemaphoreWaitInfo* pWaitInfo, ulong timeout)
	{
		if (Functions.vkWaitSemaphoresKHR == null) { throw new VVK.FunctionNotLoadedException("vkWaitSemaphoresKHR"); }
		return Functions.vkWaitSemaphoresKHR(device, pWaitInfo, timeout);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result SignalSemaphore(Vk.Device device, Vk.SemaphoreSignalInfo* pSignalInfo)
		=> Functions.vkSignalSemaphore(device, pSignalInfo);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result SignalSemaphoreKHR(Vk.Device device, Vk.SemaphoreSignalInfo* pSignalInfo)
	{
		if (Functions.vkSignalSemaphoreKHR == null) { throw new VVK.FunctionNotLoadedException("vkSignalSemaphoreKHR"); }
		return Functions.vkSignalSemaphoreKHR(device, pSignalInfo);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result GetAndroidHardwareBufferPropertiesANDROID(Vk.Device device, void* buffer, Vk.ANDROID.AndroidHardwareBufferProperties* pProperties)
	{
		if (Functions.vkGetAndroidHardwareBufferPropertiesANDROID == null) { throw new VVK.FunctionNotLoadedException("vkGetAndroidHardwareBufferPropertiesANDROID"); }
		return Functions.vkGetAndroidHardwareBufferPropertiesANDROID(device, buffer, pProperties);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result GetMemoryAndroidHardwareBufferANDROID(Vk.Device device, Vk.ANDROID.MemoryGetAndroidHardwareBufferInfo* pInfo, void** pBuffer)
	{
		if (Functions.vkGetMemoryAndroidHardwareBufferANDROID == null) { throw new VVK.FunctionNotLoadedException("vkGetMemoryAndroidHardwareBufferANDROID"); }
		return Functions.vkGetMemoryAndroidHardwareBufferANDROID(device, pInfo, pBuffer);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void CmdDrawIndirectCount(Vk.CommandBuffer commandBuffer, Vk.Buffer buffer, Vk.DeviceSize offset, Vk.Buffer countBuffer, Vk.DeviceSize countBufferOffset, uint maxDrawCount, uint stride)
		=> Functions.vkCmdDrawIndirectCount(commandBuffer, buffer, offset, countBuffer, countBufferOffset, maxDrawCount, stride);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void CmdDrawIndirectCountKHR(Vk.CommandBuffer commandBuffer, Vk.Buffer buffer, Vk.DeviceSize offset, Vk.Buffer countBuffer, Vk.DeviceSize countBufferOffset, uint maxDrawCount, uint stride)
	{
		if (Functions.vkCmdDrawIndirectCountKHR == null) { throw new VVK.FunctionNotLoadedException("vkCmdDrawIndirectCountKHR"); }
		Functions.vkCmdDrawIndirectCountKHR(commandBuffer, buffer, offset, countBuffer, countBufferOffset, maxDrawCount, stride);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void CmdDrawIndirectCountAMD(Vk.CommandBuffer commandBuffer, Vk.Buffer buffer, Vk.DeviceSize offset, Vk.Buffer countBuffer, Vk.DeviceSize countBufferOffset, uint maxDrawCount, uint stride)
	{
		if (Functions.vkCmdDrawIndirectCountAMD == null) { throw new VVK.FunctionNotLoadedException("vkCmdDrawIndirectCountAMD"); }
		Functions.vkCmdDrawIndirectCountAMD(commandBuffer, buffer, offset, countBuffer, countBufferOffset, maxDrawCount, stride);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void CmdDrawIndexedIndirectCount(Vk.CommandBuffer commandBuffer, Vk.Buffer buffer, Vk.DeviceSize offset, Vk.Buffer countBuffer, Vk.DeviceSize countBufferOffset, uint maxDrawCount, uint stride)
		=> Functions.vkCmdDrawIndexedIndirectCount(commandBuffer, buffer, offset, countBuffer, countBufferOffset, maxDrawCount, stride);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void CmdDrawIndexedIndirectCountKHR(Vk.CommandBuffer commandBuffer, Vk.Buffer buffer, Vk.DeviceSize offset, Vk.Buffer countBuffer, Vk.DeviceSize countBufferOffset, uint maxDrawCount, uint stride)
	{
		if (Functions.vkCmdDrawIndexedIndirectCountKHR == null) { throw new VVK.FunctionNotLoadedException("vkCmdDrawIndexedIndirectCountKHR"); }
		Functions.vkCmdDrawIndexedIndirectCountKHR(commandBuffer, buffer, offset, countBuffer, countBufferOffset, maxDrawCount, stride);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void CmdDrawIndexedIndirectCountAMD(Vk.CommandBuffer commandBuffer, Vk.Buffer buffer, Vk.DeviceSize offset, Vk.Buffer countBuffer, Vk.DeviceSize countBufferOffset, uint maxDrawCount, uint stride)
	{
		if (Functions.vkCmdDrawIndexedIndirectCountAMD == null) { throw new VVK.FunctionNotLoadedException("vkCmdDrawIndexedIndirectCountAMD"); }
		Functions.vkCmdDrawIndexedIndirectCountAMD(commandBuffer, buffer, offset, countBuffer, countBufferOffset, maxDrawCount, stride);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void CmdSetCheckpointNV(Vk.CommandBuffer commandBuffer, void* pCheckpointMarker)
	{
		if (Functions.vkCmdSetCheckpointNV == null) { throw new VVK.FunctionNotLoadedException("vkCmdSetCheckpointNV"); }
		Functions.vkCmdSetCheckpointNV(commandBuffer, pCheckpointMarker);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void GetQueueCheckpointDataNV(Vk.Queue queue, uint* pCheckpointDataCount, Vk.NV.CheckpointData* pCheckpointData)
	{
		if (Functions.vkGetQueueCheckpointDataNV == null) { throw new VVK.FunctionNotLoadedException("vkGetQueueCheckpointDataNV"); }
		Functions.vkGetQueueCheckpointDataNV(queue, pCheckpointDataCount, pCheckpointData);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void CmdBindTransformFeedbackBuffersEXT(Vk.CommandBuffer commandBuffer, uint firstBinding, uint bindingCount, Vk.Buffer* pBuffers, Vk.DeviceSize* pOffsets, Vk.DeviceSize* pSizes)
	{
		if (Functions.vkCmdBindTransformFeedbackBuffersEXT == null) { throw new VVK.FunctionNotLoadedException("vkCmdBindTransformFeedbackBuffersEXT"); }
		Functions.vkCmdBindTransformFeedbackBuffersEXT(commandBuffer, firstBinding, bindingCount, pBuffers, pOffsets, pSizes);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void CmdBeginTransformFeedbackEXT(Vk.CommandBuffer commandBuffer, uint firstCounterBuffer, uint counterBufferCount, Vk.Buffer* pCounterBuffers, Vk.DeviceSize* pCounterBufferOffsets)
	{
		if (Functions.vkCmdBeginTransformFeedbackEXT == null) { throw new VVK.FunctionNotLoadedException("vkCmdBeginTransformFeedbackEXT"); }
		Functions.vkCmdBeginTransformFeedbackEXT(commandBuffer, firstCounterBuffer, counterBufferCount, pCounterBuffers, pCounterBufferOffsets);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void CmdEndTransformFeedbackEXT(Vk.CommandBuffer commandBuffer, uint firstCounterBuffer, uint counterBufferCount, Vk.Buffer* pCounterBuffers, Vk.DeviceSize* pCounterBufferOffsets)
	{
		if (Functions.vkCmdEndTransformFeedbackEXT == null) { throw new VVK.FunctionNotLoadedException("vkCmdEndTransformFeedbackEXT"); }
		Functions.vkCmdEndTransformFeedbackEXT(commandBuffer, firstCounterBuffer, counterBufferCount, pCounterBuffers, pCounterBufferOffsets);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void CmdBeginQueryIndexedEXT(Vk.CommandBuffer commandBuffer, Vk.QueryPool queryPool, uint query, Vk.QueryControlFlags flags, uint index)
	{
		if (Functions.vkCmdBeginQueryIndexedEXT == null) { throw new VVK.FunctionNotLoadedException("vkCmdBeginQueryIndexedEXT"); }
		Functions.vkCmdBeginQueryIndexedEXT(commandBuffer, queryPool, query, flags, index);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void CmdEndQueryIndexedEXT(Vk.CommandBuffer commandBuffer, Vk.QueryPool queryPool, uint query, uint index)
	{
		if (Functions.vkCmdEndQueryIndexedEXT == null) { throw new VVK.FunctionNotLoadedException("vkCmdEndQueryIndexedEXT"); }
		Functions.vkCmdEndQueryIndexedEXT(commandBuffer, queryPool, query, index);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void CmdDrawIndirectByteCountEXT(Vk.CommandBuffer commandBuffer, uint instanceCount, uint firstInstance, Vk.Buffer counterBuffer, Vk.DeviceSize counterBufferOffset, uint counterOffset, uint vertexStride)
	{
		if (Functions.vkCmdDrawIndirectByteCountEXT == null) { throw new VVK.FunctionNotLoadedException("vkCmdDrawIndirectByteCountEXT"); }
		Functions.vkCmdDrawIndirectByteCountEXT(commandBuffer, instanceCount, firstInstance, counterBuffer, counterBufferOffset, counterOffset, vertexStride);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void CmdSetExclusiveScissorNV(Vk.CommandBuffer commandBuffer, uint firstExclusiveScissor, uint exclusiveScissorCount, Vk.Rect2D* pExclusiveScissors)
	{
		if (Functions.vkCmdSetExclusiveScissorNV == null) { throw new VVK.FunctionNotLoadedException("vkCmdSetExclusiveScissorNV"); }
		Functions.vkCmdSetExclusiveScissorNV(commandBuffer, firstExclusiveScissor, exclusiveScissorCount, pExclusiveScissors);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void CmdBindShadingRateImageNV(Vk.CommandBuffer commandBuffer, Vk.ImageView imageView, Vk.ImageLayout imageLayout)
	{
		if (Functions.vkCmdBindShadingRateImageNV == null) { throw new VVK.FunctionNotLoadedException("vkCmdBindShadingRateImageNV"); }
		Functions.vkCmdBindShadingRateImageNV(commandBuffer, imageView, imageLayout);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void CmdSetViewportShadingRatePaletteNV(Vk.CommandBuffer commandBuffer, uint firstViewport, uint viewportCount, Vk.NV.ShadingRatePalette* pShadingRatePalettes)
	{
		if (Functions.vkCmdSetViewportShadingRatePaletteNV == null) { throw new VVK.FunctionNotLoadedException("vkCmdSetViewportShadingRatePaletteNV"); }
		Functions.vkCmdSetViewportShadingRatePaletteNV(commandBuffer, firstViewport, viewportCount, pShadingRatePalettes);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void CmdSetCoarseSampleOrderNV(Vk.CommandBuffer commandBuffer, Vk.NV.CoarseSampleOrderType sampleOrderType, uint customSampleOrderCount, Vk.NV.CoarseSampleOrderCustom* pCustomSampleOrders)
	{
		if (Functions.vkCmdSetCoarseSampleOrderNV == null) { throw new VVK.FunctionNotLoadedException("vkCmdSetCoarseSampleOrderNV"); }
		Functions.vkCmdSetCoarseSampleOrderNV(commandBuffer, sampleOrderType, customSampleOrderCount, pCustomSampleOrders);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void CmdDrawMeshTasksNV(Vk.CommandBuffer commandBuffer, uint taskCount, uint firstTask)
	{
		if (Functions.vkCmdDrawMeshTasksNV == null) { throw new VVK.FunctionNotLoadedException("vkCmdDrawMeshTasksNV"); }
		Functions.vkCmdDrawMeshTasksNV(commandBuffer, taskCount, firstTask);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void CmdDrawMeshTasksIndirectNV(Vk.CommandBuffer commandBuffer, Vk.Buffer buffer, Vk.DeviceSize offset, uint drawCount, uint stride)
	{
		if (Functions.vkCmdDrawMeshTasksIndirectNV == null) { throw new VVK.FunctionNotLoadedException("vkCmdDrawMeshTasksIndirectNV"); }
		Functions.vkCmdDrawMeshTasksIndirectNV(commandBuffer, buffer, offset, drawCount, stride);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void CmdDrawMeshTasksIndirectCountNV(Vk.CommandBuffer commandBuffer, Vk.Buffer buffer, Vk.DeviceSize offset, Vk.Buffer countBuffer, Vk.DeviceSize countBufferOffset, uint maxDrawCount, uint stride)
	{
		if (Functions.vkCmdDrawMeshTasksIndirectCountNV == null) { throw new VVK.FunctionNotLoadedException("vkCmdDrawMeshTasksIndirectCountNV"); }
		Functions.vkCmdDrawMeshTasksIndirectCountNV(commandBuffer, buffer, offset, countBuffer, countBufferOffset, maxDrawCount, stride);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result CompileDeferredNV(Vk.Device device, Vk.Pipeline pipeline, uint shader)
	{
		if (Functions.vkCompileDeferredNV == null) { throw new VVK.FunctionNotLoadedException("vkCompileDeferredNV"); }
		return Functions.vkCompileDeferredNV(device, pipeline, shader);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result CreateAccelerationStructureNV(Vk.Device device, Vk.NV.AccelerationStructureCreateInfo* pCreateInfo, Vk.AllocationCallbacks* pAllocator, Vk.NV.AccelerationStructure* pAccelerationStructure)
	{
		if (Functions.vkCreateAccelerationStructureNV == null) { throw new VVK.FunctionNotLoadedException("vkCreateAccelerationStructureNV"); }
		return Functions.vkCreateAccelerationStructureNV(device, pCreateInfo, pAllocator, pAccelerationStructure);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void DestroyAccelerationStructureKHR(Vk.Device device, Vk.KHR.AccelerationStructure accelerationStructure, Vk.AllocationCallbacks* pAllocator)
	{
		if (Functions.vkDestroyAccelerationStructureKHR == null) { throw new VVK.FunctionNotLoadedException("vkDestroyAccelerationStructureKHR"); }
		Functions.vkDestroyAccelerationStructureKHR(device, accelerationStructure, pAllocator);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void DestroyAccelerationStructureNV(Vk.Device device, Vk.KHR.AccelerationStructure accelerationStructure, Vk.AllocationCallbacks* pAllocator)
	{
		if (Functions.vkDestroyAccelerationStructureNV == null) { throw new VVK.FunctionNotLoadedException("vkDestroyAccelerationStructureNV"); }
		Functions.vkDestroyAccelerationStructureNV(device, accelerationStructure, pAllocator);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void GetAccelerationStructureMemoryRequirementsKHR(Vk.Device device, Vk.KHR.AccelerationStructureMemoryRequirementsInfo* pInfo, Vk.MemoryRequirements2* pMemoryRequirements)
	{
		if (Functions.vkGetAccelerationStructureMemoryRequirementsKHR == null) { throw new VVK.FunctionNotLoadedException("vkGetAccelerationStructureMemoryRequirementsKHR"); }
		Functions.vkGetAccelerationStructureMemoryRequirementsKHR(device, pInfo, pMemoryRequirements);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void GetAccelerationStructureMemoryRequirementsNV(Vk.Device device, Vk.NV.AccelerationStructureMemoryRequirementsInfo* pInfo, Vk.KHR.MemoryRequirements2* pMemoryRequirements)
	{
		if (Functions.vkGetAccelerationStructureMemoryRequirementsNV == null) { throw new VVK.FunctionNotLoadedException("vkGetAccelerationStructureMemoryRequirementsNV"); }
		Functions.vkGetAccelerationStructureMemoryRequirementsNV(device, pInfo, pMemoryRequirements);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result BindAccelerationStructureMemoryKHR(Vk.Device device, uint bindInfoCount, Vk.KHR.BindAccelerationStructureMemoryInfo* pBindInfos)
	{
		if (Functions.vkBindAccelerationStructureMemoryKHR == null) { throw new VVK.FunctionNotLoadedException("vkBindAccelerationStructureMemoryKHR"); }
		return Functions.vkBindAccelerationStructureMemoryKHR(device, bindInfoCount, pBindInfos);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result BindAccelerationStructureMemoryNV(Vk.Device device, uint bindInfoCount, Vk.KHR.BindAccelerationStructureMemoryInfo* pBindInfos)
	{
		if (Functions.vkBindAccelerationStructureMemoryNV == null) { throw new VVK.FunctionNotLoadedException("vkBindAccelerationStructureMemoryNV"); }
		return Functions.vkBindAccelerationStructureMemoryNV(device, bindInfoCount, pBindInfos);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void CmdCopyAccelerationStructureNV(Vk.CommandBuffer commandBuffer, Vk.KHR.AccelerationStructure dst, Vk.KHR.AccelerationStructure src, Vk.KHR.CopyAccelerationStructureMode mode)
	{
		if (Functions.vkCmdCopyAccelerationStructureNV == null) { throw new VVK.FunctionNotLoadedException("vkCmdCopyAccelerationStructureNV"); }
		Functions.vkCmdCopyAccelerationStructureNV(commandBuffer, dst, src, mode);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void CmdCopyAccelerationStructureKHR(Vk.CommandBuffer commandBuffer, Vk.KHR.CopyAccelerationStructureInfo* pInfo)
	{
		if (Functions.vkCmdCopyAccelerationStructureKHR == null) { throw new VVK.FunctionNotLoadedException("vkCmdCopyAccelerationStructureKHR"); }
		Functions.vkCmdCopyAccelerationStructureKHR(commandBuffer, pInfo);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result CopyAccelerationStructureKHR(Vk.Device device, Vk.KHR.CopyAccelerationStructureInfo* pInfo)
	{
		if (Functions.vkCopyAccelerationStructureKHR == null) { throw new VVK.FunctionNotLoadedException("vkCopyAccelerationStructureKHR"); }
		return Functions.vkCopyAccelerationStructureKHR(device, pInfo);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void CmdCopyAccelerationStructureToMemoryKHR(Vk.CommandBuffer commandBuffer, Vk.KHR.CopyAccelerationStructureToMemoryInfo* pInfo)
	{
		if (Functions.vkCmdCopyAccelerationStructureToMemoryKHR == null) { throw new VVK.FunctionNotLoadedException("vkCmdCopyAccelerationStructureToMemoryKHR"); }
		Functions.vkCmdCopyAccelerationStructureToMemoryKHR(commandBuffer, pInfo);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result CopyAccelerationStructureToMemoryKHR(Vk.Device device, Vk.KHR.CopyAccelerationStructureToMemoryInfo* pInfo)
	{
		if (Functions.vkCopyAccelerationStructureToMemoryKHR == null) { throw new VVK.FunctionNotLoadedException("vkCopyAccelerationStructureToMemoryKHR"); }
		return Functions.vkCopyAccelerationStructureToMemoryKHR(device, pInfo);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void CmdCopyMemoryToAccelerationStructureKHR(Vk.CommandBuffer commandBuffer, Vk.KHR.CopyMemoryToAccelerationStructureInfo* pInfo)
	{
		if (Functions.vkCmdCopyMemoryToAccelerationStructureKHR == null) { throw new VVK.FunctionNotLoadedException("vkCmdCopyMemoryToAccelerationStructureKHR"); }
		Functions.vkCmdCopyMemoryToAccelerationStructureKHR(commandBuffer, pInfo);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result CopyMemoryToAccelerationStructureKHR(Vk.Device device, Vk.KHR.CopyMemoryToAccelerationStructureInfo* pInfo)
	{
		if (Functions.vkCopyMemoryToAccelerationStructureKHR == null) { throw new VVK.FunctionNotLoadedException("vkCopyMemoryToAccelerationStructureKHR"); }
		return Functions.vkCopyMemoryToAccelerationStructureKHR(device, pInfo);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void CmdWriteAccelerationStructuresPropertiesKHR(Vk.CommandBuffer commandBuffer, uint accelerationStructureCount, Vk.KHR.AccelerationStructure* pAccelerationStructures, Vk.QueryType queryType, Vk.QueryPool queryPool, uint firstQuery)
	{
		if (Functions.vkCmdWriteAccelerationStructuresPropertiesKHR == null) { throw new VVK.FunctionNotLoadedException("vkCmdWriteAccelerationStructuresPropertiesKHR"); }
		Functions.vkCmdWriteAccelerationStructuresPropertiesKHR(commandBuffer, accelerationStructureCount, pAccelerationStructures, queryType, queryPool, firstQuery);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void CmdWriteAccelerationStructuresPropertiesNV(Vk.CommandBuffer commandBuffer, uint accelerationStructureCount, Vk.KHR.AccelerationStructure* pAccelerationStructures, Vk.QueryType queryType, Vk.QueryPool queryPool, uint firstQuery)
	{
		if (Functions.vkCmdWriteAccelerationStructuresPropertiesNV == null) { throw new VVK.FunctionNotLoadedException("vkCmdWriteAccelerationStructuresPropertiesNV"); }
		Functions.vkCmdWriteAccelerationStructuresPropertiesNV(commandBuffer, accelerationStructureCount, pAccelerationStructures, queryType, queryPool, firstQuery);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void CmdBuildAccelerationStructureNV(Vk.CommandBuffer commandBuffer, Vk.NV.AccelerationStructureInfo* pInfo, Vk.Buffer instanceData, Vk.DeviceSize instanceOffset, Vk.Bool32 update, Vk.KHR.AccelerationStructure dst, Vk.KHR.AccelerationStructure src, Vk.Buffer scratch, Vk.DeviceSize scratchOffset)
	{
		if (Functions.vkCmdBuildAccelerationStructureNV == null) { throw new VVK.FunctionNotLoadedException("vkCmdBuildAccelerationStructureNV"); }
		Functions.vkCmdBuildAccelerationStructureNV(commandBuffer, pInfo, instanceData, instanceOffset, update, dst, src, scratch, scratchOffset);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result WriteAccelerationStructuresPropertiesKHR(Vk.Device device, uint accelerationStructureCount, Vk.KHR.AccelerationStructure* pAccelerationStructures, Vk.QueryType queryType, ulong dataSize, void* pData, ulong stride)
	{
		if (Functions.vkWriteAccelerationStructuresPropertiesKHR == null) { throw new VVK.FunctionNotLoadedException("vkWriteAccelerationStructuresPropertiesKHR"); }
		return Functions.vkWriteAccelerationStructuresPropertiesKHR(device, accelerationStructureCount, pAccelerationStructures, queryType, dataSize, pData, stride);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void CmdTraceRaysKHR(Vk.CommandBuffer commandBuffer, Vk.KHR.StridedBufferRegion* pRaygenShaderBindingTable, Vk.KHR.StridedBufferRegion* pMissShaderBindingTable, Vk.KHR.StridedBufferRegion* pHitShaderBindingTable, Vk.KHR.StridedBufferRegion* pCallableShaderBindingTable, uint width, uint height, uint depth)
	{
		if (Functions.vkCmdTraceRaysKHR == null) { throw new VVK.FunctionNotLoadedException("vkCmdTraceRaysKHR"); }
		Functions.vkCmdTraceRaysKHR(commandBuffer, pRaygenShaderBindingTable, pMissShaderBindingTable, pHitShaderBindingTable, pCallableShaderBindingTable, width, height, depth);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void CmdTraceRaysNV(Vk.CommandBuffer commandBuffer, Vk.Buffer raygenShaderBindingTableBuffer, Vk.DeviceSize raygenShaderBindingOffset, Vk.Buffer missShaderBindingTableBuffer, Vk.DeviceSize missShaderBindingOffset, Vk.DeviceSize missShaderBindingStride, Vk.Buffer hitShaderBindingTableBuffer, Vk.DeviceSize hitShaderBindingOffset, Vk.DeviceSize hitShaderBindingStride, Vk.Buffer callableShaderBindingTableBuffer, Vk.DeviceSize callableShaderBindingOffset, Vk.DeviceSize callableShaderBindingStride, uint width, uint height, uint depth)
	{
		if (Functions.vkCmdTraceRaysNV == null) { throw new VVK.FunctionNotLoadedException("vkCmdTraceRaysNV"); }
		Functions.vkCmdTraceRaysNV(commandBuffer, raygenShaderBindingTableBuffer, raygenShaderBindingOffset, missShaderBindingTableBuffer, missShaderBindingOffset, missShaderBindingStride, hitShaderBindingTableBuffer, hitShaderBindingOffset, hitShaderBindingStride, callableShaderBindingTableBuffer, callableShaderBindingOffset, callableShaderBindingStride, width, height, depth);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result GetRayTracingShaderGroupHandlesKHR(Vk.Device device, Vk.Pipeline pipeline, uint firstGroup, uint groupCount, ulong dataSize, void* pData)
	{
		if (Functions.vkGetRayTracingShaderGroupHandlesKHR == null) { throw new VVK.FunctionNotLoadedException("vkGetRayTracingShaderGroupHandlesKHR"); }
		return Functions.vkGetRayTracingShaderGroupHandlesKHR(device, pipeline, firstGroup, groupCount, dataSize, pData);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result GetRayTracingShaderGroupHandlesNV(Vk.Device device, Vk.Pipeline pipeline, uint firstGroup, uint groupCount, ulong dataSize, void* pData)
	{
		if (Functions.vkGetRayTracingShaderGroupHandlesNV == null) { throw new VVK.FunctionNotLoadedException("vkGetRayTracingShaderGroupHandlesNV"); }
		return Functions.vkGetRayTracingShaderGroupHandlesNV(device, pipeline, firstGroup, groupCount, dataSize, pData);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result GetRayTracingCaptureReplayShaderGroupHandlesKHR(Vk.Device device, Vk.Pipeline pipeline, uint firstGroup, uint groupCount, ulong dataSize, void* pData)
	{
		if (Functions.vkGetRayTracingCaptureReplayShaderGroupHandlesKHR == null) { throw new VVK.FunctionNotLoadedException("vkGetRayTracingCaptureReplayShaderGroupHandlesKHR"); }
		return Functions.vkGetRayTracingCaptureReplayShaderGroupHandlesKHR(device, pipeline, firstGroup, groupCount, dataSize, pData);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result GetAccelerationStructureHandleNV(Vk.Device device, Vk.KHR.AccelerationStructure accelerationStructure, ulong dataSize, void* pData)
	{
		if (Functions.vkGetAccelerationStructureHandleNV == null) { throw new VVK.FunctionNotLoadedException("vkGetAccelerationStructureHandleNV"); }
		return Functions.vkGetAccelerationStructureHandleNV(device, accelerationStructure, dataSize, pData);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result CreateRayTracingPipelinesNV(Vk.Device device, Vk.PipelineCache pipelineCache, uint createInfoCount, Vk.NV.RayTracingPipelineCreateInfo* pCreateInfos, Vk.AllocationCallbacks* pAllocator, Vk.Pipeline* pPipelines)
	{
		if (Functions.vkCreateRayTracingPipelinesNV == null) { throw new VVK.FunctionNotLoadedException("vkCreateRayTracingPipelinesNV"); }
		return Functions.vkCreateRayTracingPipelinesNV(device, pipelineCache, createInfoCount, pCreateInfos, pAllocator, pPipelines);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result CreateRayTracingPipelinesKHR(Vk.Device device, Vk.PipelineCache pipelineCache, uint createInfoCount, Vk.KHR.RayTracingPipelineCreateInfo* pCreateInfos, Vk.AllocationCallbacks* pAllocator, Vk.Pipeline* pPipelines)
	{
		if (Functions.vkCreateRayTracingPipelinesKHR == null) { throw new VVK.FunctionNotLoadedException("vkCreateRayTracingPipelinesKHR"); }
		return Functions.vkCreateRayTracingPipelinesKHR(device, pipelineCache, createInfoCount, pCreateInfos, pAllocator, pPipelines);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void CmdTraceRaysIndirectKHR(Vk.CommandBuffer commandBuffer, Vk.KHR.StridedBufferRegion* pRaygenShaderBindingTable, Vk.KHR.StridedBufferRegion* pMissShaderBindingTable, Vk.KHR.StridedBufferRegion* pHitShaderBindingTable, Vk.KHR.StridedBufferRegion* pCallableShaderBindingTable, Vk.Buffer buffer, Vk.DeviceSize offset)
	{
		if (Functions.vkCmdTraceRaysIndirectKHR == null) { throw new VVK.FunctionNotLoadedException("vkCmdTraceRaysIndirectKHR"); }
		Functions.vkCmdTraceRaysIndirectKHR(commandBuffer, pRaygenShaderBindingTable, pMissShaderBindingTable, pHitShaderBindingTable, pCallableShaderBindingTable, buffer, offset);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result GetDeviceAccelerationStructureCompatibilityKHR(Vk.Device device, Vk.KHR.AccelerationStructureVersion* version)
	{
		if (Functions.vkGetDeviceAccelerationStructureCompatibilityKHR == null) { throw new VVK.FunctionNotLoadedException("vkGetDeviceAccelerationStructureCompatibilityKHR"); }
		return Functions.vkGetDeviceAccelerationStructureCompatibilityKHR(device, version);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public uint GetImageViewHandleNVX(Vk.Device device, Vk.NVX.ImageViewHandleInfo* pInfo)
	{
		if (Functions.vkGetImageViewHandleNVX == null) { throw new VVK.FunctionNotLoadedException("vkGetImageViewHandleNVX"); }
		return Functions.vkGetImageViewHandleNVX(device, pInfo);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result GetImageViewAddressNVX(Vk.Device device, Vk.ImageView imageView, Vk.NVX.ImageViewAddressProperties* pProperties)
	{
		if (Functions.vkGetImageViewAddressNVX == null) { throw new VVK.FunctionNotLoadedException("vkGetImageViewAddressNVX"); }
		return Functions.vkGetImageViewAddressNVX(device, imageView, pProperties);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result GetDeviceGroupSurfacePresentModes2EXT(Vk.Device device, Vk.KHR.PhysicalDeviceSurfaceInfo2* pSurfaceInfo, Vk.KHR.DeviceGroupPresentModeFlags* pModes)
	{
		if (Functions.vkGetDeviceGroupSurfacePresentModes2EXT == null) { throw new VVK.FunctionNotLoadedException("vkGetDeviceGroupSurfacePresentModes2EXT"); }
		return Functions.vkGetDeviceGroupSurfacePresentModes2EXT(device, pSurfaceInfo, pModes);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result AcquireFullScreenExclusiveModeEXT(Vk.Device device, Vk.KHR.Swapchain swapchain)
	{
		if (Functions.vkAcquireFullScreenExclusiveModeEXT == null) { throw new VVK.FunctionNotLoadedException("vkAcquireFullScreenExclusiveModeEXT"); }
		return Functions.vkAcquireFullScreenExclusiveModeEXT(device, swapchain);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result ReleaseFullScreenExclusiveModeEXT(Vk.Device device, Vk.KHR.Swapchain swapchain)
	{
		if (Functions.vkReleaseFullScreenExclusiveModeEXT == null) { throw new VVK.FunctionNotLoadedException("vkReleaseFullScreenExclusiveModeEXT"); }
		return Functions.vkReleaseFullScreenExclusiveModeEXT(device, swapchain);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result AcquireProfilingLockKHR(Vk.Device device, Vk.KHR.AcquireProfilingLockInfo* pInfo)
	{
		if (Functions.vkAcquireProfilingLockKHR == null) { throw new VVK.FunctionNotLoadedException("vkAcquireProfilingLockKHR"); }
		return Functions.vkAcquireProfilingLockKHR(device, pInfo);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void ReleaseProfilingLockKHR(Vk.Device device)
	{
		if (Functions.vkReleaseProfilingLockKHR == null) { throw new VVK.FunctionNotLoadedException("vkReleaseProfilingLockKHR"); }
		Functions.vkReleaseProfilingLockKHR(device);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result GetImageDrmFormatModifierPropertiesEXT(Vk.Device device, Vk.Image image, Vk.EXT.ImageDrmFormatModifierProperties* pProperties)
	{
		if (Functions.vkGetImageDrmFormatModifierPropertiesEXT == null) { throw new VVK.FunctionNotLoadedException("vkGetImageDrmFormatModifierPropertiesEXT"); }
		return Functions.vkGetImageDrmFormatModifierPropertiesEXT(device, image, pProperties);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public ulong GetBufferOpaqueCaptureAddress(Vk.Device device, Vk.BufferDeviceAddressInfo* pInfo)
		=> Functions.vkGetBufferOpaqueCaptureAddress(device, pInfo);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public ulong GetBufferOpaqueCaptureAddressKHR(Vk.Device device, Vk.BufferDeviceAddressInfo* pInfo)
	{
		if (Functions.vkGetBufferOpaqueCaptureAddressKHR == null) { throw new VVK.FunctionNotLoadedException("vkGetBufferOpaqueCaptureAddressKHR"); }
		return Functions.vkGetBufferOpaqueCaptureAddressKHR(device, pInfo);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public ulong GetBufferDeviceAddress(Vk.Device device, Vk.BufferDeviceAddressInfo* pInfo)
		=> Functions.vkGetBufferDeviceAddress(device, pInfo);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public ulong GetBufferDeviceAddressKHR(Vk.Device device, Vk.BufferDeviceAddressInfo* pInfo)
	{
		if (Functions.vkGetBufferDeviceAddressKHR == null) { throw new VVK.FunctionNotLoadedException("vkGetBufferDeviceAddressKHR"); }
		return Functions.vkGetBufferDeviceAddressKHR(device, pInfo);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public ulong GetBufferDeviceAddressEXT(Vk.Device device, Vk.BufferDeviceAddressInfo* pInfo)
	{
		if (Functions.vkGetBufferDeviceAddressEXT == null) { throw new VVK.FunctionNotLoadedException("vkGetBufferDeviceAddressEXT"); }
		return Functions.vkGetBufferDeviceAddressEXT(device, pInfo);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result InitializePerformanceApiINTEL(Vk.Device device, Vk.INTEL.InitializePerformanceApiInfo* pInitializeInfo)
	{
		if (Functions.vkInitializePerformanceApiINTEL == null) { throw new VVK.FunctionNotLoadedException("vkInitializePerformanceApiINTEL"); }
		return Functions.vkInitializePerformanceApiINTEL(device, pInitializeInfo);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void UninitializePerformanceApiINTEL(Vk.Device device)
	{
		if (Functions.vkUninitializePerformanceApiINTEL == null) { throw new VVK.FunctionNotLoadedException("vkUninitializePerformanceApiINTEL"); }
		Functions.vkUninitializePerformanceApiINTEL(device);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result CmdSetPerformanceMarkerINTEL(Vk.CommandBuffer commandBuffer, Vk.INTEL.PerformanceMarkerInfo* pMarkerInfo)
	{
		if (Functions.vkCmdSetPerformanceMarkerINTEL == null) { throw new VVK.FunctionNotLoadedException("vkCmdSetPerformanceMarkerINTEL"); }
		return Functions.vkCmdSetPerformanceMarkerINTEL(commandBuffer, pMarkerInfo);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result CmdSetPerformanceStreamMarkerINTEL(Vk.CommandBuffer commandBuffer, Vk.INTEL.PerformanceStreamMarkerInfo* pMarkerInfo)
	{
		if (Functions.vkCmdSetPerformanceStreamMarkerINTEL == null) { throw new VVK.FunctionNotLoadedException("vkCmdSetPerformanceStreamMarkerINTEL"); }
		return Functions.vkCmdSetPerformanceStreamMarkerINTEL(commandBuffer, pMarkerInfo);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result CmdSetPerformanceOverrideINTEL(Vk.CommandBuffer commandBuffer, Vk.INTEL.PerformanceOverrideInfo* pOverrideInfo)
	{
		if (Functions.vkCmdSetPerformanceOverrideINTEL == null) { throw new VVK.FunctionNotLoadedException("vkCmdSetPerformanceOverrideINTEL"); }
		return Functions.vkCmdSetPerformanceOverrideINTEL(commandBuffer, pOverrideInfo);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result AcquirePerformanceConfigurationINTEL(Vk.Device device, Vk.INTEL.PerformanceConfigurationAcquireInfo* pAcquireInfo, Vk.INTEL.PerformanceConfiguration* pConfiguration)
	{
		if (Functions.vkAcquirePerformanceConfigurationINTEL == null) { throw new VVK.FunctionNotLoadedException("vkAcquirePerformanceConfigurationINTEL"); }
		return Functions.vkAcquirePerformanceConfigurationINTEL(device, pAcquireInfo, pConfiguration);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result ReleasePerformanceConfigurationINTEL(Vk.Device device, Vk.INTEL.PerformanceConfiguration configuration)
	{
		if (Functions.vkReleasePerformanceConfigurationINTEL == null) { throw new VVK.FunctionNotLoadedException("vkReleasePerformanceConfigurationINTEL"); }
		return Functions.vkReleasePerformanceConfigurationINTEL(device, configuration);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result QueueSetPerformanceConfigurationINTEL(Vk.Queue queue, Vk.INTEL.PerformanceConfiguration configuration)
	{
		if (Functions.vkQueueSetPerformanceConfigurationINTEL == null) { throw new VVK.FunctionNotLoadedException("vkQueueSetPerformanceConfigurationINTEL"); }
		return Functions.vkQueueSetPerformanceConfigurationINTEL(queue, configuration);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result GetPerformanceParameterINTEL(Vk.Device device, Vk.INTEL.PerformanceParameterType parameter, Vk.INTEL.PerformanceValue* pValue)
	{
		if (Functions.vkGetPerformanceParameterINTEL == null) { throw new VVK.FunctionNotLoadedException("vkGetPerformanceParameterINTEL"); }
		return Functions.vkGetPerformanceParameterINTEL(device, parameter, pValue);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public ulong GetDeviceMemoryOpaqueCaptureAddress(Vk.Device device, Vk.DeviceMemoryOpaqueCaptureAddressInfo* pInfo)
		=> Functions.vkGetDeviceMemoryOpaqueCaptureAddress(device, pInfo);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public ulong GetDeviceMemoryOpaqueCaptureAddressKHR(Vk.Device device, Vk.DeviceMemoryOpaqueCaptureAddressInfo* pInfo)
	{
		if (Functions.vkGetDeviceMemoryOpaqueCaptureAddressKHR == null) { throw new VVK.FunctionNotLoadedException("vkGetDeviceMemoryOpaqueCaptureAddressKHR"); }
		return Functions.vkGetDeviceMemoryOpaqueCaptureAddressKHR(device, pInfo);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result GetPipelineExecutablePropertiesKHR(Vk.Device device, Vk.KHR.PipelineInfo* pPipelineInfo, uint* pExecutableCount, Vk.KHR.PipelineExecutableProperties* pProperties)
	{
		if (Functions.vkGetPipelineExecutablePropertiesKHR == null) { throw new VVK.FunctionNotLoadedException("vkGetPipelineExecutablePropertiesKHR"); }
		return Functions.vkGetPipelineExecutablePropertiesKHR(device, pPipelineInfo, pExecutableCount, pProperties);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result GetPipelineExecutableStatisticsKHR(Vk.Device device, Vk.KHR.PipelineExecutableInfo* pExecutableInfo, uint* pStatisticCount, Vk.KHR.PipelineExecutableStatistic* pStatistics)
	{
		if (Functions.vkGetPipelineExecutableStatisticsKHR == null) { throw new VVK.FunctionNotLoadedException("vkGetPipelineExecutableStatisticsKHR"); }
		return Functions.vkGetPipelineExecutableStatisticsKHR(device, pExecutableInfo, pStatisticCount, pStatistics);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result GetPipelineExecutableInternalRepresentationsKHR(Vk.Device device, Vk.KHR.PipelineExecutableInfo* pExecutableInfo, uint* pInternalRepresentationCount, Vk.KHR.PipelineExecutableInternalRepresentation* pInternalRepresentations)
	{
		if (Functions.vkGetPipelineExecutableInternalRepresentationsKHR == null) { throw new VVK.FunctionNotLoadedException("vkGetPipelineExecutableInternalRepresentationsKHR"); }
		return Functions.vkGetPipelineExecutableInternalRepresentationsKHR(device, pExecutableInfo, pInternalRepresentationCount, pInternalRepresentations);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void CmdSetLineStippleEXT(Vk.CommandBuffer commandBuffer, uint lineStippleFactor, ushort lineStipplePattern)
	{
		if (Functions.vkCmdSetLineStippleEXT == null) { throw new VVK.FunctionNotLoadedException("vkCmdSetLineStippleEXT"); }
		Functions.vkCmdSetLineStippleEXT(commandBuffer, lineStippleFactor, lineStipplePattern);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result CreateAccelerationStructureKHR(Vk.Device device, Vk.KHR.AccelerationStructureCreateInfo* pCreateInfo, Vk.AllocationCallbacks* pAllocator, Vk.KHR.AccelerationStructure* pAccelerationStructure)
	{
		if (Functions.vkCreateAccelerationStructureKHR == null) { throw new VVK.FunctionNotLoadedException("vkCreateAccelerationStructureKHR"); }
		return Functions.vkCreateAccelerationStructureKHR(device, pCreateInfo, pAllocator, pAccelerationStructure);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void CmdBuildAccelerationStructureKHR(Vk.CommandBuffer commandBuffer, uint infoCount, Vk.KHR.AccelerationStructureBuildGeometryInfo* pInfos, Vk.KHR.AccelerationStructureBuildOffsetInfo** ppOffsetInfos)
	{
		if (Functions.vkCmdBuildAccelerationStructureKHR == null) { throw new VVK.FunctionNotLoadedException("vkCmdBuildAccelerationStructureKHR"); }
		Functions.vkCmdBuildAccelerationStructureKHR(commandBuffer, infoCount, pInfos, ppOffsetInfos);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void CmdBuildAccelerationStructureIndirectKHR(Vk.CommandBuffer commandBuffer, Vk.KHR.AccelerationStructureBuildGeometryInfo* pInfo, Vk.Buffer indirectBuffer, Vk.DeviceSize indirectOffset, uint indirectStride)
	{
		if (Functions.vkCmdBuildAccelerationStructureIndirectKHR == null) { throw new VVK.FunctionNotLoadedException("vkCmdBuildAccelerationStructureIndirectKHR"); }
		Functions.vkCmdBuildAccelerationStructureIndirectKHR(commandBuffer, pInfo, indirectBuffer, indirectOffset, indirectStride);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result BuildAccelerationStructureKHR(Vk.Device device, uint infoCount, Vk.KHR.AccelerationStructureBuildGeometryInfo* pInfos, Vk.KHR.AccelerationStructureBuildOffsetInfo** ppOffsetInfos)
	{
		if (Functions.vkBuildAccelerationStructureKHR == null) { throw new VVK.FunctionNotLoadedException("vkBuildAccelerationStructureKHR"); }
		return Functions.vkBuildAccelerationStructureKHR(device, infoCount, pInfos, ppOffsetInfos);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public ulong GetAccelerationStructureDeviceAddressKHR(Vk.Device device, Vk.KHR.AccelerationStructureDeviceAddressInfo* pInfo)
	{
		if (Functions.vkGetAccelerationStructureDeviceAddressKHR == null) { throw new VVK.FunctionNotLoadedException("vkGetAccelerationStructureDeviceAddressKHR"); }
		return Functions.vkGetAccelerationStructureDeviceAddressKHR(device, pInfo);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result CreateDeferredOperationKHR(Vk.Device device, Vk.AllocationCallbacks* pAllocator, Vk.KHR.DeferredOperation* pDeferredOperation)
	{
		if (Functions.vkCreateDeferredOperationKHR == null) { throw new VVK.FunctionNotLoadedException("vkCreateDeferredOperationKHR"); }
		return Functions.vkCreateDeferredOperationKHR(device, pAllocator, pDeferredOperation);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void DestroyDeferredOperationKHR(Vk.Device device, Vk.KHR.DeferredOperation operation, Vk.AllocationCallbacks* pAllocator)
	{
		if (Functions.vkDestroyDeferredOperationKHR == null) { throw new VVK.FunctionNotLoadedException("vkDestroyDeferredOperationKHR"); }
		Functions.vkDestroyDeferredOperationKHR(device, operation, pAllocator);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public uint GetDeferredOperationMaxConcurrencyKHR(Vk.Device device, Vk.KHR.DeferredOperation operation)
	{
		if (Functions.vkGetDeferredOperationMaxConcurrencyKHR == null) { throw new VVK.FunctionNotLoadedException("vkGetDeferredOperationMaxConcurrencyKHR"); }
		return Functions.vkGetDeferredOperationMaxConcurrencyKHR(device, operation);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result GetDeferredOperationResultKHR(Vk.Device device, Vk.KHR.DeferredOperation operation)
	{
		if (Functions.vkGetDeferredOperationResultKHR == null) { throw new VVK.FunctionNotLoadedException("vkGetDeferredOperationResultKHR"); }
		return Functions.vkGetDeferredOperationResultKHR(device, operation);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result DeferredOperationJoinKHR(Vk.Device device, Vk.KHR.DeferredOperation operation)
	{
		if (Functions.vkDeferredOperationJoinKHR == null) { throw new VVK.FunctionNotLoadedException("vkDeferredOperationJoinKHR"); }
		return Functions.vkDeferredOperationJoinKHR(device, operation);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void CmdSetCullModeEXT(Vk.CommandBuffer commandBuffer, Vk.CullModeFlags cullMode)
	{
		if (Functions.vkCmdSetCullModeEXT == null) { throw new VVK.FunctionNotLoadedException("vkCmdSetCullModeEXT"); }
		Functions.vkCmdSetCullModeEXT(commandBuffer, cullMode);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void CmdSetFrontFaceEXT(Vk.CommandBuffer commandBuffer, Vk.FrontFace frontFace)
	{
		if (Functions.vkCmdSetFrontFaceEXT == null) { throw new VVK.FunctionNotLoadedException("vkCmdSetFrontFaceEXT"); }
		Functions.vkCmdSetFrontFaceEXT(commandBuffer, frontFace);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void CmdSetPrimitiveTopologyEXT(Vk.CommandBuffer commandBuffer, Vk.PrimitiveTopology primitiveTopology)
	{
		if (Functions.vkCmdSetPrimitiveTopologyEXT == null) { throw new VVK.FunctionNotLoadedException("vkCmdSetPrimitiveTopologyEXT"); }
		Functions.vkCmdSetPrimitiveTopologyEXT(commandBuffer, primitiveTopology);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void CmdSetViewportWithCountEXT(Vk.CommandBuffer commandBuffer, uint viewportCount, Vk.Viewport* pViewports)
	{
		if (Functions.vkCmdSetViewportWithCountEXT == null) { throw new VVK.FunctionNotLoadedException("vkCmdSetViewportWithCountEXT"); }
		Functions.vkCmdSetViewportWithCountEXT(commandBuffer, viewportCount, pViewports);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void CmdSetScissorWithCountEXT(Vk.CommandBuffer commandBuffer, uint scissorCount, Vk.Rect2D* pScissors)
	{
		if (Functions.vkCmdSetScissorWithCountEXT == null) { throw new VVK.FunctionNotLoadedException("vkCmdSetScissorWithCountEXT"); }
		Functions.vkCmdSetScissorWithCountEXT(commandBuffer, scissorCount, pScissors);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void CmdBindVertexBuffers2EXT(Vk.CommandBuffer commandBuffer, uint firstBinding, uint bindingCount, Vk.Buffer* pBuffers, Vk.DeviceSize* pOffsets, Vk.DeviceSize* pSizes, Vk.DeviceSize* pStrides)
	{
		if (Functions.vkCmdBindVertexBuffers2EXT == null) { throw new VVK.FunctionNotLoadedException("vkCmdBindVertexBuffers2EXT"); }
		Functions.vkCmdBindVertexBuffers2EXT(commandBuffer, firstBinding, bindingCount, pBuffers, pOffsets, pSizes, pStrides);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void CmdSetDepthTestEnableEXT(Vk.CommandBuffer commandBuffer, Vk.Bool32 depthTestEnable)
	{
		if (Functions.vkCmdSetDepthTestEnableEXT == null) { throw new VVK.FunctionNotLoadedException("vkCmdSetDepthTestEnableEXT"); }
		Functions.vkCmdSetDepthTestEnableEXT(commandBuffer, depthTestEnable);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void CmdSetDepthWriteEnableEXT(Vk.CommandBuffer commandBuffer, Vk.Bool32 depthWriteEnable)
	{
		if (Functions.vkCmdSetDepthWriteEnableEXT == null) { throw new VVK.FunctionNotLoadedException("vkCmdSetDepthWriteEnableEXT"); }
		Functions.vkCmdSetDepthWriteEnableEXT(commandBuffer, depthWriteEnable);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void CmdSetDepthCompareOpEXT(Vk.CommandBuffer commandBuffer, Vk.CompareOp depthCompareOp)
	{
		if (Functions.vkCmdSetDepthCompareOpEXT == null) { throw new VVK.FunctionNotLoadedException("vkCmdSetDepthCompareOpEXT"); }
		Functions.vkCmdSetDepthCompareOpEXT(commandBuffer, depthCompareOp);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void CmdSetDepthBoundsTestEnableEXT(Vk.CommandBuffer commandBuffer, Vk.Bool32 depthBoundsTestEnable)
	{
		if (Functions.vkCmdSetDepthBoundsTestEnableEXT == null) { throw new VVK.FunctionNotLoadedException("vkCmdSetDepthBoundsTestEnableEXT"); }
		Functions.vkCmdSetDepthBoundsTestEnableEXT(commandBuffer, depthBoundsTestEnable);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void CmdSetStencilTestEnableEXT(Vk.CommandBuffer commandBuffer, Vk.Bool32 stencilTestEnable)
	{
		if (Functions.vkCmdSetStencilTestEnableEXT == null) { throw new VVK.FunctionNotLoadedException("vkCmdSetStencilTestEnableEXT"); }
		Functions.vkCmdSetStencilTestEnableEXT(commandBuffer, stencilTestEnable);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void CmdSetStencilOpEXT(Vk.CommandBuffer commandBuffer, Vk.StencilFaceFlags faceMask, Vk.StencilOp failOp, Vk.StencilOp passOp, Vk.StencilOp depthFailOp, Vk.CompareOp compareOp)
	{
		if (Functions.vkCmdSetStencilOpEXT == null) { throw new VVK.FunctionNotLoadedException("vkCmdSetStencilOpEXT"); }
		Functions.vkCmdSetStencilOpEXT(commandBuffer, faceMask, failOp, passOp, depthFailOp, compareOp);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result CreatePrivateDataSlotEXT(Vk.Device device, Vk.EXT.PrivateDataSlotCreateInfo* pCreateInfo, Vk.AllocationCallbacks* pAllocator, Vk.EXT.PrivateDataSlot* pPrivateDataSlot)
	{
		if (Functions.vkCreatePrivateDataSlotEXT == null) { throw new VVK.FunctionNotLoadedException("vkCreatePrivateDataSlotEXT"); }
		return Functions.vkCreatePrivateDataSlotEXT(device, pCreateInfo, pAllocator, pPrivateDataSlot);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void DestroyPrivateDataSlotEXT(Vk.Device device, Vk.EXT.PrivateDataSlot privateDataSlot, Vk.AllocationCallbacks* pAllocator)
	{
		if (Functions.vkDestroyPrivateDataSlotEXT == null) { throw new VVK.FunctionNotLoadedException("vkDestroyPrivateDataSlotEXT"); }
		Functions.vkDestroyPrivateDataSlotEXT(device, privateDataSlot, pAllocator);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result SetPrivateDataEXT(Vk.Device device, Vk.ObjectType objectType, ulong objectHandle, Vk.EXT.PrivateDataSlot privateDataSlot, ulong data)
	{
		if (Functions.vkSetPrivateDataEXT == null) { throw new VVK.FunctionNotLoadedException("vkSetPrivateDataEXT"); }
		return Functions.vkSetPrivateDataEXT(device, objectType, objectHandle, privateDataSlot, data);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void GetPrivateDataEXT(Vk.Device device, Vk.ObjectType objectType, ulong objectHandle, Vk.EXT.PrivateDataSlot privateDataSlot, ulong* pData)
	{
		if (Functions.vkGetPrivateDataEXT == null) { throw new VVK.FunctionNotLoadedException("vkGetPrivateDataEXT"); }
		Functions.vkGetPrivateDataEXT(device, objectType, objectHandle, privateDataSlot, pData);
	}

}

} // namespace VVK
