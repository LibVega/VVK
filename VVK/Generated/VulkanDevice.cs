/*
 * MIT License - Copyright(c) 2020 Sean Moss
 * This file is subject to the terms and conditions of the MIT License, the text of which can be found in the 'LICENSE'
 * file at the root of this repository, or online at<https://opensource.org/licenses/MIT>.
 */

/// This file was generated by VVKGen. Edits to this file will be lost on next generation.

using System;
using System.Runtime.InteropServices;
using System.Runtime.CompilerServices;


namespace VVK
{

public unsafe sealed partial class VulkanDevice
{
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void DestroyDevice(Vk.AllocationCallbacks* pAllocator)
		=> Functions.vkDestroyDevice(Handle, pAllocator);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void GetDeviceQueue(uint queueFamilyIndex, uint queueIndex, Vk.Queue* pQueue)
		=> Functions.vkGetDeviceQueue(Handle, queueFamilyIndex, queueIndex, pQueue);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public VulkanResult WaitIdle()
		=> new(Functions.vkDeviceWaitIdle(Handle), "vkDeviceWaitIdle");

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public VulkanResult AllocateMemory(Vk.MemoryAllocateInfo* pAllocateInfo, Vk.AllocationCallbacks* pAllocator, Vk.DeviceMemory* pMemory)
		=> new(Functions.vkAllocateMemory(Handle, pAllocateInfo, pAllocator, pMemory), "vkAllocateMemory");

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void FreeMemory(Vk.DeviceMemory memory, Vk.AllocationCallbacks* pAllocator)
		=> Functions.vkFreeMemory(Handle, memory, pAllocator);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public VulkanResult MapMemory(Vk.DeviceMemory memory, Vk.DeviceSize offset, Vk.DeviceSize size, Vk.MemoryMapFlags flags, void** ppData)
		=> new(Functions.vkMapMemory(Handle, memory, offset, size, flags, ppData), "vkMapMemory");

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void UnmapMemory(Vk.DeviceMemory memory)
		=> Functions.vkUnmapMemory(Handle, memory);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public VulkanResult FlushMappedMemoryRanges(uint memoryRangeCount, Vk.MappedMemoryRange* pMemoryRanges)
		=> new(Functions.vkFlushMappedMemoryRanges(Handle, memoryRangeCount, pMemoryRanges), "vkFlushMappedMemoryRanges");

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public VulkanResult InvalidateMappedMemoryRanges(uint memoryRangeCount, Vk.MappedMemoryRange* pMemoryRanges)
		=> new(Functions.vkInvalidateMappedMemoryRanges(Handle, memoryRangeCount, pMemoryRanges), "vkInvalidateMappedMemoryRanges");

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void GetDeviceMemoryCommitment(Vk.DeviceMemory memory, Vk.DeviceSize* pCommittedMemoryInBytes)
		=> Functions.vkGetDeviceMemoryCommitment(Handle, memory, pCommittedMemoryInBytes);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void GetBufferMemoryRequirements(Vk.Buffer buffer, Vk.MemoryRequirements* pMemoryRequirements)
		=> Functions.vkGetBufferMemoryRequirements(Handle, buffer, pMemoryRequirements);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public VulkanResult BindBufferMemory(Vk.Buffer buffer, Vk.DeviceMemory memory, Vk.DeviceSize memoryOffset)
		=> new(Functions.vkBindBufferMemory(Handle, buffer, memory, memoryOffset), "vkBindBufferMemory");

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void GetImageMemoryRequirements(Vk.Image image, Vk.MemoryRequirements* pMemoryRequirements)
		=> Functions.vkGetImageMemoryRequirements(Handle, image, pMemoryRequirements);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public VulkanResult BindImageMemory(Vk.Image image, Vk.DeviceMemory memory, Vk.DeviceSize memoryOffset)
		=> new(Functions.vkBindImageMemory(Handle, image, memory, memoryOffset), "vkBindImageMemory");

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void GetImageSparseMemoryRequirements(Vk.Image image, uint* pSparseMemoryRequirementCount, Vk.SparseImageMemoryRequirements* pSparseMemoryRequirements)
		=> Functions.vkGetImageSparseMemoryRequirements(Handle, image, pSparseMemoryRequirementCount, pSparseMemoryRequirements);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public VulkanResult CreateFence(Vk.FenceCreateInfo* pCreateInfo, Vk.AllocationCallbacks* pAllocator, Vk.Fence* pFence)
		=> new(Functions.vkCreateFence(Handle, pCreateInfo, pAllocator, pFence), "vkCreateFence");

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void DestroyFence(Vk.Fence fence, Vk.AllocationCallbacks* pAllocator)
		=> Functions.vkDestroyFence(Handle, fence, pAllocator);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public VulkanResult ResetFences(uint fenceCount, Vk.Fence* pFences)
		=> new(Functions.vkResetFences(Handle, fenceCount, pFences), "vkResetFences");

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public VulkanResult GetFenceStatus(Vk.Fence fence)
		=> new(Functions.vkGetFenceStatus(Handle, fence), "vkGetFenceStatus");

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public VulkanResult WaitForFences(uint fenceCount, Vk.Fence* pFences, Vk.Bool32 waitAll, ulong timeout)
		=> new(Functions.vkWaitForFences(Handle, fenceCount, pFences, waitAll, timeout), "vkWaitForFences");

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public VulkanResult CreateSemaphore(Vk.SemaphoreCreateInfo* pCreateInfo, Vk.AllocationCallbacks* pAllocator, Vk.Semaphore* pSemaphore)
		=> new(Functions.vkCreateSemaphore(Handle, pCreateInfo, pAllocator, pSemaphore), "vkCreateSemaphore");

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void DestroySemaphore(Vk.Semaphore semaphore, Vk.AllocationCallbacks* pAllocator)
		=> Functions.vkDestroySemaphore(Handle, semaphore, pAllocator);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public VulkanResult CreateEvent(Vk.EventCreateInfo* pCreateInfo, Vk.AllocationCallbacks* pAllocator, Vk.Event* pEvent)
		=> new(Functions.vkCreateEvent(Handle, pCreateInfo, pAllocator, pEvent), "vkCreateEvent");

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void DestroyEvent(Vk.Event @event, Vk.AllocationCallbacks* pAllocator)
		=> Functions.vkDestroyEvent(Handle, @event, pAllocator);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public VulkanResult GetEventStatus(Vk.Event @event)
		=> new(Functions.vkGetEventStatus(Handle, @event), "vkGetEventStatus");

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public VulkanResult SetEvent(Vk.Event @event)
		=> new(Functions.vkSetEvent(Handle, @event), "vkSetEvent");

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public VulkanResult ResetEvent(Vk.Event @event)
		=> new(Functions.vkResetEvent(Handle, @event), "vkResetEvent");

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public VulkanResult CreateQueryPool(Vk.QueryPoolCreateInfo* pCreateInfo, Vk.AllocationCallbacks* pAllocator, Vk.QueryPool* pQueryPool)
		=> new(Functions.vkCreateQueryPool(Handle, pCreateInfo, pAllocator, pQueryPool), "vkCreateQueryPool");

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void DestroyQueryPool(Vk.QueryPool queryPool, Vk.AllocationCallbacks* pAllocator)
		=> Functions.vkDestroyQueryPool(Handle, queryPool, pAllocator);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public VulkanResult GetQueryPoolResults(Vk.QueryPool queryPool, uint firstQuery, uint queryCount, ulong dataSize, void* pData, Vk.DeviceSize stride, Vk.QueryResultFlags flags)
		=> new(Functions.vkGetQueryPoolResults(Handle, queryPool, firstQuery, queryCount, dataSize, pData, stride, flags), "vkGetQueryPoolResults");

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void ResetQueryPool(Vk.QueryPool queryPool, uint firstQuery, uint queryCount)
		=> Functions.vkResetQueryPool(Handle, queryPool, firstQuery, queryCount);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void ResetQueryPoolEXT(Vk.QueryPool queryPool, uint firstQuery, uint queryCount)
		=> Functions.vkResetQueryPoolEXT(Handle, queryPool, firstQuery, queryCount);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public VulkanResult CreateBuffer(Vk.BufferCreateInfo* pCreateInfo, Vk.AllocationCallbacks* pAllocator, Vk.Buffer* pBuffer)
		=> new(Functions.vkCreateBuffer(Handle, pCreateInfo, pAllocator, pBuffer), "vkCreateBuffer");

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void DestroyBuffer(Vk.Buffer buffer, Vk.AllocationCallbacks* pAllocator)
		=> Functions.vkDestroyBuffer(Handle, buffer, pAllocator);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public VulkanResult CreateBufferView(Vk.BufferViewCreateInfo* pCreateInfo, Vk.AllocationCallbacks* pAllocator, Vk.BufferView* pView)
		=> new(Functions.vkCreateBufferView(Handle, pCreateInfo, pAllocator, pView), "vkCreateBufferView");

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void DestroyBufferView(Vk.BufferView bufferView, Vk.AllocationCallbacks* pAllocator)
		=> Functions.vkDestroyBufferView(Handle, bufferView, pAllocator);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public VulkanResult CreateImage(Vk.ImageCreateInfo* pCreateInfo, Vk.AllocationCallbacks* pAllocator, Vk.Image* pImage)
		=> new(Functions.vkCreateImage(Handle, pCreateInfo, pAllocator, pImage), "vkCreateImage");

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void DestroyImage(Vk.Image image, Vk.AllocationCallbacks* pAllocator)
		=> Functions.vkDestroyImage(Handle, image, pAllocator);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void GetImageSubresourceLayout(Vk.Image image, Vk.ImageSubresource* pSubresource, Vk.SubresourceLayout* pLayout)
		=> Functions.vkGetImageSubresourceLayout(Handle, image, pSubresource, pLayout);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public VulkanResult CreateImageView(Vk.ImageViewCreateInfo* pCreateInfo, Vk.AllocationCallbacks* pAllocator, Vk.ImageView* pView)
		=> new(Functions.vkCreateImageView(Handle, pCreateInfo, pAllocator, pView), "vkCreateImageView");

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void DestroyImageView(Vk.ImageView imageView, Vk.AllocationCallbacks* pAllocator)
		=> Functions.vkDestroyImageView(Handle, imageView, pAllocator);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public VulkanResult CreateShaderModule(Vk.ShaderModuleCreateInfo* pCreateInfo, Vk.AllocationCallbacks* pAllocator, Vk.ShaderModule* pShaderModule)
		=> new(Functions.vkCreateShaderModule(Handle, pCreateInfo, pAllocator, pShaderModule), "vkCreateShaderModule");

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void DestroyShaderModule(Vk.ShaderModule shaderModule, Vk.AllocationCallbacks* pAllocator)
		=> Functions.vkDestroyShaderModule(Handle, shaderModule, pAllocator);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public VulkanResult CreatePipelineCache(Vk.PipelineCacheCreateInfo* pCreateInfo, Vk.AllocationCallbacks* pAllocator, Vk.PipelineCache* pPipelineCache)
		=> new(Functions.vkCreatePipelineCache(Handle, pCreateInfo, pAllocator, pPipelineCache), "vkCreatePipelineCache");

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void DestroyPipelineCache(Vk.PipelineCache pipelineCache, Vk.AllocationCallbacks* pAllocator)
		=> Functions.vkDestroyPipelineCache(Handle, pipelineCache, pAllocator);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public VulkanResult GetPipelineCacheData(Vk.PipelineCache pipelineCache, ulong* pDataSize, void* pData)
		=> new(Functions.vkGetPipelineCacheData(Handle, pipelineCache, pDataSize, pData), "vkGetPipelineCacheData");

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public VulkanResult MergePipelineCaches(Vk.PipelineCache dstCache, uint srcCacheCount, Vk.PipelineCache* pSrcCaches)
		=> new(Functions.vkMergePipelineCaches(Handle, dstCache, srcCacheCount, pSrcCaches), "vkMergePipelineCaches");

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public VulkanResult CreateGraphicsPipelines(Vk.PipelineCache pipelineCache, uint createInfoCount, Vk.GraphicsPipelineCreateInfo* pCreateInfos, Vk.AllocationCallbacks* pAllocator, Vk.Pipeline* pPipelines)
		=> new(Functions.vkCreateGraphicsPipelines(Handle, pipelineCache, createInfoCount, pCreateInfos, pAllocator, pPipelines), "vkCreateGraphicsPipelines");

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public VulkanResult CreateComputePipelines(Vk.PipelineCache pipelineCache, uint createInfoCount, Vk.ComputePipelineCreateInfo* pCreateInfos, Vk.AllocationCallbacks* pAllocator, Vk.Pipeline* pPipelines)
		=> new(Functions.vkCreateComputePipelines(Handle, pipelineCache, createInfoCount, pCreateInfos, pAllocator, pPipelines), "vkCreateComputePipelines");

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void DestroyPipeline(Vk.Pipeline pipeline, Vk.AllocationCallbacks* pAllocator)
		=> Functions.vkDestroyPipeline(Handle, pipeline, pAllocator);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public VulkanResult CreatePipelineLayout(Vk.PipelineLayoutCreateInfo* pCreateInfo, Vk.AllocationCallbacks* pAllocator, Vk.PipelineLayout* pPipelineLayout)
		=> new(Functions.vkCreatePipelineLayout(Handle, pCreateInfo, pAllocator, pPipelineLayout), "vkCreatePipelineLayout");

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void DestroyPipelineLayout(Vk.PipelineLayout pipelineLayout, Vk.AllocationCallbacks* pAllocator)
		=> Functions.vkDestroyPipelineLayout(Handle, pipelineLayout, pAllocator);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public VulkanResult CreateSampler(Vk.SamplerCreateInfo* pCreateInfo, Vk.AllocationCallbacks* pAllocator, Vk.Sampler* pSampler)
		=> new(Functions.vkCreateSampler(Handle, pCreateInfo, pAllocator, pSampler), "vkCreateSampler");

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void DestroySampler(Vk.Sampler sampler, Vk.AllocationCallbacks* pAllocator)
		=> Functions.vkDestroySampler(Handle, sampler, pAllocator);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public VulkanResult CreateDescriptorSetLayout(Vk.DescriptorSetLayoutCreateInfo* pCreateInfo, Vk.AllocationCallbacks* pAllocator, Vk.DescriptorSetLayout* pSetLayout)
		=> new(Functions.vkCreateDescriptorSetLayout(Handle, pCreateInfo, pAllocator, pSetLayout), "vkCreateDescriptorSetLayout");

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void DestroyDescriptorSetLayout(Vk.DescriptorSetLayout descriptorSetLayout, Vk.AllocationCallbacks* pAllocator)
		=> Functions.vkDestroyDescriptorSetLayout(Handle, descriptorSetLayout, pAllocator);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public VulkanResult CreateDescriptorPool(Vk.DescriptorPoolCreateInfo* pCreateInfo, Vk.AllocationCallbacks* pAllocator, Vk.DescriptorPool* pDescriptorPool)
		=> new(Functions.vkCreateDescriptorPool(Handle, pCreateInfo, pAllocator, pDescriptorPool), "vkCreateDescriptorPool");

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void DestroyDescriptorPool(Vk.DescriptorPool descriptorPool, Vk.AllocationCallbacks* pAllocator)
		=> Functions.vkDestroyDescriptorPool(Handle, descriptorPool, pAllocator);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public VulkanResult ResetDescriptorPool(Vk.DescriptorPool descriptorPool, Vk.DescriptorPoolResetFlags flags)
		=> new(Functions.vkResetDescriptorPool(Handle, descriptorPool, flags), "vkResetDescriptorPool");

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public VulkanResult AllocateDescriptorSets(Vk.DescriptorSetAllocateInfo* pAllocateInfo, Vk.DescriptorSet* pDescriptorSets)
		=> new(Functions.vkAllocateDescriptorSets(Handle, pAllocateInfo, pDescriptorSets), "vkAllocateDescriptorSets");

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public VulkanResult FreeDescriptorSets(Vk.DescriptorPool descriptorPool, uint descriptorSetCount, Vk.DescriptorSet* pDescriptorSets)
		=> new(Functions.vkFreeDescriptorSets(Handle, descriptorPool, descriptorSetCount, pDescriptorSets), "vkFreeDescriptorSets");

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void UpdateDescriptorSets(uint descriptorWriteCount, Vk.WriteDescriptorSet* pDescriptorWrites, uint descriptorCopyCount, Vk.CopyDescriptorSet* pDescriptorCopies)
		=> Functions.vkUpdateDescriptorSets(Handle, descriptorWriteCount, pDescriptorWrites, descriptorCopyCount, pDescriptorCopies);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public VulkanResult CreateFramebuffer(Vk.FramebufferCreateInfo* pCreateInfo, Vk.AllocationCallbacks* pAllocator, Vk.Framebuffer* pFramebuffer)
		=> new(Functions.vkCreateFramebuffer(Handle, pCreateInfo, pAllocator, pFramebuffer), "vkCreateFramebuffer");

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void DestroyFramebuffer(Vk.Framebuffer framebuffer, Vk.AllocationCallbacks* pAllocator)
		=> Functions.vkDestroyFramebuffer(Handle, framebuffer, pAllocator);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public VulkanResult CreateRenderPass(Vk.RenderPassCreateInfo* pCreateInfo, Vk.AllocationCallbacks* pAllocator, Vk.RenderPass* pRenderPass)
		=> new(Functions.vkCreateRenderPass(Handle, pCreateInfo, pAllocator, pRenderPass), "vkCreateRenderPass");

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void DestroyRenderPass(Vk.RenderPass renderPass, Vk.AllocationCallbacks* pAllocator)
		=> Functions.vkDestroyRenderPass(Handle, renderPass, pAllocator);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void GetRenderAreaGranularity(Vk.RenderPass renderPass, Vk.Extent2D* pGranularity)
		=> Functions.vkGetRenderAreaGranularity(Handle, renderPass, pGranularity);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public VulkanResult CreateCommandPool(Vk.CommandPoolCreateInfo* pCreateInfo, Vk.AllocationCallbacks* pAllocator, Vk.CommandPool* pCommandPool)
		=> new(Functions.vkCreateCommandPool(Handle, pCreateInfo, pAllocator, pCommandPool), "vkCreateCommandPool");

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void DestroyCommandPool(Vk.CommandPool commandPool, Vk.AllocationCallbacks* pAllocator)
		=> Functions.vkDestroyCommandPool(Handle, commandPool, pAllocator);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public VulkanResult ResetCommandPool(Vk.CommandPool commandPool, Vk.CommandPoolResetFlags flags)
		=> new(Functions.vkResetCommandPool(Handle, commandPool, flags), "vkResetCommandPool");

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public VulkanResult AllocateCommandBuffers(Vk.CommandBufferAllocateInfo* pAllocateInfo, Vk.CommandBuffer* pCommandBuffers)
		=> new(Functions.vkAllocateCommandBuffers(Handle, pAllocateInfo, pCommandBuffers), "vkAllocateCommandBuffers");

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void FreeCommandBuffers(Vk.CommandPool commandPool, uint commandBufferCount, Vk.CommandBuffer* pCommandBuffers)
		=> Functions.vkFreeCommandBuffers(Handle, commandPool, commandBufferCount, pCommandBuffers);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public VulkanResult CreateSharedSwapchainsKHR(uint swapchainCount, Vk.KHR.SwapchainCreateInfo* pCreateInfos, Vk.AllocationCallbacks* pAllocator, Vk.KHR.Swapchain* pSwapchains)
		=> new(Functions.vkCreateSharedSwapchainsKHR(Handle, swapchainCount, pCreateInfos, pAllocator, pSwapchains), "vkCreateSharedSwapchainsKHR");

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public VulkanResult CreateSwapchainKHR(Vk.KHR.SwapchainCreateInfo* pCreateInfo, Vk.AllocationCallbacks* pAllocator, Vk.KHR.Swapchain* pSwapchain)
		=> new(Functions.vkCreateSwapchainKHR(Handle, pCreateInfo, pAllocator, pSwapchain), "vkCreateSwapchainKHR");

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void DestroySwapchainKHR(Vk.KHR.Swapchain swapchain, Vk.AllocationCallbacks* pAllocator)
		=> Functions.vkDestroySwapchainKHR(Handle, swapchain, pAllocator);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public VulkanResult GetSwapchainImagesKHR(Vk.KHR.Swapchain swapchain, uint* pSwapchainImageCount, Vk.Image* pSwapchainImages)
		=> new(Functions.vkGetSwapchainImagesKHR(Handle, swapchain, pSwapchainImageCount, pSwapchainImages), "vkGetSwapchainImagesKHR");

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public VulkanResult AcquireNextImageKHR(Vk.KHR.Swapchain swapchain, ulong timeout, Vk.Semaphore semaphore, Vk.Fence fence, uint* pImageIndex)
		=> new(Functions.vkAcquireNextImageKHR(Handle, swapchain, timeout, semaphore, fence, pImageIndex), "vkAcquireNextImageKHR");

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public VulkanResult DebugMarkerSetObjectNameEXT(Vk.EXT.DebugMarkerObjectNameInfo* pNameInfo)
		=> new(Functions.vkDebugMarkerSetObjectNameEXT(Handle, pNameInfo), "vkDebugMarkerSetObjectNameEXT");

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public VulkanResult DebugMarkerSetObjectTagEXT(Vk.EXT.DebugMarkerObjectTagInfo* pTagInfo)
		=> new(Functions.vkDebugMarkerSetObjectTagEXT(Handle, pTagInfo), "vkDebugMarkerSetObjectTagEXT");

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public VulkanResult GetMemoryWin32HandleNV(Vk.DeviceMemory memory, Vk.NV.ExternalMemoryHandleTypeFlags handleType, void** pHandle)
		=> new(Functions.vkGetMemoryWin32HandleNV(Handle, memory, handleType, pHandle), "vkGetMemoryWin32HandleNV");

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void GetGeneratedCommandsMemoryRequirementsNV(Vk.NV.GeneratedCommandsMemoryRequirementsInfo* pInfo, Vk.MemoryRequirements2* pMemoryRequirements)
		=> Functions.vkGetGeneratedCommandsMemoryRequirementsNV(Handle, pInfo, pMemoryRequirements);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public VulkanResult CreateIndirectCommandsLayoutNV(Vk.NV.IndirectCommandsLayoutCreateInfo* pCreateInfo, Vk.AllocationCallbacks* pAllocator, Vk.NV.IndirectCommandsLayout* pIndirectCommandsLayout)
		=> new(Functions.vkCreateIndirectCommandsLayoutNV(Handle, pCreateInfo, pAllocator, pIndirectCommandsLayout), "vkCreateIndirectCommandsLayoutNV");

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void DestroyIndirectCommandsLayoutNV(Vk.NV.IndirectCommandsLayout indirectCommandsLayout, Vk.AllocationCallbacks* pAllocator)
		=> Functions.vkDestroyIndirectCommandsLayoutNV(Handle, indirectCommandsLayout, pAllocator);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void TrimCommandPool(Vk.CommandPool commandPool, Vk.CommandPoolTrimFlags flags)
		=> Functions.vkTrimCommandPool(Handle, commandPool, flags);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void TrimCommandPoolKHR(Vk.CommandPool commandPool, Vk.CommandPoolTrimFlags flags)
		=> Functions.vkTrimCommandPoolKHR(Handle, commandPool, flags);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public VulkanResult GetMemoryWin32HandleKHR(Vk.KHR.MemoryGetWin32HandleInfo* pGetWin32HandleInfo, void** pHandle)
		=> new(Functions.vkGetMemoryWin32HandleKHR(Handle, pGetWin32HandleInfo, pHandle), "vkGetMemoryWin32HandleKHR");

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public VulkanResult GetMemoryWin32HandlePropertiesKHR(Vk.ExternalMemoryHandleTypeFlags handleType, void* handle, Vk.KHR.MemoryWin32HandleProperties* pMemoryWin32HandleProperties)
		=> new(Functions.vkGetMemoryWin32HandlePropertiesKHR(Handle, handleType, handle, pMemoryWin32HandleProperties), "vkGetMemoryWin32HandlePropertiesKHR");

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public VulkanResult GetMemoryFdKHR(Vk.KHR.MemoryGetFdInfo* pGetFdInfo, int* pFd)
		=> new(Functions.vkGetMemoryFdKHR(Handle, pGetFdInfo, pFd), "vkGetMemoryFdKHR");

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public VulkanResult GetMemoryFdPropertiesKHR(Vk.ExternalMemoryHandleTypeFlags handleType, int fd, Vk.KHR.MemoryFdProperties* pMemoryFdProperties)
		=> new(Functions.vkGetMemoryFdPropertiesKHR(Handle, handleType, fd, pMemoryFdProperties), "vkGetMemoryFdPropertiesKHR");

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public VulkanResult GetSemaphoreWin32HandleKHR(Vk.KHR.SemaphoreGetWin32HandleInfo* pGetWin32HandleInfo, void** pHandle)
		=> new(Functions.vkGetSemaphoreWin32HandleKHR(Handle, pGetWin32HandleInfo, pHandle), "vkGetSemaphoreWin32HandleKHR");

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public VulkanResult ImportSemaphoreWin32HandleKHR(Vk.KHR.ImportSemaphoreWin32HandleInfo* pImportSemaphoreWin32HandleInfo)
		=> new(Functions.vkImportSemaphoreWin32HandleKHR(Handle, pImportSemaphoreWin32HandleInfo), "vkImportSemaphoreWin32HandleKHR");

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public VulkanResult GetSemaphoreFdKHR(Vk.KHR.SemaphoreGetFdInfo* pGetFdInfo, int* pFd)
		=> new(Functions.vkGetSemaphoreFdKHR(Handle, pGetFdInfo, pFd), "vkGetSemaphoreFdKHR");

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public VulkanResult ImportSemaphoreFdKHR(Vk.KHR.ImportSemaphoreFdInfo* pImportSemaphoreFdInfo)
		=> new(Functions.vkImportSemaphoreFdKHR(Handle, pImportSemaphoreFdInfo), "vkImportSemaphoreFdKHR");

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public VulkanResult GetFenceWin32HandleKHR(Vk.KHR.FenceGetWin32HandleInfo* pGetWin32HandleInfo, void** pHandle)
		=> new(Functions.vkGetFenceWin32HandleKHR(Handle, pGetWin32HandleInfo, pHandle), "vkGetFenceWin32HandleKHR");

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public VulkanResult ImportFenceWin32HandleKHR(Vk.KHR.ImportFenceWin32HandleInfo* pImportFenceWin32HandleInfo)
		=> new(Functions.vkImportFenceWin32HandleKHR(Handle, pImportFenceWin32HandleInfo), "vkImportFenceWin32HandleKHR");

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public VulkanResult GetFenceFdKHR(Vk.KHR.FenceGetFdInfo* pGetFdInfo, int* pFd)
		=> new(Functions.vkGetFenceFdKHR(Handle, pGetFdInfo, pFd), "vkGetFenceFdKHR");

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public VulkanResult ImportFenceFdKHR(Vk.KHR.ImportFenceFdInfo* pImportFenceFdInfo)
		=> new(Functions.vkImportFenceFdKHR(Handle, pImportFenceFdInfo), "vkImportFenceFdKHR");

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public VulkanResult DisplayPowerControlEXT(Vk.KHR.Display display, Vk.EXT.DisplayPowerInfo* pDisplayPowerInfo)
		=> new(Functions.vkDisplayPowerControlEXT(Handle, display, pDisplayPowerInfo), "vkDisplayPowerControlEXT");

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public VulkanResult RegisterDeviceEventEXT(Vk.EXT.DeviceEventInfo* pDeviceEventInfo, Vk.AllocationCallbacks* pAllocator, Vk.Fence* pFence)
		=> new(Functions.vkRegisterDeviceEventEXT(Handle, pDeviceEventInfo, pAllocator, pFence), "vkRegisterDeviceEventEXT");

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public VulkanResult RegisterDisplayEventEXT(Vk.KHR.Display display, Vk.EXT.DisplayEventInfo* pDisplayEventInfo, Vk.AllocationCallbacks* pAllocator, Vk.Fence* pFence)
		=> new(Functions.vkRegisterDisplayEventEXT(Handle, display, pDisplayEventInfo, pAllocator, pFence), "vkRegisterDisplayEventEXT");

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public VulkanResult GetSwapchainCounterEXT(Vk.KHR.Swapchain swapchain, Vk.EXT.SurfaceCounterFlags counter, ulong* pCounterValue)
		=> new(Functions.vkGetSwapchainCounterEXT(Handle, swapchain, counter, pCounterValue), "vkGetSwapchainCounterEXT");

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void GetDeviceGroupPeerMemoryFeatures(uint heapIndex, uint localDeviceIndex, uint remoteDeviceIndex, Vk.PeerMemoryFeatureFlags* pPeerMemoryFeatures)
		=> Functions.vkGetDeviceGroupPeerMemoryFeatures(Handle, heapIndex, localDeviceIndex, remoteDeviceIndex, pPeerMemoryFeatures);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void GetDeviceGroupPeerMemoryFeaturesKHR(uint heapIndex, uint localDeviceIndex, uint remoteDeviceIndex, Vk.PeerMemoryFeatureFlags* pPeerMemoryFeatures)
		=> Functions.vkGetDeviceGroupPeerMemoryFeaturesKHR(Handle, heapIndex, localDeviceIndex, remoteDeviceIndex, pPeerMemoryFeatures);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public VulkanResult BindBufferMemory2(uint bindInfoCount, Vk.BindBufferMemoryInfo* pBindInfos)
		=> new(Functions.vkBindBufferMemory2(Handle, bindInfoCount, pBindInfos), "vkBindBufferMemory2");

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public VulkanResult BindBufferMemory2KHR(uint bindInfoCount, Vk.BindBufferMemoryInfo* pBindInfos)
		=> new(Functions.vkBindBufferMemory2KHR(Handle, bindInfoCount, pBindInfos), "vkBindBufferMemory2KHR");

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public VulkanResult BindImageMemory2(uint bindInfoCount, Vk.BindImageMemoryInfo* pBindInfos)
		=> new(Functions.vkBindImageMemory2(Handle, bindInfoCount, pBindInfos), "vkBindImageMemory2");

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public VulkanResult BindImageMemory2KHR(uint bindInfoCount, Vk.BindImageMemoryInfo* pBindInfos)
		=> new(Functions.vkBindImageMemory2KHR(Handle, bindInfoCount, pBindInfos), "vkBindImageMemory2KHR");

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public VulkanResult GetDeviceGroupPresentCapabilitiesKHR(Vk.KHR.DeviceGroupPresentCapabilities* pDeviceGroupPresentCapabilities)
		=> new(Functions.vkGetDeviceGroupPresentCapabilitiesKHR(Handle, pDeviceGroupPresentCapabilities), "vkGetDeviceGroupPresentCapabilitiesKHR");

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public VulkanResult GetDeviceGroupSurfacePresentModesKHR(Vk.KHR.Surface surface, Vk.KHR.DeviceGroupPresentModeFlags* pModes)
		=> new(Functions.vkGetDeviceGroupSurfacePresentModesKHR(Handle, surface, pModes), "vkGetDeviceGroupSurfacePresentModesKHR");

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public VulkanResult AcquireNextImage2KHR(Vk.KHR.AcquireNextImageInfo* pAcquireInfo, uint* pImageIndex)
		=> new(Functions.vkAcquireNextImage2KHR(Handle, pAcquireInfo, pImageIndex), "vkAcquireNextImage2KHR");

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public VulkanResult CreateDescriptorUpdateTemplate(Vk.DescriptorUpdateTemplateCreateInfo* pCreateInfo, Vk.AllocationCallbacks* pAllocator, Vk.DescriptorUpdateTemplate* pDescriptorUpdateTemplate)
		=> new(Functions.vkCreateDescriptorUpdateTemplate(Handle, pCreateInfo, pAllocator, pDescriptorUpdateTemplate), "vkCreateDescriptorUpdateTemplate");

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public VulkanResult CreateDescriptorUpdateTemplateKHR(Vk.DescriptorUpdateTemplateCreateInfo* pCreateInfo, Vk.AllocationCallbacks* pAllocator, Vk.DescriptorUpdateTemplate* pDescriptorUpdateTemplate)
		=> new(Functions.vkCreateDescriptorUpdateTemplateKHR(Handle, pCreateInfo, pAllocator, pDescriptorUpdateTemplate), "vkCreateDescriptorUpdateTemplateKHR");

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void DestroyDescriptorUpdateTemplate(Vk.DescriptorUpdateTemplate descriptorUpdateTemplate, Vk.AllocationCallbacks* pAllocator)
		=> Functions.vkDestroyDescriptorUpdateTemplate(Handle, descriptorUpdateTemplate, pAllocator);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void DestroyDescriptorUpdateTemplateKHR(Vk.DescriptorUpdateTemplate descriptorUpdateTemplate, Vk.AllocationCallbacks* pAllocator)
		=> Functions.vkDestroyDescriptorUpdateTemplateKHR(Handle, descriptorUpdateTemplate, pAllocator);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void UpdateDescriptorSetWithTemplate(Vk.DescriptorSet descriptorSet, Vk.DescriptorUpdateTemplate descriptorUpdateTemplate, void* pData)
		=> Functions.vkUpdateDescriptorSetWithTemplate(Handle, descriptorSet, descriptorUpdateTemplate, pData);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void UpdateDescriptorSetWithTemplateKHR(Vk.DescriptorSet descriptorSet, Vk.DescriptorUpdateTemplate descriptorUpdateTemplate, void* pData)
		=> Functions.vkUpdateDescriptorSetWithTemplateKHR(Handle, descriptorSet, descriptorUpdateTemplate, pData);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void SetHdrMetadataEXT(uint swapchainCount, Vk.KHR.Swapchain* pSwapchains, Vk.EXT.HdrMetadata* pMetadata)
		=> Functions.vkSetHdrMetadataEXT(Handle, swapchainCount, pSwapchains, pMetadata);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public VulkanResult GetSwapchainStatusKHR(Vk.KHR.Swapchain swapchain)
		=> new(Functions.vkGetSwapchainStatusKHR(Handle, swapchain), "vkGetSwapchainStatusKHR");

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public VulkanResult GetRefreshCycleDurationGOOGLE(Vk.KHR.Swapchain swapchain, Vk.GOOGLE.RefreshCycleDuration* pDisplayTimingProperties)
		=> new(Functions.vkGetRefreshCycleDurationGOOGLE(Handle, swapchain, pDisplayTimingProperties), "vkGetRefreshCycleDurationGOOGLE");

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public VulkanResult GetPastPresentationTimingGOOGLE(Vk.KHR.Swapchain swapchain, uint* pPresentationTimingCount, Vk.GOOGLE.PastPresentationTiming* pPresentationTimings)
		=> new(Functions.vkGetPastPresentationTimingGOOGLE(Handle, swapchain, pPresentationTimingCount, pPresentationTimings), "vkGetPastPresentationTimingGOOGLE");

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void GetBufferMemoryRequirements2(Vk.BufferMemoryRequirementsInfo2* pInfo, Vk.MemoryRequirements2* pMemoryRequirements)
		=> Functions.vkGetBufferMemoryRequirements2(Handle, pInfo, pMemoryRequirements);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void GetBufferMemoryRequirements2KHR(Vk.BufferMemoryRequirementsInfo2* pInfo, Vk.MemoryRequirements2* pMemoryRequirements)
		=> Functions.vkGetBufferMemoryRequirements2KHR(Handle, pInfo, pMemoryRequirements);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void GetImageMemoryRequirements2(Vk.ImageMemoryRequirementsInfo2* pInfo, Vk.MemoryRequirements2* pMemoryRequirements)
		=> Functions.vkGetImageMemoryRequirements2(Handle, pInfo, pMemoryRequirements);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void GetImageMemoryRequirements2KHR(Vk.ImageMemoryRequirementsInfo2* pInfo, Vk.MemoryRequirements2* pMemoryRequirements)
		=> Functions.vkGetImageMemoryRequirements2KHR(Handle, pInfo, pMemoryRequirements);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void GetImageSparseMemoryRequirements2(Vk.ImageSparseMemoryRequirementsInfo2* pInfo, uint* pSparseMemoryRequirementCount, Vk.SparseImageMemoryRequirements2* pSparseMemoryRequirements)
		=> Functions.vkGetImageSparseMemoryRequirements2(Handle, pInfo, pSparseMemoryRequirementCount, pSparseMemoryRequirements);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void GetImageSparseMemoryRequirements2KHR(Vk.ImageSparseMemoryRequirementsInfo2* pInfo, uint* pSparseMemoryRequirementCount, Vk.SparseImageMemoryRequirements2* pSparseMemoryRequirements)
		=> Functions.vkGetImageSparseMemoryRequirements2KHR(Handle, pInfo, pSparseMemoryRequirementCount, pSparseMemoryRequirements);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public VulkanResult CreateSamplerYcbcrConversion(Vk.SamplerYcbcrConversionCreateInfo* pCreateInfo, Vk.AllocationCallbacks* pAllocator, Vk.SamplerYcbcrConversion* pYcbcrConversion)
		=> new(Functions.vkCreateSamplerYcbcrConversion(Handle, pCreateInfo, pAllocator, pYcbcrConversion), "vkCreateSamplerYcbcrConversion");

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public VulkanResult CreateSamplerYcbcrConversionKHR(Vk.SamplerYcbcrConversionCreateInfo* pCreateInfo, Vk.AllocationCallbacks* pAllocator, Vk.SamplerYcbcrConversion* pYcbcrConversion)
		=> new(Functions.vkCreateSamplerYcbcrConversionKHR(Handle, pCreateInfo, pAllocator, pYcbcrConversion), "vkCreateSamplerYcbcrConversionKHR");

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void DestroySamplerYcbcrConversion(Vk.SamplerYcbcrConversion ycbcrConversion, Vk.AllocationCallbacks* pAllocator)
		=> Functions.vkDestroySamplerYcbcrConversion(Handle, ycbcrConversion, pAllocator);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void DestroySamplerYcbcrConversionKHR(Vk.SamplerYcbcrConversion ycbcrConversion, Vk.AllocationCallbacks* pAllocator)
		=> Functions.vkDestroySamplerYcbcrConversionKHR(Handle, ycbcrConversion, pAllocator);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void GetDeviceQueue2(Vk.DeviceQueueInfo2* pQueueInfo, Vk.Queue* pQueue)
		=> Functions.vkGetDeviceQueue2(Handle, pQueueInfo, pQueue);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public VulkanResult CreateValidationCacheEXT(Vk.EXT.ValidationCacheCreateInfo* pCreateInfo, Vk.AllocationCallbacks* pAllocator, Vk.EXT.ValidationCache* pValidationCache)
		=> new(Functions.vkCreateValidationCacheEXT(Handle, pCreateInfo, pAllocator, pValidationCache), "vkCreateValidationCacheEXT");

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void DestroyValidationCacheEXT(Vk.EXT.ValidationCache validationCache, Vk.AllocationCallbacks* pAllocator)
		=> Functions.vkDestroyValidationCacheEXT(Handle, validationCache, pAllocator);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public VulkanResult GetValidationCacheDataEXT(Vk.EXT.ValidationCache validationCache, ulong* pDataSize, void* pData)
		=> new(Functions.vkGetValidationCacheDataEXT(Handle, validationCache, pDataSize, pData), "vkGetValidationCacheDataEXT");

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public VulkanResult MergeValidationCachesEXT(Vk.EXT.ValidationCache dstCache, uint srcCacheCount, Vk.EXT.ValidationCache* pSrcCaches)
		=> new(Functions.vkMergeValidationCachesEXT(Handle, dstCache, srcCacheCount, pSrcCaches), "vkMergeValidationCachesEXT");

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void GetDescriptorSetLayoutSupport(Vk.DescriptorSetLayoutCreateInfo* pCreateInfo, Vk.DescriptorSetLayoutSupport* pSupport)
		=> Functions.vkGetDescriptorSetLayoutSupport(Handle, pCreateInfo, pSupport);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void GetDescriptorSetLayoutSupportKHR(Vk.DescriptorSetLayoutCreateInfo* pCreateInfo, Vk.DescriptorSetLayoutSupport* pSupport)
		=> Functions.vkGetDescriptorSetLayoutSupportKHR(Handle, pCreateInfo, pSupport);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public VulkanResult GetSwapchainGrallocUsageANDROID(Vk.Format format, Vk.ImageUsageFlags imageUsage, int* grallocUsage)
		=> new(Functions.vkGetSwapchainGrallocUsageANDROID(Handle, format, imageUsage, grallocUsage), "vkGetSwapchainGrallocUsageANDROID");

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public VulkanResult GetSwapchainGrallocUsage2ANDROID(Vk.Format format, Vk.ImageUsageFlags imageUsage, Vk.ANDROID.SwapchainImageUsageFlags swapchainImageUsage, ulong* grallocConsumerUsage, ulong* grallocProducerUsage)
		=> new(Functions.vkGetSwapchainGrallocUsage2ANDROID(Handle, format, imageUsage, swapchainImageUsage, grallocConsumerUsage, grallocProducerUsage), "vkGetSwapchainGrallocUsage2ANDROID");

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public VulkanResult AcquireImageANDROID(Vk.Image image, int nativeFenceFd, Vk.Semaphore semaphore, Vk.Fence fence)
		=> new(Functions.vkAcquireImageANDROID(Handle, image, nativeFenceFd, semaphore, fence), "vkAcquireImageANDROID");

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public VulkanResult GetShaderInfoAMD(Vk.Pipeline pipeline, Vk.ShaderStageFlags shaderStage, Vk.AMD.ShaderInfoType infoType, ulong* pInfoSize, void* pInfo)
		=> new(Functions.vkGetShaderInfoAMD(Handle, pipeline, shaderStage, infoType, pInfoSize, pInfo), "vkGetShaderInfoAMD");

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void SetLocalDimmingAMD(Vk.KHR.Swapchain swapChain, Vk.Bool32 localDimmingEnable)
		=> Functions.vkSetLocalDimmingAMD(Handle, swapChain, localDimmingEnable);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public VulkanResult GetCalibratedTimestampsEXT(uint timestampCount, Vk.EXT.CalibratedTimestampInfo* pTimestampInfos, ulong* pTimestamps, ulong* pMaxDeviation)
		=> new(Functions.vkGetCalibratedTimestampsEXT(Handle, timestampCount, pTimestampInfos, pTimestamps, pMaxDeviation), "vkGetCalibratedTimestampsEXT");

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public VulkanResult SetDebugUtilsObjectNameEXT(Vk.EXT.DebugUtilsObjectNameInfo* pNameInfo)
		=> new(Functions.vkSetDebugUtilsObjectNameEXT(Handle, pNameInfo), "vkSetDebugUtilsObjectNameEXT");

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public VulkanResult SetDebugUtilsObjectTagEXT(Vk.EXT.DebugUtilsObjectTagInfo* pTagInfo)
		=> new(Functions.vkSetDebugUtilsObjectTagEXT(Handle, pTagInfo), "vkSetDebugUtilsObjectTagEXT");

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public VulkanResult GetMemoryHostPointerPropertiesEXT(Vk.ExternalMemoryHandleTypeFlags handleType, void* pHostPointer, Vk.EXT.MemoryHostPointerProperties* pMemoryHostPointerProperties)
		=> new(Functions.vkGetMemoryHostPointerPropertiesEXT(Handle, handleType, pHostPointer, pMemoryHostPointerProperties), "vkGetMemoryHostPointerPropertiesEXT");

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public VulkanResult CreateRenderPass2(Vk.RenderPassCreateInfo2* pCreateInfo, Vk.AllocationCallbacks* pAllocator, Vk.RenderPass* pRenderPass)
		=> new(Functions.vkCreateRenderPass2(Handle, pCreateInfo, pAllocator, pRenderPass), "vkCreateRenderPass2");

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public VulkanResult CreateRenderPass2KHR(Vk.RenderPassCreateInfo2* pCreateInfo, Vk.AllocationCallbacks* pAllocator, Vk.RenderPass* pRenderPass)
		=> new(Functions.vkCreateRenderPass2KHR(Handle, pCreateInfo, pAllocator, pRenderPass), "vkCreateRenderPass2KHR");

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public VulkanResult GetSemaphoreCounterValue(Vk.Semaphore semaphore, ulong* pValue)
		=> new(Functions.vkGetSemaphoreCounterValue(Handle, semaphore, pValue), "vkGetSemaphoreCounterValue");

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public VulkanResult GetSemaphoreCounterValueKHR(Vk.Semaphore semaphore, ulong* pValue)
		=> new(Functions.vkGetSemaphoreCounterValueKHR(Handle, semaphore, pValue), "vkGetSemaphoreCounterValueKHR");

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public VulkanResult WaitSemaphores(Vk.SemaphoreWaitInfo* pWaitInfo, ulong timeout)
		=> new(Functions.vkWaitSemaphores(Handle, pWaitInfo, timeout), "vkWaitSemaphores");

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public VulkanResult WaitSemaphoresKHR(Vk.SemaphoreWaitInfo* pWaitInfo, ulong timeout)
		=> new(Functions.vkWaitSemaphoresKHR(Handle, pWaitInfo, timeout), "vkWaitSemaphoresKHR");

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public VulkanResult SignalSemaphore(Vk.SemaphoreSignalInfo* pSignalInfo)
		=> new(Functions.vkSignalSemaphore(Handle, pSignalInfo), "vkSignalSemaphore");

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public VulkanResult SignalSemaphoreKHR(Vk.SemaphoreSignalInfo* pSignalInfo)
		=> new(Functions.vkSignalSemaphoreKHR(Handle, pSignalInfo), "vkSignalSemaphoreKHR");

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public VulkanResult GetAndroidHardwareBufferPropertiesANDROID(void* buffer, Vk.ANDROID.AndroidHardwareBufferProperties* pProperties)
		=> new(Functions.vkGetAndroidHardwareBufferPropertiesANDROID(Handle, buffer, pProperties), "vkGetAndroidHardwareBufferPropertiesANDROID");

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public VulkanResult GetMemoryAndroidHardwareBufferANDROID(Vk.ANDROID.MemoryGetAndroidHardwareBufferInfo* pInfo, void** pBuffer)
		=> new(Functions.vkGetMemoryAndroidHardwareBufferANDROID(Handle, pInfo, pBuffer), "vkGetMemoryAndroidHardwareBufferANDROID");

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public VulkanResult CompileDeferredNV(Vk.Pipeline pipeline, uint shader)
		=> new(Functions.vkCompileDeferredNV(Handle, pipeline, shader), "vkCompileDeferredNV");

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public VulkanResult CreateAccelerationStructureNV(Vk.NV.AccelerationStructureCreateInfo* pCreateInfo, Vk.AllocationCallbacks* pAllocator, Vk.NV.AccelerationStructure* pAccelerationStructure)
		=> new(Functions.vkCreateAccelerationStructureNV(Handle, pCreateInfo, pAllocator, pAccelerationStructure), "vkCreateAccelerationStructureNV");

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void DestroyAccelerationStructureKHR(Vk.KHR.AccelerationStructure accelerationStructure, Vk.AllocationCallbacks* pAllocator)
		=> Functions.vkDestroyAccelerationStructureKHR(Handle, accelerationStructure, pAllocator);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void DestroyAccelerationStructureNV(Vk.KHR.AccelerationStructure accelerationStructure, Vk.AllocationCallbacks* pAllocator)
		=> Functions.vkDestroyAccelerationStructureNV(Handle, accelerationStructure, pAllocator);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void GetAccelerationStructureMemoryRequirementsKHR(Vk.KHR.AccelerationStructureMemoryRequirementsInfo* pInfo, Vk.MemoryRequirements2* pMemoryRequirements)
		=> Functions.vkGetAccelerationStructureMemoryRequirementsKHR(Handle, pInfo, pMemoryRequirements);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void GetAccelerationStructureMemoryRequirementsNV(Vk.NV.AccelerationStructureMemoryRequirementsInfo* pInfo, Vk.KHR.MemoryRequirements2* pMemoryRequirements)
		=> Functions.vkGetAccelerationStructureMemoryRequirementsNV(Handle, pInfo, pMemoryRequirements);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public VulkanResult BindAccelerationStructureMemoryKHR(uint bindInfoCount, Vk.KHR.BindAccelerationStructureMemoryInfo* pBindInfos)
		=> new(Functions.vkBindAccelerationStructureMemoryKHR(Handle, bindInfoCount, pBindInfos), "vkBindAccelerationStructureMemoryKHR");

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public VulkanResult BindAccelerationStructureMemoryNV(uint bindInfoCount, Vk.KHR.BindAccelerationStructureMemoryInfo* pBindInfos)
		=> new(Functions.vkBindAccelerationStructureMemoryNV(Handle, bindInfoCount, pBindInfos), "vkBindAccelerationStructureMemoryNV");

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public VulkanResult CopyAccelerationStructureKHR(Vk.KHR.CopyAccelerationStructureInfo* pInfo)
		=> new(Functions.vkCopyAccelerationStructureKHR(Handle, pInfo), "vkCopyAccelerationStructureKHR");

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public VulkanResult CopyAccelerationStructureToMemoryKHR(Vk.KHR.CopyAccelerationStructureToMemoryInfo* pInfo)
		=> new(Functions.vkCopyAccelerationStructureToMemoryKHR(Handle, pInfo), "vkCopyAccelerationStructureToMemoryKHR");

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public VulkanResult CopyMemoryToAccelerationStructureKHR(Vk.KHR.CopyMemoryToAccelerationStructureInfo* pInfo)
		=> new(Functions.vkCopyMemoryToAccelerationStructureKHR(Handle, pInfo), "vkCopyMemoryToAccelerationStructureKHR");

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public VulkanResult WriteAccelerationStructuresPropertiesKHR(uint accelerationStructureCount, Vk.KHR.AccelerationStructure* pAccelerationStructures, Vk.QueryType queryType, ulong dataSize, void* pData, ulong stride)
		=> new(Functions.vkWriteAccelerationStructuresPropertiesKHR(Handle, accelerationStructureCount, pAccelerationStructures, queryType, dataSize, pData, stride), "vkWriteAccelerationStructuresPropertiesKHR");

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public VulkanResult GetRayTracingShaderGroupHandlesKHR(Vk.Pipeline pipeline, uint firstGroup, uint groupCount, ulong dataSize, void* pData)
		=> new(Functions.vkGetRayTracingShaderGroupHandlesKHR(Handle, pipeline, firstGroup, groupCount, dataSize, pData), "vkGetRayTracingShaderGroupHandlesKHR");

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public VulkanResult GetRayTracingShaderGroupHandlesNV(Vk.Pipeline pipeline, uint firstGroup, uint groupCount, ulong dataSize, void* pData)
		=> new(Functions.vkGetRayTracingShaderGroupHandlesNV(Handle, pipeline, firstGroup, groupCount, dataSize, pData), "vkGetRayTracingShaderGroupHandlesNV");

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public VulkanResult GetRayTracingCaptureReplayShaderGroupHandlesKHR(Vk.Pipeline pipeline, uint firstGroup, uint groupCount, ulong dataSize, void* pData)
		=> new(Functions.vkGetRayTracingCaptureReplayShaderGroupHandlesKHR(Handle, pipeline, firstGroup, groupCount, dataSize, pData), "vkGetRayTracingCaptureReplayShaderGroupHandlesKHR");

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public VulkanResult GetAccelerationStructureHandleNV(Vk.KHR.AccelerationStructure accelerationStructure, ulong dataSize, void* pData)
		=> new(Functions.vkGetAccelerationStructureHandleNV(Handle, accelerationStructure, dataSize, pData), "vkGetAccelerationStructureHandleNV");

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public VulkanResult CreateRayTracingPipelinesNV(Vk.PipelineCache pipelineCache, uint createInfoCount, Vk.NV.RayTracingPipelineCreateInfo* pCreateInfos, Vk.AllocationCallbacks* pAllocator, Vk.Pipeline* pPipelines)
		=> new(Functions.vkCreateRayTracingPipelinesNV(Handle, pipelineCache, createInfoCount, pCreateInfos, pAllocator, pPipelines), "vkCreateRayTracingPipelinesNV");

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public VulkanResult CreateRayTracingPipelinesKHR(Vk.PipelineCache pipelineCache, uint createInfoCount, Vk.KHR.RayTracingPipelineCreateInfo* pCreateInfos, Vk.AllocationCallbacks* pAllocator, Vk.Pipeline* pPipelines)
		=> new(Functions.vkCreateRayTracingPipelinesKHR(Handle, pipelineCache, createInfoCount, pCreateInfos, pAllocator, pPipelines), "vkCreateRayTracingPipelinesKHR");

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public VulkanResult GetDeviceAccelerationStructureCompatibilityKHR(Vk.KHR.AccelerationStructureVersion* version)
		=> new(Functions.vkGetDeviceAccelerationStructureCompatibilityKHR(Handle, version), "vkGetDeviceAccelerationStructureCompatibilityKHR");

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public uint GetImageViewHandleNVX(Vk.NVX.ImageViewHandleInfo* pInfo)
		=> Functions.vkGetImageViewHandleNVX(Handle, pInfo);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public VulkanResult GetImageViewAddressNVX(Vk.ImageView imageView, Vk.NVX.ImageViewAddressProperties* pProperties)
		=> new(Functions.vkGetImageViewAddressNVX(Handle, imageView, pProperties), "vkGetImageViewAddressNVX");

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public VulkanResult GetDeviceGroupSurfacePresentModes2EXT(Vk.KHR.PhysicalDeviceSurfaceInfo2* pSurfaceInfo, Vk.KHR.DeviceGroupPresentModeFlags* pModes)
		=> new(Functions.vkGetDeviceGroupSurfacePresentModes2EXT(Handle, pSurfaceInfo, pModes), "vkGetDeviceGroupSurfacePresentModes2EXT");

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public VulkanResult AcquireFullScreenExclusiveModeEXT(Vk.KHR.Swapchain swapchain)
		=> new(Functions.vkAcquireFullScreenExclusiveModeEXT(Handle, swapchain), "vkAcquireFullScreenExclusiveModeEXT");

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public VulkanResult ReleaseFullScreenExclusiveModeEXT(Vk.KHR.Swapchain swapchain)
		=> new(Functions.vkReleaseFullScreenExclusiveModeEXT(Handle, swapchain), "vkReleaseFullScreenExclusiveModeEXT");

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public VulkanResult AcquireProfilingLockKHR(Vk.KHR.AcquireProfilingLockInfo* pInfo)
		=> new(Functions.vkAcquireProfilingLockKHR(Handle, pInfo), "vkAcquireProfilingLockKHR");

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void ReleaseProfilingLockKHR()
		=> Functions.vkReleaseProfilingLockKHR(Handle);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public VulkanResult GetImageDrmFormatModifierPropertiesEXT(Vk.Image image, Vk.EXT.ImageDrmFormatModifierProperties* pProperties)
		=> new(Functions.vkGetImageDrmFormatModifierPropertiesEXT(Handle, image, pProperties), "vkGetImageDrmFormatModifierPropertiesEXT");

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public ulong GetBufferOpaqueCaptureAddress(Vk.BufferDeviceAddressInfo* pInfo)
		=> Functions.vkGetBufferOpaqueCaptureAddress(Handle, pInfo);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public ulong GetBufferOpaqueCaptureAddressKHR(Vk.BufferDeviceAddressInfo* pInfo)
		=> Functions.vkGetBufferOpaqueCaptureAddressKHR(Handle, pInfo);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public ulong GetBufferDeviceAddress(Vk.BufferDeviceAddressInfo* pInfo)
		=> Functions.vkGetBufferDeviceAddress(Handle, pInfo);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public ulong GetBufferDeviceAddressKHR(Vk.BufferDeviceAddressInfo* pInfo)
		=> Functions.vkGetBufferDeviceAddressKHR(Handle, pInfo);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public ulong GetBufferDeviceAddressEXT(Vk.BufferDeviceAddressInfo* pInfo)
		=> Functions.vkGetBufferDeviceAddressEXT(Handle, pInfo);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public VulkanResult InitializePerformanceApiINTEL(Vk.INTEL.InitializePerformanceApiInfo* pInitializeInfo)
		=> new(Functions.vkInitializePerformanceApiINTEL(Handle, pInitializeInfo), "vkInitializePerformanceApiINTEL");

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void UninitializePerformanceApiINTEL()
		=> Functions.vkUninitializePerformanceApiINTEL(Handle);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public VulkanResult AcquirePerformanceConfigurationINTEL(Vk.INTEL.PerformanceConfigurationAcquireInfo* pAcquireInfo, Vk.INTEL.PerformanceConfiguration* pConfiguration)
		=> new(Functions.vkAcquirePerformanceConfigurationINTEL(Handle, pAcquireInfo, pConfiguration), "vkAcquirePerformanceConfigurationINTEL");

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public VulkanResult ReleasePerformanceConfigurationINTEL(Vk.INTEL.PerformanceConfiguration configuration)
		=> new(Functions.vkReleasePerformanceConfigurationINTEL(Handle, configuration), "vkReleasePerformanceConfigurationINTEL");

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public VulkanResult GetPerformanceParameterINTEL(Vk.INTEL.PerformanceParameterType parameter, Vk.INTEL.PerformanceValue* pValue)
		=> new(Functions.vkGetPerformanceParameterINTEL(Handle, parameter, pValue), "vkGetPerformanceParameterINTEL");

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public ulong GetDeviceMemoryOpaqueCaptureAddress(Vk.DeviceMemoryOpaqueCaptureAddressInfo* pInfo)
		=> Functions.vkGetDeviceMemoryOpaqueCaptureAddress(Handle, pInfo);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public ulong GetDeviceMemoryOpaqueCaptureAddressKHR(Vk.DeviceMemoryOpaqueCaptureAddressInfo* pInfo)
		=> Functions.vkGetDeviceMemoryOpaqueCaptureAddressKHR(Handle, pInfo);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public VulkanResult GetPipelineExecutablePropertiesKHR(Vk.KHR.PipelineInfo* pPipelineInfo, uint* pExecutableCount, Vk.KHR.PipelineExecutableProperties* pProperties)
		=> new(Functions.vkGetPipelineExecutablePropertiesKHR(Handle, pPipelineInfo, pExecutableCount, pProperties), "vkGetPipelineExecutablePropertiesKHR");

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public VulkanResult GetPipelineExecutableStatisticsKHR(Vk.KHR.PipelineExecutableInfo* pExecutableInfo, uint* pStatisticCount, Vk.KHR.PipelineExecutableStatistic* pStatistics)
		=> new(Functions.vkGetPipelineExecutableStatisticsKHR(Handle, pExecutableInfo, pStatisticCount, pStatistics), "vkGetPipelineExecutableStatisticsKHR");

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public VulkanResult GetPipelineExecutableInternalRepresentationsKHR(Vk.KHR.PipelineExecutableInfo* pExecutableInfo, uint* pInternalRepresentationCount, Vk.KHR.PipelineExecutableInternalRepresentation* pInternalRepresentations)
		=> new(Functions.vkGetPipelineExecutableInternalRepresentationsKHR(Handle, pExecutableInfo, pInternalRepresentationCount, pInternalRepresentations), "vkGetPipelineExecutableInternalRepresentationsKHR");

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public VulkanResult CreateAccelerationStructureKHR(Vk.KHR.AccelerationStructureCreateInfo* pCreateInfo, Vk.AllocationCallbacks* pAllocator, Vk.KHR.AccelerationStructure* pAccelerationStructure)
		=> new(Functions.vkCreateAccelerationStructureKHR(Handle, pCreateInfo, pAllocator, pAccelerationStructure), "vkCreateAccelerationStructureKHR");

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public VulkanResult BuildAccelerationStructureKHR(uint infoCount, Vk.KHR.AccelerationStructureBuildGeometryInfo* pInfos, Vk.KHR.AccelerationStructureBuildOffsetInfo** ppOffsetInfos)
		=> new(Functions.vkBuildAccelerationStructureKHR(Handle, infoCount, pInfos, ppOffsetInfos), "vkBuildAccelerationStructureKHR");

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public ulong GetAccelerationStructureDeviceAddressKHR(Vk.KHR.AccelerationStructureDeviceAddressInfo* pInfo)
		=> Functions.vkGetAccelerationStructureDeviceAddressKHR(Handle, pInfo);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public VulkanResult CreateDeferredOperationKHR(Vk.AllocationCallbacks* pAllocator, Vk.KHR.DeferredOperation* pDeferredOperation)
		=> new(Functions.vkCreateDeferredOperationKHR(Handle, pAllocator, pDeferredOperation), "vkCreateDeferredOperationKHR");

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void DestroyDeferredOperationKHR(Vk.KHR.DeferredOperation operation, Vk.AllocationCallbacks* pAllocator)
		=> Functions.vkDestroyDeferredOperationKHR(Handle, operation, pAllocator);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public uint GetDeferredOperationMaxConcurrencyKHR(Vk.KHR.DeferredOperation operation)
		=> Functions.vkGetDeferredOperationMaxConcurrencyKHR(Handle, operation);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public VulkanResult GetDeferredOperationResultKHR(Vk.KHR.DeferredOperation operation)
		=> new(Functions.vkGetDeferredOperationResultKHR(Handle, operation), "vkGetDeferredOperationResultKHR");

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public VulkanResult DeferredOperationJoinKHR(Vk.KHR.DeferredOperation operation)
		=> new(Functions.vkDeferredOperationJoinKHR(Handle, operation), "vkDeferredOperationJoinKHR");

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public VulkanResult CreatePrivateDataSlotEXT(Vk.EXT.PrivateDataSlotCreateInfo* pCreateInfo, Vk.AllocationCallbacks* pAllocator, Vk.EXT.PrivateDataSlot* pPrivateDataSlot)
		=> new(Functions.vkCreatePrivateDataSlotEXT(Handle, pCreateInfo, pAllocator, pPrivateDataSlot), "vkCreatePrivateDataSlotEXT");

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void DestroyPrivateDataSlotEXT(Vk.EXT.PrivateDataSlot privateDataSlot, Vk.AllocationCallbacks* pAllocator)
		=> Functions.vkDestroyPrivateDataSlotEXT(Handle, privateDataSlot, pAllocator);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public VulkanResult SetPrivateDataEXT(Vk.ObjectType objectType, ulong objectHandle, Vk.EXT.PrivateDataSlot privateDataSlot, ulong data)
		=> new(Functions.vkSetPrivateDataEXT(Handle, objectType, objectHandle, privateDataSlot, data), "vkSetPrivateDataEXT");

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void GetPrivateDataEXT(Vk.ObjectType objectType, ulong objectHandle, Vk.EXT.PrivateDataSlot privateDataSlot, ulong* pData)
		=> Functions.vkGetPrivateDataEXT(Handle, objectType, objectHandle, privateDataSlot, pData);

}

} // namespace VVK
