/*
 * MIT License - Copyright(c) 2020 Sean Moss
 * This file is subject to the terms and conditions of the MIT License, the text of which can be found in the 'LICENSE'
 * file at the root of this repository, or online at<https://opensource.org/licenses/MIT>.
 */

/// This file was generated by VVKGen. Edits to this file will be lost on next generation.

using System;
using System.Runtime.InteropServices;
using System.Runtime.CompilerServices;


namespace VVK
{

public unsafe sealed partial class VulkanDevice
{
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void DestroyDevice(Vk.AllocationCallbacks* pAllocator)
		=> Functions.vkDestroyDevice(Handle, pAllocator);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void DestroyDevice(in Vk.AllocationCallbacks allocator)
		=> Functions.DestroyDevice(Handle, allocator);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void GetDeviceQueue(uint queueFamilyIndex, uint queueIndex, Vk.Queue* pQueue)
		=> Functions.vkGetDeviceQueue(Handle, queueFamilyIndex, queueIndex, pQueue);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void GetDeviceQueue(uint queueFamilyIndex, uint queueIndex, out Vk.Queue queue)
		=> Functions.GetDeviceQueue(Handle, queueFamilyIndex, queueIndex, out queue);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result WaitIdle()
		=> Functions.vkDeviceWaitIdle(Handle);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result AllocateMemory(Vk.MemoryAllocateInfo* pAllocateInfo, Vk.AllocationCallbacks* pAllocator, Vk.DeviceMemory* pMemory)
		=> Functions.vkAllocateMemory(Handle, pAllocateInfo, pAllocator, pMemory);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result AllocateMemory(in Vk.MemoryAllocateInfo allocateInfo, in Vk.AllocationCallbacks allocator, out Vk.DeviceMemory memory)
		=> Functions.AllocateMemory(Handle, allocateInfo, allocator, out memory);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void FreeMemory(Vk.DeviceMemory memory, Vk.AllocationCallbacks* pAllocator)
		=> Functions.vkFreeMemory(Handle, memory, pAllocator);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void FreeMemory(Vk.DeviceMemory memory, in Vk.AllocationCallbacks allocator)
		=> Functions.FreeMemory(Handle, memory, allocator);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result MapMemory(Vk.DeviceMemory memory, Vk.DeviceSize offset, Vk.DeviceSize size, Vk.MemoryMapFlags flags, void** ppData)
		=> Functions.vkMapMemory(Handle, memory, offset, size, flags, ppData);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void UnmapMemory(Vk.DeviceMemory memory)
		=> Functions.vkUnmapMemory(Handle, memory);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result FlushMappedMemoryRanges(uint memoryRangeCount, Vk.MappedMemoryRange* pMemoryRanges)
		=> Functions.vkFlushMappedMemoryRanges(Handle, memoryRangeCount, pMemoryRanges);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result FlushMappedMemoryRanges(in ReadOnlySpan<Vk.MappedMemoryRange> memoryRanges)
		=> Functions.FlushMappedMemoryRanges(Handle, memoryRanges);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result InvalidateMappedMemoryRanges(uint memoryRangeCount, Vk.MappedMemoryRange* pMemoryRanges)
		=> Functions.vkInvalidateMappedMemoryRanges(Handle, memoryRangeCount, pMemoryRanges);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result InvalidateMappedMemoryRanges(in ReadOnlySpan<Vk.MappedMemoryRange> memoryRanges)
		=> Functions.InvalidateMappedMemoryRanges(Handle, memoryRanges);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void GetDeviceMemoryCommitment(Vk.DeviceMemory memory, Vk.DeviceSize* pCommittedMemoryInBytes)
		=> Functions.vkGetDeviceMemoryCommitment(Handle, memory, pCommittedMemoryInBytes);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void GetDeviceMemoryCommitment(Vk.DeviceMemory memory, out Vk.DeviceSize committedMemoryInBytes)
		=> Functions.GetDeviceMemoryCommitment(Handle, memory, out committedMemoryInBytes);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void GetBufferMemoryRequirements(Vk.Buffer buffer, Vk.MemoryRequirements* pMemoryRequirements)
		=> Functions.vkGetBufferMemoryRequirements(Handle, buffer, pMemoryRequirements);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void GetBufferMemoryRequirements(Vk.Buffer buffer, out Vk.MemoryRequirements memoryRequirements)
		=> Functions.GetBufferMemoryRequirements(Handle, buffer, out memoryRequirements);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result BindBufferMemory(Vk.Buffer buffer, Vk.DeviceMemory memory, Vk.DeviceSize memoryOffset)
		=> Functions.vkBindBufferMemory(Handle, buffer, memory, memoryOffset);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void GetImageMemoryRequirements(Vk.Image image, Vk.MemoryRequirements* pMemoryRequirements)
		=> Functions.vkGetImageMemoryRequirements(Handle, image, pMemoryRequirements);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void GetImageMemoryRequirements(Vk.Image image, out Vk.MemoryRequirements memoryRequirements)
		=> Functions.GetImageMemoryRequirements(Handle, image, out memoryRequirements);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result BindImageMemory(Vk.Image image, Vk.DeviceMemory memory, Vk.DeviceSize memoryOffset)
		=> Functions.vkBindImageMemory(Handle, image, memory, memoryOffset);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void GetImageSparseMemoryRequirements(Vk.Image image, uint* pSparseMemoryRequirementCount, Vk.SparseImageMemoryRequirements* pSparseMemoryRequirements)
		=> Functions.vkGetImageSparseMemoryRequirements(Handle, image, pSparseMemoryRequirementCount, pSparseMemoryRequirements);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void GetImageSparseMemoryRequirements(Vk.Image image, out uint sparseMemoryRequirementCount, in Span<Vk.SparseImageMemoryRequirements> sparseMemoryRequirements)
		=> Functions.GetImageSparseMemoryRequirements(Handle, image, out sparseMemoryRequirementCount, sparseMemoryRequirements);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result CreateFence(Vk.FenceCreateInfo* pCreateInfo, Vk.AllocationCallbacks* pAllocator, Vk.Fence* pFence)
		=> Functions.vkCreateFence(Handle, pCreateInfo, pAllocator, pFence);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result CreateFence(in Vk.FenceCreateInfo createInfo, in Vk.AllocationCallbacks allocator, out Vk.Fence fence)
		=> Functions.CreateFence(Handle, createInfo, allocator, out fence);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void DestroyFence(Vk.Fence fence, Vk.AllocationCallbacks* pAllocator)
		=> Functions.vkDestroyFence(Handle, fence, pAllocator);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void DestroyFence(Vk.Fence fence, in Vk.AllocationCallbacks allocator)
		=> Functions.DestroyFence(Handle, fence, allocator);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result ResetFences(uint fenceCount, Vk.Fence* pFences)
		=> Functions.vkResetFences(Handle, fenceCount, pFences);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result ResetFences(in ReadOnlySpan<Vk.Fence> fences)
		=> Functions.ResetFences(Handle, fences);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result GetFenceStatus(Vk.Fence fence)
		=> Functions.vkGetFenceStatus(Handle, fence);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result WaitForFences(uint fenceCount, Vk.Fence* pFences, Vk.Bool32 waitAll, ulong timeout)
		=> Functions.vkWaitForFences(Handle, fenceCount, pFences, waitAll, timeout);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result WaitForFences(in ReadOnlySpan<Vk.Fence> fences, Vk.Bool32 waitAll, ulong timeout)
		=> Functions.WaitForFences(Handle, fences, waitAll, timeout);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result CreateSemaphore(Vk.SemaphoreCreateInfo* pCreateInfo, Vk.AllocationCallbacks* pAllocator, Vk.Semaphore* pSemaphore)
		=> Functions.vkCreateSemaphore(Handle, pCreateInfo, pAllocator, pSemaphore);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result CreateSemaphore(in Vk.SemaphoreCreateInfo createInfo, in Vk.AllocationCallbacks allocator, out Vk.Semaphore semaphore)
		=> Functions.CreateSemaphore(Handle, createInfo, allocator, out semaphore);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void DestroySemaphore(Vk.Semaphore semaphore, Vk.AllocationCallbacks* pAllocator)
		=> Functions.vkDestroySemaphore(Handle, semaphore, pAllocator);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void DestroySemaphore(Vk.Semaphore semaphore, in Vk.AllocationCallbacks allocator)
		=> Functions.DestroySemaphore(Handle, semaphore, allocator);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result CreateEvent(Vk.EventCreateInfo* pCreateInfo, Vk.AllocationCallbacks* pAllocator, Vk.Event* pEvent)
		=> Functions.vkCreateEvent(Handle, pCreateInfo, pAllocator, pEvent);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result CreateEvent(in Vk.EventCreateInfo createInfo, in Vk.AllocationCallbacks allocator, out Vk.Event @event)
		=> Functions.CreateEvent(Handle, createInfo, allocator, out @event);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void DestroyEvent(Vk.Event @event, Vk.AllocationCallbacks* pAllocator)
		=> Functions.vkDestroyEvent(Handle, @event, pAllocator);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void DestroyEvent(Vk.Event @event, in Vk.AllocationCallbacks allocator)
		=> Functions.DestroyEvent(Handle, @event, allocator);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result GetEventStatus(Vk.Event @event)
		=> Functions.vkGetEventStatus(Handle, @event);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result SetEvent(Vk.Event @event)
		=> Functions.vkSetEvent(Handle, @event);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result ResetEvent(Vk.Event @event)
		=> Functions.vkResetEvent(Handle, @event);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result CreateQueryPool(Vk.QueryPoolCreateInfo* pCreateInfo, Vk.AllocationCallbacks* pAllocator, Vk.QueryPool* pQueryPool)
		=> Functions.vkCreateQueryPool(Handle, pCreateInfo, pAllocator, pQueryPool);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result CreateQueryPool(in Vk.QueryPoolCreateInfo createInfo, in Vk.AllocationCallbacks allocator, out Vk.QueryPool queryPool)
		=> Functions.CreateQueryPool(Handle, createInfo, allocator, out queryPool);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void DestroyQueryPool(Vk.QueryPool queryPool, Vk.AllocationCallbacks* pAllocator)
		=> Functions.vkDestroyQueryPool(Handle, queryPool, pAllocator);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void DestroyQueryPool(Vk.QueryPool queryPool, in Vk.AllocationCallbacks allocator)
		=> Functions.DestroyQueryPool(Handle, queryPool, allocator);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result GetQueryPoolResults(Vk.QueryPool queryPool, uint firstQuery, uint queryCount, ulong dataSize, void* pData, Vk.DeviceSize stride, Vk.QueryResultFlags flags)
		=> Functions.vkGetQueryPoolResults(Handle, queryPool, firstQuery, queryCount, dataSize, pData, stride, flags);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void ResetQueryPool(Vk.QueryPool queryPool, uint firstQuery, uint queryCount)
		=> Functions.vkResetQueryPool(Handle, queryPool, firstQuery, queryCount);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void ResetQueryPoolEXT(Vk.QueryPool queryPool, uint firstQuery, uint queryCount)
		=> Functions.vkResetQueryPoolEXT(Handle, queryPool, firstQuery, queryCount);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result CreateBuffer(Vk.BufferCreateInfo* pCreateInfo, Vk.AllocationCallbacks* pAllocator, Vk.Buffer* pBuffer)
		=> Functions.vkCreateBuffer(Handle, pCreateInfo, pAllocator, pBuffer);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result CreateBuffer(in Vk.BufferCreateInfo createInfo, in Vk.AllocationCallbacks allocator, out Vk.Buffer buffer)
		=> Functions.CreateBuffer(Handle, createInfo, allocator, out buffer);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void DestroyBuffer(Vk.Buffer buffer, Vk.AllocationCallbacks* pAllocator)
		=> Functions.vkDestroyBuffer(Handle, buffer, pAllocator);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void DestroyBuffer(Vk.Buffer buffer, in Vk.AllocationCallbacks allocator)
		=> Functions.DestroyBuffer(Handle, buffer, allocator);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result CreateBufferView(Vk.BufferViewCreateInfo* pCreateInfo, Vk.AllocationCallbacks* pAllocator, Vk.BufferView* pView)
		=> Functions.vkCreateBufferView(Handle, pCreateInfo, pAllocator, pView);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result CreateBufferView(in Vk.BufferViewCreateInfo createInfo, in Vk.AllocationCallbacks allocator, out Vk.BufferView view)
		=> Functions.CreateBufferView(Handle, createInfo, allocator, out view);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void DestroyBufferView(Vk.BufferView bufferView, Vk.AllocationCallbacks* pAllocator)
		=> Functions.vkDestroyBufferView(Handle, bufferView, pAllocator);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void DestroyBufferView(Vk.BufferView bufferView, in Vk.AllocationCallbacks allocator)
		=> Functions.DestroyBufferView(Handle, bufferView, allocator);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result CreateImage(Vk.ImageCreateInfo* pCreateInfo, Vk.AllocationCallbacks* pAllocator, Vk.Image* pImage)
		=> Functions.vkCreateImage(Handle, pCreateInfo, pAllocator, pImage);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result CreateImage(in Vk.ImageCreateInfo createInfo, in Vk.AllocationCallbacks allocator, out Vk.Image image)
		=> Functions.CreateImage(Handle, createInfo, allocator, out image);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void DestroyImage(Vk.Image image, Vk.AllocationCallbacks* pAllocator)
		=> Functions.vkDestroyImage(Handle, image, pAllocator);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void DestroyImage(Vk.Image image, in Vk.AllocationCallbacks allocator)
		=> Functions.DestroyImage(Handle, image, allocator);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void GetImageSubresourceLayout(Vk.Image image, Vk.ImageSubresource* pSubresource, Vk.SubresourceLayout* pLayout)
		=> Functions.vkGetImageSubresourceLayout(Handle, image, pSubresource, pLayout);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void GetImageSubresourceLayout(Vk.Image image, in Vk.ImageSubresource subresource, out Vk.SubresourceLayout layout)
		=> Functions.GetImageSubresourceLayout(Handle, image, subresource, out layout);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result CreateImageView(Vk.ImageViewCreateInfo* pCreateInfo, Vk.AllocationCallbacks* pAllocator, Vk.ImageView* pView)
		=> Functions.vkCreateImageView(Handle, pCreateInfo, pAllocator, pView);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result CreateImageView(in Vk.ImageViewCreateInfo createInfo, in Vk.AllocationCallbacks allocator, out Vk.ImageView view)
		=> Functions.CreateImageView(Handle, createInfo, allocator, out view);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void DestroyImageView(Vk.ImageView imageView, Vk.AllocationCallbacks* pAllocator)
		=> Functions.vkDestroyImageView(Handle, imageView, pAllocator);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void DestroyImageView(Vk.ImageView imageView, in Vk.AllocationCallbacks allocator)
		=> Functions.DestroyImageView(Handle, imageView, allocator);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result CreateShaderModule(Vk.ShaderModuleCreateInfo* pCreateInfo, Vk.AllocationCallbacks* pAllocator, Vk.ShaderModule* pShaderModule)
		=> Functions.vkCreateShaderModule(Handle, pCreateInfo, pAllocator, pShaderModule);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result CreateShaderModule(in Vk.ShaderModuleCreateInfo createInfo, in Vk.AllocationCallbacks allocator, out Vk.ShaderModule shaderModule)
		=> Functions.CreateShaderModule(Handle, createInfo, allocator, out shaderModule);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void DestroyShaderModule(Vk.ShaderModule shaderModule, Vk.AllocationCallbacks* pAllocator)
		=> Functions.vkDestroyShaderModule(Handle, shaderModule, pAllocator);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void DestroyShaderModule(Vk.ShaderModule shaderModule, in Vk.AllocationCallbacks allocator)
		=> Functions.DestroyShaderModule(Handle, shaderModule, allocator);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result CreatePipelineCache(Vk.PipelineCacheCreateInfo* pCreateInfo, Vk.AllocationCallbacks* pAllocator, Vk.PipelineCache* pPipelineCache)
		=> Functions.vkCreatePipelineCache(Handle, pCreateInfo, pAllocator, pPipelineCache);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result CreatePipelineCache(in Vk.PipelineCacheCreateInfo createInfo, in Vk.AllocationCallbacks allocator, out Vk.PipelineCache pipelineCache)
		=> Functions.CreatePipelineCache(Handle, createInfo, allocator, out pipelineCache);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void DestroyPipelineCache(Vk.PipelineCache pipelineCache, Vk.AllocationCallbacks* pAllocator)
		=> Functions.vkDestroyPipelineCache(Handle, pipelineCache, pAllocator);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void DestroyPipelineCache(Vk.PipelineCache pipelineCache, in Vk.AllocationCallbacks allocator)
		=> Functions.DestroyPipelineCache(Handle, pipelineCache, allocator);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result GetPipelineCacheData(Vk.PipelineCache pipelineCache, ulong* pDataSize, void* pData)
		=> Functions.vkGetPipelineCacheData(Handle, pipelineCache, pDataSize, pData);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result GetPipelineCacheData(Vk.PipelineCache pipelineCache, out ulong dataSize, void* pData)
		=> Functions.GetPipelineCacheData(Handle, pipelineCache, out dataSize, pData);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result MergePipelineCaches(Vk.PipelineCache dstCache, uint srcCacheCount, Vk.PipelineCache* pSrcCaches)
		=> Functions.vkMergePipelineCaches(Handle, dstCache, srcCacheCount, pSrcCaches);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result MergePipelineCaches(Vk.PipelineCache dstCache, in ReadOnlySpan<Vk.PipelineCache> srcCaches)
		=> Functions.MergePipelineCaches(Handle, dstCache, srcCaches);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result CreateGraphicsPipelines(Vk.PipelineCache pipelineCache, uint createInfoCount, Vk.GraphicsPipelineCreateInfo* pCreateInfos, Vk.AllocationCallbacks* pAllocator, Vk.Pipeline* pPipelines)
		=> Functions.vkCreateGraphicsPipelines(Handle, pipelineCache, createInfoCount, pCreateInfos, pAllocator, pPipelines);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result CreateGraphicsPipelines(Vk.PipelineCache pipelineCache, in ReadOnlySpan<Vk.GraphicsPipelineCreateInfo> createInfos, in Vk.AllocationCallbacks allocator, in Span<Vk.Pipeline> pipelines)
		=> Functions.CreateGraphicsPipelines(Handle, pipelineCache, createInfos, allocator, pipelines);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result CreateComputePipelines(Vk.PipelineCache pipelineCache, uint createInfoCount, Vk.ComputePipelineCreateInfo* pCreateInfos, Vk.AllocationCallbacks* pAllocator, Vk.Pipeline* pPipelines)
		=> Functions.vkCreateComputePipelines(Handle, pipelineCache, createInfoCount, pCreateInfos, pAllocator, pPipelines);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result CreateComputePipelines(Vk.PipelineCache pipelineCache, in ReadOnlySpan<Vk.ComputePipelineCreateInfo> createInfos, in Vk.AllocationCallbacks allocator, in Span<Vk.Pipeline> pipelines)
		=> Functions.CreateComputePipelines(Handle, pipelineCache, createInfos, allocator, pipelines);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void DestroyPipeline(Vk.Pipeline pipeline, Vk.AllocationCallbacks* pAllocator)
		=> Functions.vkDestroyPipeline(Handle, pipeline, pAllocator);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void DestroyPipeline(Vk.Pipeline pipeline, in Vk.AllocationCallbacks allocator)
		=> Functions.DestroyPipeline(Handle, pipeline, allocator);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result CreatePipelineLayout(Vk.PipelineLayoutCreateInfo* pCreateInfo, Vk.AllocationCallbacks* pAllocator, Vk.PipelineLayout* pPipelineLayout)
		=> Functions.vkCreatePipelineLayout(Handle, pCreateInfo, pAllocator, pPipelineLayout);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result CreatePipelineLayout(in Vk.PipelineLayoutCreateInfo createInfo, in Vk.AllocationCallbacks allocator, out Vk.PipelineLayout pipelineLayout)
		=> Functions.CreatePipelineLayout(Handle, createInfo, allocator, out pipelineLayout);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void DestroyPipelineLayout(Vk.PipelineLayout pipelineLayout, Vk.AllocationCallbacks* pAllocator)
		=> Functions.vkDestroyPipelineLayout(Handle, pipelineLayout, pAllocator);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void DestroyPipelineLayout(Vk.PipelineLayout pipelineLayout, in Vk.AllocationCallbacks allocator)
		=> Functions.DestroyPipelineLayout(Handle, pipelineLayout, allocator);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result CreateSampler(Vk.SamplerCreateInfo* pCreateInfo, Vk.AllocationCallbacks* pAllocator, Vk.Sampler* pSampler)
		=> Functions.vkCreateSampler(Handle, pCreateInfo, pAllocator, pSampler);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result CreateSampler(in Vk.SamplerCreateInfo createInfo, in Vk.AllocationCallbacks allocator, out Vk.Sampler sampler)
		=> Functions.CreateSampler(Handle, createInfo, allocator, out sampler);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void DestroySampler(Vk.Sampler sampler, Vk.AllocationCallbacks* pAllocator)
		=> Functions.vkDestroySampler(Handle, sampler, pAllocator);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void DestroySampler(Vk.Sampler sampler, in Vk.AllocationCallbacks allocator)
		=> Functions.DestroySampler(Handle, sampler, allocator);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result CreateDescriptorSetLayout(Vk.DescriptorSetLayoutCreateInfo* pCreateInfo, Vk.AllocationCallbacks* pAllocator, Vk.DescriptorSetLayout* pSetLayout)
		=> Functions.vkCreateDescriptorSetLayout(Handle, pCreateInfo, pAllocator, pSetLayout);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result CreateDescriptorSetLayout(in Vk.DescriptorSetLayoutCreateInfo createInfo, in Vk.AllocationCallbacks allocator, out Vk.DescriptorSetLayout setLayout)
		=> Functions.CreateDescriptorSetLayout(Handle, createInfo, allocator, out setLayout);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void DestroyDescriptorSetLayout(Vk.DescriptorSetLayout descriptorSetLayout, Vk.AllocationCallbacks* pAllocator)
		=> Functions.vkDestroyDescriptorSetLayout(Handle, descriptorSetLayout, pAllocator);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void DestroyDescriptorSetLayout(Vk.DescriptorSetLayout descriptorSetLayout, in Vk.AllocationCallbacks allocator)
		=> Functions.DestroyDescriptorSetLayout(Handle, descriptorSetLayout, allocator);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result CreateDescriptorPool(Vk.DescriptorPoolCreateInfo* pCreateInfo, Vk.AllocationCallbacks* pAllocator, Vk.DescriptorPool* pDescriptorPool)
		=> Functions.vkCreateDescriptorPool(Handle, pCreateInfo, pAllocator, pDescriptorPool);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result CreateDescriptorPool(in Vk.DescriptorPoolCreateInfo createInfo, in Vk.AllocationCallbacks allocator, out Vk.DescriptorPool descriptorPool)
		=> Functions.CreateDescriptorPool(Handle, createInfo, allocator, out descriptorPool);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void DestroyDescriptorPool(Vk.DescriptorPool descriptorPool, Vk.AllocationCallbacks* pAllocator)
		=> Functions.vkDestroyDescriptorPool(Handle, descriptorPool, pAllocator);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void DestroyDescriptorPool(Vk.DescriptorPool descriptorPool, in Vk.AllocationCallbacks allocator)
		=> Functions.DestroyDescriptorPool(Handle, descriptorPool, allocator);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result ResetDescriptorPool(Vk.DescriptorPool descriptorPool, Vk.DescriptorPoolResetFlags flags)
		=> Functions.vkResetDescriptorPool(Handle, descriptorPool, flags);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result AllocateDescriptorSets(Vk.DescriptorSetAllocateInfo* pAllocateInfo, Vk.DescriptorSet* pDescriptorSets)
		=> Functions.vkAllocateDescriptorSets(Handle, pAllocateInfo, pDescriptorSets);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result AllocateDescriptorSets(in Vk.DescriptorSetAllocateInfo allocateInfo, in Span<Vk.DescriptorSet> descriptorSets)
		=> Functions.AllocateDescriptorSets(Handle, allocateInfo, descriptorSets);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result FreeDescriptorSets(Vk.DescriptorPool descriptorPool, uint descriptorSetCount, Vk.DescriptorSet* pDescriptorSets)
		=> Functions.vkFreeDescriptorSets(Handle, descriptorPool, descriptorSetCount, pDescriptorSets);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result FreeDescriptorSets(Vk.DescriptorPool descriptorPool, in ReadOnlySpan<Vk.DescriptorSet> descriptorSets)
		=> Functions.FreeDescriptorSets(Handle, descriptorPool, descriptorSets);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void UpdateDescriptorSets(uint descriptorWriteCount, Vk.WriteDescriptorSet* pDescriptorWrites, uint descriptorCopyCount, Vk.CopyDescriptorSet* pDescriptorCopies)
		=> Functions.vkUpdateDescriptorSets(Handle, descriptorWriteCount, pDescriptorWrites, descriptorCopyCount, pDescriptorCopies);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void UpdateDescriptorSets(in ReadOnlySpan<Vk.WriteDescriptorSet> descriptorWrites, in ReadOnlySpan<Vk.CopyDescriptorSet> descriptorCopies)
		=> Functions.UpdateDescriptorSets(Handle, descriptorWrites, descriptorCopies);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result CreateFramebuffer(Vk.FramebufferCreateInfo* pCreateInfo, Vk.AllocationCallbacks* pAllocator, Vk.Framebuffer* pFramebuffer)
		=> Functions.vkCreateFramebuffer(Handle, pCreateInfo, pAllocator, pFramebuffer);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result CreateFramebuffer(in Vk.FramebufferCreateInfo createInfo, in Vk.AllocationCallbacks allocator, out Vk.Framebuffer framebuffer)
		=> Functions.CreateFramebuffer(Handle, createInfo, allocator, out framebuffer);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void DestroyFramebuffer(Vk.Framebuffer framebuffer, Vk.AllocationCallbacks* pAllocator)
		=> Functions.vkDestroyFramebuffer(Handle, framebuffer, pAllocator);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void DestroyFramebuffer(Vk.Framebuffer framebuffer, in Vk.AllocationCallbacks allocator)
		=> Functions.DestroyFramebuffer(Handle, framebuffer, allocator);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result CreateRenderPass(Vk.RenderPassCreateInfo* pCreateInfo, Vk.AllocationCallbacks* pAllocator, Vk.RenderPass* pRenderPass)
		=> Functions.vkCreateRenderPass(Handle, pCreateInfo, pAllocator, pRenderPass);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result CreateRenderPass(in Vk.RenderPassCreateInfo createInfo, in Vk.AllocationCallbacks allocator, out Vk.RenderPass renderPass)
		=> Functions.CreateRenderPass(Handle, createInfo, allocator, out renderPass);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void DestroyRenderPass(Vk.RenderPass renderPass, Vk.AllocationCallbacks* pAllocator)
		=> Functions.vkDestroyRenderPass(Handle, renderPass, pAllocator);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void DestroyRenderPass(Vk.RenderPass renderPass, in Vk.AllocationCallbacks allocator)
		=> Functions.DestroyRenderPass(Handle, renderPass, allocator);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void GetRenderAreaGranularity(Vk.RenderPass renderPass, Vk.Extent2D* pGranularity)
		=> Functions.vkGetRenderAreaGranularity(Handle, renderPass, pGranularity);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void GetRenderAreaGranularity(Vk.RenderPass renderPass, out Vk.Extent2D granularity)
		=> Functions.GetRenderAreaGranularity(Handle, renderPass, out granularity);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result CreateCommandPool(Vk.CommandPoolCreateInfo* pCreateInfo, Vk.AllocationCallbacks* pAllocator, Vk.CommandPool* pCommandPool)
		=> Functions.vkCreateCommandPool(Handle, pCreateInfo, pAllocator, pCommandPool);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result CreateCommandPool(in Vk.CommandPoolCreateInfo createInfo, in Vk.AllocationCallbacks allocator, out Vk.CommandPool commandPool)
		=> Functions.CreateCommandPool(Handle, createInfo, allocator, out commandPool);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void DestroyCommandPool(Vk.CommandPool commandPool, Vk.AllocationCallbacks* pAllocator)
		=> Functions.vkDestroyCommandPool(Handle, commandPool, pAllocator);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void DestroyCommandPool(Vk.CommandPool commandPool, in Vk.AllocationCallbacks allocator)
		=> Functions.DestroyCommandPool(Handle, commandPool, allocator);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result ResetCommandPool(Vk.CommandPool commandPool, Vk.CommandPoolResetFlags flags)
		=> Functions.vkResetCommandPool(Handle, commandPool, flags);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result AllocateCommandBuffers(Vk.CommandBufferAllocateInfo* pAllocateInfo, Vk.CommandBuffer* pCommandBuffers)
		=> Functions.vkAllocateCommandBuffers(Handle, pAllocateInfo, pCommandBuffers);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result AllocateCommandBuffers(in Vk.CommandBufferAllocateInfo allocateInfo, in Span<Vk.CommandBuffer> commandBuffers)
		=> Functions.AllocateCommandBuffers(Handle, allocateInfo, commandBuffers);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void FreeCommandBuffers(Vk.CommandPool commandPool, uint commandBufferCount, Vk.CommandBuffer* pCommandBuffers)
		=> Functions.vkFreeCommandBuffers(Handle, commandPool, commandBufferCount, pCommandBuffers);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void FreeCommandBuffers(Vk.CommandPool commandPool, in ReadOnlySpan<Vk.CommandBuffer> commandBuffers)
		=> Functions.FreeCommandBuffers(Handle, commandPool, commandBuffers);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result CreateSharedSwapchainsKHR(uint swapchainCount, Vk.KHR.SwapchainCreateInfo* pCreateInfos, Vk.AllocationCallbacks* pAllocator, Vk.KHR.Swapchain* pSwapchains)
		=> Functions.vkCreateSharedSwapchainsKHR(Handle, swapchainCount, pCreateInfos, pAllocator, pSwapchains);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result CreateSharedSwapchainsKHR(in ReadOnlySpan<Vk.KHR.SwapchainCreateInfo> createInfos, in Vk.AllocationCallbacks allocator, in Span<Vk.KHR.Swapchain> swapchains)
		=> Functions.CreateSharedSwapchainsKHR(Handle, createInfos, allocator, swapchains);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result CreateSwapchainKHR(Vk.KHR.SwapchainCreateInfo* pCreateInfo, Vk.AllocationCallbacks* pAllocator, Vk.KHR.Swapchain* pSwapchain)
		=> Functions.vkCreateSwapchainKHR(Handle, pCreateInfo, pAllocator, pSwapchain);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result CreateSwapchainKHR(in Vk.KHR.SwapchainCreateInfo createInfo, in Vk.AllocationCallbacks allocator, out Vk.KHR.Swapchain swapchain)
		=> Functions.CreateSwapchainKHR(Handle, createInfo, allocator, out swapchain);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void DestroySwapchainKHR(Vk.KHR.Swapchain swapchain, Vk.AllocationCallbacks* pAllocator)
		=> Functions.vkDestroySwapchainKHR(Handle, swapchain, pAllocator);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void DestroySwapchainKHR(Vk.KHR.Swapchain swapchain, in Vk.AllocationCallbacks allocator)
		=> Functions.DestroySwapchainKHR(Handle, swapchain, allocator);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result GetSwapchainImagesKHR(Vk.KHR.Swapchain swapchain, uint* pSwapchainImageCount, Vk.Image* pSwapchainImages)
		=> Functions.vkGetSwapchainImagesKHR(Handle, swapchain, pSwapchainImageCount, pSwapchainImages);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result GetSwapchainImagesKHR(Vk.KHR.Swapchain swapchain, out uint swapchainImageCount, in Span<Vk.Image> swapchainImages)
		=> Functions.GetSwapchainImagesKHR(Handle, swapchain, out swapchainImageCount, swapchainImages);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result AcquireNextImageKHR(Vk.KHR.Swapchain swapchain, ulong timeout, Vk.Semaphore semaphore, Vk.Fence fence, uint* pImageIndex)
		=> Functions.vkAcquireNextImageKHR(Handle, swapchain, timeout, semaphore, fence, pImageIndex);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result AcquireNextImageKHR(Vk.KHR.Swapchain swapchain, ulong timeout, Vk.Semaphore semaphore, Vk.Fence fence, out uint imageIndex)
		=> Functions.AcquireNextImageKHR(Handle, swapchain, timeout, semaphore, fence, out imageIndex);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result DebugMarkerSetObjectNameEXT(Vk.EXT.DebugMarkerObjectNameInfo* pNameInfo)
		=> Functions.vkDebugMarkerSetObjectNameEXT(Handle, pNameInfo);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result DebugMarkerSetObjectNameEXT(in Vk.EXT.DebugMarkerObjectNameInfo nameInfo)
		=> Functions.DebugMarkerSetObjectNameEXT(Handle, nameInfo);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result DebugMarkerSetObjectTagEXT(Vk.EXT.DebugMarkerObjectTagInfo* pTagInfo)
		=> Functions.vkDebugMarkerSetObjectTagEXT(Handle, pTagInfo);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result DebugMarkerSetObjectTagEXT(in Vk.EXT.DebugMarkerObjectTagInfo tagInfo)
		=> Functions.DebugMarkerSetObjectTagEXT(Handle, tagInfo);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result GetMemoryWin32HandleNV(Vk.DeviceMemory memory, Vk.NV.ExternalMemoryHandleTypeFlags handleType, void** pHandle)
		=> Functions.vkGetMemoryWin32HandleNV(Handle, memory, handleType, pHandle);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void GetGeneratedCommandsMemoryRequirementsNV(Vk.NV.GeneratedCommandsMemoryRequirementsInfo* pInfo, Vk.MemoryRequirements2* pMemoryRequirements)
		=> Functions.vkGetGeneratedCommandsMemoryRequirementsNV(Handle, pInfo, pMemoryRequirements);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void GetGeneratedCommandsMemoryRequirementsNV(in Vk.NV.GeneratedCommandsMemoryRequirementsInfo info, out Vk.MemoryRequirements2 memoryRequirements)
		=> Functions.GetGeneratedCommandsMemoryRequirementsNV(Handle, info, out memoryRequirements);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result CreateIndirectCommandsLayoutNV(Vk.NV.IndirectCommandsLayoutCreateInfo* pCreateInfo, Vk.AllocationCallbacks* pAllocator, Vk.NV.IndirectCommandsLayout* pIndirectCommandsLayout)
		=> Functions.vkCreateIndirectCommandsLayoutNV(Handle, pCreateInfo, pAllocator, pIndirectCommandsLayout);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result CreateIndirectCommandsLayoutNV(in Vk.NV.IndirectCommandsLayoutCreateInfo createInfo, in Vk.AllocationCallbacks allocator, out Vk.NV.IndirectCommandsLayout indirectCommandsLayout)
		=> Functions.CreateIndirectCommandsLayoutNV(Handle, createInfo, allocator, out indirectCommandsLayout);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void DestroyIndirectCommandsLayoutNV(Vk.NV.IndirectCommandsLayout indirectCommandsLayout, Vk.AllocationCallbacks* pAllocator)
		=> Functions.vkDestroyIndirectCommandsLayoutNV(Handle, indirectCommandsLayout, pAllocator);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void DestroyIndirectCommandsLayoutNV(Vk.NV.IndirectCommandsLayout indirectCommandsLayout, in Vk.AllocationCallbacks allocator)
		=> Functions.DestroyIndirectCommandsLayoutNV(Handle, indirectCommandsLayout, allocator);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void TrimCommandPool(Vk.CommandPool commandPool, Vk.CommandPoolTrimFlags flags)
		=> Functions.vkTrimCommandPool(Handle, commandPool, flags);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void TrimCommandPoolKHR(Vk.CommandPool commandPool, Vk.CommandPoolTrimFlags flags)
		=> Functions.vkTrimCommandPoolKHR(Handle, commandPool, flags);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result GetMemoryWin32HandleKHR(Vk.KHR.MemoryGetWin32HandleInfo* pGetWin32HandleInfo, void** pHandle)
		=> Functions.vkGetMemoryWin32HandleKHR(Handle, pGetWin32HandleInfo, pHandle);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result GetMemoryWin32HandleKHR(in Vk.KHR.MemoryGetWin32HandleInfo getWin32HandleInfo, void** pHandle)
		=> Functions.GetMemoryWin32HandleKHR(Handle, getWin32HandleInfo, pHandle);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result GetMemoryWin32HandlePropertiesKHR(Vk.ExternalMemoryHandleTypeFlags handleType, void* handle, Vk.KHR.MemoryWin32HandleProperties* pMemoryWin32HandleProperties)
		=> Functions.vkGetMemoryWin32HandlePropertiesKHR(Handle, handleType, handle, pMemoryWin32HandleProperties);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result GetMemoryWin32HandlePropertiesKHR(Vk.ExternalMemoryHandleTypeFlags handleType, void* handle, out Vk.KHR.MemoryWin32HandleProperties memoryWin32HandleProperties)
		=> Functions.GetMemoryWin32HandlePropertiesKHR(Handle, handleType, handle, out memoryWin32HandleProperties);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result GetMemoryFdKHR(Vk.KHR.MemoryGetFdInfo* pGetFdInfo, int* pFd)
		=> Functions.vkGetMemoryFdKHR(Handle, pGetFdInfo, pFd);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result GetMemoryFdKHR(in Vk.KHR.MemoryGetFdInfo getFdInfo, out int fd)
		=> Functions.GetMemoryFdKHR(Handle, getFdInfo, out fd);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result GetMemoryFdPropertiesKHR(Vk.ExternalMemoryHandleTypeFlags handleType, int fd, Vk.KHR.MemoryFdProperties* pMemoryFdProperties)
		=> Functions.vkGetMemoryFdPropertiesKHR(Handle, handleType, fd, pMemoryFdProperties);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result GetMemoryFdPropertiesKHR(Vk.ExternalMemoryHandleTypeFlags handleType, int fd, out Vk.KHR.MemoryFdProperties memoryFdProperties)
		=> Functions.GetMemoryFdPropertiesKHR(Handle, handleType, fd, out memoryFdProperties);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result GetSemaphoreWin32HandleKHR(Vk.KHR.SemaphoreGetWin32HandleInfo* pGetWin32HandleInfo, void** pHandle)
		=> Functions.vkGetSemaphoreWin32HandleKHR(Handle, pGetWin32HandleInfo, pHandle);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result GetSemaphoreWin32HandleKHR(in Vk.KHR.SemaphoreGetWin32HandleInfo getWin32HandleInfo, void** pHandle)
		=> Functions.GetSemaphoreWin32HandleKHR(Handle, getWin32HandleInfo, pHandle);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result ImportSemaphoreWin32HandleKHR(Vk.KHR.ImportSemaphoreWin32HandleInfo* pImportSemaphoreWin32HandleInfo)
		=> Functions.vkImportSemaphoreWin32HandleKHR(Handle, pImportSemaphoreWin32HandleInfo);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result ImportSemaphoreWin32HandleKHR(in Vk.KHR.ImportSemaphoreWin32HandleInfo importSemaphoreWin32HandleInfo)
		=> Functions.ImportSemaphoreWin32HandleKHR(Handle, importSemaphoreWin32HandleInfo);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result GetSemaphoreFdKHR(Vk.KHR.SemaphoreGetFdInfo* pGetFdInfo, int* pFd)
		=> Functions.vkGetSemaphoreFdKHR(Handle, pGetFdInfo, pFd);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result GetSemaphoreFdKHR(in Vk.KHR.SemaphoreGetFdInfo getFdInfo, out int fd)
		=> Functions.GetSemaphoreFdKHR(Handle, getFdInfo, out fd);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result ImportSemaphoreFdKHR(Vk.KHR.ImportSemaphoreFdInfo* pImportSemaphoreFdInfo)
		=> Functions.vkImportSemaphoreFdKHR(Handle, pImportSemaphoreFdInfo);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result ImportSemaphoreFdKHR(in Vk.KHR.ImportSemaphoreFdInfo importSemaphoreFdInfo)
		=> Functions.ImportSemaphoreFdKHR(Handle, importSemaphoreFdInfo);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result GetFenceWin32HandleKHR(Vk.KHR.FenceGetWin32HandleInfo* pGetWin32HandleInfo, void** pHandle)
		=> Functions.vkGetFenceWin32HandleKHR(Handle, pGetWin32HandleInfo, pHandle);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result GetFenceWin32HandleKHR(in Vk.KHR.FenceGetWin32HandleInfo getWin32HandleInfo, void** pHandle)
		=> Functions.GetFenceWin32HandleKHR(Handle, getWin32HandleInfo, pHandle);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result ImportFenceWin32HandleKHR(Vk.KHR.ImportFenceWin32HandleInfo* pImportFenceWin32HandleInfo)
		=> Functions.vkImportFenceWin32HandleKHR(Handle, pImportFenceWin32HandleInfo);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result ImportFenceWin32HandleKHR(in Vk.KHR.ImportFenceWin32HandleInfo importFenceWin32HandleInfo)
		=> Functions.ImportFenceWin32HandleKHR(Handle, importFenceWin32HandleInfo);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result GetFenceFdKHR(Vk.KHR.FenceGetFdInfo* pGetFdInfo, int* pFd)
		=> Functions.vkGetFenceFdKHR(Handle, pGetFdInfo, pFd);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result GetFenceFdKHR(in Vk.KHR.FenceGetFdInfo getFdInfo, out int fd)
		=> Functions.GetFenceFdKHR(Handle, getFdInfo, out fd);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result ImportFenceFdKHR(Vk.KHR.ImportFenceFdInfo* pImportFenceFdInfo)
		=> Functions.vkImportFenceFdKHR(Handle, pImportFenceFdInfo);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result ImportFenceFdKHR(in Vk.KHR.ImportFenceFdInfo importFenceFdInfo)
		=> Functions.ImportFenceFdKHR(Handle, importFenceFdInfo);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result DisplayPowerControlEXT(Vk.KHR.Display display, Vk.EXT.DisplayPowerInfo* pDisplayPowerInfo)
		=> Functions.vkDisplayPowerControlEXT(Handle, display, pDisplayPowerInfo);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result DisplayPowerControlEXT(Vk.KHR.Display display, in Vk.EXT.DisplayPowerInfo displayPowerInfo)
		=> Functions.DisplayPowerControlEXT(Handle, display, displayPowerInfo);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result RegisterDeviceEventEXT(Vk.EXT.DeviceEventInfo* pDeviceEventInfo, Vk.AllocationCallbacks* pAllocator, Vk.Fence* pFence)
		=> Functions.vkRegisterDeviceEventEXT(Handle, pDeviceEventInfo, pAllocator, pFence);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result RegisterDeviceEventEXT(in Vk.EXT.DeviceEventInfo deviceEventInfo, in Vk.AllocationCallbacks allocator, out Vk.Fence fence)
		=> Functions.RegisterDeviceEventEXT(Handle, deviceEventInfo, allocator, out fence);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result RegisterDisplayEventEXT(Vk.KHR.Display display, Vk.EXT.DisplayEventInfo* pDisplayEventInfo, Vk.AllocationCallbacks* pAllocator, Vk.Fence* pFence)
		=> Functions.vkRegisterDisplayEventEXT(Handle, display, pDisplayEventInfo, pAllocator, pFence);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result RegisterDisplayEventEXT(Vk.KHR.Display display, in Vk.EXT.DisplayEventInfo displayEventInfo, in Vk.AllocationCallbacks allocator, out Vk.Fence fence)
		=> Functions.RegisterDisplayEventEXT(Handle, display, displayEventInfo, allocator, out fence);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result GetSwapchainCounterEXT(Vk.KHR.Swapchain swapchain, Vk.EXT.SurfaceCounterFlags counter, ulong* pCounterValue)
		=> Functions.vkGetSwapchainCounterEXT(Handle, swapchain, counter, pCounterValue);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result GetSwapchainCounterEXT(Vk.KHR.Swapchain swapchain, Vk.EXT.SurfaceCounterFlags counter, out ulong counterValue)
		=> Functions.GetSwapchainCounterEXT(Handle, swapchain, counter, out counterValue);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void GetDeviceGroupPeerMemoryFeatures(uint heapIndex, uint localDeviceIndex, uint remoteDeviceIndex, Vk.PeerMemoryFeatureFlags* pPeerMemoryFeatures)
		=> Functions.vkGetDeviceGroupPeerMemoryFeatures(Handle, heapIndex, localDeviceIndex, remoteDeviceIndex, pPeerMemoryFeatures);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void GetDeviceGroupPeerMemoryFeatures(uint heapIndex, uint localDeviceIndex, uint remoteDeviceIndex, out Vk.PeerMemoryFeatureFlags peerMemoryFeatures)
		=> Functions.GetDeviceGroupPeerMemoryFeatures(Handle, heapIndex, localDeviceIndex, remoteDeviceIndex, out peerMemoryFeatures);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void GetDeviceGroupPeerMemoryFeaturesKHR(uint heapIndex, uint localDeviceIndex, uint remoteDeviceIndex, Vk.PeerMemoryFeatureFlags* pPeerMemoryFeatures)
		=> Functions.vkGetDeviceGroupPeerMemoryFeaturesKHR(Handle, heapIndex, localDeviceIndex, remoteDeviceIndex, pPeerMemoryFeatures);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void GetDeviceGroupPeerMemoryFeaturesKHR(uint heapIndex, uint localDeviceIndex, uint remoteDeviceIndex, out Vk.PeerMemoryFeatureFlags peerMemoryFeatures)
		=> Functions.GetDeviceGroupPeerMemoryFeaturesKHR(Handle, heapIndex, localDeviceIndex, remoteDeviceIndex, out peerMemoryFeatures);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result BindBufferMemory2(uint bindInfoCount, Vk.BindBufferMemoryInfo* pBindInfos)
		=> Functions.vkBindBufferMemory2(Handle, bindInfoCount, pBindInfos);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result BindBufferMemory2(in ReadOnlySpan<Vk.BindBufferMemoryInfo> bindInfos)
		=> Functions.BindBufferMemory2(Handle, bindInfos);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result BindBufferMemory2KHR(uint bindInfoCount, Vk.BindBufferMemoryInfo* pBindInfos)
		=> Functions.vkBindBufferMemory2KHR(Handle, bindInfoCount, pBindInfos);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result BindBufferMemory2KHR(in ReadOnlySpan<Vk.BindBufferMemoryInfo> bindInfos)
		=> Functions.BindBufferMemory2KHR(Handle, bindInfos);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result BindImageMemory2(uint bindInfoCount, Vk.BindImageMemoryInfo* pBindInfos)
		=> Functions.vkBindImageMemory2(Handle, bindInfoCount, pBindInfos);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result BindImageMemory2(in ReadOnlySpan<Vk.BindImageMemoryInfo> bindInfos)
		=> Functions.BindImageMemory2(Handle, bindInfos);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result BindImageMemory2KHR(uint bindInfoCount, Vk.BindImageMemoryInfo* pBindInfos)
		=> Functions.vkBindImageMemory2KHR(Handle, bindInfoCount, pBindInfos);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result BindImageMemory2KHR(in ReadOnlySpan<Vk.BindImageMemoryInfo> bindInfos)
		=> Functions.BindImageMemory2KHR(Handle, bindInfos);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result GetDeviceGroupPresentCapabilitiesKHR(Vk.KHR.DeviceGroupPresentCapabilities* pDeviceGroupPresentCapabilities)
		=> Functions.vkGetDeviceGroupPresentCapabilitiesKHR(Handle, pDeviceGroupPresentCapabilities);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result GetDeviceGroupPresentCapabilitiesKHR(out Vk.KHR.DeviceGroupPresentCapabilities deviceGroupPresentCapabilities)
		=> Functions.GetDeviceGroupPresentCapabilitiesKHR(Handle, out deviceGroupPresentCapabilities);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result GetDeviceGroupSurfacePresentModesKHR(Vk.KHR.Surface surface, Vk.KHR.DeviceGroupPresentModeFlags* pModes)
		=> Functions.vkGetDeviceGroupSurfacePresentModesKHR(Handle, surface, pModes);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result GetDeviceGroupSurfacePresentModesKHR(Vk.KHR.Surface surface, out Vk.KHR.DeviceGroupPresentModeFlags modes)
		=> Functions.GetDeviceGroupSurfacePresentModesKHR(Handle, surface, out modes);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result AcquireNextImage2KHR(Vk.KHR.AcquireNextImageInfo* pAcquireInfo, uint* pImageIndex)
		=> Functions.vkAcquireNextImage2KHR(Handle, pAcquireInfo, pImageIndex);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result AcquireNextImage2KHR(in Vk.KHR.AcquireNextImageInfo acquireInfo, out uint imageIndex)
		=> Functions.AcquireNextImage2KHR(Handle, acquireInfo, out imageIndex);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result CreateDescriptorUpdateTemplate(Vk.DescriptorUpdateTemplateCreateInfo* pCreateInfo, Vk.AllocationCallbacks* pAllocator, Vk.DescriptorUpdateTemplate* pDescriptorUpdateTemplate)
		=> Functions.vkCreateDescriptorUpdateTemplate(Handle, pCreateInfo, pAllocator, pDescriptorUpdateTemplate);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result CreateDescriptorUpdateTemplate(in Vk.DescriptorUpdateTemplateCreateInfo createInfo, in Vk.AllocationCallbacks allocator, out Vk.DescriptorUpdateTemplate descriptorUpdateTemplate)
		=> Functions.CreateDescriptorUpdateTemplate(Handle, createInfo, allocator, out descriptorUpdateTemplate);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result CreateDescriptorUpdateTemplateKHR(Vk.DescriptorUpdateTemplateCreateInfo* pCreateInfo, Vk.AllocationCallbacks* pAllocator, Vk.DescriptorUpdateTemplate* pDescriptorUpdateTemplate)
		=> Functions.vkCreateDescriptorUpdateTemplateKHR(Handle, pCreateInfo, pAllocator, pDescriptorUpdateTemplate);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result CreateDescriptorUpdateTemplateKHR(in Vk.DescriptorUpdateTemplateCreateInfo createInfo, in Vk.AllocationCallbacks allocator, out Vk.DescriptorUpdateTemplate descriptorUpdateTemplate)
		=> Functions.CreateDescriptorUpdateTemplateKHR(Handle, createInfo, allocator, out descriptorUpdateTemplate);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void DestroyDescriptorUpdateTemplate(Vk.DescriptorUpdateTemplate descriptorUpdateTemplate, Vk.AllocationCallbacks* pAllocator)
		=> Functions.vkDestroyDescriptorUpdateTemplate(Handle, descriptorUpdateTemplate, pAllocator);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void DestroyDescriptorUpdateTemplate(Vk.DescriptorUpdateTemplate descriptorUpdateTemplate, in Vk.AllocationCallbacks allocator)
		=> Functions.DestroyDescriptorUpdateTemplate(Handle, descriptorUpdateTemplate, allocator);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void DestroyDescriptorUpdateTemplateKHR(Vk.DescriptorUpdateTemplate descriptorUpdateTemplate, Vk.AllocationCallbacks* pAllocator)
		=> Functions.vkDestroyDescriptorUpdateTemplateKHR(Handle, descriptorUpdateTemplate, pAllocator);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void DestroyDescriptorUpdateTemplateKHR(Vk.DescriptorUpdateTemplate descriptorUpdateTemplate, in Vk.AllocationCallbacks allocator)
		=> Functions.DestroyDescriptorUpdateTemplateKHR(Handle, descriptorUpdateTemplate, allocator);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void UpdateDescriptorSetWithTemplate(Vk.DescriptorSet descriptorSet, Vk.DescriptorUpdateTemplate descriptorUpdateTemplate, void* pData)
		=> Functions.vkUpdateDescriptorSetWithTemplate(Handle, descriptorSet, descriptorUpdateTemplate, pData);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void UpdateDescriptorSetWithTemplateKHR(Vk.DescriptorSet descriptorSet, Vk.DescriptorUpdateTemplate descriptorUpdateTemplate, void* pData)
		=> Functions.vkUpdateDescriptorSetWithTemplateKHR(Handle, descriptorSet, descriptorUpdateTemplate, pData);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void SetHdrMetadataEXT(uint swapchainCount, Vk.KHR.Swapchain* pSwapchains, Vk.EXT.HdrMetadata* pMetadata)
		=> Functions.vkSetHdrMetadataEXT(Handle, swapchainCount, pSwapchains, pMetadata);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void SetHdrMetadataEXT(in ReadOnlySpan<Vk.KHR.Swapchain> swapchains, in ReadOnlySpan<Vk.EXT.HdrMetadata> metadata)
		=> Functions.SetHdrMetadataEXT(Handle, swapchains, metadata);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result GetSwapchainStatusKHR(Vk.KHR.Swapchain swapchain)
		=> Functions.vkGetSwapchainStatusKHR(Handle, swapchain);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result GetRefreshCycleDurationGOOGLE(Vk.KHR.Swapchain swapchain, Vk.GOOGLE.RefreshCycleDuration* pDisplayTimingProperties)
		=> Functions.vkGetRefreshCycleDurationGOOGLE(Handle, swapchain, pDisplayTimingProperties);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result GetRefreshCycleDurationGOOGLE(Vk.KHR.Swapchain swapchain, out Vk.GOOGLE.RefreshCycleDuration displayTimingProperties)
		=> Functions.GetRefreshCycleDurationGOOGLE(Handle, swapchain, out displayTimingProperties);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result GetPastPresentationTimingGOOGLE(Vk.KHR.Swapchain swapchain, uint* pPresentationTimingCount, Vk.GOOGLE.PastPresentationTiming* pPresentationTimings)
		=> Functions.vkGetPastPresentationTimingGOOGLE(Handle, swapchain, pPresentationTimingCount, pPresentationTimings);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result GetPastPresentationTimingGOOGLE(Vk.KHR.Swapchain swapchain, out uint presentationTimingCount, in Span<Vk.GOOGLE.PastPresentationTiming> presentationTimings)
		=> Functions.GetPastPresentationTimingGOOGLE(Handle, swapchain, out presentationTimingCount, presentationTimings);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void GetBufferMemoryRequirements2(Vk.BufferMemoryRequirementsInfo2* pInfo, Vk.MemoryRequirements2* pMemoryRequirements)
		=> Functions.vkGetBufferMemoryRequirements2(Handle, pInfo, pMemoryRequirements);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void GetBufferMemoryRequirements2(in Vk.BufferMemoryRequirementsInfo2 info, out Vk.MemoryRequirements2 memoryRequirements)
		=> Functions.GetBufferMemoryRequirements2(Handle, info, out memoryRequirements);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void GetBufferMemoryRequirements2KHR(Vk.BufferMemoryRequirementsInfo2* pInfo, Vk.MemoryRequirements2* pMemoryRequirements)
		=> Functions.vkGetBufferMemoryRequirements2KHR(Handle, pInfo, pMemoryRequirements);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void GetBufferMemoryRequirements2KHR(in Vk.BufferMemoryRequirementsInfo2 info, out Vk.MemoryRequirements2 memoryRequirements)
		=> Functions.GetBufferMemoryRequirements2KHR(Handle, info, out memoryRequirements);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void GetImageMemoryRequirements2(Vk.ImageMemoryRequirementsInfo2* pInfo, Vk.MemoryRequirements2* pMemoryRequirements)
		=> Functions.vkGetImageMemoryRequirements2(Handle, pInfo, pMemoryRequirements);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void GetImageMemoryRequirements2(in Vk.ImageMemoryRequirementsInfo2 info, out Vk.MemoryRequirements2 memoryRequirements)
		=> Functions.GetImageMemoryRequirements2(Handle, info, out memoryRequirements);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void GetImageMemoryRequirements2KHR(Vk.ImageMemoryRequirementsInfo2* pInfo, Vk.MemoryRequirements2* pMemoryRequirements)
		=> Functions.vkGetImageMemoryRequirements2KHR(Handle, pInfo, pMemoryRequirements);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void GetImageMemoryRequirements2KHR(in Vk.ImageMemoryRequirementsInfo2 info, out Vk.MemoryRequirements2 memoryRequirements)
		=> Functions.GetImageMemoryRequirements2KHR(Handle, info, out memoryRequirements);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void GetImageSparseMemoryRequirements2(Vk.ImageSparseMemoryRequirementsInfo2* pInfo, uint* pSparseMemoryRequirementCount, Vk.SparseImageMemoryRequirements2* pSparseMemoryRequirements)
		=> Functions.vkGetImageSparseMemoryRequirements2(Handle, pInfo, pSparseMemoryRequirementCount, pSparseMemoryRequirements);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void GetImageSparseMemoryRequirements2(in Vk.ImageSparseMemoryRequirementsInfo2 info, out uint sparseMemoryRequirementCount, in Span<Vk.SparseImageMemoryRequirements2> sparseMemoryRequirements)
		=> Functions.GetImageSparseMemoryRequirements2(Handle, info, out sparseMemoryRequirementCount, sparseMemoryRequirements);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void GetImageSparseMemoryRequirements2KHR(Vk.ImageSparseMemoryRequirementsInfo2* pInfo, uint* pSparseMemoryRequirementCount, Vk.SparseImageMemoryRequirements2* pSparseMemoryRequirements)
		=> Functions.vkGetImageSparseMemoryRequirements2KHR(Handle, pInfo, pSparseMemoryRequirementCount, pSparseMemoryRequirements);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void GetImageSparseMemoryRequirements2KHR(in Vk.ImageSparseMemoryRequirementsInfo2 info, out uint sparseMemoryRequirementCount, in Span<Vk.SparseImageMemoryRequirements2> sparseMemoryRequirements)
		=> Functions.GetImageSparseMemoryRequirements2KHR(Handle, info, out sparseMemoryRequirementCount, sparseMemoryRequirements);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result CreateSamplerYcbcrConversion(Vk.SamplerYcbcrConversionCreateInfo* pCreateInfo, Vk.AllocationCallbacks* pAllocator, Vk.SamplerYcbcrConversion* pYcbcrConversion)
		=> Functions.vkCreateSamplerYcbcrConversion(Handle, pCreateInfo, pAllocator, pYcbcrConversion);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result CreateSamplerYcbcrConversion(in Vk.SamplerYcbcrConversionCreateInfo createInfo, in Vk.AllocationCallbacks allocator, out Vk.SamplerYcbcrConversion ycbcrConversion)
		=> Functions.CreateSamplerYcbcrConversion(Handle, createInfo, allocator, out ycbcrConversion);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result CreateSamplerYcbcrConversionKHR(Vk.SamplerYcbcrConversionCreateInfo* pCreateInfo, Vk.AllocationCallbacks* pAllocator, Vk.SamplerYcbcrConversion* pYcbcrConversion)
		=> Functions.vkCreateSamplerYcbcrConversionKHR(Handle, pCreateInfo, pAllocator, pYcbcrConversion);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result CreateSamplerYcbcrConversionKHR(in Vk.SamplerYcbcrConversionCreateInfo createInfo, in Vk.AllocationCallbacks allocator, out Vk.SamplerYcbcrConversion ycbcrConversion)
		=> Functions.CreateSamplerYcbcrConversionKHR(Handle, createInfo, allocator, out ycbcrConversion);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void DestroySamplerYcbcrConversion(Vk.SamplerYcbcrConversion ycbcrConversion, Vk.AllocationCallbacks* pAllocator)
		=> Functions.vkDestroySamplerYcbcrConversion(Handle, ycbcrConversion, pAllocator);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void DestroySamplerYcbcrConversion(Vk.SamplerYcbcrConversion ycbcrConversion, in Vk.AllocationCallbacks allocator)
		=> Functions.DestroySamplerYcbcrConversion(Handle, ycbcrConversion, allocator);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void DestroySamplerYcbcrConversionKHR(Vk.SamplerYcbcrConversion ycbcrConversion, Vk.AllocationCallbacks* pAllocator)
		=> Functions.vkDestroySamplerYcbcrConversionKHR(Handle, ycbcrConversion, pAllocator);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void DestroySamplerYcbcrConversionKHR(Vk.SamplerYcbcrConversion ycbcrConversion, in Vk.AllocationCallbacks allocator)
		=> Functions.DestroySamplerYcbcrConversionKHR(Handle, ycbcrConversion, allocator);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void GetDeviceQueue2(Vk.DeviceQueueInfo2* pQueueInfo, Vk.Queue* pQueue)
		=> Functions.vkGetDeviceQueue2(Handle, pQueueInfo, pQueue);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void GetDeviceQueue2(in Vk.DeviceQueueInfo2 queueInfo, out Vk.Queue queue)
		=> Functions.GetDeviceQueue2(Handle, queueInfo, out queue);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result CreateValidationCacheEXT(Vk.EXT.ValidationCacheCreateInfo* pCreateInfo, Vk.AllocationCallbacks* pAllocator, Vk.EXT.ValidationCache* pValidationCache)
		=> Functions.vkCreateValidationCacheEXT(Handle, pCreateInfo, pAllocator, pValidationCache);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result CreateValidationCacheEXT(in Vk.EXT.ValidationCacheCreateInfo createInfo, in Vk.AllocationCallbacks allocator, out Vk.EXT.ValidationCache validationCache)
		=> Functions.CreateValidationCacheEXT(Handle, createInfo, allocator, out validationCache);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void DestroyValidationCacheEXT(Vk.EXT.ValidationCache validationCache, Vk.AllocationCallbacks* pAllocator)
		=> Functions.vkDestroyValidationCacheEXT(Handle, validationCache, pAllocator);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void DestroyValidationCacheEXT(Vk.EXT.ValidationCache validationCache, in Vk.AllocationCallbacks allocator)
		=> Functions.DestroyValidationCacheEXT(Handle, validationCache, allocator);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result GetValidationCacheDataEXT(Vk.EXT.ValidationCache validationCache, ulong* pDataSize, void* pData)
		=> Functions.vkGetValidationCacheDataEXT(Handle, validationCache, pDataSize, pData);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result GetValidationCacheDataEXT(Vk.EXT.ValidationCache validationCache, out ulong dataSize, void* pData)
		=> Functions.GetValidationCacheDataEXT(Handle, validationCache, out dataSize, pData);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result MergeValidationCachesEXT(Vk.EXT.ValidationCache dstCache, uint srcCacheCount, Vk.EXT.ValidationCache* pSrcCaches)
		=> Functions.vkMergeValidationCachesEXT(Handle, dstCache, srcCacheCount, pSrcCaches);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result MergeValidationCachesEXT(Vk.EXT.ValidationCache dstCache, in ReadOnlySpan<Vk.EXT.ValidationCache> srcCaches)
		=> Functions.MergeValidationCachesEXT(Handle, dstCache, srcCaches);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void GetDescriptorSetLayoutSupport(Vk.DescriptorSetLayoutCreateInfo* pCreateInfo, Vk.DescriptorSetLayoutSupport* pSupport)
		=> Functions.vkGetDescriptorSetLayoutSupport(Handle, pCreateInfo, pSupport);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void GetDescriptorSetLayoutSupport(in Vk.DescriptorSetLayoutCreateInfo createInfo, out Vk.DescriptorSetLayoutSupport support)
		=> Functions.GetDescriptorSetLayoutSupport(Handle, createInfo, out support);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void GetDescriptorSetLayoutSupportKHR(Vk.DescriptorSetLayoutCreateInfo* pCreateInfo, Vk.DescriptorSetLayoutSupport* pSupport)
		=> Functions.vkGetDescriptorSetLayoutSupportKHR(Handle, pCreateInfo, pSupport);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void GetDescriptorSetLayoutSupportKHR(in Vk.DescriptorSetLayoutCreateInfo createInfo, out Vk.DescriptorSetLayoutSupport support)
		=> Functions.GetDescriptorSetLayoutSupportKHR(Handle, createInfo, out support);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result GetSwapchainGrallocUsageANDROID(Vk.Format format, Vk.ImageUsageFlags imageUsage, int* grallocUsage)
		=> Functions.vkGetSwapchainGrallocUsageANDROID(Handle, format, imageUsage, grallocUsage);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result GetSwapchainGrallocUsageANDROID(Vk.Format format, Vk.ImageUsageFlags imageUsage, out int grallocUsage)
		=> Functions.GetSwapchainGrallocUsageANDROID(Handle, format, imageUsage, out grallocUsage);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result GetSwapchainGrallocUsage2ANDROID(Vk.Format format, Vk.ImageUsageFlags imageUsage, Vk.ANDROID.SwapchainImageUsageFlags swapchainImageUsage, ulong* grallocConsumerUsage, ulong* grallocProducerUsage)
		=> Functions.vkGetSwapchainGrallocUsage2ANDROID(Handle, format, imageUsage, swapchainImageUsage, grallocConsumerUsage, grallocProducerUsage);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result GetSwapchainGrallocUsage2ANDROID(Vk.Format format, Vk.ImageUsageFlags imageUsage, Vk.ANDROID.SwapchainImageUsageFlags swapchainImageUsage, out ulong grallocConsumerUsage, out ulong grallocProducerUsage)
		=> Functions.GetSwapchainGrallocUsage2ANDROID(Handle, format, imageUsage, swapchainImageUsage, out grallocConsumerUsage, out grallocProducerUsage);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result AcquireImageANDROID(Vk.Image image, int nativeFenceFd, Vk.Semaphore semaphore, Vk.Fence fence)
		=> Functions.vkAcquireImageANDROID(Handle, image, nativeFenceFd, semaphore, fence);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result GetShaderInfoAMD(Vk.Pipeline pipeline, Vk.ShaderStageFlags shaderStage, Vk.AMD.ShaderInfoType infoType, ulong* pInfoSize, void* pInfo)
		=> Functions.vkGetShaderInfoAMD(Handle, pipeline, shaderStage, infoType, pInfoSize, pInfo);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result GetShaderInfoAMD(Vk.Pipeline pipeline, Vk.ShaderStageFlags shaderStage, Vk.AMD.ShaderInfoType infoType, out ulong infoSize, void* pInfo)
		=> Functions.GetShaderInfoAMD(Handle, pipeline, shaderStage, infoType, out infoSize, pInfo);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void SetLocalDimmingAMD(Vk.KHR.Swapchain swapChain, Vk.Bool32 localDimmingEnable)
		=> Functions.vkSetLocalDimmingAMD(Handle, swapChain, localDimmingEnable);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result GetCalibratedTimestampsEXT(uint timestampCount, Vk.EXT.CalibratedTimestampInfo* pTimestampInfos, ulong* pTimestamps, ulong* pMaxDeviation)
		=> Functions.vkGetCalibratedTimestampsEXT(Handle, timestampCount, pTimestampInfos, pTimestamps, pMaxDeviation);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result GetCalibratedTimestampsEXT(in ReadOnlySpan<Vk.EXT.CalibratedTimestampInfo> timestampInfos, in Span<ulong> timestamps, out ulong maxDeviation)
		=> Functions.GetCalibratedTimestampsEXT(Handle, timestampInfos, timestamps, out maxDeviation);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result SetDebugUtilsObjectNameEXT(Vk.EXT.DebugUtilsObjectNameInfo* pNameInfo)
		=> Functions.vkSetDebugUtilsObjectNameEXT(Handle, pNameInfo);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result SetDebugUtilsObjectNameEXT(in Vk.EXT.DebugUtilsObjectNameInfo nameInfo)
		=> Functions.SetDebugUtilsObjectNameEXT(Handle, nameInfo);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result SetDebugUtilsObjectTagEXT(Vk.EXT.DebugUtilsObjectTagInfo* pTagInfo)
		=> Functions.vkSetDebugUtilsObjectTagEXT(Handle, pTagInfo);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result SetDebugUtilsObjectTagEXT(in Vk.EXT.DebugUtilsObjectTagInfo tagInfo)
		=> Functions.SetDebugUtilsObjectTagEXT(Handle, tagInfo);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result GetMemoryHostPointerPropertiesEXT(Vk.ExternalMemoryHandleTypeFlags handleType, void* pHostPointer, Vk.EXT.MemoryHostPointerProperties* pMemoryHostPointerProperties)
		=> Functions.vkGetMemoryHostPointerPropertiesEXT(Handle, handleType, pHostPointer, pMemoryHostPointerProperties);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result GetMemoryHostPointerPropertiesEXT(Vk.ExternalMemoryHandleTypeFlags handleType, void* pHostPointer, out Vk.EXT.MemoryHostPointerProperties memoryHostPointerProperties)
		=> Functions.GetMemoryHostPointerPropertiesEXT(Handle, handleType, pHostPointer, out memoryHostPointerProperties);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result CreateRenderPass2(Vk.RenderPassCreateInfo2* pCreateInfo, Vk.AllocationCallbacks* pAllocator, Vk.RenderPass* pRenderPass)
		=> Functions.vkCreateRenderPass2(Handle, pCreateInfo, pAllocator, pRenderPass);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result CreateRenderPass2(in Vk.RenderPassCreateInfo2 createInfo, in Vk.AllocationCallbacks allocator, out Vk.RenderPass renderPass)
		=> Functions.CreateRenderPass2(Handle, createInfo, allocator, out renderPass);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result CreateRenderPass2KHR(Vk.RenderPassCreateInfo2* pCreateInfo, Vk.AllocationCallbacks* pAllocator, Vk.RenderPass* pRenderPass)
		=> Functions.vkCreateRenderPass2KHR(Handle, pCreateInfo, pAllocator, pRenderPass);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result CreateRenderPass2KHR(in Vk.RenderPassCreateInfo2 createInfo, in Vk.AllocationCallbacks allocator, out Vk.RenderPass renderPass)
		=> Functions.CreateRenderPass2KHR(Handle, createInfo, allocator, out renderPass);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result GetSemaphoreCounterValue(Vk.Semaphore semaphore, ulong* pValue)
		=> Functions.vkGetSemaphoreCounterValue(Handle, semaphore, pValue);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result GetSemaphoreCounterValue(Vk.Semaphore semaphore, out ulong value)
		=> Functions.GetSemaphoreCounterValue(Handle, semaphore, out value);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result GetSemaphoreCounterValueKHR(Vk.Semaphore semaphore, ulong* pValue)
		=> Functions.vkGetSemaphoreCounterValueKHR(Handle, semaphore, pValue);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result GetSemaphoreCounterValueKHR(Vk.Semaphore semaphore, out ulong value)
		=> Functions.GetSemaphoreCounterValueKHR(Handle, semaphore, out value);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result WaitSemaphores(Vk.SemaphoreWaitInfo* pWaitInfo, ulong timeout)
		=> Functions.vkWaitSemaphores(Handle, pWaitInfo, timeout);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result WaitSemaphores(in Vk.SemaphoreWaitInfo waitInfo, ulong timeout)
		=> Functions.WaitSemaphores(Handle, waitInfo, timeout);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result WaitSemaphoresKHR(Vk.SemaphoreWaitInfo* pWaitInfo, ulong timeout)
		=> Functions.vkWaitSemaphoresKHR(Handle, pWaitInfo, timeout);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result WaitSemaphoresKHR(in Vk.SemaphoreWaitInfo waitInfo, ulong timeout)
		=> Functions.WaitSemaphoresKHR(Handle, waitInfo, timeout);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result SignalSemaphore(Vk.SemaphoreSignalInfo* pSignalInfo)
		=> Functions.vkSignalSemaphore(Handle, pSignalInfo);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result SignalSemaphore(in Vk.SemaphoreSignalInfo signalInfo)
		=> Functions.SignalSemaphore(Handle, signalInfo);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result SignalSemaphoreKHR(Vk.SemaphoreSignalInfo* pSignalInfo)
		=> Functions.vkSignalSemaphoreKHR(Handle, pSignalInfo);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result SignalSemaphoreKHR(in Vk.SemaphoreSignalInfo signalInfo)
		=> Functions.SignalSemaphoreKHR(Handle, signalInfo);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result GetAndroidHardwareBufferPropertiesANDROID(void* buffer, Vk.ANDROID.AndroidHardwareBufferProperties* pProperties)
		=> Functions.vkGetAndroidHardwareBufferPropertiesANDROID(Handle, buffer, pProperties);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result GetAndroidHardwareBufferPropertiesANDROID(void* buffer, out Vk.ANDROID.AndroidHardwareBufferProperties properties)
		=> Functions.GetAndroidHardwareBufferPropertiesANDROID(Handle, buffer, out properties);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result GetMemoryAndroidHardwareBufferANDROID(Vk.ANDROID.MemoryGetAndroidHardwareBufferInfo* pInfo, void** pBuffer)
		=> Functions.vkGetMemoryAndroidHardwareBufferANDROID(Handle, pInfo, pBuffer);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result GetMemoryAndroidHardwareBufferANDROID(in Vk.ANDROID.MemoryGetAndroidHardwareBufferInfo info, void** pBuffer)
		=> Functions.GetMemoryAndroidHardwareBufferANDROID(Handle, info, pBuffer);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result CompileDeferredNV(Vk.Pipeline pipeline, uint shader)
		=> Functions.vkCompileDeferredNV(Handle, pipeline, shader);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result CreateAccelerationStructureNV(Vk.NV.AccelerationStructureCreateInfo* pCreateInfo, Vk.AllocationCallbacks* pAllocator, Vk.NV.AccelerationStructure* pAccelerationStructure)
		=> Functions.vkCreateAccelerationStructureNV(Handle, pCreateInfo, pAllocator, pAccelerationStructure);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result CreateAccelerationStructureNV(in Vk.NV.AccelerationStructureCreateInfo createInfo, in Vk.AllocationCallbacks allocator, out Vk.NV.AccelerationStructure accelerationStructure)
		=> Functions.CreateAccelerationStructureNV(Handle, createInfo, allocator, out accelerationStructure);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void DestroyAccelerationStructureKHR(Vk.KHR.AccelerationStructure accelerationStructure, Vk.AllocationCallbacks* pAllocator)
		=> Functions.vkDestroyAccelerationStructureKHR(Handle, accelerationStructure, pAllocator);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void DestroyAccelerationStructureKHR(Vk.KHR.AccelerationStructure accelerationStructure, in Vk.AllocationCallbacks allocator)
		=> Functions.DestroyAccelerationStructureKHR(Handle, accelerationStructure, allocator);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void DestroyAccelerationStructureNV(Vk.KHR.AccelerationStructure accelerationStructure, Vk.AllocationCallbacks* pAllocator)
		=> Functions.vkDestroyAccelerationStructureNV(Handle, accelerationStructure, pAllocator);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void DestroyAccelerationStructureNV(Vk.KHR.AccelerationStructure accelerationStructure, in Vk.AllocationCallbacks allocator)
		=> Functions.DestroyAccelerationStructureNV(Handle, accelerationStructure, allocator);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void GetAccelerationStructureMemoryRequirementsKHR(Vk.KHR.AccelerationStructureMemoryRequirementsInfo* pInfo, Vk.MemoryRequirements2* pMemoryRequirements)
		=> Functions.vkGetAccelerationStructureMemoryRequirementsKHR(Handle, pInfo, pMemoryRequirements);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void GetAccelerationStructureMemoryRequirementsKHR(in Vk.KHR.AccelerationStructureMemoryRequirementsInfo info, out Vk.MemoryRequirements2 memoryRequirements)
		=> Functions.GetAccelerationStructureMemoryRequirementsKHR(Handle, info, out memoryRequirements);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void GetAccelerationStructureMemoryRequirementsNV(Vk.NV.AccelerationStructureMemoryRequirementsInfo* pInfo, Vk.KHR.MemoryRequirements2* pMemoryRequirements)
		=> Functions.vkGetAccelerationStructureMemoryRequirementsNV(Handle, pInfo, pMemoryRequirements);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void GetAccelerationStructureMemoryRequirementsNV(in Vk.NV.AccelerationStructureMemoryRequirementsInfo info, out Vk.KHR.MemoryRequirements2 memoryRequirements)
		=> Functions.GetAccelerationStructureMemoryRequirementsNV(Handle, info, out memoryRequirements);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result BindAccelerationStructureMemoryKHR(uint bindInfoCount, Vk.KHR.BindAccelerationStructureMemoryInfo* pBindInfos)
		=> Functions.vkBindAccelerationStructureMemoryKHR(Handle, bindInfoCount, pBindInfos);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result BindAccelerationStructureMemoryKHR(in ReadOnlySpan<Vk.KHR.BindAccelerationStructureMemoryInfo> bindInfos)
		=> Functions.BindAccelerationStructureMemoryKHR(Handle, bindInfos);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result BindAccelerationStructureMemoryNV(uint bindInfoCount, Vk.KHR.BindAccelerationStructureMemoryInfo* pBindInfos)
		=> Functions.vkBindAccelerationStructureMemoryNV(Handle, bindInfoCount, pBindInfos);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result BindAccelerationStructureMemoryNV(in ReadOnlySpan<Vk.KHR.BindAccelerationStructureMemoryInfo> bindInfos)
		=> Functions.BindAccelerationStructureMemoryNV(Handle, bindInfos);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result CopyAccelerationStructureKHR(Vk.KHR.CopyAccelerationStructureInfo* pInfo)
		=> Functions.vkCopyAccelerationStructureKHR(Handle, pInfo);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result CopyAccelerationStructureKHR(in Vk.KHR.CopyAccelerationStructureInfo info)
		=> Functions.CopyAccelerationStructureKHR(Handle, info);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result CopyAccelerationStructureToMemoryKHR(Vk.KHR.CopyAccelerationStructureToMemoryInfo* pInfo)
		=> Functions.vkCopyAccelerationStructureToMemoryKHR(Handle, pInfo);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result CopyAccelerationStructureToMemoryKHR(in Vk.KHR.CopyAccelerationStructureToMemoryInfo info)
		=> Functions.CopyAccelerationStructureToMemoryKHR(Handle, info);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result CopyMemoryToAccelerationStructureKHR(Vk.KHR.CopyMemoryToAccelerationStructureInfo* pInfo)
		=> Functions.vkCopyMemoryToAccelerationStructureKHR(Handle, pInfo);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result CopyMemoryToAccelerationStructureKHR(in Vk.KHR.CopyMemoryToAccelerationStructureInfo info)
		=> Functions.CopyMemoryToAccelerationStructureKHR(Handle, info);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result WriteAccelerationStructuresPropertiesKHR(uint accelerationStructureCount, Vk.KHR.AccelerationStructure* pAccelerationStructures, Vk.QueryType queryType, ulong dataSize, void* pData, ulong stride)
		=> Functions.vkWriteAccelerationStructuresPropertiesKHR(Handle, accelerationStructureCount, pAccelerationStructures, queryType, dataSize, pData, stride);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result WriteAccelerationStructuresPropertiesKHR(in ReadOnlySpan<Vk.KHR.AccelerationStructure> accelerationStructures, Vk.QueryType queryType, ulong dataSize, void* pData, ulong stride)
		=> Functions.WriteAccelerationStructuresPropertiesKHR(Handle, accelerationStructures, queryType, dataSize, pData, stride);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result GetRayTracingShaderGroupHandlesKHR(Vk.Pipeline pipeline, uint firstGroup, uint groupCount, ulong dataSize, void* pData)
		=> Functions.vkGetRayTracingShaderGroupHandlesKHR(Handle, pipeline, firstGroup, groupCount, dataSize, pData);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result GetRayTracingShaderGroupHandlesNV(Vk.Pipeline pipeline, uint firstGroup, uint groupCount, ulong dataSize, void* pData)
		=> Functions.vkGetRayTracingShaderGroupHandlesNV(Handle, pipeline, firstGroup, groupCount, dataSize, pData);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result GetRayTracingCaptureReplayShaderGroupHandlesKHR(Vk.Pipeline pipeline, uint firstGroup, uint groupCount, ulong dataSize, void* pData)
		=> Functions.vkGetRayTracingCaptureReplayShaderGroupHandlesKHR(Handle, pipeline, firstGroup, groupCount, dataSize, pData);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result GetAccelerationStructureHandleNV(Vk.KHR.AccelerationStructure accelerationStructure, ulong dataSize, void* pData)
		=> Functions.vkGetAccelerationStructureHandleNV(Handle, accelerationStructure, dataSize, pData);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result CreateRayTracingPipelinesNV(Vk.PipelineCache pipelineCache, uint createInfoCount, Vk.NV.RayTracingPipelineCreateInfo* pCreateInfos, Vk.AllocationCallbacks* pAllocator, Vk.Pipeline* pPipelines)
		=> Functions.vkCreateRayTracingPipelinesNV(Handle, pipelineCache, createInfoCount, pCreateInfos, pAllocator, pPipelines);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result CreateRayTracingPipelinesNV(Vk.PipelineCache pipelineCache, in ReadOnlySpan<Vk.NV.RayTracingPipelineCreateInfo> createInfos, in Vk.AllocationCallbacks allocator, in Span<Vk.Pipeline> pipelines)
		=> Functions.CreateRayTracingPipelinesNV(Handle, pipelineCache, createInfos, allocator, pipelines);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result CreateRayTracingPipelinesKHR(Vk.PipelineCache pipelineCache, uint createInfoCount, Vk.KHR.RayTracingPipelineCreateInfo* pCreateInfos, Vk.AllocationCallbacks* pAllocator, Vk.Pipeline* pPipelines)
		=> Functions.vkCreateRayTracingPipelinesKHR(Handle, pipelineCache, createInfoCount, pCreateInfos, pAllocator, pPipelines);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result CreateRayTracingPipelinesKHR(Vk.PipelineCache pipelineCache, in ReadOnlySpan<Vk.KHR.RayTracingPipelineCreateInfo> createInfos, in Vk.AllocationCallbacks allocator, in Span<Vk.Pipeline> pipelines)
		=> Functions.CreateRayTracingPipelinesKHR(Handle, pipelineCache, createInfos, allocator, pipelines);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result GetDeviceAccelerationStructureCompatibilityKHR(Vk.KHR.AccelerationStructureVersion* version)
		=> Functions.vkGetDeviceAccelerationStructureCompatibilityKHR(Handle, version);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result GetDeviceAccelerationStructureCompatibilityKHR(in Vk.KHR.AccelerationStructureVersion version)
		=> Functions.GetDeviceAccelerationStructureCompatibilityKHR(Handle, version);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public uint GetImageViewHandleNVX(Vk.NVX.ImageViewHandleInfo* pInfo)
		=> Functions.vkGetImageViewHandleNVX(Handle, pInfo);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public uint GetImageViewHandleNVX(in Vk.NVX.ImageViewHandleInfo info)
		=> Functions.GetImageViewHandleNVX(Handle, info);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result GetImageViewAddressNVX(Vk.ImageView imageView, Vk.NVX.ImageViewAddressProperties* pProperties)
		=> Functions.vkGetImageViewAddressNVX(Handle, imageView, pProperties);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result GetImageViewAddressNVX(Vk.ImageView imageView, out Vk.NVX.ImageViewAddressProperties properties)
		=> Functions.GetImageViewAddressNVX(Handle, imageView, out properties);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result GetDeviceGroupSurfacePresentModes2EXT(Vk.KHR.PhysicalDeviceSurfaceInfo2* pSurfaceInfo, Vk.KHR.DeviceGroupPresentModeFlags* pModes)
		=> Functions.vkGetDeviceGroupSurfacePresentModes2EXT(Handle, pSurfaceInfo, pModes);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result GetDeviceGroupSurfacePresentModes2EXT(in Vk.KHR.PhysicalDeviceSurfaceInfo2 surfaceInfo, out Vk.KHR.DeviceGroupPresentModeFlags modes)
		=> Functions.GetDeviceGroupSurfacePresentModes2EXT(Handle, surfaceInfo, out modes);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result AcquireFullScreenExclusiveModeEXT(Vk.KHR.Swapchain swapchain)
		=> Functions.vkAcquireFullScreenExclusiveModeEXT(Handle, swapchain);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result ReleaseFullScreenExclusiveModeEXT(Vk.KHR.Swapchain swapchain)
		=> Functions.vkReleaseFullScreenExclusiveModeEXT(Handle, swapchain);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result AcquireProfilingLockKHR(Vk.KHR.AcquireProfilingLockInfo* pInfo)
		=> Functions.vkAcquireProfilingLockKHR(Handle, pInfo);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result AcquireProfilingLockKHR(in Vk.KHR.AcquireProfilingLockInfo info)
		=> Functions.AcquireProfilingLockKHR(Handle, info);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void ReleaseProfilingLockKHR()
		=> Functions.vkReleaseProfilingLockKHR(Handle);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result GetImageDrmFormatModifierPropertiesEXT(Vk.Image image, Vk.EXT.ImageDrmFormatModifierProperties* pProperties)
		=> Functions.vkGetImageDrmFormatModifierPropertiesEXT(Handle, image, pProperties);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result GetImageDrmFormatModifierPropertiesEXT(Vk.Image image, out Vk.EXT.ImageDrmFormatModifierProperties properties)
		=> Functions.GetImageDrmFormatModifierPropertiesEXT(Handle, image, out properties);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public ulong GetBufferOpaqueCaptureAddress(Vk.BufferDeviceAddressInfo* pInfo)
		=> Functions.vkGetBufferOpaqueCaptureAddress(Handle, pInfo);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public ulong GetBufferOpaqueCaptureAddress(in Vk.BufferDeviceAddressInfo info)
		=> Functions.GetBufferOpaqueCaptureAddress(Handle, info);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public ulong GetBufferOpaqueCaptureAddressKHR(Vk.BufferDeviceAddressInfo* pInfo)
		=> Functions.vkGetBufferOpaqueCaptureAddressKHR(Handle, pInfo);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public ulong GetBufferOpaqueCaptureAddressKHR(in Vk.BufferDeviceAddressInfo info)
		=> Functions.GetBufferOpaqueCaptureAddressKHR(Handle, info);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public ulong GetBufferDeviceAddress(Vk.BufferDeviceAddressInfo* pInfo)
		=> Functions.vkGetBufferDeviceAddress(Handle, pInfo);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public ulong GetBufferDeviceAddress(in Vk.BufferDeviceAddressInfo info)
		=> Functions.GetBufferDeviceAddress(Handle, info);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public ulong GetBufferDeviceAddressKHR(Vk.BufferDeviceAddressInfo* pInfo)
		=> Functions.vkGetBufferDeviceAddressKHR(Handle, pInfo);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public ulong GetBufferDeviceAddressKHR(in Vk.BufferDeviceAddressInfo info)
		=> Functions.GetBufferDeviceAddressKHR(Handle, info);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public ulong GetBufferDeviceAddressEXT(Vk.BufferDeviceAddressInfo* pInfo)
		=> Functions.vkGetBufferDeviceAddressEXT(Handle, pInfo);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public ulong GetBufferDeviceAddressEXT(in Vk.BufferDeviceAddressInfo info)
		=> Functions.GetBufferDeviceAddressEXT(Handle, info);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result InitializePerformanceApiINTEL(Vk.INTEL.InitializePerformanceApiInfo* pInitializeInfo)
		=> Functions.vkInitializePerformanceApiINTEL(Handle, pInitializeInfo);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result InitializePerformanceApiINTEL(in Vk.INTEL.InitializePerformanceApiInfo initializeInfo)
		=> Functions.InitializePerformanceApiINTEL(Handle, initializeInfo);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void UninitializePerformanceApiINTEL()
		=> Functions.vkUninitializePerformanceApiINTEL(Handle);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result AcquirePerformanceConfigurationINTEL(Vk.INTEL.PerformanceConfigurationAcquireInfo* pAcquireInfo, Vk.INTEL.PerformanceConfiguration* pConfiguration)
		=> Functions.vkAcquirePerformanceConfigurationINTEL(Handle, pAcquireInfo, pConfiguration);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result AcquirePerformanceConfigurationINTEL(in Vk.INTEL.PerformanceConfigurationAcquireInfo acquireInfo, out Vk.INTEL.PerformanceConfiguration configuration)
		=> Functions.AcquirePerformanceConfigurationINTEL(Handle, acquireInfo, out configuration);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result ReleasePerformanceConfigurationINTEL(Vk.INTEL.PerformanceConfiguration configuration)
		=> Functions.vkReleasePerformanceConfigurationINTEL(Handle, configuration);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result GetPerformanceParameterINTEL(Vk.INTEL.PerformanceParameterType parameter, Vk.INTEL.PerformanceValue* pValue)
		=> Functions.vkGetPerformanceParameterINTEL(Handle, parameter, pValue);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result GetPerformanceParameterINTEL(Vk.INTEL.PerformanceParameterType parameter, out Vk.INTEL.PerformanceValue value)
		=> Functions.GetPerformanceParameterINTEL(Handle, parameter, out value);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public ulong GetDeviceMemoryOpaqueCaptureAddress(Vk.DeviceMemoryOpaqueCaptureAddressInfo* pInfo)
		=> Functions.vkGetDeviceMemoryOpaqueCaptureAddress(Handle, pInfo);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public ulong GetDeviceMemoryOpaqueCaptureAddress(in Vk.DeviceMemoryOpaqueCaptureAddressInfo info)
		=> Functions.GetDeviceMemoryOpaqueCaptureAddress(Handle, info);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public ulong GetDeviceMemoryOpaqueCaptureAddressKHR(Vk.DeviceMemoryOpaqueCaptureAddressInfo* pInfo)
		=> Functions.vkGetDeviceMemoryOpaqueCaptureAddressKHR(Handle, pInfo);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public ulong GetDeviceMemoryOpaqueCaptureAddressKHR(in Vk.DeviceMemoryOpaqueCaptureAddressInfo info)
		=> Functions.GetDeviceMemoryOpaqueCaptureAddressKHR(Handle, info);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result GetPipelineExecutablePropertiesKHR(Vk.KHR.PipelineInfo* pPipelineInfo, uint* pExecutableCount, Vk.KHR.PipelineExecutableProperties* pProperties)
		=> Functions.vkGetPipelineExecutablePropertiesKHR(Handle, pPipelineInfo, pExecutableCount, pProperties);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result GetPipelineExecutablePropertiesKHR(in Vk.KHR.PipelineInfo pipelineInfo, out uint executableCount, in Span<Vk.KHR.PipelineExecutableProperties> properties)
		=> Functions.GetPipelineExecutablePropertiesKHR(Handle, pipelineInfo, out executableCount, properties);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result GetPipelineExecutableStatisticsKHR(Vk.KHR.PipelineExecutableInfo* pExecutableInfo, uint* pStatisticCount, Vk.KHR.PipelineExecutableStatistic* pStatistics)
		=> Functions.vkGetPipelineExecutableStatisticsKHR(Handle, pExecutableInfo, pStatisticCount, pStatistics);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result GetPipelineExecutableStatisticsKHR(in Vk.KHR.PipelineExecutableInfo executableInfo, out uint statisticCount, in Span<Vk.KHR.PipelineExecutableStatistic> statistics)
		=> Functions.GetPipelineExecutableStatisticsKHR(Handle, executableInfo, out statisticCount, statistics);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result GetPipelineExecutableInternalRepresentationsKHR(Vk.KHR.PipelineExecutableInfo* pExecutableInfo, uint* pInternalRepresentationCount, Vk.KHR.PipelineExecutableInternalRepresentation* pInternalRepresentations)
		=> Functions.vkGetPipelineExecutableInternalRepresentationsKHR(Handle, pExecutableInfo, pInternalRepresentationCount, pInternalRepresentations);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result GetPipelineExecutableInternalRepresentationsKHR(in Vk.KHR.PipelineExecutableInfo executableInfo, out uint internalRepresentationCount, in Span<Vk.KHR.PipelineExecutableInternalRepresentation> internalRepresentations)
		=> Functions.GetPipelineExecutableInternalRepresentationsKHR(Handle, executableInfo, out internalRepresentationCount, internalRepresentations);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result CreateAccelerationStructureKHR(Vk.KHR.AccelerationStructureCreateInfo* pCreateInfo, Vk.AllocationCallbacks* pAllocator, Vk.KHR.AccelerationStructure* pAccelerationStructure)
		=> Functions.vkCreateAccelerationStructureKHR(Handle, pCreateInfo, pAllocator, pAccelerationStructure);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result CreateAccelerationStructureKHR(in Vk.KHR.AccelerationStructureCreateInfo createInfo, in Vk.AllocationCallbacks allocator, out Vk.KHR.AccelerationStructure accelerationStructure)
		=> Functions.CreateAccelerationStructureKHR(Handle, createInfo, allocator, out accelerationStructure);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result BuildAccelerationStructureKHR(uint infoCount, Vk.KHR.AccelerationStructureBuildGeometryInfo* pInfos, Vk.KHR.AccelerationStructureBuildOffsetInfo** ppOffsetInfos)
		=> Functions.vkBuildAccelerationStructureKHR(Handle, infoCount, pInfos, ppOffsetInfos);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result BuildAccelerationStructureKHR(in ReadOnlySpan<Vk.KHR.AccelerationStructureBuildGeometryInfo> infos, Vk.KHR.AccelerationStructureBuildOffsetInfo** ppOffsetInfos)
		=> Functions.BuildAccelerationStructureKHR(Handle, infos, ppOffsetInfos);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public ulong GetAccelerationStructureDeviceAddressKHR(Vk.KHR.AccelerationStructureDeviceAddressInfo* pInfo)
		=> Functions.vkGetAccelerationStructureDeviceAddressKHR(Handle, pInfo);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public ulong GetAccelerationStructureDeviceAddressKHR(in Vk.KHR.AccelerationStructureDeviceAddressInfo info)
		=> Functions.GetAccelerationStructureDeviceAddressKHR(Handle, info);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result CreateDeferredOperationKHR(Vk.AllocationCallbacks* pAllocator, Vk.KHR.DeferredOperation* pDeferredOperation)
		=> Functions.vkCreateDeferredOperationKHR(Handle, pAllocator, pDeferredOperation);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result CreateDeferredOperationKHR(in Vk.AllocationCallbacks allocator, out Vk.KHR.DeferredOperation deferredOperation)
		=> Functions.CreateDeferredOperationKHR(Handle, allocator, out deferredOperation);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void DestroyDeferredOperationKHR(Vk.KHR.DeferredOperation operation, Vk.AllocationCallbacks* pAllocator)
		=> Functions.vkDestroyDeferredOperationKHR(Handle, operation, pAllocator);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void DestroyDeferredOperationKHR(Vk.KHR.DeferredOperation operation, in Vk.AllocationCallbacks allocator)
		=> Functions.DestroyDeferredOperationKHR(Handle, operation, allocator);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public uint GetDeferredOperationMaxConcurrencyKHR(Vk.KHR.DeferredOperation operation)
		=> Functions.vkGetDeferredOperationMaxConcurrencyKHR(Handle, operation);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result GetDeferredOperationResultKHR(Vk.KHR.DeferredOperation operation)
		=> Functions.vkGetDeferredOperationResultKHR(Handle, operation);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result DeferredOperationJoinKHR(Vk.KHR.DeferredOperation operation)
		=> Functions.vkDeferredOperationJoinKHR(Handle, operation);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result CreatePrivateDataSlotEXT(Vk.EXT.PrivateDataSlotCreateInfo* pCreateInfo, Vk.AllocationCallbacks* pAllocator, Vk.EXT.PrivateDataSlot* pPrivateDataSlot)
		=> Functions.vkCreatePrivateDataSlotEXT(Handle, pCreateInfo, pAllocator, pPrivateDataSlot);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result CreatePrivateDataSlotEXT(in Vk.EXT.PrivateDataSlotCreateInfo createInfo, in Vk.AllocationCallbacks allocator, out Vk.EXT.PrivateDataSlot privateDataSlot)
		=> Functions.CreatePrivateDataSlotEXT(Handle, createInfo, allocator, out privateDataSlot);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void DestroyPrivateDataSlotEXT(Vk.EXT.PrivateDataSlot privateDataSlot, Vk.AllocationCallbacks* pAllocator)
		=> Functions.vkDestroyPrivateDataSlotEXT(Handle, privateDataSlot, pAllocator);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void DestroyPrivateDataSlotEXT(Vk.EXT.PrivateDataSlot privateDataSlot, in Vk.AllocationCallbacks allocator)
		=> Functions.DestroyPrivateDataSlotEXT(Handle, privateDataSlot, allocator);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result SetPrivateDataEXT(Vk.ObjectType objectType, ulong objectHandle, Vk.EXT.PrivateDataSlot privateDataSlot, ulong data)
		=> Functions.vkSetPrivateDataEXT(Handle, objectType, objectHandle, privateDataSlot, data);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void GetPrivateDataEXT(Vk.ObjectType objectType, ulong objectHandle, Vk.EXT.PrivateDataSlot privateDataSlot, ulong* pData)
		=> Functions.vkGetPrivateDataEXT(Handle, objectType, objectHandle, privateDataSlot, pData);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void GetPrivateDataEXT(Vk.ObjectType objectType, ulong objectHandle, Vk.EXT.PrivateDataSlot privateDataSlot, out ulong data)
		=> Functions.GetPrivateDataEXT(Handle, objectType, objectHandle, privateDataSlot, out data);

}

} // namespace VVK
