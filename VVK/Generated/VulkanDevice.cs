/*
 * MIT License - Copyright(c) 2020 Sean Moss
 * This file is subject to the terms and conditions of the MIT License, the text of which can be found in the 'LICENSE'
 * file at the root of this repository, or online at<https://opensource.org/licenses/MIT>.
 */

/// This file was generated by VVKGen. Edits to this file will be lost on next generation.

using System;
using System.Runtime.InteropServices;
using System.Runtime.CompilerServices;


namespace VVK
{

public unsafe sealed partial class VulkanDevice
{
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void DestroyDevice(Vk.Device device, Vk.AllocationCallbacks* pAllocator)
		=> Functions.vkDestroyDevice(device, pAllocator);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void GetDeviceQueue(Vk.Device device, uint queueFamilyIndex, uint queueIndex, Vk.Queue* pQueue)
		=> Functions.vkGetDeviceQueue(device, queueFamilyIndex, queueIndex, pQueue);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public VulkanResult DeviceWaitIdle(Vk.Device device)
		=> new(Functions.vkDeviceWaitIdle(device), "vkDeviceWaitIdle");

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public VulkanResult AllocateMemory(Vk.Device device, Vk.MemoryAllocateInfo* pAllocateInfo, Vk.AllocationCallbacks* pAllocator, Vk.DeviceMemory* pMemory)
		=> new(Functions.vkAllocateMemory(device, pAllocateInfo, pAllocator, pMemory), "vkAllocateMemory");

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void FreeMemory(Vk.Device device, Vk.DeviceMemory memory, Vk.AllocationCallbacks* pAllocator)
		=> Functions.vkFreeMemory(device, memory, pAllocator);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public VulkanResult MapMemory(Vk.Device device, Vk.DeviceMemory memory, Vk.DeviceSize offset, Vk.DeviceSize size, Vk.MemoryMapFlags flags, void** ppData)
		=> new(Functions.vkMapMemory(device, memory, offset, size, flags, ppData), "vkMapMemory");

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void UnmapMemory(Vk.Device device, Vk.DeviceMemory memory)
		=> Functions.vkUnmapMemory(device, memory);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public VulkanResult FlushMappedMemoryRanges(Vk.Device device, uint memoryRangeCount, Vk.MappedMemoryRange* pMemoryRanges)
		=> new(Functions.vkFlushMappedMemoryRanges(device, memoryRangeCount, pMemoryRanges), "vkFlushMappedMemoryRanges");

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public VulkanResult InvalidateMappedMemoryRanges(Vk.Device device, uint memoryRangeCount, Vk.MappedMemoryRange* pMemoryRanges)
		=> new(Functions.vkInvalidateMappedMemoryRanges(device, memoryRangeCount, pMemoryRanges), "vkInvalidateMappedMemoryRanges");

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void GetDeviceMemoryCommitment(Vk.Device device, Vk.DeviceMemory memory, Vk.DeviceSize* pCommittedMemoryInBytes)
		=> Functions.vkGetDeviceMemoryCommitment(device, memory, pCommittedMemoryInBytes);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void GetBufferMemoryRequirements(Vk.Device device, Vk.Buffer buffer, Vk.MemoryRequirements* pMemoryRequirements)
		=> Functions.vkGetBufferMemoryRequirements(device, buffer, pMemoryRequirements);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public VulkanResult BindBufferMemory(Vk.Device device, Vk.Buffer buffer, Vk.DeviceMemory memory, Vk.DeviceSize memoryOffset)
		=> new(Functions.vkBindBufferMemory(device, buffer, memory, memoryOffset), "vkBindBufferMemory");

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void GetImageMemoryRequirements(Vk.Device device, Vk.Image image, Vk.MemoryRequirements* pMemoryRequirements)
		=> Functions.vkGetImageMemoryRequirements(device, image, pMemoryRequirements);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public VulkanResult BindImageMemory(Vk.Device device, Vk.Image image, Vk.DeviceMemory memory, Vk.DeviceSize memoryOffset)
		=> new(Functions.vkBindImageMemory(device, image, memory, memoryOffset), "vkBindImageMemory");

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void GetImageSparseMemoryRequirements(Vk.Device device, Vk.Image image, uint* pSparseMemoryRequirementCount, Vk.SparseImageMemoryRequirements* pSparseMemoryRequirements)
		=> Functions.vkGetImageSparseMemoryRequirements(device, image, pSparseMemoryRequirementCount, pSparseMemoryRequirements);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public VulkanResult CreateFence(Vk.Device device, Vk.FenceCreateInfo* pCreateInfo, Vk.AllocationCallbacks* pAllocator, Vk.Fence* pFence)
		=> new(Functions.vkCreateFence(device, pCreateInfo, pAllocator, pFence), "vkCreateFence");

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void DestroyFence(Vk.Device device, Vk.Fence fence, Vk.AllocationCallbacks* pAllocator)
		=> Functions.vkDestroyFence(device, fence, pAllocator);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public VulkanResult ResetFences(Vk.Device device, uint fenceCount, Vk.Fence* pFences)
		=> new(Functions.vkResetFences(device, fenceCount, pFences), "vkResetFences");

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public VulkanResult GetFenceStatus(Vk.Device device, Vk.Fence fence)
		=> new(Functions.vkGetFenceStatus(device, fence), "vkGetFenceStatus");

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public VulkanResult WaitForFences(Vk.Device device, uint fenceCount, Vk.Fence* pFences, Vk.Bool32 waitAll, ulong timeout)
		=> new(Functions.vkWaitForFences(device, fenceCount, pFences, waitAll, timeout), "vkWaitForFences");

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public VulkanResult CreateSemaphore(Vk.Device device, Vk.SemaphoreCreateInfo* pCreateInfo, Vk.AllocationCallbacks* pAllocator, Vk.Semaphore* pSemaphore)
		=> new(Functions.vkCreateSemaphore(device, pCreateInfo, pAllocator, pSemaphore), "vkCreateSemaphore");

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void DestroySemaphore(Vk.Device device, Vk.Semaphore semaphore, Vk.AllocationCallbacks* pAllocator)
		=> Functions.vkDestroySemaphore(device, semaphore, pAllocator);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public VulkanResult CreateEvent(Vk.Device device, Vk.EventCreateInfo* pCreateInfo, Vk.AllocationCallbacks* pAllocator, Vk.Event* pEvent)
		=> new(Functions.vkCreateEvent(device, pCreateInfo, pAllocator, pEvent), "vkCreateEvent");

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void DestroyEvent(Vk.Device device, Vk.Event @event, Vk.AllocationCallbacks* pAllocator)
		=> Functions.vkDestroyEvent(device, @event, pAllocator);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public VulkanResult GetEventStatus(Vk.Device device, Vk.Event @event)
		=> new(Functions.vkGetEventStatus(device, @event), "vkGetEventStatus");

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public VulkanResult SetEvent(Vk.Device device, Vk.Event @event)
		=> new(Functions.vkSetEvent(device, @event), "vkSetEvent");

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public VulkanResult ResetEvent(Vk.Device device, Vk.Event @event)
		=> new(Functions.vkResetEvent(device, @event), "vkResetEvent");

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public VulkanResult CreateQueryPool(Vk.Device device, Vk.QueryPoolCreateInfo* pCreateInfo, Vk.AllocationCallbacks* pAllocator, Vk.QueryPool* pQueryPool)
		=> new(Functions.vkCreateQueryPool(device, pCreateInfo, pAllocator, pQueryPool), "vkCreateQueryPool");

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void DestroyQueryPool(Vk.Device device, Vk.QueryPool queryPool, Vk.AllocationCallbacks* pAllocator)
		=> Functions.vkDestroyQueryPool(device, queryPool, pAllocator);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public VulkanResult GetQueryPoolResults(Vk.Device device, Vk.QueryPool queryPool, uint firstQuery, uint queryCount, ulong dataSize, void* pData, Vk.DeviceSize stride, Vk.QueryResultFlags flags)
		=> new(Functions.vkGetQueryPoolResults(device, queryPool, firstQuery, queryCount, dataSize, pData, stride, flags), "vkGetQueryPoolResults");

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void ResetQueryPool(Vk.Device device, Vk.QueryPool queryPool, uint firstQuery, uint queryCount)
		=> Functions.vkResetQueryPool(device, queryPool, firstQuery, queryCount);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void ResetQueryPoolEXT(Vk.Device device, Vk.QueryPool queryPool, uint firstQuery, uint queryCount)
	{
		if (Functions.vkResetQueryPoolEXT == null) { throw new VVK.FunctionNotLoadedException("vkResetQueryPoolEXT"); }
		Functions.vkResetQueryPoolEXT(device, queryPool, firstQuery, queryCount);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public VulkanResult CreateBuffer(Vk.Device device, Vk.BufferCreateInfo* pCreateInfo, Vk.AllocationCallbacks* pAllocator, Vk.Buffer* pBuffer)
		=> new(Functions.vkCreateBuffer(device, pCreateInfo, pAllocator, pBuffer), "vkCreateBuffer");

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void DestroyBuffer(Vk.Device device, Vk.Buffer buffer, Vk.AllocationCallbacks* pAllocator)
		=> Functions.vkDestroyBuffer(device, buffer, pAllocator);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public VulkanResult CreateBufferView(Vk.Device device, Vk.BufferViewCreateInfo* pCreateInfo, Vk.AllocationCallbacks* pAllocator, Vk.BufferView* pView)
		=> new(Functions.vkCreateBufferView(device, pCreateInfo, pAllocator, pView), "vkCreateBufferView");

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void DestroyBufferView(Vk.Device device, Vk.BufferView bufferView, Vk.AllocationCallbacks* pAllocator)
		=> Functions.vkDestroyBufferView(device, bufferView, pAllocator);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public VulkanResult CreateImage(Vk.Device device, Vk.ImageCreateInfo* pCreateInfo, Vk.AllocationCallbacks* pAllocator, Vk.Image* pImage)
		=> new(Functions.vkCreateImage(device, pCreateInfo, pAllocator, pImage), "vkCreateImage");

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void DestroyImage(Vk.Device device, Vk.Image image, Vk.AllocationCallbacks* pAllocator)
		=> Functions.vkDestroyImage(device, image, pAllocator);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void GetImageSubresourceLayout(Vk.Device device, Vk.Image image, Vk.ImageSubresource* pSubresource, Vk.SubresourceLayout* pLayout)
		=> Functions.vkGetImageSubresourceLayout(device, image, pSubresource, pLayout);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public VulkanResult CreateImageView(Vk.Device device, Vk.ImageViewCreateInfo* pCreateInfo, Vk.AllocationCallbacks* pAllocator, Vk.ImageView* pView)
		=> new(Functions.vkCreateImageView(device, pCreateInfo, pAllocator, pView), "vkCreateImageView");

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void DestroyImageView(Vk.Device device, Vk.ImageView imageView, Vk.AllocationCallbacks* pAllocator)
		=> Functions.vkDestroyImageView(device, imageView, pAllocator);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public VulkanResult CreateShaderModule(Vk.Device device, Vk.ShaderModuleCreateInfo* pCreateInfo, Vk.AllocationCallbacks* pAllocator, Vk.ShaderModule* pShaderModule)
		=> new(Functions.vkCreateShaderModule(device, pCreateInfo, pAllocator, pShaderModule), "vkCreateShaderModule");

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void DestroyShaderModule(Vk.Device device, Vk.ShaderModule shaderModule, Vk.AllocationCallbacks* pAllocator)
		=> Functions.vkDestroyShaderModule(device, shaderModule, pAllocator);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public VulkanResult CreatePipelineCache(Vk.Device device, Vk.PipelineCacheCreateInfo* pCreateInfo, Vk.AllocationCallbacks* pAllocator, Vk.PipelineCache* pPipelineCache)
		=> new(Functions.vkCreatePipelineCache(device, pCreateInfo, pAllocator, pPipelineCache), "vkCreatePipelineCache");

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void DestroyPipelineCache(Vk.Device device, Vk.PipelineCache pipelineCache, Vk.AllocationCallbacks* pAllocator)
		=> Functions.vkDestroyPipelineCache(device, pipelineCache, pAllocator);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public VulkanResult GetPipelineCacheData(Vk.Device device, Vk.PipelineCache pipelineCache, ulong* pDataSize, void* pData)
		=> new(Functions.vkGetPipelineCacheData(device, pipelineCache, pDataSize, pData), "vkGetPipelineCacheData");

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public VulkanResult MergePipelineCaches(Vk.Device device, Vk.PipelineCache dstCache, uint srcCacheCount, Vk.PipelineCache* pSrcCaches)
		=> new(Functions.vkMergePipelineCaches(device, dstCache, srcCacheCount, pSrcCaches), "vkMergePipelineCaches");

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public VulkanResult CreateGraphicsPipelines(Vk.Device device, Vk.PipelineCache pipelineCache, uint createInfoCount, Vk.GraphicsPipelineCreateInfo* pCreateInfos, Vk.AllocationCallbacks* pAllocator, Vk.Pipeline* pPipelines)
		=> new(Functions.vkCreateGraphicsPipelines(device, pipelineCache, createInfoCount, pCreateInfos, pAllocator, pPipelines), "vkCreateGraphicsPipelines");

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public VulkanResult CreateComputePipelines(Vk.Device device, Vk.PipelineCache pipelineCache, uint createInfoCount, Vk.ComputePipelineCreateInfo* pCreateInfos, Vk.AllocationCallbacks* pAllocator, Vk.Pipeline* pPipelines)
		=> new(Functions.vkCreateComputePipelines(device, pipelineCache, createInfoCount, pCreateInfos, pAllocator, pPipelines), "vkCreateComputePipelines");

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void DestroyPipeline(Vk.Device device, Vk.Pipeline pipeline, Vk.AllocationCallbacks* pAllocator)
		=> Functions.vkDestroyPipeline(device, pipeline, pAllocator);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public VulkanResult CreatePipelineLayout(Vk.Device device, Vk.PipelineLayoutCreateInfo* pCreateInfo, Vk.AllocationCallbacks* pAllocator, Vk.PipelineLayout* pPipelineLayout)
		=> new(Functions.vkCreatePipelineLayout(device, pCreateInfo, pAllocator, pPipelineLayout), "vkCreatePipelineLayout");

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void DestroyPipelineLayout(Vk.Device device, Vk.PipelineLayout pipelineLayout, Vk.AllocationCallbacks* pAllocator)
		=> Functions.vkDestroyPipelineLayout(device, pipelineLayout, pAllocator);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public VulkanResult CreateSampler(Vk.Device device, Vk.SamplerCreateInfo* pCreateInfo, Vk.AllocationCallbacks* pAllocator, Vk.Sampler* pSampler)
		=> new(Functions.vkCreateSampler(device, pCreateInfo, pAllocator, pSampler), "vkCreateSampler");

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void DestroySampler(Vk.Device device, Vk.Sampler sampler, Vk.AllocationCallbacks* pAllocator)
		=> Functions.vkDestroySampler(device, sampler, pAllocator);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public VulkanResult CreateDescriptorSetLayout(Vk.Device device, Vk.DescriptorSetLayoutCreateInfo* pCreateInfo, Vk.AllocationCallbacks* pAllocator, Vk.DescriptorSetLayout* pSetLayout)
		=> new(Functions.vkCreateDescriptorSetLayout(device, pCreateInfo, pAllocator, pSetLayout), "vkCreateDescriptorSetLayout");

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void DestroyDescriptorSetLayout(Vk.Device device, Vk.DescriptorSetLayout descriptorSetLayout, Vk.AllocationCallbacks* pAllocator)
		=> Functions.vkDestroyDescriptorSetLayout(device, descriptorSetLayout, pAllocator);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public VulkanResult CreateDescriptorPool(Vk.Device device, Vk.DescriptorPoolCreateInfo* pCreateInfo, Vk.AllocationCallbacks* pAllocator, Vk.DescriptorPool* pDescriptorPool)
		=> new(Functions.vkCreateDescriptorPool(device, pCreateInfo, pAllocator, pDescriptorPool), "vkCreateDescriptorPool");

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void DestroyDescriptorPool(Vk.Device device, Vk.DescriptorPool descriptorPool, Vk.AllocationCallbacks* pAllocator)
		=> Functions.vkDestroyDescriptorPool(device, descriptorPool, pAllocator);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public VulkanResult ResetDescriptorPool(Vk.Device device, Vk.DescriptorPool descriptorPool, Vk.DescriptorPoolResetFlags flags)
		=> new(Functions.vkResetDescriptorPool(device, descriptorPool, flags), "vkResetDescriptorPool");

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public VulkanResult AllocateDescriptorSets(Vk.Device device, Vk.DescriptorSetAllocateInfo* pAllocateInfo, Vk.DescriptorSet* pDescriptorSets)
		=> new(Functions.vkAllocateDescriptorSets(device, pAllocateInfo, pDescriptorSets), "vkAllocateDescriptorSets");

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public VulkanResult FreeDescriptorSets(Vk.Device device, Vk.DescriptorPool descriptorPool, uint descriptorSetCount, Vk.DescriptorSet* pDescriptorSets)
		=> new(Functions.vkFreeDescriptorSets(device, descriptorPool, descriptorSetCount, pDescriptorSets), "vkFreeDescriptorSets");

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void UpdateDescriptorSets(Vk.Device device, uint descriptorWriteCount, Vk.WriteDescriptorSet* pDescriptorWrites, uint descriptorCopyCount, Vk.CopyDescriptorSet* pDescriptorCopies)
		=> Functions.vkUpdateDescriptorSets(device, descriptorWriteCount, pDescriptorWrites, descriptorCopyCount, pDescriptorCopies);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public VulkanResult CreateFramebuffer(Vk.Device device, Vk.FramebufferCreateInfo* pCreateInfo, Vk.AllocationCallbacks* pAllocator, Vk.Framebuffer* pFramebuffer)
		=> new(Functions.vkCreateFramebuffer(device, pCreateInfo, pAllocator, pFramebuffer), "vkCreateFramebuffer");

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void DestroyFramebuffer(Vk.Device device, Vk.Framebuffer framebuffer, Vk.AllocationCallbacks* pAllocator)
		=> Functions.vkDestroyFramebuffer(device, framebuffer, pAllocator);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public VulkanResult CreateRenderPass(Vk.Device device, Vk.RenderPassCreateInfo* pCreateInfo, Vk.AllocationCallbacks* pAllocator, Vk.RenderPass* pRenderPass)
		=> new(Functions.vkCreateRenderPass(device, pCreateInfo, pAllocator, pRenderPass), "vkCreateRenderPass");

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void DestroyRenderPass(Vk.Device device, Vk.RenderPass renderPass, Vk.AllocationCallbacks* pAllocator)
		=> Functions.vkDestroyRenderPass(device, renderPass, pAllocator);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void GetRenderAreaGranularity(Vk.Device device, Vk.RenderPass renderPass, Vk.Extent2D* pGranularity)
		=> Functions.vkGetRenderAreaGranularity(device, renderPass, pGranularity);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public VulkanResult CreateCommandPool(Vk.Device device, Vk.CommandPoolCreateInfo* pCreateInfo, Vk.AllocationCallbacks* pAllocator, Vk.CommandPool* pCommandPool)
		=> new(Functions.vkCreateCommandPool(device, pCreateInfo, pAllocator, pCommandPool), "vkCreateCommandPool");

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void DestroyCommandPool(Vk.Device device, Vk.CommandPool commandPool, Vk.AllocationCallbacks* pAllocator)
		=> Functions.vkDestroyCommandPool(device, commandPool, pAllocator);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public VulkanResult ResetCommandPool(Vk.Device device, Vk.CommandPool commandPool, Vk.CommandPoolResetFlags flags)
		=> new(Functions.vkResetCommandPool(device, commandPool, flags), "vkResetCommandPool");

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public VulkanResult AllocateCommandBuffers(Vk.Device device, Vk.CommandBufferAllocateInfo* pAllocateInfo, Vk.CommandBuffer* pCommandBuffers)
		=> new(Functions.vkAllocateCommandBuffers(device, pAllocateInfo, pCommandBuffers), "vkAllocateCommandBuffers");

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void FreeCommandBuffers(Vk.Device device, Vk.CommandPool commandPool, uint commandBufferCount, Vk.CommandBuffer* pCommandBuffers)
		=> Functions.vkFreeCommandBuffers(device, commandPool, commandBufferCount, pCommandBuffers);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public VulkanResult CreateSharedSwapchainsKHR(Vk.Device device, uint swapchainCount, Vk.KHR.SwapchainCreateInfo* pCreateInfos, Vk.AllocationCallbacks* pAllocator, Vk.KHR.Swapchain* pSwapchains)
	{
		if (Functions.vkCreateSharedSwapchainsKHR == null) { throw new VVK.FunctionNotLoadedException("vkCreateSharedSwapchainsKHR"); }
		return new(Functions.vkCreateSharedSwapchainsKHR(device, swapchainCount, pCreateInfos, pAllocator, pSwapchains), "vkCreateSharedSwapchainsKHR");
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public VulkanResult CreateSwapchainKHR(Vk.Device device, Vk.KHR.SwapchainCreateInfo* pCreateInfo, Vk.AllocationCallbacks* pAllocator, Vk.KHR.Swapchain* pSwapchain)
	{
		if (Functions.vkCreateSwapchainKHR == null) { throw new VVK.FunctionNotLoadedException("vkCreateSwapchainKHR"); }
		return new(Functions.vkCreateSwapchainKHR(device, pCreateInfo, pAllocator, pSwapchain), "vkCreateSwapchainKHR");
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void DestroySwapchainKHR(Vk.Device device, Vk.KHR.Swapchain swapchain, Vk.AllocationCallbacks* pAllocator)
	{
		if (Functions.vkDestroySwapchainKHR == null) { throw new VVK.FunctionNotLoadedException("vkDestroySwapchainKHR"); }
		Functions.vkDestroySwapchainKHR(device, swapchain, pAllocator);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public VulkanResult GetSwapchainImagesKHR(Vk.Device device, Vk.KHR.Swapchain swapchain, uint* pSwapchainImageCount, Vk.Image* pSwapchainImages)
	{
		if (Functions.vkGetSwapchainImagesKHR == null) { throw new VVK.FunctionNotLoadedException("vkGetSwapchainImagesKHR"); }
		return new(Functions.vkGetSwapchainImagesKHR(device, swapchain, pSwapchainImageCount, pSwapchainImages), "vkGetSwapchainImagesKHR");
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public VulkanResult AcquireNextImageKHR(Vk.Device device, Vk.KHR.Swapchain swapchain, ulong timeout, Vk.Semaphore semaphore, Vk.Fence fence, uint* pImageIndex)
	{
		if (Functions.vkAcquireNextImageKHR == null) { throw new VVK.FunctionNotLoadedException("vkAcquireNextImageKHR"); }
		return new(Functions.vkAcquireNextImageKHR(device, swapchain, timeout, semaphore, fence, pImageIndex), "vkAcquireNextImageKHR");
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public VulkanResult DebugMarkerSetObjectNameEXT(Vk.Device device, Vk.EXT.DebugMarkerObjectNameInfo* pNameInfo)
	{
		if (Functions.vkDebugMarkerSetObjectNameEXT == null) { throw new VVK.FunctionNotLoadedException("vkDebugMarkerSetObjectNameEXT"); }
		return new(Functions.vkDebugMarkerSetObjectNameEXT(device, pNameInfo), "vkDebugMarkerSetObjectNameEXT");
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public VulkanResult DebugMarkerSetObjectTagEXT(Vk.Device device, Vk.EXT.DebugMarkerObjectTagInfo* pTagInfo)
	{
		if (Functions.vkDebugMarkerSetObjectTagEXT == null) { throw new VVK.FunctionNotLoadedException("vkDebugMarkerSetObjectTagEXT"); }
		return new(Functions.vkDebugMarkerSetObjectTagEXT(device, pTagInfo), "vkDebugMarkerSetObjectTagEXT");
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public VulkanResult GetMemoryWin32HandleNV(Vk.Device device, Vk.DeviceMemory memory, Vk.NV.ExternalMemoryHandleTypeFlags handleType, void** pHandle)
	{
		if (Functions.vkGetMemoryWin32HandleNV == null) { throw new VVK.FunctionNotLoadedException("vkGetMemoryWin32HandleNV"); }
		return new(Functions.vkGetMemoryWin32HandleNV(device, memory, handleType, pHandle), "vkGetMemoryWin32HandleNV");
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void GetGeneratedCommandsMemoryRequirementsNV(Vk.Device device, Vk.NV.GeneratedCommandsMemoryRequirementsInfo* pInfo, Vk.MemoryRequirements2* pMemoryRequirements)
	{
		if (Functions.vkGetGeneratedCommandsMemoryRequirementsNV == null) { throw new VVK.FunctionNotLoadedException("vkGetGeneratedCommandsMemoryRequirementsNV"); }
		Functions.vkGetGeneratedCommandsMemoryRequirementsNV(device, pInfo, pMemoryRequirements);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public VulkanResult CreateIndirectCommandsLayoutNV(Vk.Device device, Vk.NV.IndirectCommandsLayoutCreateInfo* pCreateInfo, Vk.AllocationCallbacks* pAllocator, Vk.NV.IndirectCommandsLayout* pIndirectCommandsLayout)
	{
		if (Functions.vkCreateIndirectCommandsLayoutNV == null) { throw new VVK.FunctionNotLoadedException("vkCreateIndirectCommandsLayoutNV"); }
		return new(Functions.vkCreateIndirectCommandsLayoutNV(device, pCreateInfo, pAllocator, pIndirectCommandsLayout), "vkCreateIndirectCommandsLayoutNV");
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void DestroyIndirectCommandsLayoutNV(Vk.Device device, Vk.NV.IndirectCommandsLayout indirectCommandsLayout, Vk.AllocationCallbacks* pAllocator)
	{
		if (Functions.vkDestroyIndirectCommandsLayoutNV == null) { throw new VVK.FunctionNotLoadedException("vkDestroyIndirectCommandsLayoutNV"); }
		Functions.vkDestroyIndirectCommandsLayoutNV(device, indirectCommandsLayout, pAllocator);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void TrimCommandPool(Vk.Device device, Vk.CommandPool commandPool, Vk.CommandPoolTrimFlags flags)
		=> Functions.vkTrimCommandPool(device, commandPool, flags);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void TrimCommandPoolKHR(Vk.Device device, Vk.CommandPool commandPool, Vk.CommandPoolTrimFlags flags)
	{
		if (Functions.vkTrimCommandPoolKHR == null) { throw new VVK.FunctionNotLoadedException("vkTrimCommandPoolKHR"); }
		Functions.vkTrimCommandPoolKHR(device, commandPool, flags);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public VulkanResult GetMemoryWin32HandleKHR(Vk.Device device, Vk.KHR.MemoryGetWin32HandleInfo* pGetWin32HandleInfo, void** pHandle)
	{
		if (Functions.vkGetMemoryWin32HandleKHR == null) { throw new VVK.FunctionNotLoadedException("vkGetMemoryWin32HandleKHR"); }
		return new(Functions.vkGetMemoryWin32HandleKHR(device, pGetWin32HandleInfo, pHandle), "vkGetMemoryWin32HandleKHR");
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public VulkanResult GetMemoryWin32HandlePropertiesKHR(Vk.Device device, Vk.ExternalMemoryHandleTypeFlags handleType, void* handle, Vk.KHR.MemoryWin32HandleProperties* pMemoryWin32HandleProperties)
	{
		if (Functions.vkGetMemoryWin32HandlePropertiesKHR == null) { throw new VVK.FunctionNotLoadedException("vkGetMemoryWin32HandlePropertiesKHR"); }
		return new(Functions.vkGetMemoryWin32HandlePropertiesKHR(device, handleType, handle, pMemoryWin32HandleProperties), "vkGetMemoryWin32HandlePropertiesKHR");
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public VulkanResult GetMemoryFdKHR(Vk.Device device, Vk.KHR.MemoryGetFdInfo* pGetFdInfo, int* pFd)
	{
		if (Functions.vkGetMemoryFdKHR == null) { throw new VVK.FunctionNotLoadedException("vkGetMemoryFdKHR"); }
		return new(Functions.vkGetMemoryFdKHR(device, pGetFdInfo, pFd), "vkGetMemoryFdKHR");
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public VulkanResult GetMemoryFdPropertiesKHR(Vk.Device device, Vk.ExternalMemoryHandleTypeFlags handleType, int fd, Vk.KHR.MemoryFdProperties* pMemoryFdProperties)
	{
		if (Functions.vkGetMemoryFdPropertiesKHR == null) { throw new VVK.FunctionNotLoadedException("vkGetMemoryFdPropertiesKHR"); }
		return new(Functions.vkGetMemoryFdPropertiesKHR(device, handleType, fd, pMemoryFdProperties), "vkGetMemoryFdPropertiesKHR");
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public VulkanResult GetSemaphoreWin32HandleKHR(Vk.Device device, Vk.KHR.SemaphoreGetWin32HandleInfo* pGetWin32HandleInfo, void** pHandle)
	{
		if (Functions.vkGetSemaphoreWin32HandleKHR == null) { throw new VVK.FunctionNotLoadedException("vkGetSemaphoreWin32HandleKHR"); }
		return new(Functions.vkGetSemaphoreWin32HandleKHR(device, pGetWin32HandleInfo, pHandle), "vkGetSemaphoreWin32HandleKHR");
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public VulkanResult ImportSemaphoreWin32HandleKHR(Vk.Device device, Vk.KHR.ImportSemaphoreWin32HandleInfo* pImportSemaphoreWin32HandleInfo)
	{
		if (Functions.vkImportSemaphoreWin32HandleKHR == null) { throw new VVK.FunctionNotLoadedException("vkImportSemaphoreWin32HandleKHR"); }
		return new(Functions.vkImportSemaphoreWin32HandleKHR(device, pImportSemaphoreWin32HandleInfo), "vkImportSemaphoreWin32HandleKHR");
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public VulkanResult GetSemaphoreFdKHR(Vk.Device device, Vk.KHR.SemaphoreGetFdInfo* pGetFdInfo, int* pFd)
	{
		if (Functions.vkGetSemaphoreFdKHR == null) { throw new VVK.FunctionNotLoadedException("vkGetSemaphoreFdKHR"); }
		return new(Functions.vkGetSemaphoreFdKHR(device, pGetFdInfo, pFd), "vkGetSemaphoreFdKHR");
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public VulkanResult ImportSemaphoreFdKHR(Vk.Device device, Vk.KHR.ImportSemaphoreFdInfo* pImportSemaphoreFdInfo)
	{
		if (Functions.vkImportSemaphoreFdKHR == null) { throw new VVK.FunctionNotLoadedException("vkImportSemaphoreFdKHR"); }
		return new(Functions.vkImportSemaphoreFdKHR(device, pImportSemaphoreFdInfo), "vkImportSemaphoreFdKHR");
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public VulkanResult GetFenceWin32HandleKHR(Vk.Device device, Vk.KHR.FenceGetWin32HandleInfo* pGetWin32HandleInfo, void** pHandle)
	{
		if (Functions.vkGetFenceWin32HandleKHR == null) { throw new VVK.FunctionNotLoadedException("vkGetFenceWin32HandleKHR"); }
		return new(Functions.vkGetFenceWin32HandleKHR(device, pGetWin32HandleInfo, pHandle), "vkGetFenceWin32HandleKHR");
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public VulkanResult ImportFenceWin32HandleKHR(Vk.Device device, Vk.KHR.ImportFenceWin32HandleInfo* pImportFenceWin32HandleInfo)
	{
		if (Functions.vkImportFenceWin32HandleKHR == null) { throw new VVK.FunctionNotLoadedException("vkImportFenceWin32HandleKHR"); }
		return new(Functions.vkImportFenceWin32HandleKHR(device, pImportFenceWin32HandleInfo), "vkImportFenceWin32HandleKHR");
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public VulkanResult GetFenceFdKHR(Vk.Device device, Vk.KHR.FenceGetFdInfo* pGetFdInfo, int* pFd)
	{
		if (Functions.vkGetFenceFdKHR == null) { throw new VVK.FunctionNotLoadedException("vkGetFenceFdKHR"); }
		return new(Functions.vkGetFenceFdKHR(device, pGetFdInfo, pFd), "vkGetFenceFdKHR");
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public VulkanResult ImportFenceFdKHR(Vk.Device device, Vk.KHR.ImportFenceFdInfo* pImportFenceFdInfo)
	{
		if (Functions.vkImportFenceFdKHR == null) { throw new VVK.FunctionNotLoadedException("vkImportFenceFdKHR"); }
		return new(Functions.vkImportFenceFdKHR(device, pImportFenceFdInfo), "vkImportFenceFdKHR");
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public VulkanResult DisplayPowerControlEXT(Vk.Device device, Vk.KHR.Display display, Vk.EXT.DisplayPowerInfo* pDisplayPowerInfo)
	{
		if (Functions.vkDisplayPowerControlEXT == null) { throw new VVK.FunctionNotLoadedException("vkDisplayPowerControlEXT"); }
		return new(Functions.vkDisplayPowerControlEXT(device, display, pDisplayPowerInfo), "vkDisplayPowerControlEXT");
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public VulkanResult RegisterDeviceEventEXT(Vk.Device device, Vk.EXT.DeviceEventInfo* pDeviceEventInfo, Vk.AllocationCallbacks* pAllocator, Vk.Fence* pFence)
	{
		if (Functions.vkRegisterDeviceEventEXT == null) { throw new VVK.FunctionNotLoadedException("vkRegisterDeviceEventEXT"); }
		return new(Functions.vkRegisterDeviceEventEXT(device, pDeviceEventInfo, pAllocator, pFence), "vkRegisterDeviceEventEXT");
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public VulkanResult RegisterDisplayEventEXT(Vk.Device device, Vk.KHR.Display display, Vk.EXT.DisplayEventInfo* pDisplayEventInfo, Vk.AllocationCallbacks* pAllocator, Vk.Fence* pFence)
	{
		if (Functions.vkRegisterDisplayEventEXT == null) { throw new VVK.FunctionNotLoadedException("vkRegisterDisplayEventEXT"); }
		return new(Functions.vkRegisterDisplayEventEXT(device, display, pDisplayEventInfo, pAllocator, pFence), "vkRegisterDisplayEventEXT");
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public VulkanResult GetSwapchainCounterEXT(Vk.Device device, Vk.KHR.Swapchain swapchain, Vk.EXT.SurfaceCounterFlags counter, ulong* pCounterValue)
	{
		if (Functions.vkGetSwapchainCounterEXT == null) { throw new VVK.FunctionNotLoadedException("vkGetSwapchainCounterEXT"); }
		return new(Functions.vkGetSwapchainCounterEXT(device, swapchain, counter, pCounterValue), "vkGetSwapchainCounterEXT");
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void GetDeviceGroupPeerMemoryFeatures(Vk.Device device, uint heapIndex, uint localDeviceIndex, uint remoteDeviceIndex, Vk.PeerMemoryFeatureFlags* pPeerMemoryFeatures)
		=> Functions.vkGetDeviceGroupPeerMemoryFeatures(device, heapIndex, localDeviceIndex, remoteDeviceIndex, pPeerMemoryFeatures);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void GetDeviceGroupPeerMemoryFeaturesKHR(Vk.Device device, uint heapIndex, uint localDeviceIndex, uint remoteDeviceIndex, Vk.PeerMemoryFeatureFlags* pPeerMemoryFeatures)
	{
		if (Functions.vkGetDeviceGroupPeerMemoryFeaturesKHR == null) { throw new VVK.FunctionNotLoadedException("vkGetDeviceGroupPeerMemoryFeaturesKHR"); }
		Functions.vkGetDeviceGroupPeerMemoryFeaturesKHR(device, heapIndex, localDeviceIndex, remoteDeviceIndex, pPeerMemoryFeatures);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public VulkanResult BindBufferMemory2(Vk.Device device, uint bindInfoCount, Vk.BindBufferMemoryInfo* pBindInfos)
		=> new(Functions.vkBindBufferMemory2(device, bindInfoCount, pBindInfos), "vkBindBufferMemory2");

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public VulkanResult BindBufferMemory2KHR(Vk.Device device, uint bindInfoCount, Vk.BindBufferMemoryInfo* pBindInfos)
	{
		if (Functions.vkBindBufferMemory2KHR == null) { throw new VVK.FunctionNotLoadedException("vkBindBufferMemory2KHR"); }
		return new(Functions.vkBindBufferMemory2KHR(device, bindInfoCount, pBindInfos), "vkBindBufferMemory2KHR");
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public VulkanResult BindImageMemory2(Vk.Device device, uint bindInfoCount, Vk.BindImageMemoryInfo* pBindInfos)
		=> new(Functions.vkBindImageMemory2(device, bindInfoCount, pBindInfos), "vkBindImageMemory2");

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public VulkanResult BindImageMemory2KHR(Vk.Device device, uint bindInfoCount, Vk.BindImageMemoryInfo* pBindInfos)
	{
		if (Functions.vkBindImageMemory2KHR == null) { throw new VVK.FunctionNotLoadedException("vkBindImageMemory2KHR"); }
		return new(Functions.vkBindImageMemory2KHR(device, bindInfoCount, pBindInfos), "vkBindImageMemory2KHR");
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public VulkanResult GetDeviceGroupPresentCapabilitiesKHR(Vk.Device device, Vk.KHR.DeviceGroupPresentCapabilities* pDeviceGroupPresentCapabilities)
	{
		if (Functions.vkGetDeviceGroupPresentCapabilitiesKHR == null) { throw new VVK.FunctionNotLoadedException("vkGetDeviceGroupPresentCapabilitiesKHR"); }
		return new(Functions.vkGetDeviceGroupPresentCapabilitiesKHR(device, pDeviceGroupPresentCapabilities), "vkGetDeviceGroupPresentCapabilitiesKHR");
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public VulkanResult GetDeviceGroupSurfacePresentModesKHR(Vk.Device device, Vk.KHR.Surface surface, Vk.KHR.DeviceGroupPresentModeFlags* pModes)
	{
		if (Functions.vkGetDeviceGroupSurfacePresentModesKHR == null) { throw new VVK.FunctionNotLoadedException("vkGetDeviceGroupSurfacePresentModesKHR"); }
		return new(Functions.vkGetDeviceGroupSurfacePresentModesKHR(device, surface, pModes), "vkGetDeviceGroupSurfacePresentModesKHR");
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public VulkanResult AcquireNextImage2KHR(Vk.Device device, Vk.KHR.AcquireNextImageInfo* pAcquireInfo, uint* pImageIndex)
	{
		if (Functions.vkAcquireNextImage2KHR == null) { throw new VVK.FunctionNotLoadedException("vkAcquireNextImage2KHR"); }
		return new(Functions.vkAcquireNextImage2KHR(device, pAcquireInfo, pImageIndex), "vkAcquireNextImage2KHR");
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public VulkanResult CreateDescriptorUpdateTemplate(Vk.Device device, Vk.DescriptorUpdateTemplateCreateInfo* pCreateInfo, Vk.AllocationCallbacks* pAllocator, Vk.DescriptorUpdateTemplate* pDescriptorUpdateTemplate)
		=> new(Functions.vkCreateDescriptorUpdateTemplate(device, pCreateInfo, pAllocator, pDescriptorUpdateTemplate), "vkCreateDescriptorUpdateTemplate");

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public VulkanResult CreateDescriptorUpdateTemplateKHR(Vk.Device device, Vk.DescriptorUpdateTemplateCreateInfo* pCreateInfo, Vk.AllocationCallbacks* pAllocator, Vk.DescriptorUpdateTemplate* pDescriptorUpdateTemplate)
	{
		if (Functions.vkCreateDescriptorUpdateTemplateKHR == null) { throw new VVK.FunctionNotLoadedException("vkCreateDescriptorUpdateTemplateKHR"); }
		return new(Functions.vkCreateDescriptorUpdateTemplateKHR(device, pCreateInfo, pAllocator, pDescriptorUpdateTemplate), "vkCreateDescriptorUpdateTemplateKHR");
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void DestroyDescriptorUpdateTemplate(Vk.Device device, Vk.DescriptorUpdateTemplate descriptorUpdateTemplate, Vk.AllocationCallbacks* pAllocator)
		=> Functions.vkDestroyDescriptorUpdateTemplate(device, descriptorUpdateTemplate, pAllocator);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void DestroyDescriptorUpdateTemplateKHR(Vk.Device device, Vk.DescriptorUpdateTemplate descriptorUpdateTemplate, Vk.AllocationCallbacks* pAllocator)
	{
		if (Functions.vkDestroyDescriptorUpdateTemplateKHR == null) { throw new VVK.FunctionNotLoadedException("vkDestroyDescriptorUpdateTemplateKHR"); }
		Functions.vkDestroyDescriptorUpdateTemplateKHR(device, descriptorUpdateTemplate, pAllocator);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void UpdateDescriptorSetWithTemplate(Vk.Device device, Vk.DescriptorSet descriptorSet, Vk.DescriptorUpdateTemplate descriptorUpdateTemplate, void* pData)
		=> Functions.vkUpdateDescriptorSetWithTemplate(device, descriptorSet, descriptorUpdateTemplate, pData);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void UpdateDescriptorSetWithTemplateKHR(Vk.Device device, Vk.DescriptorSet descriptorSet, Vk.DescriptorUpdateTemplate descriptorUpdateTemplate, void* pData)
	{
		if (Functions.vkUpdateDescriptorSetWithTemplateKHR == null) { throw new VVK.FunctionNotLoadedException("vkUpdateDescriptorSetWithTemplateKHR"); }
		Functions.vkUpdateDescriptorSetWithTemplateKHR(device, descriptorSet, descriptorUpdateTemplate, pData);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void SetHdrMetadataEXT(Vk.Device device, uint swapchainCount, Vk.KHR.Swapchain* pSwapchains, Vk.EXT.HdrMetadata* pMetadata)
	{
		if (Functions.vkSetHdrMetadataEXT == null) { throw new VVK.FunctionNotLoadedException("vkSetHdrMetadataEXT"); }
		Functions.vkSetHdrMetadataEXT(device, swapchainCount, pSwapchains, pMetadata);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public VulkanResult GetSwapchainStatusKHR(Vk.Device device, Vk.KHR.Swapchain swapchain)
	{
		if (Functions.vkGetSwapchainStatusKHR == null) { throw new VVK.FunctionNotLoadedException("vkGetSwapchainStatusKHR"); }
		return new(Functions.vkGetSwapchainStatusKHR(device, swapchain), "vkGetSwapchainStatusKHR");
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public VulkanResult GetRefreshCycleDurationGOOGLE(Vk.Device device, Vk.KHR.Swapchain swapchain, Vk.GOOGLE.RefreshCycleDuration* pDisplayTimingProperties)
	{
		if (Functions.vkGetRefreshCycleDurationGOOGLE == null) { throw new VVK.FunctionNotLoadedException("vkGetRefreshCycleDurationGOOGLE"); }
		return new(Functions.vkGetRefreshCycleDurationGOOGLE(device, swapchain, pDisplayTimingProperties), "vkGetRefreshCycleDurationGOOGLE");
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public VulkanResult GetPastPresentationTimingGOOGLE(Vk.Device device, Vk.KHR.Swapchain swapchain, uint* pPresentationTimingCount, Vk.GOOGLE.PastPresentationTiming* pPresentationTimings)
	{
		if (Functions.vkGetPastPresentationTimingGOOGLE == null) { throw new VVK.FunctionNotLoadedException("vkGetPastPresentationTimingGOOGLE"); }
		return new(Functions.vkGetPastPresentationTimingGOOGLE(device, swapchain, pPresentationTimingCount, pPresentationTimings), "vkGetPastPresentationTimingGOOGLE");
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void GetBufferMemoryRequirements2(Vk.Device device, Vk.BufferMemoryRequirementsInfo2* pInfo, Vk.MemoryRequirements2* pMemoryRequirements)
		=> Functions.vkGetBufferMemoryRequirements2(device, pInfo, pMemoryRequirements);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void GetBufferMemoryRequirements2KHR(Vk.Device device, Vk.BufferMemoryRequirementsInfo2* pInfo, Vk.MemoryRequirements2* pMemoryRequirements)
	{
		if (Functions.vkGetBufferMemoryRequirements2KHR == null) { throw new VVK.FunctionNotLoadedException("vkGetBufferMemoryRequirements2KHR"); }
		Functions.vkGetBufferMemoryRequirements2KHR(device, pInfo, pMemoryRequirements);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void GetImageMemoryRequirements2(Vk.Device device, Vk.ImageMemoryRequirementsInfo2* pInfo, Vk.MemoryRequirements2* pMemoryRequirements)
		=> Functions.vkGetImageMemoryRequirements2(device, pInfo, pMemoryRequirements);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void GetImageMemoryRequirements2KHR(Vk.Device device, Vk.ImageMemoryRequirementsInfo2* pInfo, Vk.MemoryRequirements2* pMemoryRequirements)
	{
		if (Functions.vkGetImageMemoryRequirements2KHR == null) { throw new VVK.FunctionNotLoadedException("vkGetImageMemoryRequirements2KHR"); }
		Functions.vkGetImageMemoryRequirements2KHR(device, pInfo, pMemoryRequirements);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void GetImageSparseMemoryRequirements2(Vk.Device device, Vk.ImageSparseMemoryRequirementsInfo2* pInfo, uint* pSparseMemoryRequirementCount, Vk.SparseImageMemoryRequirements2* pSparseMemoryRequirements)
		=> Functions.vkGetImageSparseMemoryRequirements2(device, pInfo, pSparseMemoryRequirementCount, pSparseMemoryRequirements);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void GetImageSparseMemoryRequirements2KHR(Vk.Device device, Vk.ImageSparseMemoryRequirementsInfo2* pInfo, uint* pSparseMemoryRequirementCount, Vk.SparseImageMemoryRequirements2* pSparseMemoryRequirements)
	{
		if (Functions.vkGetImageSparseMemoryRequirements2KHR == null) { throw new VVK.FunctionNotLoadedException("vkGetImageSparseMemoryRequirements2KHR"); }
		Functions.vkGetImageSparseMemoryRequirements2KHR(device, pInfo, pSparseMemoryRequirementCount, pSparseMemoryRequirements);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public VulkanResult CreateSamplerYcbcrConversion(Vk.Device device, Vk.SamplerYcbcrConversionCreateInfo* pCreateInfo, Vk.AllocationCallbacks* pAllocator, Vk.SamplerYcbcrConversion* pYcbcrConversion)
		=> new(Functions.vkCreateSamplerYcbcrConversion(device, pCreateInfo, pAllocator, pYcbcrConversion), "vkCreateSamplerYcbcrConversion");

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public VulkanResult CreateSamplerYcbcrConversionKHR(Vk.Device device, Vk.SamplerYcbcrConversionCreateInfo* pCreateInfo, Vk.AllocationCallbacks* pAllocator, Vk.SamplerYcbcrConversion* pYcbcrConversion)
	{
		if (Functions.vkCreateSamplerYcbcrConversionKHR == null) { throw new VVK.FunctionNotLoadedException("vkCreateSamplerYcbcrConversionKHR"); }
		return new(Functions.vkCreateSamplerYcbcrConversionKHR(device, pCreateInfo, pAllocator, pYcbcrConversion), "vkCreateSamplerYcbcrConversionKHR");
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void DestroySamplerYcbcrConversion(Vk.Device device, Vk.SamplerYcbcrConversion ycbcrConversion, Vk.AllocationCallbacks* pAllocator)
		=> Functions.vkDestroySamplerYcbcrConversion(device, ycbcrConversion, pAllocator);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void DestroySamplerYcbcrConversionKHR(Vk.Device device, Vk.SamplerYcbcrConversion ycbcrConversion, Vk.AllocationCallbacks* pAllocator)
	{
		if (Functions.vkDestroySamplerYcbcrConversionKHR == null) { throw new VVK.FunctionNotLoadedException("vkDestroySamplerYcbcrConversionKHR"); }
		Functions.vkDestroySamplerYcbcrConversionKHR(device, ycbcrConversion, pAllocator);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void GetDeviceQueue2(Vk.Device device, Vk.DeviceQueueInfo2* pQueueInfo, Vk.Queue* pQueue)
		=> Functions.vkGetDeviceQueue2(device, pQueueInfo, pQueue);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public VulkanResult CreateValidationCacheEXT(Vk.Device device, Vk.EXT.ValidationCacheCreateInfo* pCreateInfo, Vk.AllocationCallbacks* pAllocator, Vk.EXT.ValidationCache* pValidationCache)
	{
		if (Functions.vkCreateValidationCacheEXT == null) { throw new VVK.FunctionNotLoadedException("vkCreateValidationCacheEXT"); }
		return new(Functions.vkCreateValidationCacheEXT(device, pCreateInfo, pAllocator, pValidationCache), "vkCreateValidationCacheEXT");
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void DestroyValidationCacheEXT(Vk.Device device, Vk.EXT.ValidationCache validationCache, Vk.AllocationCallbacks* pAllocator)
	{
		if (Functions.vkDestroyValidationCacheEXT == null) { throw new VVK.FunctionNotLoadedException("vkDestroyValidationCacheEXT"); }
		Functions.vkDestroyValidationCacheEXT(device, validationCache, pAllocator);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public VulkanResult GetValidationCacheDataEXT(Vk.Device device, Vk.EXT.ValidationCache validationCache, ulong* pDataSize, void* pData)
	{
		if (Functions.vkGetValidationCacheDataEXT == null) { throw new VVK.FunctionNotLoadedException("vkGetValidationCacheDataEXT"); }
		return new(Functions.vkGetValidationCacheDataEXT(device, validationCache, pDataSize, pData), "vkGetValidationCacheDataEXT");
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public VulkanResult MergeValidationCachesEXT(Vk.Device device, Vk.EXT.ValidationCache dstCache, uint srcCacheCount, Vk.EXT.ValidationCache* pSrcCaches)
	{
		if (Functions.vkMergeValidationCachesEXT == null) { throw new VVK.FunctionNotLoadedException("vkMergeValidationCachesEXT"); }
		return new(Functions.vkMergeValidationCachesEXT(device, dstCache, srcCacheCount, pSrcCaches), "vkMergeValidationCachesEXT");
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void GetDescriptorSetLayoutSupport(Vk.Device device, Vk.DescriptorSetLayoutCreateInfo* pCreateInfo, Vk.DescriptorSetLayoutSupport* pSupport)
		=> Functions.vkGetDescriptorSetLayoutSupport(device, pCreateInfo, pSupport);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void GetDescriptorSetLayoutSupportKHR(Vk.Device device, Vk.DescriptorSetLayoutCreateInfo* pCreateInfo, Vk.DescriptorSetLayoutSupport* pSupport)
	{
		if (Functions.vkGetDescriptorSetLayoutSupportKHR == null) { throw new VVK.FunctionNotLoadedException("vkGetDescriptorSetLayoutSupportKHR"); }
		Functions.vkGetDescriptorSetLayoutSupportKHR(device, pCreateInfo, pSupport);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public VulkanResult GetSwapchainGrallocUsageANDROID(Vk.Device device, Vk.Format format, Vk.ImageUsageFlags imageUsage, int* grallocUsage)
	{
		if (Functions.vkGetSwapchainGrallocUsageANDROID == null) { throw new VVK.FunctionNotLoadedException("vkGetSwapchainGrallocUsageANDROID"); }
		return new(Functions.vkGetSwapchainGrallocUsageANDROID(device, format, imageUsage, grallocUsage), "vkGetSwapchainGrallocUsageANDROID");
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public VulkanResult GetSwapchainGrallocUsage2ANDROID(Vk.Device device, Vk.Format format, Vk.ImageUsageFlags imageUsage, Vk.ANDROID.SwapchainImageUsageFlags swapchainImageUsage, ulong* grallocConsumerUsage, ulong* grallocProducerUsage)
	{
		if (Functions.vkGetSwapchainGrallocUsage2ANDROID == null) { throw new VVK.FunctionNotLoadedException("vkGetSwapchainGrallocUsage2ANDROID"); }
		return new(Functions.vkGetSwapchainGrallocUsage2ANDROID(device, format, imageUsage, swapchainImageUsage, grallocConsumerUsage, grallocProducerUsage), "vkGetSwapchainGrallocUsage2ANDROID");
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public VulkanResult AcquireImageANDROID(Vk.Device device, Vk.Image image, int nativeFenceFd, Vk.Semaphore semaphore, Vk.Fence fence)
	{
		if (Functions.vkAcquireImageANDROID == null) { throw new VVK.FunctionNotLoadedException("vkAcquireImageANDROID"); }
		return new(Functions.vkAcquireImageANDROID(device, image, nativeFenceFd, semaphore, fence), "vkAcquireImageANDROID");
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public VulkanResult GetShaderInfoAMD(Vk.Device device, Vk.Pipeline pipeline, Vk.ShaderStageFlags shaderStage, Vk.AMD.ShaderInfoType infoType, ulong* pInfoSize, void* pInfo)
	{
		if (Functions.vkGetShaderInfoAMD == null) { throw new VVK.FunctionNotLoadedException("vkGetShaderInfoAMD"); }
		return new(Functions.vkGetShaderInfoAMD(device, pipeline, shaderStage, infoType, pInfoSize, pInfo), "vkGetShaderInfoAMD");
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void SetLocalDimmingAMD(Vk.Device device, Vk.KHR.Swapchain swapChain, Vk.Bool32 localDimmingEnable)
	{
		if (Functions.vkSetLocalDimmingAMD == null) { throw new VVK.FunctionNotLoadedException("vkSetLocalDimmingAMD"); }
		Functions.vkSetLocalDimmingAMD(device, swapChain, localDimmingEnable);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public VulkanResult GetCalibratedTimestampsEXT(Vk.Device device, uint timestampCount, Vk.EXT.CalibratedTimestampInfo* pTimestampInfos, ulong* pTimestamps, ulong* pMaxDeviation)
	{
		if (Functions.vkGetCalibratedTimestampsEXT == null) { throw new VVK.FunctionNotLoadedException("vkGetCalibratedTimestampsEXT"); }
		return new(Functions.vkGetCalibratedTimestampsEXT(device, timestampCount, pTimestampInfos, pTimestamps, pMaxDeviation), "vkGetCalibratedTimestampsEXT");
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public VulkanResult SetDebugUtilsObjectNameEXT(Vk.Device device, Vk.EXT.DebugUtilsObjectNameInfo* pNameInfo)
	{
		if (Functions.vkSetDebugUtilsObjectNameEXT == null) { throw new VVK.FunctionNotLoadedException("vkSetDebugUtilsObjectNameEXT"); }
		return new(Functions.vkSetDebugUtilsObjectNameEXT(device, pNameInfo), "vkSetDebugUtilsObjectNameEXT");
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public VulkanResult SetDebugUtilsObjectTagEXT(Vk.Device device, Vk.EXT.DebugUtilsObjectTagInfo* pTagInfo)
	{
		if (Functions.vkSetDebugUtilsObjectTagEXT == null) { throw new VVK.FunctionNotLoadedException("vkSetDebugUtilsObjectTagEXT"); }
		return new(Functions.vkSetDebugUtilsObjectTagEXT(device, pTagInfo), "vkSetDebugUtilsObjectTagEXT");
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public VulkanResult GetMemoryHostPointerPropertiesEXT(Vk.Device device, Vk.ExternalMemoryHandleTypeFlags handleType, void* pHostPointer, Vk.EXT.MemoryHostPointerProperties* pMemoryHostPointerProperties)
	{
		if (Functions.vkGetMemoryHostPointerPropertiesEXT == null) { throw new VVK.FunctionNotLoadedException("vkGetMemoryHostPointerPropertiesEXT"); }
		return new(Functions.vkGetMemoryHostPointerPropertiesEXT(device, handleType, pHostPointer, pMemoryHostPointerProperties), "vkGetMemoryHostPointerPropertiesEXT");
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public VulkanResult CreateRenderPass2(Vk.Device device, Vk.RenderPassCreateInfo2* pCreateInfo, Vk.AllocationCallbacks* pAllocator, Vk.RenderPass* pRenderPass)
		=> new(Functions.vkCreateRenderPass2(device, pCreateInfo, pAllocator, pRenderPass), "vkCreateRenderPass2");

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public VulkanResult CreateRenderPass2KHR(Vk.Device device, Vk.RenderPassCreateInfo2* pCreateInfo, Vk.AllocationCallbacks* pAllocator, Vk.RenderPass* pRenderPass)
	{
		if (Functions.vkCreateRenderPass2KHR == null) { throw new VVK.FunctionNotLoadedException("vkCreateRenderPass2KHR"); }
		return new(Functions.vkCreateRenderPass2KHR(device, pCreateInfo, pAllocator, pRenderPass), "vkCreateRenderPass2KHR");
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public VulkanResult GetSemaphoreCounterValue(Vk.Device device, Vk.Semaphore semaphore, ulong* pValue)
		=> new(Functions.vkGetSemaphoreCounterValue(device, semaphore, pValue), "vkGetSemaphoreCounterValue");

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public VulkanResult GetSemaphoreCounterValueKHR(Vk.Device device, Vk.Semaphore semaphore, ulong* pValue)
	{
		if (Functions.vkGetSemaphoreCounterValueKHR == null) { throw new VVK.FunctionNotLoadedException("vkGetSemaphoreCounterValueKHR"); }
		return new(Functions.vkGetSemaphoreCounterValueKHR(device, semaphore, pValue), "vkGetSemaphoreCounterValueKHR");
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public VulkanResult WaitSemaphores(Vk.Device device, Vk.SemaphoreWaitInfo* pWaitInfo, ulong timeout)
		=> new(Functions.vkWaitSemaphores(device, pWaitInfo, timeout), "vkWaitSemaphores");

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public VulkanResult WaitSemaphoresKHR(Vk.Device device, Vk.SemaphoreWaitInfo* pWaitInfo, ulong timeout)
	{
		if (Functions.vkWaitSemaphoresKHR == null) { throw new VVK.FunctionNotLoadedException("vkWaitSemaphoresKHR"); }
		return new(Functions.vkWaitSemaphoresKHR(device, pWaitInfo, timeout), "vkWaitSemaphoresKHR");
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public VulkanResult SignalSemaphore(Vk.Device device, Vk.SemaphoreSignalInfo* pSignalInfo)
		=> new(Functions.vkSignalSemaphore(device, pSignalInfo), "vkSignalSemaphore");

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public VulkanResult SignalSemaphoreKHR(Vk.Device device, Vk.SemaphoreSignalInfo* pSignalInfo)
	{
		if (Functions.vkSignalSemaphoreKHR == null) { throw new VVK.FunctionNotLoadedException("vkSignalSemaphoreKHR"); }
		return new(Functions.vkSignalSemaphoreKHR(device, pSignalInfo), "vkSignalSemaphoreKHR");
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public VulkanResult GetAndroidHardwareBufferPropertiesANDROID(Vk.Device device, void* buffer, Vk.ANDROID.AndroidHardwareBufferProperties* pProperties)
	{
		if (Functions.vkGetAndroidHardwareBufferPropertiesANDROID == null) { throw new VVK.FunctionNotLoadedException("vkGetAndroidHardwareBufferPropertiesANDROID"); }
		return new(Functions.vkGetAndroidHardwareBufferPropertiesANDROID(device, buffer, pProperties), "vkGetAndroidHardwareBufferPropertiesANDROID");
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public VulkanResult GetMemoryAndroidHardwareBufferANDROID(Vk.Device device, Vk.ANDROID.MemoryGetAndroidHardwareBufferInfo* pInfo, void** pBuffer)
	{
		if (Functions.vkGetMemoryAndroidHardwareBufferANDROID == null) { throw new VVK.FunctionNotLoadedException("vkGetMemoryAndroidHardwareBufferANDROID"); }
		return new(Functions.vkGetMemoryAndroidHardwareBufferANDROID(device, pInfo, pBuffer), "vkGetMemoryAndroidHardwareBufferANDROID");
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public VulkanResult CompileDeferredNV(Vk.Device device, Vk.Pipeline pipeline, uint shader)
	{
		if (Functions.vkCompileDeferredNV == null) { throw new VVK.FunctionNotLoadedException("vkCompileDeferredNV"); }
		return new(Functions.vkCompileDeferredNV(device, pipeline, shader), "vkCompileDeferredNV");
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public VulkanResult CreateAccelerationStructureNV(Vk.Device device, Vk.NV.AccelerationStructureCreateInfo* pCreateInfo, Vk.AllocationCallbacks* pAllocator, Vk.NV.AccelerationStructure* pAccelerationStructure)
	{
		if (Functions.vkCreateAccelerationStructureNV == null) { throw new VVK.FunctionNotLoadedException("vkCreateAccelerationStructureNV"); }
		return new(Functions.vkCreateAccelerationStructureNV(device, pCreateInfo, pAllocator, pAccelerationStructure), "vkCreateAccelerationStructureNV");
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void DestroyAccelerationStructureKHR(Vk.Device device, Vk.KHR.AccelerationStructure accelerationStructure, Vk.AllocationCallbacks* pAllocator)
	{
		if (Functions.vkDestroyAccelerationStructureKHR == null) { throw new VVK.FunctionNotLoadedException("vkDestroyAccelerationStructureKHR"); }
		Functions.vkDestroyAccelerationStructureKHR(device, accelerationStructure, pAllocator);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void DestroyAccelerationStructureNV(Vk.Device device, Vk.KHR.AccelerationStructure accelerationStructure, Vk.AllocationCallbacks* pAllocator)
	{
		if (Functions.vkDestroyAccelerationStructureNV == null) { throw new VVK.FunctionNotLoadedException("vkDestroyAccelerationStructureNV"); }
		Functions.vkDestroyAccelerationStructureNV(device, accelerationStructure, pAllocator);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void GetAccelerationStructureMemoryRequirementsKHR(Vk.Device device, Vk.KHR.AccelerationStructureMemoryRequirementsInfo* pInfo, Vk.MemoryRequirements2* pMemoryRequirements)
	{
		if (Functions.vkGetAccelerationStructureMemoryRequirementsKHR == null) { throw new VVK.FunctionNotLoadedException("vkGetAccelerationStructureMemoryRequirementsKHR"); }
		Functions.vkGetAccelerationStructureMemoryRequirementsKHR(device, pInfo, pMemoryRequirements);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void GetAccelerationStructureMemoryRequirementsNV(Vk.Device device, Vk.NV.AccelerationStructureMemoryRequirementsInfo* pInfo, Vk.KHR.MemoryRequirements2* pMemoryRequirements)
	{
		if (Functions.vkGetAccelerationStructureMemoryRequirementsNV == null) { throw new VVK.FunctionNotLoadedException("vkGetAccelerationStructureMemoryRequirementsNV"); }
		Functions.vkGetAccelerationStructureMemoryRequirementsNV(device, pInfo, pMemoryRequirements);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public VulkanResult BindAccelerationStructureMemoryKHR(Vk.Device device, uint bindInfoCount, Vk.KHR.BindAccelerationStructureMemoryInfo* pBindInfos)
	{
		if (Functions.vkBindAccelerationStructureMemoryKHR == null) { throw new VVK.FunctionNotLoadedException("vkBindAccelerationStructureMemoryKHR"); }
		return new(Functions.vkBindAccelerationStructureMemoryKHR(device, bindInfoCount, pBindInfos), "vkBindAccelerationStructureMemoryKHR");
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public VulkanResult BindAccelerationStructureMemoryNV(Vk.Device device, uint bindInfoCount, Vk.KHR.BindAccelerationStructureMemoryInfo* pBindInfos)
	{
		if (Functions.vkBindAccelerationStructureMemoryNV == null) { throw new VVK.FunctionNotLoadedException("vkBindAccelerationStructureMemoryNV"); }
		return new(Functions.vkBindAccelerationStructureMemoryNV(device, bindInfoCount, pBindInfos), "vkBindAccelerationStructureMemoryNV");
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public VulkanResult CopyAccelerationStructureKHR(Vk.Device device, Vk.KHR.CopyAccelerationStructureInfo* pInfo)
	{
		if (Functions.vkCopyAccelerationStructureKHR == null) { throw new VVK.FunctionNotLoadedException("vkCopyAccelerationStructureKHR"); }
		return new(Functions.vkCopyAccelerationStructureKHR(device, pInfo), "vkCopyAccelerationStructureKHR");
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public VulkanResult CopyAccelerationStructureToMemoryKHR(Vk.Device device, Vk.KHR.CopyAccelerationStructureToMemoryInfo* pInfo)
	{
		if (Functions.vkCopyAccelerationStructureToMemoryKHR == null) { throw new VVK.FunctionNotLoadedException("vkCopyAccelerationStructureToMemoryKHR"); }
		return new(Functions.vkCopyAccelerationStructureToMemoryKHR(device, pInfo), "vkCopyAccelerationStructureToMemoryKHR");
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public VulkanResult CopyMemoryToAccelerationStructureKHR(Vk.Device device, Vk.KHR.CopyMemoryToAccelerationStructureInfo* pInfo)
	{
		if (Functions.vkCopyMemoryToAccelerationStructureKHR == null) { throw new VVK.FunctionNotLoadedException("vkCopyMemoryToAccelerationStructureKHR"); }
		return new(Functions.vkCopyMemoryToAccelerationStructureKHR(device, pInfo), "vkCopyMemoryToAccelerationStructureKHR");
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public VulkanResult WriteAccelerationStructuresPropertiesKHR(Vk.Device device, uint accelerationStructureCount, Vk.KHR.AccelerationStructure* pAccelerationStructures, Vk.QueryType queryType, ulong dataSize, void* pData, ulong stride)
	{
		if (Functions.vkWriteAccelerationStructuresPropertiesKHR == null) { throw new VVK.FunctionNotLoadedException("vkWriteAccelerationStructuresPropertiesKHR"); }
		return new(Functions.vkWriteAccelerationStructuresPropertiesKHR(device, accelerationStructureCount, pAccelerationStructures, queryType, dataSize, pData, stride), "vkWriteAccelerationStructuresPropertiesKHR");
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public VulkanResult GetRayTracingShaderGroupHandlesKHR(Vk.Device device, Vk.Pipeline pipeline, uint firstGroup, uint groupCount, ulong dataSize, void* pData)
	{
		if (Functions.vkGetRayTracingShaderGroupHandlesKHR == null) { throw new VVK.FunctionNotLoadedException("vkGetRayTracingShaderGroupHandlesKHR"); }
		return new(Functions.vkGetRayTracingShaderGroupHandlesKHR(device, pipeline, firstGroup, groupCount, dataSize, pData), "vkGetRayTracingShaderGroupHandlesKHR");
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public VulkanResult GetRayTracingShaderGroupHandlesNV(Vk.Device device, Vk.Pipeline pipeline, uint firstGroup, uint groupCount, ulong dataSize, void* pData)
	{
		if (Functions.vkGetRayTracingShaderGroupHandlesNV == null) { throw new VVK.FunctionNotLoadedException("vkGetRayTracingShaderGroupHandlesNV"); }
		return new(Functions.vkGetRayTracingShaderGroupHandlesNV(device, pipeline, firstGroup, groupCount, dataSize, pData), "vkGetRayTracingShaderGroupHandlesNV");
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public VulkanResult GetRayTracingCaptureReplayShaderGroupHandlesKHR(Vk.Device device, Vk.Pipeline pipeline, uint firstGroup, uint groupCount, ulong dataSize, void* pData)
	{
		if (Functions.vkGetRayTracingCaptureReplayShaderGroupHandlesKHR == null) { throw new VVK.FunctionNotLoadedException("vkGetRayTracingCaptureReplayShaderGroupHandlesKHR"); }
		return new(Functions.vkGetRayTracingCaptureReplayShaderGroupHandlesKHR(device, pipeline, firstGroup, groupCount, dataSize, pData), "vkGetRayTracingCaptureReplayShaderGroupHandlesKHR");
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public VulkanResult GetAccelerationStructureHandleNV(Vk.Device device, Vk.KHR.AccelerationStructure accelerationStructure, ulong dataSize, void* pData)
	{
		if (Functions.vkGetAccelerationStructureHandleNV == null) { throw new VVK.FunctionNotLoadedException("vkGetAccelerationStructureHandleNV"); }
		return new(Functions.vkGetAccelerationStructureHandleNV(device, accelerationStructure, dataSize, pData), "vkGetAccelerationStructureHandleNV");
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public VulkanResult CreateRayTracingPipelinesNV(Vk.Device device, Vk.PipelineCache pipelineCache, uint createInfoCount, Vk.NV.RayTracingPipelineCreateInfo* pCreateInfos, Vk.AllocationCallbacks* pAllocator, Vk.Pipeline* pPipelines)
	{
		if (Functions.vkCreateRayTracingPipelinesNV == null) { throw new VVK.FunctionNotLoadedException("vkCreateRayTracingPipelinesNV"); }
		return new(Functions.vkCreateRayTracingPipelinesNV(device, pipelineCache, createInfoCount, pCreateInfos, pAllocator, pPipelines), "vkCreateRayTracingPipelinesNV");
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public VulkanResult CreateRayTracingPipelinesKHR(Vk.Device device, Vk.PipelineCache pipelineCache, uint createInfoCount, Vk.KHR.RayTracingPipelineCreateInfo* pCreateInfos, Vk.AllocationCallbacks* pAllocator, Vk.Pipeline* pPipelines)
	{
		if (Functions.vkCreateRayTracingPipelinesKHR == null) { throw new VVK.FunctionNotLoadedException("vkCreateRayTracingPipelinesKHR"); }
		return new(Functions.vkCreateRayTracingPipelinesKHR(device, pipelineCache, createInfoCount, pCreateInfos, pAllocator, pPipelines), "vkCreateRayTracingPipelinesKHR");
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public VulkanResult GetDeviceAccelerationStructureCompatibilityKHR(Vk.Device device, Vk.KHR.AccelerationStructureVersion* version)
	{
		if (Functions.vkGetDeviceAccelerationStructureCompatibilityKHR == null) { throw new VVK.FunctionNotLoadedException("vkGetDeviceAccelerationStructureCompatibilityKHR"); }
		return new(Functions.vkGetDeviceAccelerationStructureCompatibilityKHR(device, version), "vkGetDeviceAccelerationStructureCompatibilityKHR");
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public uint GetImageViewHandleNVX(Vk.Device device, Vk.NVX.ImageViewHandleInfo* pInfo)
	{
		if (Functions.vkGetImageViewHandleNVX == null) { throw new VVK.FunctionNotLoadedException("vkGetImageViewHandleNVX"); }
		return Functions.vkGetImageViewHandleNVX(device, pInfo);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public VulkanResult GetImageViewAddressNVX(Vk.Device device, Vk.ImageView imageView, Vk.NVX.ImageViewAddressProperties* pProperties)
	{
		if (Functions.vkGetImageViewAddressNVX == null) { throw new VVK.FunctionNotLoadedException("vkGetImageViewAddressNVX"); }
		return new(Functions.vkGetImageViewAddressNVX(device, imageView, pProperties), "vkGetImageViewAddressNVX");
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public VulkanResult GetDeviceGroupSurfacePresentModes2EXT(Vk.Device device, Vk.KHR.PhysicalDeviceSurfaceInfo2* pSurfaceInfo, Vk.KHR.DeviceGroupPresentModeFlags* pModes)
	{
		if (Functions.vkGetDeviceGroupSurfacePresentModes2EXT == null) { throw new VVK.FunctionNotLoadedException("vkGetDeviceGroupSurfacePresentModes2EXT"); }
		return new(Functions.vkGetDeviceGroupSurfacePresentModes2EXT(device, pSurfaceInfo, pModes), "vkGetDeviceGroupSurfacePresentModes2EXT");
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public VulkanResult AcquireFullScreenExclusiveModeEXT(Vk.Device device, Vk.KHR.Swapchain swapchain)
	{
		if (Functions.vkAcquireFullScreenExclusiveModeEXT == null) { throw new VVK.FunctionNotLoadedException("vkAcquireFullScreenExclusiveModeEXT"); }
		return new(Functions.vkAcquireFullScreenExclusiveModeEXT(device, swapchain), "vkAcquireFullScreenExclusiveModeEXT");
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public VulkanResult ReleaseFullScreenExclusiveModeEXT(Vk.Device device, Vk.KHR.Swapchain swapchain)
	{
		if (Functions.vkReleaseFullScreenExclusiveModeEXT == null) { throw new VVK.FunctionNotLoadedException("vkReleaseFullScreenExclusiveModeEXT"); }
		return new(Functions.vkReleaseFullScreenExclusiveModeEXT(device, swapchain), "vkReleaseFullScreenExclusiveModeEXT");
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public VulkanResult AcquireProfilingLockKHR(Vk.Device device, Vk.KHR.AcquireProfilingLockInfo* pInfo)
	{
		if (Functions.vkAcquireProfilingLockKHR == null) { throw new VVK.FunctionNotLoadedException("vkAcquireProfilingLockKHR"); }
		return new(Functions.vkAcquireProfilingLockKHR(device, pInfo), "vkAcquireProfilingLockKHR");
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void ReleaseProfilingLockKHR(Vk.Device device)
	{
		if (Functions.vkReleaseProfilingLockKHR == null) { throw new VVK.FunctionNotLoadedException("vkReleaseProfilingLockKHR"); }
		Functions.vkReleaseProfilingLockKHR(device);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public VulkanResult GetImageDrmFormatModifierPropertiesEXT(Vk.Device device, Vk.Image image, Vk.EXT.ImageDrmFormatModifierProperties* pProperties)
	{
		if (Functions.vkGetImageDrmFormatModifierPropertiesEXT == null) { throw new VVK.FunctionNotLoadedException("vkGetImageDrmFormatModifierPropertiesEXT"); }
		return new(Functions.vkGetImageDrmFormatModifierPropertiesEXT(device, image, pProperties), "vkGetImageDrmFormatModifierPropertiesEXT");
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public ulong GetBufferOpaqueCaptureAddress(Vk.Device device, Vk.BufferDeviceAddressInfo* pInfo)
		=> Functions.vkGetBufferOpaqueCaptureAddress(device, pInfo);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public ulong GetBufferOpaqueCaptureAddressKHR(Vk.Device device, Vk.BufferDeviceAddressInfo* pInfo)
	{
		if (Functions.vkGetBufferOpaqueCaptureAddressKHR == null) { throw new VVK.FunctionNotLoadedException("vkGetBufferOpaqueCaptureAddressKHR"); }
		return Functions.vkGetBufferOpaqueCaptureAddressKHR(device, pInfo);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public ulong GetBufferDeviceAddress(Vk.Device device, Vk.BufferDeviceAddressInfo* pInfo)
		=> Functions.vkGetBufferDeviceAddress(device, pInfo);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public ulong GetBufferDeviceAddressKHR(Vk.Device device, Vk.BufferDeviceAddressInfo* pInfo)
	{
		if (Functions.vkGetBufferDeviceAddressKHR == null) { throw new VVK.FunctionNotLoadedException("vkGetBufferDeviceAddressKHR"); }
		return Functions.vkGetBufferDeviceAddressKHR(device, pInfo);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public ulong GetBufferDeviceAddressEXT(Vk.Device device, Vk.BufferDeviceAddressInfo* pInfo)
	{
		if (Functions.vkGetBufferDeviceAddressEXT == null) { throw new VVK.FunctionNotLoadedException("vkGetBufferDeviceAddressEXT"); }
		return Functions.vkGetBufferDeviceAddressEXT(device, pInfo);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public VulkanResult InitializePerformanceApiINTEL(Vk.Device device, Vk.INTEL.InitializePerformanceApiInfo* pInitializeInfo)
	{
		if (Functions.vkInitializePerformanceApiINTEL == null) { throw new VVK.FunctionNotLoadedException("vkInitializePerformanceApiINTEL"); }
		return new(Functions.vkInitializePerformanceApiINTEL(device, pInitializeInfo), "vkInitializePerformanceApiINTEL");
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void UninitializePerformanceApiINTEL(Vk.Device device)
	{
		if (Functions.vkUninitializePerformanceApiINTEL == null) { throw new VVK.FunctionNotLoadedException("vkUninitializePerformanceApiINTEL"); }
		Functions.vkUninitializePerformanceApiINTEL(device);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public VulkanResult AcquirePerformanceConfigurationINTEL(Vk.Device device, Vk.INTEL.PerformanceConfigurationAcquireInfo* pAcquireInfo, Vk.INTEL.PerformanceConfiguration* pConfiguration)
	{
		if (Functions.vkAcquirePerformanceConfigurationINTEL == null) { throw new VVK.FunctionNotLoadedException("vkAcquirePerformanceConfigurationINTEL"); }
		return new(Functions.vkAcquirePerformanceConfigurationINTEL(device, pAcquireInfo, pConfiguration), "vkAcquirePerformanceConfigurationINTEL");
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public VulkanResult ReleasePerformanceConfigurationINTEL(Vk.Device device, Vk.INTEL.PerformanceConfiguration configuration)
	{
		if (Functions.vkReleasePerformanceConfigurationINTEL == null) { throw new VVK.FunctionNotLoadedException("vkReleasePerformanceConfigurationINTEL"); }
		return new(Functions.vkReleasePerformanceConfigurationINTEL(device, configuration), "vkReleasePerformanceConfigurationINTEL");
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public VulkanResult GetPerformanceParameterINTEL(Vk.Device device, Vk.INTEL.PerformanceParameterType parameter, Vk.INTEL.PerformanceValue* pValue)
	{
		if (Functions.vkGetPerformanceParameterINTEL == null) { throw new VVK.FunctionNotLoadedException("vkGetPerformanceParameterINTEL"); }
		return new(Functions.vkGetPerformanceParameterINTEL(device, parameter, pValue), "vkGetPerformanceParameterINTEL");
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public ulong GetDeviceMemoryOpaqueCaptureAddress(Vk.Device device, Vk.DeviceMemoryOpaqueCaptureAddressInfo* pInfo)
		=> Functions.vkGetDeviceMemoryOpaqueCaptureAddress(device, pInfo);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public ulong GetDeviceMemoryOpaqueCaptureAddressKHR(Vk.Device device, Vk.DeviceMemoryOpaqueCaptureAddressInfo* pInfo)
	{
		if (Functions.vkGetDeviceMemoryOpaqueCaptureAddressKHR == null) { throw new VVK.FunctionNotLoadedException("vkGetDeviceMemoryOpaqueCaptureAddressKHR"); }
		return Functions.vkGetDeviceMemoryOpaqueCaptureAddressKHR(device, pInfo);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public VulkanResult GetPipelineExecutablePropertiesKHR(Vk.Device device, Vk.KHR.PipelineInfo* pPipelineInfo, uint* pExecutableCount, Vk.KHR.PipelineExecutableProperties* pProperties)
	{
		if (Functions.vkGetPipelineExecutablePropertiesKHR == null) { throw new VVK.FunctionNotLoadedException("vkGetPipelineExecutablePropertiesKHR"); }
		return new(Functions.vkGetPipelineExecutablePropertiesKHR(device, pPipelineInfo, pExecutableCount, pProperties), "vkGetPipelineExecutablePropertiesKHR");
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public VulkanResult GetPipelineExecutableStatisticsKHR(Vk.Device device, Vk.KHR.PipelineExecutableInfo* pExecutableInfo, uint* pStatisticCount, Vk.KHR.PipelineExecutableStatistic* pStatistics)
	{
		if (Functions.vkGetPipelineExecutableStatisticsKHR == null) { throw new VVK.FunctionNotLoadedException("vkGetPipelineExecutableStatisticsKHR"); }
		return new(Functions.vkGetPipelineExecutableStatisticsKHR(device, pExecutableInfo, pStatisticCount, pStatistics), "vkGetPipelineExecutableStatisticsKHR");
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public VulkanResult GetPipelineExecutableInternalRepresentationsKHR(Vk.Device device, Vk.KHR.PipelineExecutableInfo* pExecutableInfo, uint* pInternalRepresentationCount, Vk.KHR.PipelineExecutableInternalRepresentation* pInternalRepresentations)
	{
		if (Functions.vkGetPipelineExecutableInternalRepresentationsKHR == null) { throw new VVK.FunctionNotLoadedException("vkGetPipelineExecutableInternalRepresentationsKHR"); }
		return new(Functions.vkGetPipelineExecutableInternalRepresentationsKHR(device, pExecutableInfo, pInternalRepresentationCount, pInternalRepresentations), "vkGetPipelineExecutableInternalRepresentationsKHR");
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public VulkanResult CreateAccelerationStructureKHR(Vk.Device device, Vk.KHR.AccelerationStructureCreateInfo* pCreateInfo, Vk.AllocationCallbacks* pAllocator, Vk.KHR.AccelerationStructure* pAccelerationStructure)
	{
		if (Functions.vkCreateAccelerationStructureKHR == null) { throw new VVK.FunctionNotLoadedException("vkCreateAccelerationStructureKHR"); }
		return new(Functions.vkCreateAccelerationStructureKHR(device, pCreateInfo, pAllocator, pAccelerationStructure), "vkCreateAccelerationStructureKHR");
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public VulkanResult BuildAccelerationStructureKHR(Vk.Device device, uint infoCount, Vk.KHR.AccelerationStructureBuildGeometryInfo* pInfos, Vk.KHR.AccelerationStructureBuildOffsetInfo** ppOffsetInfos)
	{
		if (Functions.vkBuildAccelerationStructureKHR == null) { throw new VVK.FunctionNotLoadedException("vkBuildAccelerationStructureKHR"); }
		return new(Functions.vkBuildAccelerationStructureKHR(device, infoCount, pInfos, ppOffsetInfos), "vkBuildAccelerationStructureKHR");
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public ulong GetAccelerationStructureDeviceAddressKHR(Vk.Device device, Vk.KHR.AccelerationStructureDeviceAddressInfo* pInfo)
	{
		if (Functions.vkGetAccelerationStructureDeviceAddressKHR == null) { throw new VVK.FunctionNotLoadedException("vkGetAccelerationStructureDeviceAddressKHR"); }
		return Functions.vkGetAccelerationStructureDeviceAddressKHR(device, pInfo);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public VulkanResult CreateDeferredOperationKHR(Vk.Device device, Vk.AllocationCallbacks* pAllocator, Vk.KHR.DeferredOperation* pDeferredOperation)
	{
		if (Functions.vkCreateDeferredOperationKHR == null) { throw new VVK.FunctionNotLoadedException("vkCreateDeferredOperationKHR"); }
		return new(Functions.vkCreateDeferredOperationKHR(device, pAllocator, pDeferredOperation), "vkCreateDeferredOperationKHR");
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void DestroyDeferredOperationKHR(Vk.Device device, Vk.KHR.DeferredOperation operation, Vk.AllocationCallbacks* pAllocator)
	{
		if (Functions.vkDestroyDeferredOperationKHR == null) { throw new VVK.FunctionNotLoadedException("vkDestroyDeferredOperationKHR"); }
		Functions.vkDestroyDeferredOperationKHR(device, operation, pAllocator);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public uint GetDeferredOperationMaxConcurrencyKHR(Vk.Device device, Vk.KHR.DeferredOperation operation)
	{
		if (Functions.vkGetDeferredOperationMaxConcurrencyKHR == null) { throw new VVK.FunctionNotLoadedException("vkGetDeferredOperationMaxConcurrencyKHR"); }
		return Functions.vkGetDeferredOperationMaxConcurrencyKHR(device, operation);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public VulkanResult GetDeferredOperationResultKHR(Vk.Device device, Vk.KHR.DeferredOperation operation)
	{
		if (Functions.vkGetDeferredOperationResultKHR == null) { throw new VVK.FunctionNotLoadedException("vkGetDeferredOperationResultKHR"); }
		return new(Functions.vkGetDeferredOperationResultKHR(device, operation), "vkGetDeferredOperationResultKHR");
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public VulkanResult DeferredOperationJoinKHR(Vk.Device device, Vk.KHR.DeferredOperation operation)
	{
		if (Functions.vkDeferredOperationJoinKHR == null) { throw new VVK.FunctionNotLoadedException("vkDeferredOperationJoinKHR"); }
		return new(Functions.vkDeferredOperationJoinKHR(device, operation), "vkDeferredOperationJoinKHR");
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public VulkanResult CreatePrivateDataSlotEXT(Vk.Device device, Vk.EXT.PrivateDataSlotCreateInfo* pCreateInfo, Vk.AllocationCallbacks* pAllocator, Vk.EXT.PrivateDataSlot* pPrivateDataSlot)
	{
		if (Functions.vkCreatePrivateDataSlotEXT == null) { throw new VVK.FunctionNotLoadedException("vkCreatePrivateDataSlotEXT"); }
		return new(Functions.vkCreatePrivateDataSlotEXT(device, pCreateInfo, pAllocator, pPrivateDataSlot), "vkCreatePrivateDataSlotEXT");
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void DestroyPrivateDataSlotEXT(Vk.Device device, Vk.EXT.PrivateDataSlot privateDataSlot, Vk.AllocationCallbacks* pAllocator)
	{
		if (Functions.vkDestroyPrivateDataSlotEXT == null) { throw new VVK.FunctionNotLoadedException("vkDestroyPrivateDataSlotEXT"); }
		Functions.vkDestroyPrivateDataSlotEXT(device, privateDataSlot, pAllocator);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public VulkanResult SetPrivateDataEXT(Vk.Device device, Vk.ObjectType objectType, ulong objectHandle, Vk.EXT.PrivateDataSlot privateDataSlot, ulong data)
	{
		if (Functions.vkSetPrivateDataEXT == null) { throw new VVK.FunctionNotLoadedException("vkSetPrivateDataEXT"); }
		return new(Functions.vkSetPrivateDataEXT(device, objectType, objectHandle, privateDataSlot, data), "vkSetPrivateDataEXT");
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void GetPrivateDataEXT(Vk.Device device, Vk.ObjectType objectType, ulong objectHandle, Vk.EXT.PrivateDataSlot privateDataSlot, ulong* pData)
	{
		if (Functions.vkGetPrivateDataEXT == null) { throw new VVK.FunctionNotLoadedException("vkGetPrivateDataEXT"); }
		Functions.vkGetPrivateDataEXT(device, objectType, objectHandle, privateDataSlot, pData);
	}

}

} // namespace VVK
