/*
 * MIT License - Copyright(c) 2020 Sean Moss
 * This file is subject to the terms and conditions of the MIT License, the text of which can be found in the 'LICENSE'
 * file at the root of this repository, or online at <https://opensource.org/licenses/MIT>.
 */

/// This file was generated by VVKGen. Edits to this file will be lost on next generation.

using System;
using System.Runtime.InteropServices;
using System.Runtime.CompilerServices;

namespace Vulkan
{

[StructLayout(LayoutKind.Sequential)]
public unsafe partial struct VkPhysicalDeviceMultiviewPerViewAttributesPropertiesNVX : IEquatable<VkPhysicalDeviceMultiviewPerViewAttributesPropertiesNVX>
{
	public const VkStructureType TYPE = VkStructureType.PhysicalDeviceMultiviewPerViewAttributesPropertiesNvx;

	public VkStructureType sType;
	public void* pNext;
	public VkBool32 PerViewPositionAllComponents;

	public VkPhysicalDeviceMultiviewPerViewAttributesPropertiesNVX(
		VkBool32 perViewPositionAllComponents = default
	) {
		sType = TYPE;
		pNext = null;
		PerViewPositionAllComponents = perViewPositionAllComponents;
	}

	public readonly override bool Equals(object? o) => (o is VkPhysicalDeviceMultiviewPerViewAttributesPropertiesNVX s) && (this == s);
	readonly bool IEquatable<VkPhysicalDeviceMultiviewPerViewAttributesPropertiesNVX>.Equals(VkPhysicalDeviceMultiviewPerViewAttributesPropertiesNVX o) => o == this;

	[MethodImpl(MethodImplOptions.AggressiveOptimization)]
	public readonly override int GetHashCode()
	{
		return
			sType.GetHashCode() ^ ((ulong)pNext).GetHashCode() ^ PerViewPositionAllComponents.GetHashCode()
			;
	}

	[MethodImpl(MethodImplOptions.AggressiveOptimization)]
	public static bool operator == (in VkPhysicalDeviceMultiviewPerViewAttributesPropertiesNVX l, in VkPhysicalDeviceMultiviewPerViewAttributesPropertiesNVX r)
	{
		return
			(l.sType == r.sType) && (l.pNext == r.pNext) && (l.PerViewPositionAllComponents == r.PerViewPositionAllComponents)
			;
	}

	[MethodImpl(MethodImplOptions.AggressiveOptimization)]
	public static bool operator != (in VkPhysicalDeviceMultiviewPerViewAttributesPropertiesNVX l, in VkPhysicalDeviceMultiviewPerViewAttributesPropertiesNVX r)
	{
		return
			(l.sType != r.sType) || (l.pNext != r.pNext) || (l.PerViewPositionAllComponents != r.PerViewPositionAllComponents)
			;
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void New(out VkPhysicalDeviceMultiviewPerViewAttributesPropertiesNVX s) => s = new() { sType = TYPE };
}

[StructLayout(LayoutKind.Sequential)]
public unsafe partial struct VkImageViewHandleInfoNVX : IEquatable<VkImageViewHandleInfoNVX>
{
	public const VkStructureType TYPE = VkStructureType.ImageViewHandleInfoNvx;

	public VkStructureType sType;
	public void* pNext;
	public VulkanHandle<VkImageView> ImageView;
	public VkDescriptorType DescriptorType;
	public VulkanHandle<VkSampler> Sampler;

	public VkImageViewHandleInfoNVX(
		VulkanHandle<VkImageView> imageView = default,
		VkDescriptorType descriptorType = default,
		VulkanHandle<VkSampler> sampler = default
	) {
		sType = TYPE;
		pNext = null;
		ImageView = imageView;
		DescriptorType = descriptorType;
		Sampler = sampler;
	}

	public readonly override bool Equals(object? o) => (o is VkImageViewHandleInfoNVX s) && (this == s);
	readonly bool IEquatable<VkImageViewHandleInfoNVX>.Equals(VkImageViewHandleInfoNVX o) => o == this;

	[MethodImpl(MethodImplOptions.AggressiveOptimization)]
	public readonly override int GetHashCode()
	{
		return
			sType.GetHashCode() ^ ((ulong)pNext).GetHashCode() ^ ImageView.GetHashCode() ^ DescriptorType.GetHashCode()
			^ Sampler.GetHashCode()
			;
	}

	[MethodImpl(MethodImplOptions.AggressiveOptimization)]
	public static bool operator == (in VkImageViewHandleInfoNVX l, in VkImageViewHandleInfoNVX r)
	{
		return
			(l.sType == r.sType) && (l.pNext == r.pNext) && (l.ImageView == r.ImageView) && (l.DescriptorType == r.DescriptorType)
			&& (l.Sampler == r.Sampler)
			;
	}

	[MethodImpl(MethodImplOptions.AggressiveOptimization)]
	public static bool operator != (in VkImageViewHandleInfoNVX l, in VkImageViewHandleInfoNVX r)
	{
		return
			(l.sType != r.sType) || (l.pNext != r.pNext) || (l.ImageView != r.ImageView) || (l.DescriptorType != r.DescriptorType)
			|| (l.Sampler != r.Sampler)
			;
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void New(out VkImageViewHandleInfoNVX s) => s = new() { sType = TYPE };
}

[StructLayout(LayoutKind.Sequential)]
public unsafe partial struct VkImageViewAddressPropertiesNVX : IEquatable<VkImageViewAddressPropertiesNVX>
{
	public const VkStructureType TYPE = VkStructureType.ImageViewAddressPropertiesNvx;

	public VkStructureType sType;
	public void* pNext;
	public ulong DeviceAddress;
	public ulong Size;

	public VkImageViewAddressPropertiesNVX(
		ulong deviceAddress = default,
		ulong size = default
	) {
		sType = TYPE;
		pNext = null;
		DeviceAddress = deviceAddress;
		Size = size;
	}

	public readonly override bool Equals(object? o) => (o is VkImageViewAddressPropertiesNVX s) && (this == s);
	readonly bool IEquatable<VkImageViewAddressPropertiesNVX>.Equals(VkImageViewAddressPropertiesNVX o) => o == this;

	[MethodImpl(MethodImplOptions.AggressiveOptimization)]
	public readonly override int GetHashCode()
	{
		return
			sType.GetHashCode() ^ ((ulong)pNext).GetHashCode() ^ DeviceAddress.GetHashCode() ^ Size.GetHashCode()
			;
	}

	[MethodImpl(MethodImplOptions.AggressiveOptimization)]
	public static bool operator == (in VkImageViewAddressPropertiesNVX l, in VkImageViewAddressPropertiesNVX r)
	{
		return
			(l.sType == r.sType) && (l.pNext == r.pNext) && (l.DeviceAddress == r.DeviceAddress) && (l.Size == r.Size)
			;
	}

	[MethodImpl(MethodImplOptions.AggressiveOptimization)]
	public static bool operator != (in VkImageViewAddressPropertiesNVX l, in VkImageViewAddressPropertiesNVX r)
	{
		return
			(l.sType != r.sType) || (l.pNext != r.pNext) || (l.DeviceAddress != r.DeviceAddress) || (l.Size != r.Size)
			;
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void New(out VkImageViewAddressPropertiesNVX s) => s = new() { sType = TYPE };
}


} // namespace Vulkan

