/*
 * MIT License - Copyright(c) 2020 Sean Moss
 * This file is subject to the terms and conditions of the MIT License, the text of which can be found in the 'LICENSE'
 * file at the root of this repository, or online at<https://opensource.org/licenses/MIT>.
 */

/// This file was generated by VVKGen. Edits to this file will be lost on next generation.

using System;
using System.Runtime.InteropServices;
using System.Runtime.CompilerServices;


namespace Vk.NV
{

public unsafe partial struct IndirectCommandsLayout : IHandleType<IndirectCommandsLayout>
{
	public static readonly IndirectCommandsLayout Null = new();

	public readonly Vk.Device Parent;
	public readonly Vk.DeviceFunctionTable Functions;
	public readonly Vk.Instance Instance;
	public readonly Vk.Device Device;
	private readonly Handle<IndirectCommandsLayout> _handle;
	readonly Handle<IndirectCommandsLayout> IHandleType<IndirectCommandsLayout>.Handle => _handle;
	public readonly bool IsValid => _handle.IsValid;

	public IndirectCommandsLayout(in Vk.Device parent, Vk.Handle<IndirectCommandsLayout> handle)
	{
		Parent = parent;
		Functions = parent.Functions;
		Instance = parent.Instance;
		Device = parent;
		_handle = handle;
	}

	public override readonly int GetHashCode() => _handle.GetHashCode();
	public override readonly string? ToString() => $"[IndirectCommandsLayout 0x{(ulong)_handle:X16}]";
	public override readonly bool Equals(object? o) => (o is IndirectCommandsLayout t) && (t._handle == _handle);
	readonly bool IEquatable<IndirectCommandsLayout>.Equals(IndirectCommandsLayout other) => other._handle == _handle;

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static implicit operator Vk.Handle<IndirectCommandsLayout> (in IndirectCommandsLayout handle) => handle._handle;
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static bool operator == (IndirectCommandsLayout l, IndirectCommandsLayout r) => l._handle == r._handle;
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static bool operator != (IndirectCommandsLayout l, IndirectCommandsLayout r) => l._handle != r._handle;
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static implicit operator bool (IndirectCommandsLayout handle) => handle._handle.IsValid;
}

public unsafe partial struct AccelerationStructure : IHandleType<AccelerationStructure>
{
	public static readonly AccelerationStructure Null = new();

	public readonly Vk.Device Parent;
	public readonly Vk.DeviceFunctionTable Functions;
	public readonly Vk.Instance Instance;
	public readonly Vk.Device Device;
	private readonly Handle<AccelerationStructure> _handle;
	readonly Handle<AccelerationStructure> IHandleType<AccelerationStructure>.Handle => _handle;
	public readonly bool IsValid => _handle.IsValid;

	public AccelerationStructure(in Vk.Device parent, Vk.Handle<AccelerationStructure> handle)
	{
		Parent = parent;
		Functions = parent.Functions;
		Instance = parent.Instance;
		Device = parent;
		_handle = handle;
	}

	public override readonly int GetHashCode() => _handle.GetHashCode();
	public override readonly string? ToString() => $"[AccelerationStructure 0x{(ulong)_handle:X16}]";
	public override readonly bool Equals(object? o) => (o is AccelerationStructure t) && (t._handle == _handle);
	readonly bool IEquatable<AccelerationStructure>.Equals(AccelerationStructure other) => other._handle == _handle;

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static implicit operator Vk.Handle<AccelerationStructure> (in AccelerationStructure handle) => handle._handle;
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static bool operator == (AccelerationStructure l, AccelerationStructure r) => l._handle == r._handle;
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static bool operator != (AccelerationStructure l, AccelerationStructure r) => l._handle != r._handle;
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static implicit operator bool (AccelerationStructure handle) => handle._handle.IsValid;
}

} // namespace Vk.NV
