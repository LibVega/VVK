/*
 * MIT License - Copyright(c) 2020 Sean Moss
 * This file is subject to the terms and conditions of the MIT License, the text of which can be found in the 'LICENSE'
 * file at the root of this repository, or online at<https://opensource.org/licenses/MIT>.
 */

/// This file was generated by VVKGen. Edits to this file will be lost on next generation.

using System;
using System.Runtime.InteropServices;
using System.Runtime.CompilerServices;


namespace VVK.Vk.NV
{

[StructLayout(LayoutKind.Explicit, Size = 8)]
public unsafe partial struct IndirectCommandsLayout : IEquatable<IndirectCommandsLayout>
{
	public static readonly IndirectCommandsLayout Null = new(0);

	[FieldOffset(0)] public readonly void* Handle;
	public readonly ulong LongHandle => (ulong)Handle;

	public IndirectCommandsLayout(void* handle) => Handle = handle;
	public IndirectCommandsLayout(ulong handle) => Handle = (void*)handle;
	public IndirectCommandsLayout(IntPtr handle) => Handle = handle.ToPointer();

	readonly bool IEquatable<IndirectCommandsLayout>.Equals(IndirectCommandsLayout other) => other.Handle == Handle;
	public readonly override bool Equals(object? other) => (other is IndirectCommandsLayout handle) && handle.Handle == Handle;
	public readonly override int GetHashCode() => (int)(LongHandle >> 32) ^ (int)(LongHandle & 0xFFFFFFFF);
	public readonly override string ToString() => $"[IndirectCommandsLayout 0x{LongHandle:X16}]";

	public static bool operator == (IndirectCommandsLayout l, IndirectCommandsLayout r) => l.Handle == r.Handle;
	public static bool operator != (IndirectCommandsLayout l, IndirectCommandsLayout r) => l.Handle != r.Handle;
	public static implicit operator bool (IndirectCommandsLayout handle) => handle.Handle != null;
}

[StructLayout(LayoutKind.Explicit, Size = 8)]
public unsafe partial struct AccelerationStructure : IEquatable<AccelerationStructure>
{
	public static readonly AccelerationStructure Null = new(0);

	[FieldOffset(0)] public readonly void* Handle;
	public readonly ulong LongHandle => (ulong)Handle;

	public AccelerationStructure(void* handle) => Handle = handle;
	public AccelerationStructure(ulong handle) => Handle = (void*)handle;
	public AccelerationStructure(IntPtr handle) => Handle = handle.ToPointer();

	readonly bool IEquatable<AccelerationStructure>.Equals(AccelerationStructure other) => other.Handle == Handle;
	public readonly override bool Equals(object? other) => (other is AccelerationStructure handle) && handle.Handle == Handle;
	public readonly override int GetHashCode() => (int)(LongHandle >> 32) ^ (int)(LongHandle & 0xFFFFFFFF);
	public readonly override string ToString() => $"[AccelerationStructure 0x{LongHandle:X16}]";

	public static bool operator == (AccelerationStructure l, AccelerationStructure r) => l.Handle == r.Handle;
	public static bool operator != (AccelerationStructure l, AccelerationStructure r) => l.Handle != r.Handle;
	public static implicit operator bool (AccelerationStructure handle) => handle.Handle != null;
}

} // namespace VVK.Vk.NV
