/*
 * MIT License - Copyright(c) 2020 Sean Moss
 * This file is subject to the terms and conditions of the MIT License, the text of which can be found in the 'LICENSE'
 * file at the root of this repository, or online at<https://opensource.org/licenses/MIT>.
 */

/// This file was generated by VVKGen. Edits to this file will be lost on next generation.

using System;
using System.Runtime.InteropServices;
using System.Runtime.CompilerServices;


namespace Vk.NV
{

[StructLayout(LayoutKind.Sequential)]
public unsafe partial struct DedicatedAllocationImageCreateInfo
{
	public const Vk.StructureType TYPE = Vk.StructureType.DedicatedAllocationImageCreateInfoNV;

	public Vk.StructureType sType;
	public void* pNext;
	public Vk.Bool32 DedicatedAllocation;

	/// <summary>Creates a new DedicatedAllocationImageCreateInfo value with the correct type field.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void New(out DedicatedAllocationImageCreateInfo value) => value = new() { sType = TYPE };
	/// <summary>Initializes the sType and pNext fields to the correct default values.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void Init(ref DedicatedAllocationImageCreateInfo value) { value.sType = TYPE; value.pNext = null; }
}

[StructLayout(LayoutKind.Sequential)]
public unsafe partial struct DedicatedAllocationBufferCreateInfo
{
	public const Vk.StructureType TYPE = Vk.StructureType.DedicatedAllocationBufferCreateInfoNV;

	public Vk.StructureType sType;
	public void* pNext;
	public Vk.Bool32 DedicatedAllocation;

	/// <summary>Creates a new DedicatedAllocationBufferCreateInfo value with the correct type field.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void New(out DedicatedAllocationBufferCreateInfo value) => value = new() { sType = TYPE };
	/// <summary>Initializes the sType and pNext fields to the correct default values.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void Init(ref DedicatedAllocationBufferCreateInfo value) { value.sType = TYPE; value.pNext = null; }
}

[StructLayout(LayoutKind.Sequential)]
public unsafe partial struct DedicatedAllocationMemoryAllocateInfo
{
	public const Vk.StructureType TYPE = Vk.StructureType.DedicatedAllocationMemoryAllocateInfoNV;

	public Vk.StructureType sType;
	public void* pNext;
	public Vk.Image Image;
	public Vk.Buffer Buffer;

	/// <summary>Creates a new DedicatedAllocationMemoryAllocateInfo value with the correct type field.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void New(out DedicatedAllocationMemoryAllocateInfo value) => value = new() { sType = TYPE };
	/// <summary>Initializes the sType and pNext fields to the correct default values.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void Init(ref DedicatedAllocationMemoryAllocateInfo value) { value.sType = TYPE; value.pNext = null; }
}

[StructLayout(LayoutKind.Sequential)]
public unsafe partial struct ExternalImageFormatProperties
{
	public Vk.ImageFormatProperties ImageFormatProperties;
	public Vk.NV.ExternalMemoryFeatureFlags ExternalMemoryFeatures;
	public Vk.NV.ExternalMemoryHandleTypeFlags ExportFromImportedHandleTypes;
	public Vk.NV.ExternalMemoryHandleTypeFlags CompatibleHandleTypes;
}

[StructLayout(LayoutKind.Sequential)]
public unsafe partial struct ExternalMemoryImageCreateInfo
{
	public const Vk.StructureType TYPE = Vk.StructureType.ExternalMemoryImageCreateInfoNV;

	public Vk.StructureType sType;
	public void* pNext;
	public Vk.NV.ExternalMemoryHandleTypeFlags HandleTypes;

	/// <summary>Creates a new ExternalMemoryImageCreateInfo value with the correct type field.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void New(out ExternalMemoryImageCreateInfo value) => value = new() { sType = TYPE };
	/// <summary>Initializes the sType and pNext fields to the correct default values.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void Init(ref ExternalMemoryImageCreateInfo value) { value.sType = TYPE; value.pNext = null; }
}

[StructLayout(LayoutKind.Sequential)]
public unsafe partial struct ExportMemoryAllocateInfo
{
	public const Vk.StructureType TYPE = Vk.StructureType.ExportMemoryAllocateInfoNV;

	public Vk.StructureType sType;
	public void* pNext;
	public Vk.NV.ExternalMemoryHandleTypeFlags HandleTypes;

	/// <summary>Creates a new ExportMemoryAllocateInfo value with the correct type field.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void New(out ExportMemoryAllocateInfo value) => value = new() { sType = TYPE };
	/// <summary>Initializes the sType and pNext fields to the correct default values.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void Init(ref ExportMemoryAllocateInfo value) { value.sType = TYPE; value.pNext = null; }
}

[StructLayout(LayoutKind.Sequential)]
public unsafe partial struct ImportMemoryWin32HandleInfo
{
	public const Vk.StructureType TYPE = Vk.StructureType.ImportMemoryWin32HandleInfoNV;

	public Vk.StructureType sType;
	public void* pNext;
	public Vk.NV.ExternalMemoryHandleTypeFlags HandleType;
	public void* Handle;

	/// <summary>Creates a new ImportMemoryWin32HandleInfo value with the correct type field.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void New(out ImportMemoryWin32HandleInfo value) => value = new() { sType = TYPE };
	/// <summary>Initializes the sType and pNext fields to the correct default values.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void Init(ref ImportMemoryWin32HandleInfo value) { value.sType = TYPE; value.pNext = null; }
}

[StructLayout(LayoutKind.Sequential)]
public unsafe partial struct ExportMemoryWin32HandleInfo
{
	public const Vk.StructureType TYPE = Vk.StructureType.ExportMemoryWin32HandleInfoNV;

	public Vk.StructureType sType;
	public void* pNext;
	public void* Attributes;
	public uint DwAccess;

	/// <summary>Creates a new ExportMemoryWin32HandleInfo value with the correct type field.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void New(out ExportMemoryWin32HandleInfo value) => value = new() { sType = TYPE };
	/// <summary>Initializes the sType and pNext fields to the correct default values.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void Init(ref ExportMemoryWin32HandleInfo value) { value.sType = TYPE; value.pNext = null; }
}

[StructLayout(LayoutKind.Sequential)]
public unsafe partial struct Win32KeyedMutexAcquireReleaseInfo
{
	public const Vk.StructureType TYPE = Vk.StructureType.Win32KeyedMutexAcquireReleaseInfoNV;

	public Vk.StructureType sType;
	public void* pNext;
	public uint AcquireCount;
	public Vk.DeviceMemory* AcquireSyncs;
	public ulong* AcquireKeys;
	public uint* AcquireTimeoutMilliseconds;
	public uint ReleaseCount;
	public Vk.DeviceMemory* ReleaseSyncs;
	public ulong* ReleaseKeys;

	/// <summary>Creates a new Win32KeyedMutexAcquireReleaseInfo value with the correct type field.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void New(out Win32KeyedMutexAcquireReleaseInfo value) => value = new() { sType = TYPE };
	/// <summary>Initializes the sType and pNext fields to the correct default values.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void Init(ref Win32KeyedMutexAcquireReleaseInfo value) { value.sType = TYPE; value.pNext = null; }
}

[StructLayout(LayoutKind.Sequential)]
public unsafe partial struct PhysicalDeviceDeviceGeneratedCommandsFeatures
{
	public const Vk.StructureType TYPE = Vk.StructureType.PhysicalDeviceDeviceGeneratedCommandsFeaturesNV;

	public Vk.StructureType sType;
	public void* pNext;
	public Vk.Bool32 DeviceGeneratedCommands;

	/// <summary>Creates a new PhysicalDeviceDeviceGeneratedCommandsFeatures value with the correct type field.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void New(out PhysicalDeviceDeviceGeneratedCommandsFeatures value) => value = new() { sType = TYPE };
	/// <summary>Initializes the sType and pNext fields to the correct default values.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void Init(ref PhysicalDeviceDeviceGeneratedCommandsFeatures value) { value.sType = TYPE; value.pNext = null; }
}

[StructLayout(LayoutKind.Sequential)]
public unsafe partial struct PhysicalDeviceDeviceGeneratedCommandsProperties
{
	public const Vk.StructureType TYPE = Vk.StructureType.PhysicalDeviceDeviceGeneratedCommandsPropertiesNV;

	public Vk.StructureType sType;
	public void* pNext;
	public uint MaxGraphicsShaderGroupCount;
	public uint MaxIndirectSequenceCount;
	public uint MaxIndirectCommandsTokenCount;
	public uint MaxIndirectCommandsStreamCount;
	public uint MaxIndirectCommandsTokenOffset;
	public uint MaxIndirectCommandsStreamStride;
	public uint MinSequencesCountBufferOffsetAlignment;
	public uint MinSequencesIndexBufferOffsetAlignment;
	public uint MinIndirectCommandsBufferOffsetAlignment;

	/// <summary>Creates a new PhysicalDeviceDeviceGeneratedCommandsProperties value with the correct type field.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void New(out PhysicalDeviceDeviceGeneratedCommandsProperties value) => value = new() { sType = TYPE };
	/// <summary>Initializes the sType and pNext fields to the correct default values.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void Init(ref PhysicalDeviceDeviceGeneratedCommandsProperties value) { value.sType = TYPE; value.pNext = null; }
}

[StructLayout(LayoutKind.Sequential)]
public unsafe partial struct GraphicsShaderGroupCreateInfo
{
	public const Vk.StructureType TYPE = Vk.StructureType.GraphicsShaderGroupCreateInfoNV;

	public Vk.StructureType sType;
	public void* pNext;
	public uint StageCount;
	public Vk.PipelineShaderStageCreateInfo* Stages;
	public Vk.PipelineVertexInputStateCreateInfo* VertexInputState;
	public Vk.PipelineTessellationStateCreateInfo* TessellationState;

	/// <summary>Creates a new GraphicsShaderGroupCreateInfo value with the correct type field.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void New(out GraphicsShaderGroupCreateInfo value) => value = new() { sType = TYPE };
	/// <summary>Initializes the sType and pNext fields to the correct default values.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void Init(ref GraphicsShaderGroupCreateInfo value) { value.sType = TYPE; value.pNext = null; }
}

[StructLayout(LayoutKind.Sequential)]
public unsafe partial struct GraphicsPipelineShaderGroupsCreateInfo
{
	public const Vk.StructureType TYPE = Vk.StructureType.GraphicsPipelineShaderGroupsCreateInfoNV;

	public Vk.StructureType sType;
	public void* pNext;
	public uint GroupCount;
	public Vk.NV.GraphicsShaderGroupCreateInfo* Groups;
	public uint PipelineCount;
	public Vk.Pipeline* Pipelines;

	/// <summary>Creates a new GraphicsPipelineShaderGroupsCreateInfo value with the correct type field.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void New(out GraphicsPipelineShaderGroupsCreateInfo value) => value = new() { sType = TYPE };
	/// <summary>Initializes the sType and pNext fields to the correct default values.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void Init(ref GraphicsPipelineShaderGroupsCreateInfo value) { value.sType = TYPE; value.pNext = null; }
}

[StructLayout(LayoutKind.Sequential)]
public unsafe partial struct BindShaderGroupIndirectCommand
{
	public uint GroupIndex;
}

[StructLayout(LayoutKind.Sequential)]
public unsafe partial struct BindIndexBufferIndirectCommand
{
	public ulong BufferAddress;
	public uint Size;
	public Vk.IndexType IndexType;
}

[StructLayout(LayoutKind.Sequential)]
public unsafe partial struct BindVertexBufferIndirectCommand
{
	public ulong BufferAddress;
	public uint Size;
	public uint Stride;
}

[StructLayout(LayoutKind.Sequential)]
public unsafe partial struct SetStateFlagsIndirectCommand
{
	public uint Data;
}

[StructLayout(LayoutKind.Sequential)]
public unsafe partial struct IndirectCommandsStream
{
	public Vk.Buffer Buffer;
	public Vk.DeviceSize Offset;
}

[StructLayout(LayoutKind.Sequential)]
public unsafe partial struct IndirectCommandsLayoutToken
{
	public const Vk.StructureType TYPE = Vk.StructureType.IndirectCommandsLayoutTokenNV;

	public Vk.StructureType sType;
	public void* pNext;
	public Vk.NV.IndirectCommandsTokenType TokenType;
	public uint Stream;
	public uint Offset;
	public uint VertexBindingUnit;
	public Vk.Bool32 VertexDynamicStride;
	public Vk.PipelineLayout PushconstantPipelineLayout;
	public Vk.ShaderStageFlags PushconstantShaderStageFlags;
	public uint PushconstantOffset;
	public uint PushconstantSize;
	public Vk.NV.IndirectStateFlags IndirectStateFlags;
	public uint IndexTypeCount;
	public Vk.IndexType* IndexTypes;
	public uint* IndexTypeValues;

	/// <summary>Creates a new IndirectCommandsLayoutToken value with the correct type field.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void New(out IndirectCommandsLayoutToken value) => value = new() { sType = TYPE };
	/// <summary>Initializes the sType and pNext fields to the correct default values.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void Init(ref IndirectCommandsLayoutToken value) { value.sType = TYPE; value.pNext = null; }
}

[StructLayout(LayoutKind.Sequential)]
public unsafe partial struct IndirectCommandsLayoutCreateInfo
{
	public const Vk.StructureType TYPE = Vk.StructureType.IndirectCommandsLayoutCreateInfoNV;

	public Vk.StructureType sType;
	public void* pNext;
	public Vk.NV.IndirectCommandsLayoutUsageFlags Flags;
	public Vk.PipelineBindPoint PipelineBindPoint;
	public uint TokenCount;
	public Vk.NV.IndirectCommandsLayoutToken* Tokens;
	public uint StreamCount;
	public uint* StreamStrides;

	/// <summary>Creates a new IndirectCommandsLayoutCreateInfo value with the correct type field.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void New(out IndirectCommandsLayoutCreateInfo value) => value = new() { sType = TYPE };
	/// <summary>Initializes the sType and pNext fields to the correct default values.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void Init(ref IndirectCommandsLayoutCreateInfo value) { value.sType = TYPE; value.pNext = null; }
}

[StructLayout(LayoutKind.Sequential)]
public unsafe partial struct GeneratedCommandsInfo
{
	public const Vk.StructureType TYPE = Vk.StructureType.GeneratedCommandsInfoNV;

	public Vk.StructureType sType;
	public void* pNext;
	public Vk.PipelineBindPoint PipelineBindPoint;
	public Vk.Pipeline Pipeline;
	public Vk.NV.IndirectCommandsLayout IndirectCommandsLayout;
	public uint StreamCount;
	public Vk.NV.IndirectCommandsStream* Streams;
	public uint SequencesCount;
	public Vk.Buffer PreprocessBuffer;
	public Vk.DeviceSize PreprocessOffset;
	public Vk.DeviceSize PreprocessSize;
	public Vk.Buffer SequencesCountBuffer;
	public Vk.DeviceSize SequencesCountOffset;
	public Vk.Buffer SequencesIndexBuffer;
	public Vk.DeviceSize SequencesIndexOffset;

	/// <summary>Creates a new GeneratedCommandsInfo value with the correct type field.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void New(out GeneratedCommandsInfo value) => value = new() { sType = TYPE };
	/// <summary>Initializes the sType and pNext fields to the correct default values.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void Init(ref GeneratedCommandsInfo value) { value.sType = TYPE; value.pNext = null; }
}

[StructLayout(LayoutKind.Sequential)]
public unsafe partial struct GeneratedCommandsMemoryRequirementsInfo
{
	public const Vk.StructureType TYPE = Vk.StructureType.GeneratedCommandsMemoryRequirementsInfoNV;

	public Vk.StructureType sType;
	public void* pNext;
	public Vk.PipelineBindPoint PipelineBindPoint;
	public Vk.Pipeline Pipeline;
	public Vk.NV.IndirectCommandsLayout IndirectCommandsLayout;
	public uint MaxSequencesCount;

	/// <summary>Creates a new GeneratedCommandsMemoryRequirementsInfo value with the correct type field.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void New(out GeneratedCommandsMemoryRequirementsInfo value) => value = new() { sType = TYPE };
	/// <summary>Initializes the sType and pNext fields to the correct default values.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void Init(ref GeneratedCommandsMemoryRequirementsInfo value) { value.sType = TYPE; value.pNext = null; }
}

[StructLayout(LayoutKind.Sequential)]
public unsafe partial struct ViewportWScaling
{
	public float Xcoeff;
	public float Ycoeff;
}

[StructLayout(LayoutKind.Sequential)]
public unsafe partial struct PipelineViewportWScalingStateCreateInfo
{
	public const Vk.StructureType TYPE = Vk.StructureType.PipelineViewportWScalingStateCreateInfoNV;

	public Vk.StructureType sType;
	public void* pNext;
	public Vk.Bool32 ViewportWScalingEnable;
	public uint ViewportCount;
	public Vk.NV.ViewportWScaling* ViewportWScalings;

	/// <summary>Creates a new PipelineViewportWScalingStateCreateInfo value with the correct type field.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void New(out PipelineViewportWScalingStateCreateInfo value) => value = new() { sType = TYPE };
	/// <summary>Initializes the sType and pNext fields to the correct default values.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void Init(ref PipelineViewportWScalingStateCreateInfo value) { value.sType = TYPE; value.pNext = null; }
}

[StructLayout(LayoutKind.Sequential)]
public unsafe partial struct ViewportSwizzle
{
	public Vk.NV.ViewportCoordinateSwizzle X;
	public Vk.NV.ViewportCoordinateSwizzle Y;
	public Vk.NV.ViewportCoordinateSwizzle Z;
	public Vk.NV.ViewportCoordinateSwizzle W;
}

[StructLayout(LayoutKind.Sequential)]
public unsafe partial struct PipelineViewportSwizzleStateCreateInfo
{
	public const Vk.StructureType TYPE = Vk.StructureType.PipelineViewportSwizzleStateCreateInfoNV;

	public Vk.StructureType sType;
	public void* pNext;
	public Vk.NV.PipelineViewportSwizzleStateCreateFlags Flags;
	public uint ViewportCount;
	public Vk.NV.ViewportSwizzle* ViewportSwizzles;

	/// <summary>Creates a new PipelineViewportSwizzleStateCreateInfo value with the correct type field.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void New(out PipelineViewportSwizzleStateCreateInfo value) => value = new() { sType = TYPE };
	/// <summary>Initializes the sType and pNext fields to the correct default values.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void Init(ref PipelineViewportSwizzleStateCreateInfo value) { value.sType = TYPE; value.pNext = null; }
}

[StructLayout(LayoutKind.Sequential)]
public unsafe partial struct PipelineCoverageToColorStateCreateInfo
{
	public const Vk.StructureType TYPE = Vk.StructureType.PipelineCoverageToColorStateCreateInfoNV;

	public Vk.StructureType sType;
	public void* pNext;
	public Vk.NV.PipelineCoverageToColorStateCreateFlags Flags;
	public Vk.Bool32 CoverageToColorEnable;
	public uint CoverageToColorLocation;

	/// <summary>Creates a new PipelineCoverageToColorStateCreateInfo value with the correct type field.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void New(out PipelineCoverageToColorStateCreateInfo value) => value = new() { sType = TYPE };
	/// <summary>Initializes the sType and pNext fields to the correct default values.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void Init(ref PipelineCoverageToColorStateCreateInfo value) { value.sType = TYPE; value.pNext = null; }
}

[StructLayout(LayoutKind.Sequential)]
public unsafe partial struct PipelineCoverageModulationStateCreateInfo
{
	public const Vk.StructureType TYPE = Vk.StructureType.PipelineCoverageModulationStateCreateInfoNV;

	public Vk.StructureType sType;
	public void* pNext;
	public Vk.NV.PipelineCoverageModulationStateCreateFlags Flags;
	public Vk.NV.CoverageModulationMode CoverageModulationMode;
	public Vk.Bool32 CoverageModulationTableEnable;
	public uint CoverageModulationTableCount;
	public float* CoverageModulationTable;

	/// <summary>Creates a new PipelineCoverageModulationStateCreateInfo value with the correct type field.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void New(out PipelineCoverageModulationStateCreateInfo value) => value = new() { sType = TYPE };
	/// <summary>Initializes the sType and pNext fields to the correct default values.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void Init(ref PipelineCoverageModulationStateCreateInfo value) { value.sType = TYPE; value.pNext = null; }
}

[StructLayout(LayoutKind.Sequential)]
public unsafe partial struct QueueFamilyCheckpointProperties
{
	public const Vk.StructureType TYPE = Vk.StructureType.QueueFamilyCheckpointPropertiesNV;

	public Vk.StructureType sType;
	public void* pNext;
	public Vk.PipelineStageFlags CheckpointExecutionStageMask;

	/// <summary>Creates a new QueueFamilyCheckpointProperties value with the correct type field.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void New(out QueueFamilyCheckpointProperties value) => value = new() { sType = TYPE };
	/// <summary>Initializes the sType and pNext fields to the correct default values.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void Init(ref QueueFamilyCheckpointProperties value) { value.sType = TYPE; value.pNext = null; }
}

[StructLayout(LayoutKind.Sequential)]
public unsafe partial struct CheckpointData
{
	public const Vk.StructureType TYPE = Vk.StructureType.CheckpointDataNV;

	public Vk.StructureType sType;
	public void* pNext;
	public Vk.PipelineStageFlags Stage;
	public void* CheckpointMarker;

	/// <summary>Creates a new CheckpointData value with the correct type field.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void New(out CheckpointData value) => value = new() { sType = TYPE };
	/// <summary>Initializes the sType and pNext fields to the correct default values.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void Init(ref CheckpointData value) { value.sType = TYPE; value.pNext = null; }
}

[StructLayout(LayoutKind.Sequential)]
public unsafe partial struct PhysicalDeviceRepresentativeFragmentTestFeatures
{
	public const Vk.StructureType TYPE = Vk.StructureType.PhysicalDeviceRepresentativeFragmentTestFeaturesNV;

	public Vk.StructureType sType;
	public void* pNext;
	public Vk.Bool32 RepresentativeFragmentTest;

	/// <summary>Creates a new PhysicalDeviceRepresentativeFragmentTestFeatures value with the correct type field.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void New(out PhysicalDeviceRepresentativeFragmentTestFeatures value) => value = new() { sType = TYPE };
	/// <summary>Initializes the sType and pNext fields to the correct default values.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void Init(ref PhysicalDeviceRepresentativeFragmentTestFeatures value) { value.sType = TYPE; value.pNext = null; }
}

[StructLayout(LayoutKind.Sequential)]
public unsafe partial struct PipelineRepresentativeFragmentTestStateCreateInfo
{
	public const Vk.StructureType TYPE = Vk.StructureType.PipelineRepresentativeFragmentTestStateCreateInfoNV;

	public Vk.StructureType sType;
	public void* pNext;
	public Vk.Bool32 RepresentativeFragmentTestEnable;

	/// <summary>Creates a new PipelineRepresentativeFragmentTestStateCreateInfo value with the correct type field.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void New(out PipelineRepresentativeFragmentTestStateCreateInfo value) => value = new() { sType = TYPE };
	/// <summary>Initializes the sType and pNext fields to the correct default values.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void Init(ref PipelineRepresentativeFragmentTestStateCreateInfo value) { value.sType = TYPE; value.pNext = null; }
}

[StructLayout(LayoutKind.Sequential)]
public unsafe partial struct PhysicalDeviceExclusiveScissorFeatures
{
	public const Vk.StructureType TYPE = Vk.StructureType.PhysicalDeviceExclusiveScissorFeaturesNV;

	public Vk.StructureType sType;
	public void* pNext;
	public Vk.Bool32 ExclusiveScissor;

	/// <summary>Creates a new PhysicalDeviceExclusiveScissorFeatures value with the correct type field.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void New(out PhysicalDeviceExclusiveScissorFeatures value) => value = new() { sType = TYPE };
	/// <summary>Initializes the sType and pNext fields to the correct default values.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void Init(ref PhysicalDeviceExclusiveScissorFeatures value) { value.sType = TYPE; value.pNext = null; }
}

[StructLayout(LayoutKind.Sequential)]
public unsafe partial struct PipelineViewportExclusiveScissorStateCreateInfo
{
	public const Vk.StructureType TYPE = Vk.StructureType.PipelineViewportExclusiveScissorStateCreateInfoNV;

	public Vk.StructureType sType;
	public void* pNext;
	public uint ExclusiveScissorCount;
	public Vk.Rect2D* ExclusiveScissors;

	/// <summary>Creates a new PipelineViewportExclusiveScissorStateCreateInfo value with the correct type field.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void New(out PipelineViewportExclusiveScissorStateCreateInfo value) => value = new() { sType = TYPE };
	/// <summary>Initializes the sType and pNext fields to the correct default values.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void Init(ref PipelineViewportExclusiveScissorStateCreateInfo value) { value.sType = TYPE; value.pNext = null; }
}

[StructLayout(LayoutKind.Sequential)]
public unsafe partial struct PhysicalDeviceCornerSampledImageFeatures
{
	public const Vk.StructureType TYPE = Vk.StructureType.PhysicalDeviceCornerSampledImageFeaturesNV;

	public Vk.StructureType sType;
	public void* pNext;
	public Vk.Bool32 CornerSampledImage;

	/// <summary>Creates a new PhysicalDeviceCornerSampledImageFeatures value with the correct type field.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void New(out PhysicalDeviceCornerSampledImageFeatures value) => value = new() { sType = TYPE };
	/// <summary>Initializes the sType and pNext fields to the correct default values.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void Init(ref PhysicalDeviceCornerSampledImageFeatures value) { value.sType = TYPE; value.pNext = null; }
}

[StructLayout(LayoutKind.Sequential)]
public unsafe partial struct PhysicalDeviceComputeShaderDerivativesFeatures
{
	public const Vk.StructureType TYPE = Vk.StructureType.PhysicalDeviceComputeShaderDerivativesFeaturesNV;

	public Vk.StructureType sType;
	public void* pNext;
	public Vk.Bool32 ComputeDerivativeGroupQuads;
	public Vk.Bool32 ComputeDerivativeGroupLinear;

	/// <summary>Creates a new PhysicalDeviceComputeShaderDerivativesFeatures value with the correct type field.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void New(out PhysicalDeviceComputeShaderDerivativesFeatures value) => value = new() { sType = TYPE };
	/// <summary>Initializes the sType and pNext fields to the correct default values.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void Init(ref PhysicalDeviceComputeShaderDerivativesFeatures value) { value.sType = TYPE; value.pNext = null; }
}

[StructLayout(LayoutKind.Sequential)]
public unsafe partial struct PhysicalDeviceFragmentShaderBarycentricFeatures
{
	public const Vk.StructureType TYPE = Vk.StructureType.PhysicalDeviceFragmentShaderBarycentricFeaturesNV;

	public Vk.StructureType sType;
	public void* pNext;
	public Vk.Bool32 FragmentShaderBarycentric;

	/// <summary>Creates a new PhysicalDeviceFragmentShaderBarycentricFeatures value with the correct type field.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void New(out PhysicalDeviceFragmentShaderBarycentricFeatures value) => value = new() { sType = TYPE };
	/// <summary>Initializes the sType and pNext fields to the correct default values.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void Init(ref PhysicalDeviceFragmentShaderBarycentricFeatures value) { value.sType = TYPE; value.pNext = null; }
}

[StructLayout(LayoutKind.Sequential)]
public unsafe partial struct PhysicalDeviceShaderImageFootprintFeatures
{
	public const Vk.StructureType TYPE = Vk.StructureType.PhysicalDeviceShaderImageFootprintFeaturesNV;

	public Vk.StructureType sType;
	public void* pNext;
	public Vk.Bool32 ImageFootprint;

	/// <summary>Creates a new PhysicalDeviceShaderImageFootprintFeatures value with the correct type field.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void New(out PhysicalDeviceShaderImageFootprintFeatures value) => value = new() { sType = TYPE };
	/// <summary>Initializes the sType and pNext fields to the correct default values.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void Init(ref PhysicalDeviceShaderImageFootprintFeatures value) { value.sType = TYPE; value.pNext = null; }
}

[StructLayout(LayoutKind.Sequential)]
public unsafe partial struct PhysicalDeviceDedicatedAllocationImageAliasingFeatures
{
	public const Vk.StructureType TYPE = Vk.StructureType.PhysicalDeviceDedicatedAllocationImageAliasingFeaturesNV;

	public Vk.StructureType sType;
	public void* pNext;
	public Vk.Bool32 DedicatedAllocationImageAliasing;

	/// <summary>Creates a new PhysicalDeviceDedicatedAllocationImageAliasingFeatures value with the correct type field.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void New(out PhysicalDeviceDedicatedAllocationImageAliasingFeatures value) => value = new() { sType = TYPE };
	/// <summary>Initializes the sType and pNext fields to the correct default values.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void Init(ref PhysicalDeviceDedicatedAllocationImageAliasingFeatures value) { value.sType = TYPE; value.pNext = null; }
}

[StructLayout(LayoutKind.Sequential)]
public unsafe partial struct ShadingRatePalette
{
	public uint ShadingRatePaletteEntryCount;
	public Vk.NV.ShadingRatePaletteEntry* ShadingRatePaletteEntries;
}

[StructLayout(LayoutKind.Sequential)]
public unsafe partial struct PipelineViewportShadingRateImageStateCreateInfo
{
	public const Vk.StructureType TYPE = Vk.StructureType.PipelineViewportShadingRateImageStateCreateInfoNV;

	public Vk.StructureType sType;
	public void* pNext;
	public Vk.Bool32 ShadingRateImageEnable;
	public uint ViewportCount;
	public Vk.NV.ShadingRatePalette* ShadingRatePalettes;

	/// <summary>Creates a new PipelineViewportShadingRateImageStateCreateInfo value with the correct type field.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void New(out PipelineViewportShadingRateImageStateCreateInfo value) => value = new() { sType = TYPE };
	/// <summary>Initializes the sType and pNext fields to the correct default values.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void Init(ref PipelineViewportShadingRateImageStateCreateInfo value) { value.sType = TYPE; value.pNext = null; }
}

[StructLayout(LayoutKind.Sequential)]
public unsafe partial struct PhysicalDeviceShadingRateImageFeatures
{
	public const Vk.StructureType TYPE = Vk.StructureType.PhysicalDeviceShadingRateImageFeaturesNV;

	public Vk.StructureType sType;
	public void* pNext;
	public Vk.Bool32 ShadingRateImage;
	public Vk.Bool32 ShadingRateCoarseSampleOrder;

	/// <summary>Creates a new PhysicalDeviceShadingRateImageFeatures value with the correct type field.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void New(out PhysicalDeviceShadingRateImageFeatures value) => value = new() { sType = TYPE };
	/// <summary>Initializes the sType and pNext fields to the correct default values.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void Init(ref PhysicalDeviceShadingRateImageFeatures value) { value.sType = TYPE; value.pNext = null; }
}

[StructLayout(LayoutKind.Sequential)]
public unsafe partial struct PhysicalDeviceShadingRateImageProperties
{
	public const Vk.StructureType TYPE = Vk.StructureType.PhysicalDeviceShadingRateImagePropertiesNV;

	public Vk.StructureType sType;
	public void* pNext;
	public Vk.Extent2D ShadingRateTexelSize;
	public uint ShadingRatePaletteSize;
	public uint ShadingRateMaxCoarseSamples;

	/// <summary>Creates a new PhysicalDeviceShadingRateImageProperties value with the correct type field.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void New(out PhysicalDeviceShadingRateImageProperties value) => value = new() { sType = TYPE };
	/// <summary>Initializes the sType and pNext fields to the correct default values.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void Init(ref PhysicalDeviceShadingRateImageProperties value) { value.sType = TYPE; value.pNext = null; }
}

[StructLayout(LayoutKind.Sequential)]
public unsafe partial struct CoarseSampleLocation
{
	public uint PixelX;
	public uint PixelY;
	public uint Sample;
}

[StructLayout(LayoutKind.Sequential)]
public unsafe partial struct CoarseSampleOrderCustom
{
	public Vk.NV.ShadingRatePaletteEntry ShadingRate;
	public uint SampleCount;
	public uint SampleLocationCount;
	public Vk.NV.CoarseSampleLocation* SampleLocations;
}

[StructLayout(LayoutKind.Sequential)]
public unsafe partial struct PipelineViewportCoarseSampleOrderStateCreateInfo
{
	public const Vk.StructureType TYPE = Vk.StructureType.PipelineViewportCoarseSampleOrderStateCreateInfoNV;

	public Vk.StructureType sType;
	public void* pNext;
	public Vk.NV.CoarseSampleOrderType SampleOrderType;
	public uint CustomSampleOrderCount;
	public Vk.NV.CoarseSampleOrderCustom* CustomSampleOrders;

	/// <summary>Creates a new PipelineViewportCoarseSampleOrderStateCreateInfo value with the correct type field.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void New(out PipelineViewportCoarseSampleOrderStateCreateInfo value) => value = new() { sType = TYPE };
	/// <summary>Initializes the sType and pNext fields to the correct default values.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void Init(ref PipelineViewportCoarseSampleOrderStateCreateInfo value) { value.sType = TYPE; value.pNext = null; }
}

[StructLayout(LayoutKind.Sequential)]
public unsafe partial struct PhysicalDeviceMeshShaderFeatures
{
	public const Vk.StructureType TYPE = Vk.StructureType.PhysicalDeviceMeshShaderFeaturesNV;

	public Vk.StructureType sType;
	public void* pNext;
	public Vk.Bool32 TaskShader;
	public Vk.Bool32 MeshShader;

	/// <summary>Creates a new PhysicalDeviceMeshShaderFeatures value with the correct type field.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void New(out PhysicalDeviceMeshShaderFeatures value) => value = new() { sType = TYPE };
	/// <summary>Initializes the sType and pNext fields to the correct default values.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void Init(ref PhysicalDeviceMeshShaderFeatures value) { value.sType = TYPE; value.pNext = null; }
}

[StructLayout(LayoutKind.Sequential)]
public unsafe partial struct PhysicalDeviceMeshShaderProperties
{
	public const Vk.StructureType TYPE = Vk.StructureType.PhysicalDeviceMeshShaderPropertiesNV;

	public Vk.StructureType sType;
	public void* pNext;
	public uint MaxDrawMeshTasksCount;
	public uint MaxTaskWorkGroupInvocations;
	public fixed uint MaxTaskWorkGroupSize[3];
	public uint MaxTaskTotalMemorySize;
	public uint MaxTaskOutputCount;
	public uint MaxMeshWorkGroupInvocations;
	public fixed uint MaxMeshWorkGroupSize[3];
	public uint MaxMeshTotalMemorySize;
	public uint MaxMeshOutputVertices;
	public uint MaxMeshOutputPrimitives;
	public uint MaxMeshMultiviewViewCount;
	public uint MeshOutputPerVertexGranularity;
	public uint MeshOutputPerPrimitiveGranularity;

	/// <summary>Creates a new PhysicalDeviceMeshShaderProperties value with the correct type field.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void New(out PhysicalDeviceMeshShaderProperties value) => value = new() { sType = TYPE };
	/// <summary>Initializes the sType and pNext fields to the correct default values.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void Init(ref PhysicalDeviceMeshShaderProperties value) { value.sType = TYPE; value.pNext = null; }
}

[StructLayout(LayoutKind.Sequential)]
public unsafe partial struct DrawMeshTasksIndirectCommand
{
	public uint TaskCount;
	public uint FirstTask;
}

[StructLayout(LayoutKind.Sequential)]
public unsafe partial struct RayTracingShaderGroupCreateInfo
{
	public const Vk.StructureType TYPE = Vk.StructureType.RayTracingShaderGroupCreateInfoNV;

	public Vk.StructureType sType;
	public void* pNext;
	public Vk.KHR.RayTracingShaderGroupType Type;
	public uint GeneralShader;
	public uint ClosestHitShader;
	public uint AnyHitShader;
	public uint IntersectionShader;

	/// <summary>Creates a new RayTracingShaderGroupCreateInfo value with the correct type field.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void New(out RayTracingShaderGroupCreateInfo value) => value = new() { sType = TYPE };
	/// <summary>Initializes the sType and pNext fields to the correct default values.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void Init(ref RayTracingShaderGroupCreateInfo value) { value.sType = TYPE; value.pNext = null; }
}

[StructLayout(LayoutKind.Sequential)]
public unsafe partial struct RayTracingPipelineCreateInfo
{
	public const Vk.StructureType TYPE = Vk.StructureType.RayTracingPipelineCreateInfoNV;

	public Vk.StructureType sType;
	public void* pNext;
	public Vk.PipelineCreateFlags Flags;
	public uint StageCount;
	public Vk.PipelineShaderStageCreateInfo* Stages;
	public uint GroupCount;
	public Vk.NV.RayTracingShaderGroupCreateInfo* Groups;
	public uint MaxRecursionDepth;
	public Vk.PipelineLayout Layout;
	public Vk.Pipeline BasePipelineHandle;
	public int BasePipelineIndex;

	/// <summary>Creates a new RayTracingPipelineCreateInfo value with the correct type field.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void New(out RayTracingPipelineCreateInfo value) => value = new() { sType = TYPE };
	/// <summary>Initializes the sType and pNext fields to the correct default values.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void Init(ref RayTracingPipelineCreateInfo value) { value.sType = TYPE; value.pNext = null; }
}

[StructLayout(LayoutKind.Sequential)]
public unsafe partial struct GeometryTriangles
{
	public const Vk.StructureType TYPE = Vk.StructureType.GeometryTrianglesNV;

	public Vk.StructureType sType;
	public void* pNext;
	public Vk.Buffer VertexData;
	public Vk.DeviceSize VertexOffset;
	public uint VertexCount;
	public Vk.DeviceSize VertexStride;
	public Vk.Format VertexFormat;
	public Vk.Buffer IndexData;
	public Vk.DeviceSize IndexOffset;
	public uint IndexCount;
	public Vk.IndexType IndexType;
	public Vk.Buffer TransformData;
	public Vk.DeviceSize TransformOffset;

	/// <summary>Creates a new GeometryTriangles value with the correct type field.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void New(out GeometryTriangles value) => value = new() { sType = TYPE };
	/// <summary>Initializes the sType and pNext fields to the correct default values.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void Init(ref GeometryTriangles value) { value.sType = TYPE; value.pNext = null; }
}

[StructLayout(LayoutKind.Sequential)]
public unsafe partial struct GeometryAABB
{
	public const Vk.StructureType TYPE = Vk.StructureType.GeometryAabbNV;

	public Vk.StructureType sType;
	public void* pNext;
	public Vk.Buffer AabbData;
	public uint NumAABBs;
	public uint Stride;
	public Vk.DeviceSize Offset;

	/// <summary>Creates a new GeometryAABB value with the correct type field.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void New(out GeometryAABB value) => value = new() { sType = TYPE };
	/// <summary>Initializes the sType and pNext fields to the correct default values.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void Init(ref GeometryAABB value) { value.sType = TYPE; value.pNext = null; }
}

[StructLayout(LayoutKind.Sequential)]
public unsafe partial struct GeometryData
{
	public Vk.NV.GeometryTriangles Triangles;
	public Vk.NV.GeometryAABB Aabbs;
}

[StructLayout(LayoutKind.Sequential)]
public unsafe partial struct Geometry
{
	public const Vk.StructureType TYPE = Vk.StructureType.GeometryNV;

	public Vk.StructureType sType;
	public void* pNext;
	public Vk.KHR.GeometryType GeometryType;
	public Vk.NV.GeometryData Geometry_;
	public Vk.KHR.GeometryFlags Flags;

	/// <summary>Creates a new Geometry value with the correct type field.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void New(out Geometry value) => value = new() { sType = TYPE };
	/// <summary>Initializes the sType and pNext fields to the correct default values.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void Init(ref Geometry value) { value.sType = TYPE; value.pNext = null; }
}

[StructLayout(LayoutKind.Sequential)]
public unsafe partial struct AccelerationStructureInfo
{
	public const Vk.StructureType TYPE = Vk.StructureType.AccelerationStructureInfoNV;

	public Vk.StructureType sType;
	public void* pNext;
	public Vk.NV.AccelerationStructureType Type;
	public Vk.NV.BuildAccelerationStructureFlags Flags;
	public uint InstanceCount;
	public uint GeometryCount;
	public Vk.NV.Geometry* Geometries;

	/// <summary>Creates a new AccelerationStructureInfo value with the correct type field.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void New(out AccelerationStructureInfo value) => value = new() { sType = TYPE };
	/// <summary>Initializes the sType and pNext fields to the correct default values.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void Init(ref AccelerationStructureInfo value) { value.sType = TYPE; value.pNext = null; }
}

[StructLayout(LayoutKind.Sequential)]
public unsafe partial struct AccelerationStructureCreateInfo
{
	public const Vk.StructureType TYPE = Vk.StructureType.AccelerationStructureCreateInfoNV;

	public Vk.StructureType sType;
	public void* pNext;
	public Vk.DeviceSize CompactedSize;
	public Vk.NV.AccelerationStructureInfo Info;

	/// <summary>Creates a new AccelerationStructureCreateInfo value with the correct type field.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void New(out AccelerationStructureCreateInfo value) => value = new() { sType = TYPE };
	/// <summary>Initializes the sType and pNext fields to the correct default values.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void Init(ref AccelerationStructureCreateInfo value) { value.sType = TYPE; value.pNext = null; }
}

[StructLayout(LayoutKind.Sequential)]
public unsafe partial struct BindAccelerationStructureMemoryInfo
{
	public const Vk.StructureType TYPE = Vk.StructureType.BindAccelerationStructureMemoryInfoKHR;

	public Vk.StructureType sType;
	public void* pNext;
	public Vk.KHR.AccelerationStructure AccelerationStructure;
	public Vk.DeviceMemory Memory;
	public Vk.DeviceSize MemoryOffset;
	public uint DeviceIndexCount;
	public uint* DeviceIndices;

	/// <summary>Creates a new BindAccelerationStructureMemoryInfo value with the correct type field.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void New(out BindAccelerationStructureMemoryInfo value) => value = new() { sType = TYPE };
	/// <summary>Initializes the sType and pNext fields to the correct default values.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void Init(ref BindAccelerationStructureMemoryInfo value) { value.sType = TYPE; value.pNext = null; }
}

[StructLayout(LayoutKind.Sequential)]
public unsafe partial struct WriteDescriptorSetAccelerationStructure
{
	public const Vk.StructureType TYPE = Vk.StructureType.WriteDescriptorSetAccelerationStructureKHR;

	public Vk.StructureType sType;
	public void* pNext;
	public uint AccelerationStructureCount;
	public Vk.KHR.AccelerationStructure* AccelerationStructures;

	/// <summary>Creates a new WriteDescriptorSetAccelerationStructure value with the correct type field.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void New(out WriteDescriptorSetAccelerationStructure value) => value = new() { sType = TYPE };
	/// <summary>Initializes the sType and pNext fields to the correct default values.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void Init(ref WriteDescriptorSetAccelerationStructure value) { value.sType = TYPE; value.pNext = null; }
}

[StructLayout(LayoutKind.Sequential)]
public unsafe partial struct AccelerationStructureMemoryRequirementsInfo
{
	public const Vk.StructureType TYPE = Vk.StructureType.AccelerationStructureMemoryRequirementsInfoNV;

	public Vk.StructureType sType;
	public void* pNext;
	public Vk.NV.AccelerationStructureMemoryRequirementsType Type;
	public Vk.NV.AccelerationStructure AccelerationStructure;

	/// <summary>Creates a new AccelerationStructureMemoryRequirementsInfo value with the correct type field.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void New(out AccelerationStructureMemoryRequirementsInfo value) => value = new() { sType = TYPE };
	/// <summary>Initializes the sType and pNext fields to the correct default values.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void Init(ref AccelerationStructureMemoryRequirementsInfo value) { value.sType = TYPE; value.pNext = null; }
}

[StructLayout(LayoutKind.Sequential)]
public unsafe partial struct PhysicalDeviceRayTracingProperties
{
	public const Vk.StructureType TYPE = Vk.StructureType.PhysicalDeviceRayTracingPropertiesNV;

	public Vk.StructureType sType;
	public void* pNext;
	public uint ShaderGroupHandleSize;
	public uint MaxRecursionDepth;
	public uint MaxShaderGroupStride;
	public uint ShaderGroupBaseAlignment;
	public ulong MaxGeometryCount;
	public ulong MaxInstanceCount;
	public ulong MaxTriangleCount;
	public uint MaxDescriptorSetAccelerationStructures;

	/// <summary>Creates a new PhysicalDeviceRayTracingProperties value with the correct type field.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void New(out PhysicalDeviceRayTracingProperties value) => value = new() { sType = TYPE };
	/// <summary>Initializes the sType and pNext fields to the correct default values.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void Init(ref PhysicalDeviceRayTracingProperties value) { value.sType = TYPE; value.pNext = null; }
}

[StructLayout(LayoutKind.Sequential)]
public unsafe partial struct PhysicalDeviceCooperativeMatrixFeatures
{
	public const Vk.StructureType TYPE = Vk.StructureType.PhysicalDeviceCooperativeMatrixFeaturesNV;

	public Vk.StructureType sType;
	public void* pNext;
	public Vk.Bool32 CooperativeMatrix;
	public Vk.Bool32 CooperativeMatrixRobustBufferAccess;

	/// <summary>Creates a new PhysicalDeviceCooperativeMatrixFeatures value with the correct type field.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void New(out PhysicalDeviceCooperativeMatrixFeatures value) => value = new() { sType = TYPE };
	/// <summary>Initializes the sType and pNext fields to the correct default values.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void Init(ref PhysicalDeviceCooperativeMatrixFeatures value) { value.sType = TYPE; value.pNext = null; }
}

[StructLayout(LayoutKind.Sequential)]
public unsafe partial struct PhysicalDeviceCooperativeMatrixProperties
{
	public const Vk.StructureType TYPE = Vk.StructureType.PhysicalDeviceCooperativeMatrixPropertiesNV;

	public Vk.StructureType sType;
	public void* pNext;
	public Vk.ShaderStageFlags CooperativeMatrixSupportedStages;

	/// <summary>Creates a new PhysicalDeviceCooperativeMatrixProperties value with the correct type field.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void New(out PhysicalDeviceCooperativeMatrixProperties value) => value = new() { sType = TYPE };
	/// <summary>Initializes the sType and pNext fields to the correct default values.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void Init(ref PhysicalDeviceCooperativeMatrixProperties value) { value.sType = TYPE; value.pNext = null; }
}

[StructLayout(LayoutKind.Sequential)]
public unsafe partial struct CooperativeMatrixProperties
{
	public const Vk.StructureType TYPE = Vk.StructureType.CooperativeMatrixPropertiesNV;

	public Vk.StructureType sType;
	public void* pNext;
	public uint MSize;
	public uint NSize;
	public uint KSize;
	public Vk.NV.ComponentType AType;
	public Vk.NV.ComponentType BType;
	public Vk.NV.ComponentType CType;
	public Vk.NV.ComponentType DType;
	public Vk.NV.Scope Scope;

	/// <summary>Creates a new CooperativeMatrixProperties value with the correct type field.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void New(out CooperativeMatrixProperties value) => value = new() { sType = TYPE };
	/// <summary>Initializes the sType and pNext fields to the correct default values.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void Init(ref CooperativeMatrixProperties value) { value.sType = TYPE; value.pNext = null; }
}

[StructLayout(LayoutKind.Sequential)]
public unsafe partial struct PhysicalDeviceCoverageReductionModeFeatures
{
	public const Vk.StructureType TYPE = Vk.StructureType.PhysicalDeviceCoverageReductionModeFeaturesNV;

	public Vk.StructureType sType;
	public void* pNext;
	public Vk.Bool32 CoverageReductionMode;

	/// <summary>Creates a new PhysicalDeviceCoverageReductionModeFeatures value with the correct type field.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void New(out PhysicalDeviceCoverageReductionModeFeatures value) => value = new() { sType = TYPE };
	/// <summary>Initializes the sType and pNext fields to the correct default values.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void Init(ref PhysicalDeviceCoverageReductionModeFeatures value) { value.sType = TYPE; value.pNext = null; }
}

[StructLayout(LayoutKind.Sequential)]
public unsafe partial struct PipelineCoverageReductionStateCreateInfo
{
	public const Vk.StructureType TYPE = Vk.StructureType.PipelineCoverageReductionStateCreateInfoNV;

	public Vk.StructureType sType;
	public void* pNext;
	public Vk.NV.PipelineCoverageReductionStateCreateFlags Flags;
	public Vk.NV.CoverageReductionMode CoverageReductionMode;

	/// <summary>Creates a new PipelineCoverageReductionStateCreateInfo value with the correct type field.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void New(out PipelineCoverageReductionStateCreateInfo value) => value = new() { sType = TYPE };
	/// <summary>Initializes the sType and pNext fields to the correct default values.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void Init(ref PipelineCoverageReductionStateCreateInfo value) { value.sType = TYPE; value.pNext = null; }
}

[StructLayout(LayoutKind.Sequential)]
public unsafe partial struct FramebufferMixedSamplesCombination
{
	public const Vk.StructureType TYPE = Vk.StructureType.FramebufferMixedSamplesCombinationNV;

	public Vk.StructureType sType;
	public void* pNext;
	public Vk.NV.CoverageReductionMode CoverageReductionMode;
	public Vk.SampleCountFlags RasterizationSamples;
	public Vk.SampleCountFlags DepthStencilSamples;
	public Vk.SampleCountFlags ColorSamples;

	/// <summary>Creates a new FramebufferMixedSamplesCombination value with the correct type field.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void New(out FramebufferMixedSamplesCombination value) => value = new() { sType = TYPE };
	/// <summary>Initializes the sType and pNext fields to the correct default values.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void Init(ref FramebufferMixedSamplesCombination value) { value.sType = TYPE; value.pNext = null; }
}

[StructLayout(LayoutKind.Sequential)]
public unsafe partial struct PhysicalDeviceShaderSMBuiltinsProperties
{
	public const Vk.StructureType TYPE = Vk.StructureType.PhysicalDeviceShaderSmBuiltinsPropertiesNV;

	public Vk.StructureType sType;
	public void* pNext;
	public uint ShaderSMCount;
	public uint ShaderWarpsPerSM;

	/// <summary>Creates a new PhysicalDeviceShaderSMBuiltinsProperties value with the correct type field.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void New(out PhysicalDeviceShaderSMBuiltinsProperties value) => value = new() { sType = TYPE };
	/// <summary>Initializes the sType and pNext fields to the correct default values.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void Init(ref PhysicalDeviceShaderSMBuiltinsProperties value) { value.sType = TYPE; value.pNext = null; }
}

[StructLayout(LayoutKind.Sequential)]
public unsafe partial struct PhysicalDeviceShaderSMBuiltinsFeatures
{
	public const Vk.StructureType TYPE = Vk.StructureType.PhysicalDeviceShaderSmBuiltinsFeaturesNV;

	public Vk.StructureType sType;
	public void* pNext;
	public Vk.Bool32 ShaderSMBuiltins;

	/// <summary>Creates a new PhysicalDeviceShaderSMBuiltinsFeatures value with the correct type field.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void New(out PhysicalDeviceShaderSMBuiltinsFeatures value) => value = new() { sType = TYPE };
	/// <summary>Initializes the sType and pNext fields to the correct default values.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void Init(ref PhysicalDeviceShaderSMBuiltinsFeatures value) { value.sType = TYPE; value.pNext = null; }
}

[StructLayout(LayoutKind.Sequential)]
public unsafe partial struct AabbPositions
{
	public float MinX;
	public float MinY;
	public float MinZ;
	public float MaxX;
	public float MaxY;
	public float MaxZ;
}

[StructLayout(LayoutKind.Sequential)]
public unsafe partial struct TransformMatrix
{
	public fixed float Matrix[12];
}

[StructLayout(LayoutKind.Sequential)]
public unsafe partial struct AccelerationStructureInstance
{
	public Vk.KHR.TransformMatrix Transform;
	public uint InstanceCustomIndex;
	public uint Mask;
	public uint InstanceShaderBindingTableRecordOffset;
	public Vk.KHR.GeometryInstanceFlags Flags;
	public ulong AccelerationStructureReference;
}

[StructLayout(LayoutKind.Sequential)]
public unsafe partial struct PhysicalDeviceDiagnosticsConfigFeatures
{
	public const Vk.StructureType TYPE = Vk.StructureType.PhysicalDeviceDiagnosticsConfigFeaturesNV;

	public Vk.StructureType sType;
	public void* pNext;
	public Vk.Bool32 DiagnosticsConfig;

	/// <summary>Creates a new PhysicalDeviceDiagnosticsConfigFeatures value with the correct type field.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void New(out PhysicalDeviceDiagnosticsConfigFeatures value) => value = new() { sType = TYPE };
	/// <summary>Initializes the sType and pNext fields to the correct default values.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void Init(ref PhysicalDeviceDiagnosticsConfigFeatures value) { value.sType = TYPE; value.pNext = null; }
}

[StructLayout(LayoutKind.Sequential)]
public unsafe partial struct DeviceDiagnosticsConfigCreateInfo
{
	public const Vk.StructureType TYPE = Vk.StructureType.DeviceDiagnosticsConfigCreateInfoNV;

	public Vk.StructureType sType;
	public void* pNext;
	public Vk.NV.DeviceDiagnosticsConfigFlags Flags;

	/// <summary>Creates a new DeviceDiagnosticsConfigCreateInfo value with the correct type field.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void New(out DeviceDiagnosticsConfigCreateInfo value) => value = new() { sType = TYPE };
	/// <summary>Initializes the sType and pNext fields to the correct default values.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void Init(ref DeviceDiagnosticsConfigCreateInfo value) { value.sType = TYPE; value.pNext = null; }
}

} // namespace Vk.NV
