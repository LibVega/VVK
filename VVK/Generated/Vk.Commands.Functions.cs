/*
 * MIT License - Copyright(c) 2020 Sean Moss
 * This file is subject to the terms and conditions of the MIT License, the text of which can be found in the 'LICENSE'
 * file at the root of this repository, or online at<https://opensource.org/licenses/MIT>.
 */

/// This file was generated by VVKGen. Edits to this file will be lost on next generation.

using System;
using System.Runtime.InteropServices;
using System.Runtime.CompilerServices;


namespace Vk
{

public unsafe sealed partial class InstanceFunctionTable
{
	/// <summary>vkCreateInstance(<c>Vk.InstanceCreateInfo*</c>, <c>Vk.AllocationCallbacks*</c>, <c>Vk.Instance*</c>)</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static Vk.Result CreateInstance(Vk.InstanceCreateInfo* pCreateInfo, Vk.AllocationCallbacks* pAllocator, Vk.Instance* pInstance)
		=> vkCreateInstance(pCreateInfo, pAllocator, pInstance);

	/// <summary>vkGetDeviceProcAddr(<c>Vk.Device</c>, <c>byte*</c>)</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static delegate* unmanaged<void> GetDeviceProcAddr(Vk.Device device, byte* pName)
		=> vkGetDeviceProcAddr(device, pName);

	/// <summary>vkGetInstanceProcAddr(<c>Vk.Instance</c>, <c>byte*</c>)</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static delegate* unmanaged<void> GetInstanceProcAddr(Vk.Instance instance, byte* pName)
		=> vkGetInstanceProcAddr(instance, pName);

	/// <summary>vkEnumerateInstanceVersion(<c>uint*</c>)</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static Vk.Result EnumerateInstanceVersion(uint* pApiVersion)
		=> vkEnumerateInstanceVersion(pApiVersion);

	/// <summary>vkEnumerateInstanceLayerProperties(<c>uint*</c>, <c>Vk.LayerProperties*</c>)</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static Vk.Result EnumerateInstanceLayerProperties(uint* pPropertyCount, Vk.LayerProperties* pProperties)
		=> vkEnumerateInstanceLayerProperties(pPropertyCount, pProperties);

	/// <summary>vkEnumerateInstanceExtensionProperties(<c>byte*</c>, <c>uint*</c>, <c>Vk.ExtensionProperties*</c>)</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static Vk.Result EnumerateInstanceExtensionProperties(byte* pLayerName, uint* pPropertyCount, Vk.ExtensionProperties* pProperties)
		=> vkEnumerateInstanceExtensionProperties(pLayerName, pPropertyCount, pProperties);

	/// <summary>vkDestroyInstance(<c>Vk.Instance</c>, <c>Vk.AllocationCallbacks*</c>)</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void DestroyInstance(Vk.Instance instance, Vk.AllocationCallbacks* pAllocator)
		=> vkDestroyInstance(instance, pAllocator);

	/// <summary>vkEnumeratePhysicalDevices(<c>Vk.Instance</c>, <c>uint*</c>, <c>Vk.PhysicalDevice*</c>)</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result EnumeratePhysicalDevices(Vk.Instance instance, uint* pPhysicalDeviceCount, Vk.PhysicalDevice* pPhysicalDevices)
		=> vkEnumeratePhysicalDevices(instance, pPhysicalDeviceCount, pPhysicalDevices);

	/// <summary>vkGetPhysicalDeviceProperties(<c>Vk.PhysicalDevice</c>, <c>Vk.PhysicalDeviceProperties*</c>)</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void GetPhysicalDeviceProperties(Vk.PhysicalDevice physicalDevice, Vk.PhysicalDeviceProperties* pProperties)
		=> vkGetPhysicalDeviceProperties(physicalDevice, pProperties);

	/// <summary>vkGetPhysicalDeviceQueueFamilyProperties(<c>Vk.PhysicalDevice</c>, <c>uint*</c>, <c>Vk.QueueFamilyProperties*</c>)</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void GetPhysicalDeviceQueueFamilyProperties(Vk.PhysicalDevice physicalDevice, uint* pQueueFamilyPropertyCount, Vk.QueueFamilyProperties* pQueueFamilyProperties)
		=> vkGetPhysicalDeviceQueueFamilyProperties(physicalDevice, pQueueFamilyPropertyCount, pQueueFamilyProperties);

	/// <summary>vkGetPhysicalDeviceMemoryProperties(<c>Vk.PhysicalDevice</c>, <c>Vk.PhysicalDeviceMemoryProperties*</c>)</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void GetPhysicalDeviceMemoryProperties(Vk.PhysicalDevice physicalDevice, Vk.PhysicalDeviceMemoryProperties* pMemoryProperties)
		=> vkGetPhysicalDeviceMemoryProperties(physicalDevice, pMemoryProperties);

	/// <summary>vkGetPhysicalDeviceFeatures(<c>Vk.PhysicalDevice</c>, <c>Vk.PhysicalDeviceFeatures*</c>)</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void GetPhysicalDeviceFeatures(Vk.PhysicalDevice physicalDevice, Vk.PhysicalDeviceFeatures* pFeatures)
		=> vkGetPhysicalDeviceFeatures(physicalDevice, pFeatures);

	/// <summary>vkGetPhysicalDeviceFormatProperties(<c>Vk.PhysicalDevice</c>, <c>Vk.Format</c>, <c>Vk.FormatProperties*</c>)</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void GetPhysicalDeviceFormatProperties(Vk.PhysicalDevice physicalDevice, Vk.Format format, Vk.FormatProperties* pFormatProperties)
		=> vkGetPhysicalDeviceFormatProperties(physicalDevice, format, pFormatProperties);

	/// <summary>vkGetPhysicalDeviceImageFormatProperties(<c>Vk.PhysicalDevice</c>, <c>Vk.Format</c>, <c>Vk.ImageType</c>, <c>Vk.ImageTiling</c>, <c>Vk.ImageUsageFlags</c>, <c>Vk.ImageCreateFlags</c>, <c>Vk.ImageFormatProperties*</c>)</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result GetPhysicalDeviceImageFormatProperties(Vk.PhysicalDevice physicalDevice, Vk.Format format, Vk.ImageType type, Vk.ImageTiling tiling, Vk.ImageUsageFlags usage, Vk.ImageCreateFlags flags, Vk.ImageFormatProperties* pImageFormatProperties)
		=> vkGetPhysicalDeviceImageFormatProperties(physicalDevice, format, type, tiling, usage, flags, pImageFormatProperties);

	/// <summary>vkCreateDevice(<c>Vk.PhysicalDevice</c>, <c>Vk.DeviceCreateInfo*</c>, <c>Vk.AllocationCallbacks*</c>, <c>Vk.Device*</c>)</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result CreateDevice(Vk.PhysicalDevice physicalDevice, Vk.DeviceCreateInfo* pCreateInfo, Vk.AllocationCallbacks* pAllocator, Vk.Device* pDevice)
		=> vkCreateDevice(physicalDevice, pCreateInfo, pAllocator, pDevice);

	/// <summary>vkEnumerateDeviceLayerProperties(<c>Vk.PhysicalDevice</c>, <c>uint*</c>, <c>Vk.LayerProperties*</c>)</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result EnumerateDeviceLayerProperties(Vk.PhysicalDevice physicalDevice, uint* pPropertyCount, Vk.LayerProperties* pProperties)
		=> vkEnumerateDeviceLayerProperties(physicalDevice, pPropertyCount, pProperties);

	/// <summary>vkEnumerateDeviceExtensionProperties(<c>Vk.PhysicalDevice</c>, <c>byte*</c>, <c>uint*</c>, <c>Vk.ExtensionProperties*</c>)</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result EnumerateDeviceExtensionProperties(Vk.PhysicalDevice physicalDevice, byte* pLayerName, uint* pPropertyCount, Vk.ExtensionProperties* pProperties)
		=> vkEnumerateDeviceExtensionProperties(physicalDevice, pLayerName, pPropertyCount, pProperties);

	/// <summary>vkGetPhysicalDeviceSparseImageFormatProperties(<c>Vk.PhysicalDevice</c>, <c>Vk.Format</c>, <c>Vk.ImageType</c>, <c>Vk.SampleCountFlags</c>, <c>Vk.ImageUsageFlags</c>, <c>Vk.ImageTiling</c>, <c>uint*</c>, <c>Vk.SparseImageFormatProperties*</c>)</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void GetPhysicalDeviceSparseImageFormatProperties(Vk.PhysicalDevice physicalDevice, Vk.Format format, Vk.ImageType type, Vk.SampleCountFlags samples, Vk.ImageUsageFlags usage, Vk.ImageTiling tiling, uint* pPropertyCount, Vk.SparseImageFormatProperties* pProperties)
		=> vkGetPhysicalDeviceSparseImageFormatProperties(physicalDevice, format, type, samples, usage, tiling, pPropertyCount, pProperties);

	/// <summary>vkCreateAndroidSurfaceKHR(<c>Vk.Instance</c>, <c>Vk.KHR.AndroidSurfaceCreateInfo*</c>, <c>Vk.AllocationCallbacks*</c>, <c>Vk.KHR.Surface*</c>)</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result CreateAndroidSurfaceKHR(Vk.Instance instance, Vk.KHR.AndroidSurfaceCreateInfo* pCreateInfo, Vk.AllocationCallbacks* pAllocator, Vk.KHR.Surface* pSurface)
		=> vkCreateAndroidSurfaceKHR(instance, pCreateInfo, pAllocator, pSurface);

	/// <summary>vkGetPhysicalDeviceDisplayPropertiesKHR(<c>Vk.PhysicalDevice</c>, <c>uint*</c>, <c>Vk.KHR.DisplayProperties*</c>)</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result GetPhysicalDeviceDisplayPropertiesKHR(Vk.PhysicalDevice physicalDevice, uint* pPropertyCount, Vk.KHR.DisplayProperties* pProperties)
		=> vkGetPhysicalDeviceDisplayPropertiesKHR(physicalDevice, pPropertyCount, pProperties);

	/// <summary>vkGetPhysicalDeviceDisplayPlanePropertiesKHR(<c>Vk.PhysicalDevice</c>, <c>uint*</c>, <c>Vk.KHR.DisplayPlaneProperties*</c>)</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result GetPhysicalDeviceDisplayPlanePropertiesKHR(Vk.PhysicalDevice physicalDevice, uint* pPropertyCount, Vk.KHR.DisplayPlaneProperties* pProperties)
		=> vkGetPhysicalDeviceDisplayPlanePropertiesKHR(physicalDevice, pPropertyCount, pProperties);

	/// <summary>vkGetDisplayPlaneSupportedDisplaysKHR(<c>Vk.PhysicalDevice</c>, <c>uint</c>, <c>uint*</c>, <c>Vk.KHR.Display*</c>)</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result GetDisplayPlaneSupportedDisplaysKHR(Vk.PhysicalDevice physicalDevice, uint planeIndex, uint* pDisplayCount, Vk.KHR.Display* pDisplays)
		=> vkGetDisplayPlaneSupportedDisplaysKHR(physicalDevice, planeIndex, pDisplayCount, pDisplays);

	/// <summary>vkGetDisplayModePropertiesKHR(<c>Vk.PhysicalDevice</c>, <c>Vk.KHR.Display</c>, <c>uint*</c>, <c>Vk.KHR.DisplayModeProperties*</c>)</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result GetDisplayModePropertiesKHR(Vk.PhysicalDevice physicalDevice, Vk.KHR.Display display, uint* pPropertyCount, Vk.KHR.DisplayModeProperties* pProperties)
		=> vkGetDisplayModePropertiesKHR(physicalDevice, display, pPropertyCount, pProperties);

	/// <summary>vkCreateDisplayModeKHR(<c>Vk.PhysicalDevice</c>, <c>Vk.KHR.Display</c>, <c>Vk.KHR.DisplayModeCreateInfo*</c>, <c>Vk.AllocationCallbacks*</c>, <c>Vk.KHR.DisplayMode*</c>)</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result CreateDisplayModeKHR(Vk.PhysicalDevice physicalDevice, Vk.KHR.Display display, Vk.KHR.DisplayModeCreateInfo* pCreateInfo, Vk.AllocationCallbacks* pAllocator, Vk.KHR.DisplayMode* pMode)
		=> vkCreateDisplayModeKHR(physicalDevice, display, pCreateInfo, pAllocator, pMode);

	/// <summary>vkGetDisplayPlaneCapabilitiesKHR(<c>Vk.PhysicalDevice</c>, <c>Vk.KHR.DisplayMode</c>, <c>uint</c>, <c>Vk.KHR.DisplayPlaneCapabilities*</c>)</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result GetDisplayPlaneCapabilitiesKHR(Vk.PhysicalDevice physicalDevice, Vk.KHR.DisplayMode mode, uint planeIndex, Vk.KHR.DisplayPlaneCapabilities* pCapabilities)
		=> vkGetDisplayPlaneCapabilitiesKHR(physicalDevice, mode, planeIndex, pCapabilities);

	/// <summary>vkCreateDisplayPlaneSurfaceKHR(<c>Vk.Instance</c>, <c>Vk.KHR.DisplaySurfaceCreateInfo*</c>, <c>Vk.AllocationCallbacks*</c>, <c>Vk.KHR.Surface*</c>)</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result CreateDisplayPlaneSurfaceKHR(Vk.Instance instance, Vk.KHR.DisplaySurfaceCreateInfo* pCreateInfo, Vk.AllocationCallbacks* pAllocator, Vk.KHR.Surface* pSurface)
		=> vkCreateDisplayPlaneSurfaceKHR(instance, pCreateInfo, pAllocator, pSurface);

	/// <summary>vkDestroySurfaceKHR(<c>Vk.Instance</c>, <c>Vk.KHR.Surface</c>, <c>Vk.AllocationCallbacks*</c>)</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void DestroySurfaceKHR(Vk.Instance instance, Vk.KHR.Surface surface, Vk.AllocationCallbacks* pAllocator)
		=> vkDestroySurfaceKHR(instance, surface, pAllocator);

	/// <summary>vkGetPhysicalDeviceSurfaceSupportKHR(<c>Vk.PhysicalDevice</c>, <c>uint</c>, <c>Vk.KHR.Surface</c>, <c>Vk.Bool32*</c>)</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result GetPhysicalDeviceSurfaceSupportKHR(Vk.PhysicalDevice physicalDevice, uint queueFamilyIndex, Vk.KHR.Surface surface, Vk.Bool32* pSupported)
		=> vkGetPhysicalDeviceSurfaceSupportKHR(physicalDevice, queueFamilyIndex, surface, pSupported);

	/// <summary>vkGetPhysicalDeviceSurfaceCapabilitiesKHR(<c>Vk.PhysicalDevice</c>, <c>Vk.KHR.Surface</c>, <c>Vk.KHR.SurfaceCapabilities*</c>)</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result GetPhysicalDeviceSurfaceCapabilitiesKHR(Vk.PhysicalDevice physicalDevice, Vk.KHR.Surface surface, Vk.KHR.SurfaceCapabilities* pSurfaceCapabilities)
		=> vkGetPhysicalDeviceSurfaceCapabilitiesKHR(physicalDevice, surface, pSurfaceCapabilities);

	/// <summary>vkGetPhysicalDeviceSurfaceFormatsKHR(<c>Vk.PhysicalDevice</c>, <c>Vk.KHR.Surface</c>, <c>uint*</c>, <c>Vk.KHR.SurfaceFormat*</c>)</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result GetPhysicalDeviceSurfaceFormatsKHR(Vk.PhysicalDevice physicalDevice, Vk.KHR.Surface surface, uint* pSurfaceFormatCount, Vk.KHR.SurfaceFormat* pSurfaceFormats)
		=> vkGetPhysicalDeviceSurfaceFormatsKHR(physicalDevice, surface, pSurfaceFormatCount, pSurfaceFormats);

	/// <summary>vkGetPhysicalDeviceSurfacePresentModesKHR(<c>Vk.PhysicalDevice</c>, <c>Vk.KHR.Surface</c>, <c>uint*</c>, <c>Vk.KHR.PresentMode*</c>)</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result GetPhysicalDeviceSurfacePresentModesKHR(Vk.PhysicalDevice physicalDevice, Vk.KHR.Surface surface, uint* pPresentModeCount, Vk.KHR.PresentMode* pPresentModes)
		=> vkGetPhysicalDeviceSurfacePresentModesKHR(physicalDevice, surface, pPresentModeCount, pPresentModes);

	/// <summary>vkCreateViSurfaceNN(<c>Vk.Instance</c>, <c>Vk.NN.ViSurfaceCreateInfo*</c>, <c>Vk.AllocationCallbacks*</c>, <c>Vk.KHR.Surface*</c>)</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result CreateViSurfaceNN(Vk.Instance instance, Vk.NN.ViSurfaceCreateInfo* pCreateInfo, Vk.AllocationCallbacks* pAllocator, Vk.KHR.Surface* pSurface)
		=> vkCreateViSurfaceNN(instance, pCreateInfo, pAllocator, pSurface);

	/// <summary>vkCreateWaylandSurfaceKHR(<c>Vk.Instance</c>, <c>Vk.KHR.WaylandSurfaceCreateInfo*</c>, <c>Vk.AllocationCallbacks*</c>, <c>Vk.KHR.Surface*</c>)</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result CreateWaylandSurfaceKHR(Vk.Instance instance, Vk.KHR.WaylandSurfaceCreateInfo* pCreateInfo, Vk.AllocationCallbacks* pAllocator, Vk.KHR.Surface* pSurface)
		=> vkCreateWaylandSurfaceKHR(instance, pCreateInfo, pAllocator, pSurface);

	/// <summary>vkGetPhysicalDeviceWaylandPresentationSupportKHR(<c>Vk.PhysicalDevice</c>, <c>uint</c>, <c>void*</c>)</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Bool32 GetPhysicalDeviceWaylandPresentationSupportKHR(Vk.PhysicalDevice physicalDevice, uint queueFamilyIndex, void* display)
		=> vkGetPhysicalDeviceWaylandPresentationSupportKHR(physicalDevice, queueFamilyIndex, display);

	/// <summary>vkCreateWin32SurfaceKHR(<c>Vk.Instance</c>, <c>Vk.KHR.Win32SurfaceCreateInfo*</c>, <c>Vk.AllocationCallbacks*</c>, <c>Vk.KHR.Surface*</c>)</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result CreateWin32SurfaceKHR(Vk.Instance instance, Vk.KHR.Win32SurfaceCreateInfo* pCreateInfo, Vk.AllocationCallbacks* pAllocator, Vk.KHR.Surface* pSurface)
		=> vkCreateWin32SurfaceKHR(instance, pCreateInfo, pAllocator, pSurface);

	/// <summary>vkGetPhysicalDeviceWin32PresentationSupportKHR(<c>Vk.PhysicalDevice</c>, <c>uint</c>)</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Bool32 GetPhysicalDeviceWin32PresentationSupportKHR(Vk.PhysicalDevice physicalDevice, uint queueFamilyIndex)
		=> vkGetPhysicalDeviceWin32PresentationSupportKHR(physicalDevice, queueFamilyIndex);

	/// <summary>vkCreateXlibSurfaceKHR(<c>Vk.Instance</c>, <c>Vk.KHR.XlibSurfaceCreateInfo*</c>, <c>Vk.AllocationCallbacks*</c>, <c>Vk.KHR.Surface*</c>)</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result CreateXlibSurfaceKHR(Vk.Instance instance, Vk.KHR.XlibSurfaceCreateInfo* pCreateInfo, Vk.AllocationCallbacks* pAllocator, Vk.KHR.Surface* pSurface)
		=> vkCreateXlibSurfaceKHR(instance, pCreateInfo, pAllocator, pSurface);

	/// <summary>vkGetPhysicalDeviceXlibPresentationSupportKHR(<c>Vk.PhysicalDevice</c>, <c>uint</c>, <c>void*</c>, <c>ulong</c>)</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Bool32 GetPhysicalDeviceXlibPresentationSupportKHR(Vk.PhysicalDevice physicalDevice, uint queueFamilyIndex, void* dpy, ulong visualID)
		=> vkGetPhysicalDeviceXlibPresentationSupportKHR(physicalDevice, queueFamilyIndex, dpy, visualID);

	/// <summary>vkCreateXcbSurfaceKHR(<c>Vk.Instance</c>, <c>Vk.KHR.XcbSurfaceCreateInfo*</c>, <c>Vk.AllocationCallbacks*</c>, <c>Vk.KHR.Surface*</c>)</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result CreateXcbSurfaceKHR(Vk.Instance instance, Vk.KHR.XcbSurfaceCreateInfo* pCreateInfo, Vk.AllocationCallbacks* pAllocator, Vk.KHR.Surface* pSurface)
		=> vkCreateXcbSurfaceKHR(instance, pCreateInfo, pAllocator, pSurface);

	/// <summary>vkGetPhysicalDeviceXcbPresentationSupportKHR(<c>Vk.PhysicalDevice</c>, <c>uint</c>, <c>void*</c>, <c>uint</c>)</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Bool32 GetPhysicalDeviceXcbPresentationSupportKHR(Vk.PhysicalDevice physicalDevice, uint queueFamilyIndex, void* connection, uint visual_id)
		=> vkGetPhysicalDeviceXcbPresentationSupportKHR(physicalDevice, queueFamilyIndex, connection, visual_id);

	/// <summary>vkCreateDirectFBSurfaceEXT(<c>Vk.Instance</c>, <c>Vk.EXT.DirectFBSurfaceCreateInfo*</c>, <c>Vk.AllocationCallbacks*</c>, <c>Vk.KHR.Surface*</c>)</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result CreateDirectFBSurfaceEXT(Vk.Instance instance, Vk.EXT.DirectFBSurfaceCreateInfo* pCreateInfo, Vk.AllocationCallbacks* pAllocator, Vk.KHR.Surface* pSurface)
		=> vkCreateDirectFBSurfaceEXT(instance, pCreateInfo, pAllocator, pSurface);

	/// <summary>vkGetPhysicalDeviceDirectFBPresentationSupportEXT(<c>Vk.PhysicalDevice</c>, <c>uint</c>, <c>void*</c>)</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Bool32 GetPhysicalDeviceDirectFBPresentationSupportEXT(Vk.PhysicalDevice physicalDevice, uint queueFamilyIndex, void* dfb)
		=> vkGetPhysicalDeviceDirectFBPresentationSupportEXT(physicalDevice, queueFamilyIndex, dfb);

	/// <summary>vkCreateImagePipeSurfaceFUCHSIA(<c>Vk.Instance</c>, <c>Vk.FUCHSIA.ImagePipeSurfaceCreateInfo*</c>, <c>Vk.AllocationCallbacks*</c>, <c>Vk.KHR.Surface*</c>)</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result CreateImagePipeSurfaceFUCHSIA(Vk.Instance instance, Vk.FUCHSIA.ImagePipeSurfaceCreateInfo* pCreateInfo, Vk.AllocationCallbacks* pAllocator, Vk.KHR.Surface* pSurface)
		=> vkCreateImagePipeSurfaceFUCHSIA(instance, pCreateInfo, pAllocator, pSurface);

	/// <summary>vkCreateStreamDescriptorSurfaceGGP(<c>Vk.Instance</c>, <c>Vk.GGP.StreamDescriptorSurfaceCreateInfo*</c>, <c>Vk.AllocationCallbacks*</c>, <c>Vk.KHR.Surface*</c>)</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result CreateStreamDescriptorSurfaceGGP(Vk.Instance instance, Vk.GGP.StreamDescriptorSurfaceCreateInfo* pCreateInfo, Vk.AllocationCallbacks* pAllocator, Vk.KHR.Surface* pSurface)
		=> vkCreateStreamDescriptorSurfaceGGP(instance, pCreateInfo, pAllocator, pSurface);

	/// <summary>vkCreateDebugReportCallbackEXT(<c>Vk.Instance</c>, <c>Vk.EXT.DebugReportCallbackCreateInfo*</c>, <c>Vk.AllocationCallbacks*</c>, <c>Vk.EXT.DebugReportCallback*</c>)</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result CreateDebugReportCallbackEXT(Vk.Instance instance, Vk.EXT.DebugReportCallbackCreateInfo* pCreateInfo, Vk.AllocationCallbacks* pAllocator, Vk.EXT.DebugReportCallback* pCallback)
		=> vkCreateDebugReportCallbackEXT(instance, pCreateInfo, pAllocator, pCallback);

	/// <summary>vkDestroyDebugReportCallbackEXT(<c>Vk.Instance</c>, <c>Vk.EXT.DebugReportCallback</c>, <c>Vk.AllocationCallbacks*</c>)</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void DestroyDebugReportCallbackEXT(Vk.Instance instance, Vk.EXT.DebugReportCallback callback, Vk.AllocationCallbacks* pAllocator)
		=> vkDestroyDebugReportCallbackEXT(instance, callback, pAllocator);

	/// <summary>vkDebugReportMessageEXT(<c>Vk.Instance</c>, <c>Vk.EXT.DebugReportFlags</c>, <c>Vk.EXT.DebugReportObjectType</c>, <c>ulong</c>, <c>ulong</c>, <c>int</c>, <c>byte*</c>, <c>byte*</c>)</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void DebugReportMessageEXT(Vk.Instance instance, Vk.EXT.DebugReportFlags flags, Vk.EXT.DebugReportObjectType objectType, ulong @object, ulong location, int messageCode, byte* pLayerPrefix, byte* pMessage)
		=> vkDebugReportMessageEXT(instance, flags, objectType, @object, location, messageCode, pLayerPrefix, pMessage);

	/// <summary>vkGetPhysicalDeviceExternalImageFormatPropertiesNV(<c>Vk.PhysicalDevice</c>, <c>Vk.Format</c>, <c>Vk.ImageType</c>, <c>Vk.ImageTiling</c>, <c>Vk.ImageUsageFlags</c>, <c>Vk.ImageCreateFlags</c>, <c>Vk.NV.ExternalMemoryHandleTypeFlags</c>, <c>Vk.NV.ExternalImageFormatProperties*</c>)</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result GetPhysicalDeviceExternalImageFormatPropertiesNV(Vk.PhysicalDevice physicalDevice, Vk.Format format, Vk.ImageType type, Vk.ImageTiling tiling, Vk.ImageUsageFlags usage, Vk.ImageCreateFlags flags, Vk.NV.ExternalMemoryHandleTypeFlags externalHandleType, Vk.NV.ExternalImageFormatProperties* pExternalImageFormatProperties)
		=> vkGetPhysicalDeviceExternalImageFormatPropertiesNV(physicalDevice, format, type, tiling, usage, flags, externalHandleType, pExternalImageFormatProperties);

	/// <summary>vkGetPhysicalDeviceFeatures2(<c>Vk.PhysicalDevice</c>, <c>Vk.PhysicalDeviceFeatures2*</c>)</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void GetPhysicalDeviceFeatures2(Vk.PhysicalDevice physicalDevice, Vk.PhysicalDeviceFeatures2* pFeatures)
		=> vkGetPhysicalDeviceFeatures2(physicalDevice, pFeatures);

	/// <summary>vkGetPhysicalDeviceFeatures2KHR(<c>Vk.PhysicalDevice</c>, <c>Vk.PhysicalDeviceFeatures2*</c>)</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void GetPhysicalDeviceFeatures2KHR(Vk.PhysicalDevice physicalDevice, Vk.PhysicalDeviceFeatures2* pFeatures)
		=> vkGetPhysicalDeviceFeatures2KHR(physicalDevice, pFeatures);

	/// <summary>vkGetPhysicalDeviceProperties2(<c>Vk.PhysicalDevice</c>, <c>Vk.PhysicalDeviceProperties2*</c>)</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void GetPhysicalDeviceProperties2(Vk.PhysicalDevice physicalDevice, Vk.PhysicalDeviceProperties2* pProperties)
		=> vkGetPhysicalDeviceProperties2(physicalDevice, pProperties);

	/// <summary>vkGetPhysicalDeviceProperties2KHR(<c>Vk.PhysicalDevice</c>, <c>Vk.PhysicalDeviceProperties2*</c>)</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void GetPhysicalDeviceProperties2KHR(Vk.PhysicalDevice physicalDevice, Vk.PhysicalDeviceProperties2* pProperties)
		=> vkGetPhysicalDeviceProperties2KHR(physicalDevice, pProperties);

	/// <summary>vkGetPhysicalDeviceFormatProperties2(<c>Vk.PhysicalDevice</c>, <c>Vk.Format</c>, <c>Vk.FormatProperties2*</c>)</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void GetPhysicalDeviceFormatProperties2(Vk.PhysicalDevice physicalDevice, Vk.Format format, Vk.FormatProperties2* pFormatProperties)
		=> vkGetPhysicalDeviceFormatProperties2(physicalDevice, format, pFormatProperties);

	/// <summary>vkGetPhysicalDeviceFormatProperties2KHR(<c>Vk.PhysicalDevice</c>, <c>Vk.Format</c>, <c>Vk.FormatProperties2*</c>)</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void GetPhysicalDeviceFormatProperties2KHR(Vk.PhysicalDevice physicalDevice, Vk.Format format, Vk.FormatProperties2* pFormatProperties)
		=> vkGetPhysicalDeviceFormatProperties2KHR(physicalDevice, format, pFormatProperties);

	/// <summary>vkGetPhysicalDeviceImageFormatProperties2(<c>Vk.PhysicalDevice</c>, <c>Vk.PhysicalDeviceImageFormatInfo2*</c>, <c>Vk.ImageFormatProperties2*</c>)</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result GetPhysicalDeviceImageFormatProperties2(Vk.PhysicalDevice physicalDevice, Vk.PhysicalDeviceImageFormatInfo2* pImageFormatInfo, Vk.ImageFormatProperties2* pImageFormatProperties)
		=> vkGetPhysicalDeviceImageFormatProperties2(physicalDevice, pImageFormatInfo, pImageFormatProperties);

	/// <summary>vkGetPhysicalDeviceImageFormatProperties2KHR(<c>Vk.PhysicalDevice</c>, <c>Vk.PhysicalDeviceImageFormatInfo2*</c>, <c>Vk.ImageFormatProperties2*</c>)</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result GetPhysicalDeviceImageFormatProperties2KHR(Vk.PhysicalDevice physicalDevice, Vk.PhysicalDeviceImageFormatInfo2* pImageFormatInfo, Vk.ImageFormatProperties2* pImageFormatProperties)
		=> vkGetPhysicalDeviceImageFormatProperties2KHR(physicalDevice, pImageFormatInfo, pImageFormatProperties);

	/// <summary>vkGetPhysicalDeviceQueueFamilyProperties2(<c>Vk.PhysicalDevice</c>, <c>uint*</c>, <c>Vk.QueueFamilyProperties2*</c>)</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void GetPhysicalDeviceQueueFamilyProperties2(Vk.PhysicalDevice physicalDevice, uint* pQueueFamilyPropertyCount, Vk.QueueFamilyProperties2* pQueueFamilyProperties)
		=> vkGetPhysicalDeviceQueueFamilyProperties2(physicalDevice, pQueueFamilyPropertyCount, pQueueFamilyProperties);

	/// <summary>vkGetPhysicalDeviceQueueFamilyProperties2KHR(<c>Vk.PhysicalDevice</c>, <c>uint*</c>, <c>Vk.QueueFamilyProperties2*</c>)</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void GetPhysicalDeviceQueueFamilyProperties2KHR(Vk.PhysicalDevice physicalDevice, uint* pQueueFamilyPropertyCount, Vk.QueueFamilyProperties2* pQueueFamilyProperties)
		=> vkGetPhysicalDeviceQueueFamilyProperties2KHR(physicalDevice, pQueueFamilyPropertyCount, pQueueFamilyProperties);

	/// <summary>vkGetPhysicalDeviceMemoryProperties2(<c>Vk.PhysicalDevice</c>, <c>Vk.PhysicalDeviceMemoryProperties2*</c>)</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void GetPhysicalDeviceMemoryProperties2(Vk.PhysicalDevice physicalDevice, Vk.PhysicalDeviceMemoryProperties2* pMemoryProperties)
		=> vkGetPhysicalDeviceMemoryProperties2(physicalDevice, pMemoryProperties);

	/// <summary>vkGetPhysicalDeviceMemoryProperties2KHR(<c>Vk.PhysicalDevice</c>, <c>Vk.PhysicalDeviceMemoryProperties2*</c>)</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void GetPhysicalDeviceMemoryProperties2KHR(Vk.PhysicalDevice physicalDevice, Vk.PhysicalDeviceMemoryProperties2* pMemoryProperties)
		=> vkGetPhysicalDeviceMemoryProperties2KHR(physicalDevice, pMemoryProperties);

	/// <summary>vkGetPhysicalDeviceSparseImageFormatProperties2(<c>Vk.PhysicalDevice</c>, <c>Vk.PhysicalDeviceSparseImageFormatInfo2*</c>, <c>uint*</c>, <c>Vk.SparseImageFormatProperties2*</c>)</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void GetPhysicalDeviceSparseImageFormatProperties2(Vk.PhysicalDevice physicalDevice, Vk.PhysicalDeviceSparseImageFormatInfo2* pFormatInfo, uint* pPropertyCount, Vk.SparseImageFormatProperties2* pProperties)
		=> vkGetPhysicalDeviceSparseImageFormatProperties2(physicalDevice, pFormatInfo, pPropertyCount, pProperties);

	/// <summary>vkGetPhysicalDeviceSparseImageFormatProperties2KHR(<c>Vk.PhysicalDevice</c>, <c>Vk.PhysicalDeviceSparseImageFormatInfo2*</c>, <c>uint*</c>, <c>Vk.SparseImageFormatProperties2*</c>)</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void GetPhysicalDeviceSparseImageFormatProperties2KHR(Vk.PhysicalDevice physicalDevice, Vk.PhysicalDeviceSparseImageFormatInfo2* pFormatInfo, uint* pPropertyCount, Vk.SparseImageFormatProperties2* pProperties)
		=> vkGetPhysicalDeviceSparseImageFormatProperties2KHR(physicalDevice, pFormatInfo, pPropertyCount, pProperties);

	/// <summary>vkGetPhysicalDeviceExternalBufferProperties(<c>Vk.PhysicalDevice</c>, <c>Vk.PhysicalDeviceExternalBufferInfo*</c>, <c>Vk.ExternalBufferProperties*</c>)</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void GetPhysicalDeviceExternalBufferProperties(Vk.PhysicalDevice physicalDevice, Vk.PhysicalDeviceExternalBufferInfo* pExternalBufferInfo, Vk.ExternalBufferProperties* pExternalBufferProperties)
		=> vkGetPhysicalDeviceExternalBufferProperties(physicalDevice, pExternalBufferInfo, pExternalBufferProperties);

	/// <summary>vkGetPhysicalDeviceExternalBufferPropertiesKHR(<c>Vk.PhysicalDevice</c>, <c>Vk.PhysicalDeviceExternalBufferInfo*</c>, <c>Vk.ExternalBufferProperties*</c>)</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void GetPhysicalDeviceExternalBufferPropertiesKHR(Vk.PhysicalDevice physicalDevice, Vk.PhysicalDeviceExternalBufferInfo* pExternalBufferInfo, Vk.ExternalBufferProperties* pExternalBufferProperties)
		=> vkGetPhysicalDeviceExternalBufferPropertiesKHR(physicalDevice, pExternalBufferInfo, pExternalBufferProperties);

	/// <summary>vkGetPhysicalDeviceExternalSemaphoreProperties(<c>Vk.PhysicalDevice</c>, <c>Vk.PhysicalDeviceExternalSemaphoreInfo*</c>, <c>Vk.ExternalSemaphoreProperties*</c>)</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void GetPhysicalDeviceExternalSemaphoreProperties(Vk.PhysicalDevice physicalDevice, Vk.PhysicalDeviceExternalSemaphoreInfo* pExternalSemaphoreInfo, Vk.ExternalSemaphoreProperties* pExternalSemaphoreProperties)
		=> vkGetPhysicalDeviceExternalSemaphoreProperties(physicalDevice, pExternalSemaphoreInfo, pExternalSemaphoreProperties);

	/// <summary>vkGetPhysicalDeviceExternalSemaphorePropertiesKHR(<c>Vk.PhysicalDevice</c>, <c>Vk.PhysicalDeviceExternalSemaphoreInfo*</c>, <c>Vk.ExternalSemaphoreProperties*</c>)</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void GetPhysicalDeviceExternalSemaphorePropertiesKHR(Vk.PhysicalDevice physicalDevice, Vk.PhysicalDeviceExternalSemaphoreInfo* pExternalSemaphoreInfo, Vk.ExternalSemaphoreProperties* pExternalSemaphoreProperties)
		=> vkGetPhysicalDeviceExternalSemaphorePropertiesKHR(physicalDevice, pExternalSemaphoreInfo, pExternalSemaphoreProperties);

	/// <summary>vkGetPhysicalDeviceExternalFenceProperties(<c>Vk.PhysicalDevice</c>, <c>Vk.PhysicalDeviceExternalFenceInfo*</c>, <c>Vk.ExternalFenceProperties*</c>)</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void GetPhysicalDeviceExternalFenceProperties(Vk.PhysicalDevice physicalDevice, Vk.PhysicalDeviceExternalFenceInfo* pExternalFenceInfo, Vk.ExternalFenceProperties* pExternalFenceProperties)
		=> vkGetPhysicalDeviceExternalFenceProperties(physicalDevice, pExternalFenceInfo, pExternalFenceProperties);

	/// <summary>vkGetPhysicalDeviceExternalFencePropertiesKHR(<c>Vk.PhysicalDevice</c>, <c>Vk.PhysicalDeviceExternalFenceInfo*</c>, <c>Vk.ExternalFenceProperties*</c>)</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void GetPhysicalDeviceExternalFencePropertiesKHR(Vk.PhysicalDevice physicalDevice, Vk.PhysicalDeviceExternalFenceInfo* pExternalFenceInfo, Vk.ExternalFenceProperties* pExternalFenceProperties)
		=> vkGetPhysicalDeviceExternalFencePropertiesKHR(physicalDevice, pExternalFenceInfo, pExternalFenceProperties);

	/// <summary>vkReleaseDisplayEXT(<c>Vk.PhysicalDevice</c>, <c>Vk.KHR.Display</c>)</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result ReleaseDisplayEXT(Vk.PhysicalDevice physicalDevice, Vk.KHR.Display display)
		=> vkReleaseDisplayEXT(physicalDevice, display);

	/// <summary>vkAcquireXlibDisplayEXT(<c>Vk.PhysicalDevice</c>, <c>void*</c>, <c>Vk.KHR.Display</c>)</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result AcquireXlibDisplayEXT(Vk.PhysicalDevice physicalDevice, void* dpy, Vk.KHR.Display display)
		=> vkAcquireXlibDisplayEXT(physicalDevice, dpy, display);

	/// <summary>vkGetRandROutputDisplayEXT(<c>Vk.PhysicalDevice</c>, <c>void*</c>, <c>ulong</c>, <c>Vk.KHR.Display*</c>)</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result GetRandROutputDisplayEXT(Vk.PhysicalDevice physicalDevice, void* dpy, ulong rrOutput, Vk.KHR.Display* pDisplay)
		=> vkGetRandROutputDisplayEXT(physicalDevice, dpy, rrOutput, pDisplay);

	/// <summary>vkGetPhysicalDeviceSurfaceCapabilities2EXT(<c>Vk.PhysicalDevice</c>, <c>Vk.KHR.Surface</c>, <c>Vk.EXT.SurfaceCapabilities2*</c>)</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result GetPhysicalDeviceSurfaceCapabilities2EXT(Vk.PhysicalDevice physicalDevice, Vk.KHR.Surface surface, Vk.EXT.SurfaceCapabilities2* pSurfaceCapabilities)
		=> vkGetPhysicalDeviceSurfaceCapabilities2EXT(physicalDevice, surface, pSurfaceCapabilities);

	/// <summary>vkEnumeratePhysicalDeviceGroups(<c>Vk.Instance</c>, <c>uint*</c>, <c>Vk.PhysicalDeviceGroupProperties*</c>)</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result EnumeratePhysicalDeviceGroups(Vk.Instance instance, uint* pPhysicalDeviceGroupCount, Vk.PhysicalDeviceGroupProperties* pPhysicalDeviceGroupProperties)
		=> vkEnumeratePhysicalDeviceGroups(instance, pPhysicalDeviceGroupCount, pPhysicalDeviceGroupProperties);

	/// <summary>vkEnumeratePhysicalDeviceGroupsKHR(<c>Vk.Instance</c>, <c>uint*</c>, <c>Vk.PhysicalDeviceGroupProperties*</c>)</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result EnumeratePhysicalDeviceGroupsKHR(Vk.Instance instance, uint* pPhysicalDeviceGroupCount, Vk.PhysicalDeviceGroupProperties* pPhysicalDeviceGroupProperties)
		=> vkEnumeratePhysicalDeviceGroupsKHR(instance, pPhysicalDeviceGroupCount, pPhysicalDeviceGroupProperties);

	/// <summary>vkGetPhysicalDevicePresentRectanglesKHR(<c>Vk.PhysicalDevice</c>, <c>Vk.KHR.Surface</c>, <c>uint*</c>, <c>Vk.Rect2D*</c>)</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result GetPhysicalDevicePresentRectanglesKHR(Vk.PhysicalDevice physicalDevice, Vk.KHR.Surface surface, uint* pRectCount, Vk.Rect2D* pRects)
		=> vkGetPhysicalDevicePresentRectanglesKHR(physicalDevice, surface, pRectCount, pRects);

	/// <summary>vkCreateIOSSurfaceMVK(<c>Vk.Instance</c>, <c>Vk.MVK.IOSSurfaceCreateInfo*</c>, <c>Vk.AllocationCallbacks*</c>, <c>Vk.KHR.Surface*</c>)</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result CreateIOSSurfaceMVK(Vk.Instance instance, Vk.MVK.IOSSurfaceCreateInfo* pCreateInfo, Vk.AllocationCallbacks* pAllocator, Vk.KHR.Surface* pSurface)
		=> vkCreateIOSSurfaceMVK(instance, pCreateInfo, pAllocator, pSurface);

	/// <summary>vkCreateMacOSSurfaceMVK(<c>Vk.Instance</c>, <c>Vk.MVK.MacOSSurfaceCreateInfo*</c>, <c>Vk.AllocationCallbacks*</c>, <c>Vk.KHR.Surface*</c>)</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result CreateMacOSSurfaceMVK(Vk.Instance instance, Vk.MVK.MacOSSurfaceCreateInfo* pCreateInfo, Vk.AllocationCallbacks* pAllocator, Vk.KHR.Surface* pSurface)
		=> vkCreateMacOSSurfaceMVK(instance, pCreateInfo, pAllocator, pSurface);

	/// <summary>vkCreateMetalSurfaceEXT(<c>Vk.Instance</c>, <c>Vk.EXT.MetalSurfaceCreateInfo*</c>, <c>Vk.AllocationCallbacks*</c>, <c>Vk.KHR.Surface*</c>)</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result CreateMetalSurfaceEXT(Vk.Instance instance, Vk.EXT.MetalSurfaceCreateInfo* pCreateInfo, Vk.AllocationCallbacks* pAllocator, Vk.KHR.Surface* pSurface)
		=> vkCreateMetalSurfaceEXT(instance, pCreateInfo, pAllocator, pSurface);

	/// <summary>vkGetPhysicalDeviceMultisamplePropertiesEXT(<c>Vk.PhysicalDevice</c>, <c>Vk.SampleCountFlags</c>, <c>Vk.EXT.MultisampleProperties*</c>)</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void GetPhysicalDeviceMultisamplePropertiesEXT(Vk.PhysicalDevice physicalDevice, Vk.SampleCountFlags samples, Vk.EXT.MultisampleProperties* pMultisampleProperties)
		=> vkGetPhysicalDeviceMultisamplePropertiesEXT(physicalDevice, samples, pMultisampleProperties);

	/// <summary>vkGetPhysicalDeviceSurfaceCapabilities2KHR(<c>Vk.PhysicalDevice</c>, <c>Vk.KHR.PhysicalDeviceSurfaceInfo2*</c>, <c>Vk.KHR.SurfaceCapabilities2*</c>)</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result GetPhysicalDeviceSurfaceCapabilities2KHR(Vk.PhysicalDevice physicalDevice, Vk.KHR.PhysicalDeviceSurfaceInfo2* pSurfaceInfo, Vk.KHR.SurfaceCapabilities2* pSurfaceCapabilities)
		=> vkGetPhysicalDeviceSurfaceCapabilities2KHR(physicalDevice, pSurfaceInfo, pSurfaceCapabilities);

	/// <summary>vkGetPhysicalDeviceSurfaceFormats2KHR(<c>Vk.PhysicalDevice</c>, <c>Vk.KHR.PhysicalDeviceSurfaceInfo2*</c>, <c>uint*</c>, <c>Vk.KHR.SurfaceFormat2*</c>)</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result GetPhysicalDeviceSurfaceFormats2KHR(Vk.PhysicalDevice physicalDevice, Vk.KHR.PhysicalDeviceSurfaceInfo2* pSurfaceInfo, uint* pSurfaceFormatCount, Vk.KHR.SurfaceFormat2* pSurfaceFormats)
		=> vkGetPhysicalDeviceSurfaceFormats2KHR(physicalDevice, pSurfaceInfo, pSurfaceFormatCount, pSurfaceFormats);

	/// <summary>vkGetPhysicalDeviceDisplayProperties2KHR(<c>Vk.PhysicalDevice</c>, <c>uint*</c>, <c>Vk.KHR.DisplayProperties2*</c>)</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result GetPhysicalDeviceDisplayProperties2KHR(Vk.PhysicalDevice physicalDevice, uint* pPropertyCount, Vk.KHR.DisplayProperties2* pProperties)
		=> vkGetPhysicalDeviceDisplayProperties2KHR(physicalDevice, pPropertyCount, pProperties);

	/// <summary>vkGetPhysicalDeviceDisplayPlaneProperties2KHR(<c>Vk.PhysicalDevice</c>, <c>uint*</c>, <c>Vk.KHR.DisplayPlaneProperties2*</c>)</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result GetPhysicalDeviceDisplayPlaneProperties2KHR(Vk.PhysicalDevice physicalDevice, uint* pPropertyCount, Vk.KHR.DisplayPlaneProperties2* pProperties)
		=> vkGetPhysicalDeviceDisplayPlaneProperties2KHR(physicalDevice, pPropertyCount, pProperties);

	/// <summary>vkGetDisplayModeProperties2KHR(<c>Vk.PhysicalDevice</c>, <c>Vk.KHR.Display</c>, <c>uint*</c>, <c>Vk.KHR.DisplayModeProperties2*</c>)</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result GetDisplayModeProperties2KHR(Vk.PhysicalDevice physicalDevice, Vk.KHR.Display display, uint* pPropertyCount, Vk.KHR.DisplayModeProperties2* pProperties)
		=> vkGetDisplayModeProperties2KHR(physicalDevice, display, pPropertyCount, pProperties);

	/// <summary>vkGetDisplayPlaneCapabilities2KHR(<c>Vk.PhysicalDevice</c>, <c>Vk.KHR.DisplayPlaneInfo2*</c>, <c>Vk.KHR.DisplayPlaneCapabilities2*</c>)</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result GetDisplayPlaneCapabilities2KHR(Vk.PhysicalDevice physicalDevice, Vk.KHR.DisplayPlaneInfo2* pDisplayPlaneInfo, Vk.KHR.DisplayPlaneCapabilities2* pCapabilities)
		=> vkGetDisplayPlaneCapabilities2KHR(physicalDevice, pDisplayPlaneInfo, pCapabilities);

	/// <summary>vkGetPhysicalDeviceCalibrateableTimeDomainsEXT(<c>Vk.PhysicalDevice</c>, <c>uint*</c>, <c>Vk.EXT.TimeDomain*</c>)</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result GetPhysicalDeviceCalibrateableTimeDomainsEXT(Vk.PhysicalDevice physicalDevice, uint* pTimeDomainCount, Vk.EXT.TimeDomain* pTimeDomains)
		=> vkGetPhysicalDeviceCalibrateableTimeDomainsEXT(physicalDevice, pTimeDomainCount, pTimeDomains);

	/// <summary>vkCreateDebugUtilsMessengerEXT(<c>Vk.Instance</c>, <c>Vk.EXT.DebugUtilsMessengerCreateInfo*</c>, <c>Vk.AllocationCallbacks*</c>, <c>Vk.EXT.DebugUtilsMessenger*</c>)</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result CreateDebugUtilsMessengerEXT(Vk.Instance instance, Vk.EXT.DebugUtilsMessengerCreateInfo* pCreateInfo, Vk.AllocationCallbacks* pAllocator, Vk.EXT.DebugUtilsMessenger* pMessenger)
		=> vkCreateDebugUtilsMessengerEXT(instance, pCreateInfo, pAllocator, pMessenger);

	/// <summary>vkDestroyDebugUtilsMessengerEXT(<c>Vk.Instance</c>, <c>Vk.EXT.DebugUtilsMessenger</c>, <c>Vk.AllocationCallbacks*</c>)</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void DestroyDebugUtilsMessengerEXT(Vk.Instance instance, Vk.EXT.DebugUtilsMessenger messenger, Vk.AllocationCallbacks* pAllocator)
		=> vkDestroyDebugUtilsMessengerEXT(instance, messenger, pAllocator);

	/// <summary>vkSubmitDebugUtilsMessageEXT(<c>Vk.Instance</c>, <c>Vk.EXT.DebugUtilsMessageSeverityFlags</c>, <c>Vk.EXT.DebugUtilsMessageTypeFlags</c>, <c>Vk.EXT.DebugUtilsMessengerCallbackData*</c>)</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void SubmitDebugUtilsMessageEXT(Vk.Instance instance, Vk.EXT.DebugUtilsMessageSeverityFlags messageSeverity, Vk.EXT.DebugUtilsMessageTypeFlags messageTypes, Vk.EXT.DebugUtilsMessengerCallbackData* pCallbackData)
		=> vkSubmitDebugUtilsMessageEXT(instance, messageSeverity, messageTypes, pCallbackData);

	/// <summary>vkGetPhysicalDeviceCooperativeMatrixPropertiesNV(<c>Vk.PhysicalDevice</c>, <c>uint*</c>, <c>Vk.NV.CooperativeMatrixProperties*</c>)</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result GetPhysicalDeviceCooperativeMatrixPropertiesNV(Vk.PhysicalDevice physicalDevice, uint* pPropertyCount, Vk.NV.CooperativeMatrixProperties* pProperties)
		=> vkGetPhysicalDeviceCooperativeMatrixPropertiesNV(physicalDevice, pPropertyCount, pProperties);

	/// <summary>vkGetPhysicalDeviceSurfacePresentModes2EXT(<c>Vk.PhysicalDevice</c>, <c>Vk.KHR.PhysicalDeviceSurfaceInfo2*</c>, <c>uint*</c>, <c>Vk.KHR.PresentMode*</c>)</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result GetPhysicalDeviceSurfacePresentModes2EXT(Vk.PhysicalDevice physicalDevice, Vk.KHR.PhysicalDeviceSurfaceInfo2* pSurfaceInfo, uint* pPresentModeCount, Vk.KHR.PresentMode* pPresentModes)
		=> vkGetPhysicalDeviceSurfacePresentModes2EXT(physicalDevice, pSurfaceInfo, pPresentModeCount, pPresentModes);

	/// <summary>vkEnumeratePhysicalDeviceQueueFamilyPerformanceQueryCountersKHR(<c>Vk.PhysicalDevice</c>, <c>uint</c>, <c>uint*</c>, <c>Vk.KHR.PerformanceCounter*</c>, <c>Vk.KHR.PerformanceCounterDescription*</c>)</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result EnumeratePhysicalDeviceQueueFamilyPerformanceQueryCountersKHR(Vk.PhysicalDevice physicalDevice, uint queueFamilyIndex, uint* pCounterCount, Vk.KHR.PerformanceCounter* pCounters, Vk.KHR.PerformanceCounterDescription* pCounterDescriptions)
		=> vkEnumeratePhysicalDeviceQueueFamilyPerformanceQueryCountersKHR(physicalDevice, queueFamilyIndex, pCounterCount, pCounters, pCounterDescriptions);

	/// <summary>vkGetPhysicalDeviceQueueFamilyPerformanceQueryPassesKHR(<c>Vk.PhysicalDevice</c>, <c>Vk.KHR.QueryPoolPerformanceCreateInfo*</c>, <c>uint*</c>)</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void GetPhysicalDeviceQueueFamilyPerformanceQueryPassesKHR(Vk.PhysicalDevice physicalDevice, Vk.KHR.QueryPoolPerformanceCreateInfo* pPerformanceQueryCreateInfo, uint* pNumPasses)
		=> vkGetPhysicalDeviceQueueFamilyPerformanceQueryPassesKHR(physicalDevice, pPerformanceQueryCreateInfo, pNumPasses);

	/// <summary>vkCreateHeadlessSurfaceEXT(<c>Vk.Instance</c>, <c>Vk.EXT.HeadlessSurfaceCreateInfo*</c>, <c>Vk.AllocationCallbacks*</c>, <c>Vk.KHR.Surface*</c>)</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result CreateHeadlessSurfaceEXT(Vk.Instance instance, Vk.EXT.HeadlessSurfaceCreateInfo* pCreateInfo, Vk.AllocationCallbacks* pAllocator, Vk.KHR.Surface* pSurface)
		=> vkCreateHeadlessSurfaceEXT(instance, pCreateInfo, pAllocator, pSurface);

	/// <summary>vkGetPhysicalDeviceSupportedFramebufferMixedSamplesCombinationsNV(<c>Vk.PhysicalDevice</c>, <c>uint*</c>, <c>Vk.NV.FramebufferMixedSamplesCombination*</c>)</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result GetPhysicalDeviceSupportedFramebufferMixedSamplesCombinationsNV(Vk.PhysicalDevice physicalDevice, uint* pCombinationCount, Vk.NV.FramebufferMixedSamplesCombination* pCombinations)
		=> vkGetPhysicalDeviceSupportedFramebufferMixedSamplesCombinationsNV(physicalDevice, pCombinationCount, pCombinations);

	/// <summary>vkGetPhysicalDeviceToolPropertiesEXT(<c>Vk.PhysicalDevice</c>, <c>uint*</c>, <c>Vk.EXT.PhysicalDeviceToolProperties*</c>)</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result GetPhysicalDeviceToolPropertiesEXT(Vk.PhysicalDevice physicalDevice, uint* pToolCount, Vk.EXT.PhysicalDeviceToolProperties* pToolProperties)
		=> vkGetPhysicalDeviceToolPropertiesEXT(physicalDevice, pToolCount, pToolProperties);

	/// <summary>vkGetPhysicalDeviceFragmentShadingRatesKHR(<c>Vk.PhysicalDevice</c>, <c>uint*</c>, <c>Vk.KHR.PhysicalDeviceFragmentShadingRate*</c>)</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result GetPhysicalDeviceFragmentShadingRatesKHR(Vk.PhysicalDevice physicalDevice, uint* pFragmentShadingRateCount, Vk.KHR.PhysicalDeviceFragmentShadingRate* pFragmentShadingRates)
		=> vkGetPhysicalDeviceFragmentShadingRatesKHR(physicalDevice, pFragmentShadingRateCount, pFragmentShadingRates);

}

public unsafe sealed partial class DeviceFunctionTable
{
	/// <summary>vkDestroyDevice(<c>Vk.Device</c>, <c>Vk.AllocationCallbacks*</c>)</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void DestroyDevice(Vk.Device device, Vk.AllocationCallbacks* pAllocator)
		=> vkDestroyDevice(device, pAllocator);

	/// <summary>vkGetDeviceQueue(<c>Vk.Device</c>, <c>uint</c>, <c>uint</c>, <c>Vk.Queue*</c>)</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void GetDeviceQueue(Vk.Device device, uint queueFamilyIndex, uint queueIndex, Vk.Queue* pQueue)
		=> vkGetDeviceQueue(device, queueFamilyIndex, queueIndex, pQueue);

	/// <summary>vkQueueSubmit(<c>Vk.Queue</c>, <c>uint</c>, <c>Vk.SubmitInfo*</c>, <c>Vk.Fence</c>)</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result QueueSubmit(Vk.Queue queue, uint submitCount, Vk.SubmitInfo* pSubmits, Vk.Fence fence)
		=> vkQueueSubmit(queue, submitCount, pSubmits, fence);

	/// <summary>vkQueueWaitIdle(<c>Vk.Queue</c>)</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result QueueWaitIdle(Vk.Queue queue)
		=> vkQueueWaitIdle(queue);

	/// <summary>vkDeviceWaitIdle(<c>Vk.Device</c>)</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result DeviceWaitIdle(Vk.Device device)
		=> vkDeviceWaitIdle(device);

	/// <summary>vkAllocateMemory(<c>Vk.Device</c>, <c>Vk.MemoryAllocateInfo*</c>, <c>Vk.AllocationCallbacks*</c>, <c>Vk.DeviceMemory*</c>)</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result AllocateMemory(Vk.Device device, Vk.MemoryAllocateInfo* pAllocateInfo, Vk.AllocationCallbacks* pAllocator, Vk.DeviceMemory* pMemory)
		=> vkAllocateMemory(device, pAllocateInfo, pAllocator, pMemory);

	/// <summary>vkFreeMemory(<c>Vk.Device</c>, <c>Vk.DeviceMemory</c>, <c>Vk.AllocationCallbacks*</c>)</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void FreeMemory(Vk.Device device, Vk.DeviceMemory memory, Vk.AllocationCallbacks* pAllocator)
		=> vkFreeMemory(device, memory, pAllocator);

	/// <summary>vkMapMemory(<c>Vk.Device</c>, <c>Vk.DeviceMemory</c>, <c>Vk.DeviceSize</c>, <c>Vk.DeviceSize</c>, <c>Vk.MemoryMapFlags</c>, <c>void**</c>)</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result MapMemory(Vk.Device device, Vk.DeviceMemory memory, Vk.DeviceSize offset, Vk.DeviceSize size, Vk.MemoryMapFlags flags, void** ppData)
		=> vkMapMemory(device, memory, offset, size, flags, ppData);

	/// <summary>vkUnmapMemory(<c>Vk.Device</c>, <c>Vk.DeviceMemory</c>)</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void UnmapMemory(Vk.Device device, Vk.DeviceMemory memory)
		=> vkUnmapMemory(device, memory);

	/// <summary>vkFlushMappedMemoryRanges(<c>Vk.Device</c>, <c>uint</c>, <c>Vk.MappedMemoryRange*</c>)</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result FlushMappedMemoryRanges(Vk.Device device, uint memoryRangeCount, Vk.MappedMemoryRange* pMemoryRanges)
		=> vkFlushMappedMemoryRanges(device, memoryRangeCount, pMemoryRanges);

	/// <summary>vkInvalidateMappedMemoryRanges(<c>Vk.Device</c>, <c>uint</c>, <c>Vk.MappedMemoryRange*</c>)</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result InvalidateMappedMemoryRanges(Vk.Device device, uint memoryRangeCount, Vk.MappedMemoryRange* pMemoryRanges)
		=> vkInvalidateMappedMemoryRanges(device, memoryRangeCount, pMemoryRanges);

	/// <summary>vkGetDeviceMemoryCommitment(<c>Vk.Device</c>, <c>Vk.DeviceMemory</c>, <c>Vk.DeviceSize*</c>)</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void GetDeviceMemoryCommitment(Vk.Device device, Vk.DeviceMemory memory, Vk.DeviceSize* pCommittedMemoryInBytes)
		=> vkGetDeviceMemoryCommitment(device, memory, pCommittedMemoryInBytes);

	/// <summary>vkGetBufferMemoryRequirements(<c>Vk.Device</c>, <c>Vk.Buffer</c>, <c>Vk.MemoryRequirements*</c>)</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void GetBufferMemoryRequirements(Vk.Device device, Vk.Buffer buffer, Vk.MemoryRequirements* pMemoryRequirements)
		=> vkGetBufferMemoryRequirements(device, buffer, pMemoryRequirements);

	/// <summary>vkBindBufferMemory(<c>Vk.Device</c>, <c>Vk.Buffer</c>, <c>Vk.DeviceMemory</c>, <c>Vk.DeviceSize</c>)</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result BindBufferMemory(Vk.Device device, Vk.Buffer buffer, Vk.DeviceMemory memory, Vk.DeviceSize memoryOffset)
		=> vkBindBufferMemory(device, buffer, memory, memoryOffset);

	/// <summary>vkGetImageMemoryRequirements(<c>Vk.Device</c>, <c>Vk.Image</c>, <c>Vk.MemoryRequirements*</c>)</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void GetImageMemoryRequirements(Vk.Device device, Vk.Image image, Vk.MemoryRequirements* pMemoryRequirements)
		=> vkGetImageMemoryRequirements(device, image, pMemoryRequirements);

	/// <summary>vkBindImageMemory(<c>Vk.Device</c>, <c>Vk.Image</c>, <c>Vk.DeviceMemory</c>, <c>Vk.DeviceSize</c>)</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result BindImageMemory(Vk.Device device, Vk.Image image, Vk.DeviceMemory memory, Vk.DeviceSize memoryOffset)
		=> vkBindImageMemory(device, image, memory, memoryOffset);

	/// <summary>vkGetImageSparseMemoryRequirements(<c>Vk.Device</c>, <c>Vk.Image</c>, <c>uint*</c>, <c>Vk.SparseImageMemoryRequirements*</c>)</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void GetImageSparseMemoryRequirements(Vk.Device device, Vk.Image image, uint* pSparseMemoryRequirementCount, Vk.SparseImageMemoryRequirements* pSparseMemoryRequirements)
		=> vkGetImageSparseMemoryRequirements(device, image, pSparseMemoryRequirementCount, pSparseMemoryRequirements);

	/// <summary>vkQueueBindSparse(<c>Vk.Queue</c>, <c>uint</c>, <c>Vk.BindSparseInfo*</c>, <c>Vk.Fence</c>)</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result QueueBindSparse(Vk.Queue queue, uint bindInfoCount, Vk.BindSparseInfo* pBindInfo, Vk.Fence fence)
		=> vkQueueBindSparse(queue, bindInfoCount, pBindInfo, fence);

	/// <summary>vkCreateFence(<c>Vk.Device</c>, <c>Vk.FenceCreateInfo*</c>, <c>Vk.AllocationCallbacks*</c>, <c>Vk.Fence*</c>)</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result CreateFence(Vk.Device device, Vk.FenceCreateInfo* pCreateInfo, Vk.AllocationCallbacks* pAllocator, Vk.Fence* pFence)
		=> vkCreateFence(device, pCreateInfo, pAllocator, pFence);

	/// <summary>vkDestroyFence(<c>Vk.Device</c>, <c>Vk.Fence</c>, <c>Vk.AllocationCallbacks*</c>)</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void DestroyFence(Vk.Device device, Vk.Fence fence, Vk.AllocationCallbacks* pAllocator)
		=> vkDestroyFence(device, fence, pAllocator);

	/// <summary>vkResetFences(<c>Vk.Device</c>, <c>uint</c>, <c>Vk.Fence*</c>)</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result ResetFences(Vk.Device device, uint fenceCount, Vk.Fence* pFences)
		=> vkResetFences(device, fenceCount, pFences);

	/// <summary>vkGetFenceStatus(<c>Vk.Device</c>, <c>Vk.Fence</c>)</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result GetFenceStatus(Vk.Device device, Vk.Fence fence)
		=> vkGetFenceStatus(device, fence);

	/// <summary>vkWaitForFences(<c>Vk.Device</c>, <c>uint</c>, <c>Vk.Fence*</c>, <c>Vk.Bool32</c>, <c>ulong</c>)</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result WaitForFences(Vk.Device device, uint fenceCount, Vk.Fence* pFences, Vk.Bool32 waitAll, ulong timeout)
		=> vkWaitForFences(device, fenceCount, pFences, waitAll, timeout);

	/// <summary>vkCreateSemaphore(<c>Vk.Device</c>, <c>Vk.SemaphoreCreateInfo*</c>, <c>Vk.AllocationCallbacks*</c>, <c>Vk.Semaphore*</c>)</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result CreateSemaphore(Vk.Device device, Vk.SemaphoreCreateInfo* pCreateInfo, Vk.AllocationCallbacks* pAllocator, Vk.Semaphore* pSemaphore)
		=> vkCreateSemaphore(device, pCreateInfo, pAllocator, pSemaphore);

	/// <summary>vkDestroySemaphore(<c>Vk.Device</c>, <c>Vk.Semaphore</c>, <c>Vk.AllocationCallbacks*</c>)</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void DestroySemaphore(Vk.Device device, Vk.Semaphore semaphore, Vk.AllocationCallbacks* pAllocator)
		=> vkDestroySemaphore(device, semaphore, pAllocator);

	/// <summary>vkCreateEvent(<c>Vk.Device</c>, <c>Vk.EventCreateInfo*</c>, <c>Vk.AllocationCallbacks*</c>, <c>Vk.Event*</c>)</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result CreateEvent(Vk.Device device, Vk.EventCreateInfo* pCreateInfo, Vk.AllocationCallbacks* pAllocator, Vk.Event* pEvent)
		=> vkCreateEvent(device, pCreateInfo, pAllocator, pEvent);

	/// <summary>vkDestroyEvent(<c>Vk.Device</c>, <c>Vk.Event</c>, <c>Vk.AllocationCallbacks*</c>)</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void DestroyEvent(Vk.Device device, Vk.Event @event, Vk.AllocationCallbacks* pAllocator)
		=> vkDestroyEvent(device, @event, pAllocator);

	/// <summary>vkGetEventStatus(<c>Vk.Device</c>, <c>Vk.Event</c>)</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result GetEventStatus(Vk.Device device, Vk.Event @event)
		=> vkGetEventStatus(device, @event);

	/// <summary>vkSetEvent(<c>Vk.Device</c>, <c>Vk.Event</c>)</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result SetEvent(Vk.Device device, Vk.Event @event)
		=> vkSetEvent(device, @event);

	/// <summary>vkResetEvent(<c>Vk.Device</c>, <c>Vk.Event</c>)</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result ResetEvent(Vk.Device device, Vk.Event @event)
		=> vkResetEvent(device, @event);

	/// <summary>vkCreateQueryPool(<c>Vk.Device</c>, <c>Vk.QueryPoolCreateInfo*</c>, <c>Vk.AllocationCallbacks*</c>, <c>Vk.QueryPool*</c>)</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result CreateQueryPool(Vk.Device device, Vk.QueryPoolCreateInfo* pCreateInfo, Vk.AllocationCallbacks* pAllocator, Vk.QueryPool* pQueryPool)
		=> vkCreateQueryPool(device, pCreateInfo, pAllocator, pQueryPool);

	/// <summary>vkDestroyQueryPool(<c>Vk.Device</c>, <c>Vk.QueryPool</c>, <c>Vk.AllocationCallbacks*</c>)</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void DestroyQueryPool(Vk.Device device, Vk.QueryPool queryPool, Vk.AllocationCallbacks* pAllocator)
		=> vkDestroyQueryPool(device, queryPool, pAllocator);

	/// <summary>vkGetQueryPoolResults(<c>Vk.Device</c>, <c>Vk.QueryPool</c>, <c>uint</c>, <c>uint</c>, <c>ulong</c>, <c>void*</c>, <c>Vk.DeviceSize</c>, <c>Vk.QueryResultFlags</c>)</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result GetQueryPoolResults(Vk.Device device, Vk.QueryPool queryPool, uint firstQuery, uint queryCount, ulong dataSize, void* pData, Vk.DeviceSize stride, Vk.QueryResultFlags flags)
		=> vkGetQueryPoolResults(device, queryPool, firstQuery, queryCount, dataSize, pData, stride, flags);

	/// <summary>vkResetQueryPool(<c>Vk.Device</c>, <c>Vk.QueryPool</c>, <c>uint</c>, <c>uint</c>)</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void ResetQueryPool(Vk.Device device, Vk.QueryPool queryPool, uint firstQuery, uint queryCount)
		=> vkResetQueryPool(device, queryPool, firstQuery, queryCount);

	/// <summary>vkResetQueryPoolEXT(<c>Vk.Device</c>, <c>Vk.QueryPool</c>, <c>uint</c>, <c>uint</c>)</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void ResetQueryPoolEXT(Vk.Device device, Vk.QueryPool queryPool, uint firstQuery, uint queryCount)
		=> vkResetQueryPoolEXT(device, queryPool, firstQuery, queryCount);

	/// <summary>vkCreateBuffer(<c>Vk.Device</c>, <c>Vk.BufferCreateInfo*</c>, <c>Vk.AllocationCallbacks*</c>, <c>Vk.Buffer*</c>)</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result CreateBuffer(Vk.Device device, Vk.BufferCreateInfo* pCreateInfo, Vk.AllocationCallbacks* pAllocator, Vk.Buffer* pBuffer)
		=> vkCreateBuffer(device, pCreateInfo, pAllocator, pBuffer);

	/// <summary>vkDestroyBuffer(<c>Vk.Device</c>, <c>Vk.Buffer</c>, <c>Vk.AllocationCallbacks*</c>)</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void DestroyBuffer(Vk.Device device, Vk.Buffer buffer, Vk.AllocationCallbacks* pAllocator)
		=> vkDestroyBuffer(device, buffer, pAllocator);

	/// <summary>vkCreateBufferView(<c>Vk.Device</c>, <c>Vk.BufferViewCreateInfo*</c>, <c>Vk.AllocationCallbacks*</c>, <c>Vk.BufferView*</c>)</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result CreateBufferView(Vk.Device device, Vk.BufferViewCreateInfo* pCreateInfo, Vk.AllocationCallbacks* pAllocator, Vk.BufferView* pView)
		=> vkCreateBufferView(device, pCreateInfo, pAllocator, pView);

	/// <summary>vkDestroyBufferView(<c>Vk.Device</c>, <c>Vk.BufferView</c>, <c>Vk.AllocationCallbacks*</c>)</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void DestroyBufferView(Vk.Device device, Vk.BufferView bufferView, Vk.AllocationCallbacks* pAllocator)
		=> vkDestroyBufferView(device, bufferView, pAllocator);

	/// <summary>vkCreateImage(<c>Vk.Device</c>, <c>Vk.ImageCreateInfo*</c>, <c>Vk.AllocationCallbacks*</c>, <c>Vk.Image*</c>)</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result CreateImage(Vk.Device device, Vk.ImageCreateInfo* pCreateInfo, Vk.AllocationCallbacks* pAllocator, Vk.Image* pImage)
		=> vkCreateImage(device, pCreateInfo, pAllocator, pImage);

	/// <summary>vkDestroyImage(<c>Vk.Device</c>, <c>Vk.Image</c>, <c>Vk.AllocationCallbacks*</c>)</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void DestroyImage(Vk.Device device, Vk.Image image, Vk.AllocationCallbacks* pAllocator)
		=> vkDestroyImage(device, image, pAllocator);

	/// <summary>vkGetImageSubresourceLayout(<c>Vk.Device</c>, <c>Vk.Image</c>, <c>Vk.ImageSubresource*</c>, <c>Vk.SubresourceLayout*</c>)</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void GetImageSubresourceLayout(Vk.Device device, Vk.Image image, Vk.ImageSubresource* pSubresource, Vk.SubresourceLayout* pLayout)
		=> vkGetImageSubresourceLayout(device, image, pSubresource, pLayout);

	/// <summary>vkCreateImageView(<c>Vk.Device</c>, <c>Vk.ImageViewCreateInfo*</c>, <c>Vk.AllocationCallbacks*</c>, <c>Vk.ImageView*</c>)</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result CreateImageView(Vk.Device device, Vk.ImageViewCreateInfo* pCreateInfo, Vk.AllocationCallbacks* pAllocator, Vk.ImageView* pView)
		=> vkCreateImageView(device, pCreateInfo, pAllocator, pView);

	/// <summary>vkDestroyImageView(<c>Vk.Device</c>, <c>Vk.ImageView</c>, <c>Vk.AllocationCallbacks*</c>)</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void DestroyImageView(Vk.Device device, Vk.ImageView imageView, Vk.AllocationCallbacks* pAllocator)
		=> vkDestroyImageView(device, imageView, pAllocator);

	/// <summary>vkCreateShaderModule(<c>Vk.Device</c>, <c>Vk.ShaderModuleCreateInfo*</c>, <c>Vk.AllocationCallbacks*</c>, <c>Vk.ShaderModule*</c>)</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result CreateShaderModule(Vk.Device device, Vk.ShaderModuleCreateInfo* pCreateInfo, Vk.AllocationCallbacks* pAllocator, Vk.ShaderModule* pShaderModule)
		=> vkCreateShaderModule(device, pCreateInfo, pAllocator, pShaderModule);

	/// <summary>vkDestroyShaderModule(<c>Vk.Device</c>, <c>Vk.ShaderModule</c>, <c>Vk.AllocationCallbacks*</c>)</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void DestroyShaderModule(Vk.Device device, Vk.ShaderModule shaderModule, Vk.AllocationCallbacks* pAllocator)
		=> vkDestroyShaderModule(device, shaderModule, pAllocator);

	/// <summary>vkCreatePipelineCache(<c>Vk.Device</c>, <c>Vk.PipelineCacheCreateInfo*</c>, <c>Vk.AllocationCallbacks*</c>, <c>Vk.PipelineCache*</c>)</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result CreatePipelineCache(Vk.Device device, Vk.PipelineCacheCreateInfo* pCreateInfo, Vk.AllocationCallbacks* pAllocator, Vk.PipelineCache* pPipelineCache)
		=> vkCreatePipelineCache(device, pCreateInfo, pAllocator, pPipelineCache);

	/// <summary>vkDestroyPipelineCache(<c>Vk.Device</c>, <c>Vk.PipelineCache</c>, <c>Vk.AllocationCallbacks*</c>)</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void DestroyPipelineCache(Vk.Device device, Vk.PipelineCache pipelineCache, Vk.AllocationCallbacks* pAllocator)
		=> vkDestroyPipelineCache(device, pipelineCache, pAllocator);

	/// <summary>vkGetPipelineCacheData(<c>Vk.Device</c>, <c>Vk.PipelineCache</c>, <c>ulong*</c>, <c>void*</c>)</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result GetPipelineCacheData(Vk.Device device, Vk.PipelineCache pipelineCache, ulong* pDataSize, void* pData)
		=> vkGetPipelineCacheData(device, pipelineCache, pDataSize, pData);

	/// <summary>vkMergePipelineCaches(<c>Vk.Device</c>, <c>Vk.PipelineCache</c>, <c>uint</c>, <c>Vk.PipelineCache*</c>)</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result MergePipelineCaches(Vk.Device device, Vk.PipelineCache dstCache, uint srcCacheCount, Vk.PipelineCache* pSrcCaches)
		=> vkMergePipelineCaches(device, dstCache, srcCacheCount, pSrcCaches);

	/// <summary>vkCreateGraphicsPipelines(<c>Vk.Device</c>, <c>Vk.PipelineCache</c>, <c>uint</c>, <c>Vk.GraphicsPipelineCreateInfo*</c>, <c>Vk.AllocationCallbacks*</c>, <c>Vk.Pipeline*</c>)</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result CreateGraphicsPipelines(Vk.Device device, Vk.PipelineCache pipelineCache, uint createInfoCount, Vk.GraphicsPipelineCreateInfo* pCreateInfos, Vk.AllocationCallbacks* pAllocator, Vk.Pipeline* pPipelines)
		=> vkCreateGraphicsPipelines(device, pipelineCache, createInfoCount, pCreateInfos, pAllocator, pPipelines);

	/// <summary>vkCreateComputePipelines(<c>Vk.Device</c>, <c>Vk.PipelineCache</c>, <c>uint</c>, <c>Vk.ComputePipelineCreateInfo*</c>, <c>Vk.AllocationCallbacks*</c>, <c>Vk.Pipeline*</c>)</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result CreateComputePipelines(Vk.Device device, Vk.PipelineCache pipelineCache, uint createInfoCount, Vk.ComputePipelineCreateInfo* pCreateInfos, Vk.AllocationCallbacks* pAllocator, Vk.Pipeline* pPipelines)
		=> vkCreateComputePipelines(device, pipelineCache, createInfoCount, pCreateInfos, pAllocator, pPipelines);

	/// <summary>vkDestroyPipeline(<c>Vk.Device</c>, <c>Vk.Pipeline</c>, <c>Vk.AllocationCallbacks*</c>)</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void DestroyPipeline(Vk.Device device, Vk.Pipeline pipeline, Vk.AllocationCallbacks* pAllocator)
		=> vkDestroyPipeline(device, pipeline, pAllocator);

	/// <summary>vkCreatePipelineLayout(<c>Vk.Device</c>, <c>Vk.PipelineLayoutCreateInfo*</c>, <c>Vk.AllocationCallbacks*</c>, <c>Vk.PipelineLayout*</c>)</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result CreatePipelineLayout(Vk.Device device, Vk.PipelineLayoutCreateInfo* pCreateInfo, Vk.AllocationCallbacks* pAllocator, Vk.PipelineLayout* pPipelineLayout)
		=> vkCreatePipelineLayout(device, pCreateInfo, pAllocator, pPipelineLayout);

	/// <summary>vkDestroyPipelineLayout(<c>Vk.Device</c>, <c>Vk.PipelineLayout</c>, <c>Vk.AllocationCallbacks*</c>)</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void DestroyPipelineLayout(Vk.Device device, Vk.PipelineLayout pipelineLayout, Vk.AllocationCallbacks* pAllocator)
		=> vkDestroyPipelineLayout(device, pipelineLayout, pAllocator);

	/// <summary>vkCreateSampler(<c>Vk.Device</c>, <c>Vk.SamplerCreateInfo*</c>, <c>Vk.AllocationCallbacks*</c>, <c>Vk.Sampler*</c>)</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result CreateSampler(Vk.Device device, Vk.SamplerCreateInfo* pCreateInfo, Vk.AllocationCallbacks* pAllocator, Vk.Sampler* pSampler)
		=> vkCreateSampler(device, pCreateInfo, pAllocator, pSampler);

	/// <summary>vkDestroySampler(<c>Vk.Device</c>, <c>Vk.Sampler</c>, <c>Vk.AllocationCallbacks*</c>)</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void DestroySampler(Vk.Device device, Vk.Sampler sampler, Vk.AllocationCallbacks* pAllocator)
		=> vkDestroySampler(device, sampler, pAllocator);

	/// <summary>vkCreateDescriptorSetLayout(<c>Vk.Device</c>, <c>Vk.DescriptorSetLayoutCreateInfo*</c>, <c>Vk.AllocationCallbacks*</c>, <c>Vk.DescriptorSetLayout*</c>)</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result CreateDescriptorSetLayout(Vk.Device device, Vk.DescriptorSetLayoutCreateInfo* pCreateInfo, Vk.AllocationCallbacks* pAllocator, Vk.DescriptorSetLayout* pSetLayout)
		=> vkCreateDescriptorSetLayout(device, pCreateInfo, pAllocator, pSetLayout);

	/// <summary>vkDestroyDescriptorSetLayout(<c>Vk.Device</c>, <c>Vk.DescriptorSetLayout</c>, <c>Vk.AllocationCallbacks*</c>)</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void DestroyDescriptorSetLayout(Vk.Device device, Vk.DescriptorSetLayout descriptorSetLayout, Vk.AllocationCallbacks* pAllocator)
		=> vkDestroyDescriptorSetLayout(device, descriptorSetLayout, pAllocator);

	/// <summary>vkCreateDescriptorPool(<c>Vk.Device</c>, <c>Vk.DescriptorPoolCreateInfo*</c>, <c>Vk.AllocationCallbacks*</c>, <c>Vk.DescriptorPool*</c>)</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result CreateDescriptorPool(Vk.Device device, Vk.DescriptorPoolCreateInfo* pCreateInfo, Vk.AllocationCallbacks* pAllocator, Vk.DescriptorPool* pDescriptorPool)
		=> vkCreateDescriptorPool(device, pCreateInfo, pAllocator, pDescriptorPool);

	/// <summary>vkDestroyDescriptorPool(<c>Vk.Device</c>, <c>Vk.DescriptorPool</c>, <c>Vk.AllocationCallbacks*</c>)</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void DestroyDescriptorPool(Vk.Device device, Vk.DescriptorPool descriptorPool, Vk.AllocationCallbacks* pAllocator)
		=> vkDestroyDescriptorPool(device, descriptorPool, pAllocator);

	/// <summary>vkResetDescriptorPool(<c>Vk.Device</c>, <c>Vk.DescriptorPool</c>, <c>Vk.DescriptorPoolResetFlags</c>)</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result ResetDescriptorPool(Vk.Device device, Vk.DescriptorPool descriptorPool, Vk.DescriptorPoolResetFlags flags)
		=> vkResetDescriptorPool(device, descriptorPool, flags);

	/// <summary>vkAllocateDescriptorSets(<c>Vk.Device</c>, <c>Vk.DescriptorSetAllocateInfo*</c>, <c>Vk.DescriptorSet*</c>)</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result AllocateDescriptorSets(Vk.Device device, Vk.DescriptorSetAllocateInfo* pAllocateInfo, Vk.DescriptorSet* pDescriptorSets)
		=> vkAllocateDescriptorSets(device, pAllocateInfo, pDescriptorSets);

	/// <summary>vkFreeDescriptorSets(<c>Vk.Device</c>, <c>Vk.DescriptorPool</c>, <c>uint</c>, <c>Vk.DescriptorSet*</c>)</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result FreeDescriptorSets(Vk.Device device, Vk.DescriptorPool descriptorPool, uint descriptorSetCount, Vk.DescriptorSet* pDescriptorSets)
		=> vkFreeDescriptorSets(device, descriptorPool, descriptorSetCount, pDescriptorSets);

	/// <summary>vkUpdateDescriptorSets(<c>Vk.Device</c>, <c>uint</c>, <c>Vk.WriteDescriptorSet*</c>, <c>uint</c>, <c>Vk.CopyDescriptorSet*</c>)</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void UpdateDescriptorSets(Vk.Device device, uint descriptorWriteCount, Vk.WriteDescriptorSet* pDescriptorWrites, uint descriptorCopyCount, Vk.CopyDescriptorSet* pDescriptorCopies)
		=> vkUpdateDescriptorSets(device, descriptorWriteCount, pDescriptorWrites, descriptorCopyCount, pDescriptorCopies);

	/// <summary>vkCreateFramebuffer(<c>Vk.Device</c>, <c>Vk.FramebufferCreateInfo*</c>, <c>Vk.AllocationCallbacks*</c>, <c>Vk.Framebuffer*</c>)</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result CreateFramebuffer(Vk.Device device, Vk.FramebufferCreateInfo* pCreateInfo, Vk.AllocationCallbacks* pAllocator, Vk.Framebuffer* pFramebuffer)
		=> vkCreateFramebuffer(device, pCreateInfo, pAllocator, pFramebuffer);

	/// <summary>vkDestroyFramebuffer(<c>Vk.Device</c>, <c>Vk.Framebuffer</c>, <c>Vk.AllocationCallbacks*</c>)</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void DestroyFramebuffer(Vk.Device device, Vk.Framebuffer framebuffer, Vk.AllocationCallbacks* pAllocator)
		=> vkDestroyFramebuffer(device, framebuffer, pAllocator);

	/// <summary>vkCreateRenderPass(<c>Vk.Device</c>, <c>Vk.RenderPassCreateInfo*</c>, <c>Vk.AllocationCallbacks*</c>, <c>Vk.RenderPass*</c>)</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result CreateRenderPass(Vk.Device device, Vk.RenderPassCreateInfo* pCreateInfo, Vk.AllocationCallbacks* pAllocator, Vk.RenderPass* pRenderPass)
		=> vkCreateRenderPass(device, pCreateInfo, pAllocator, pRenderPass);

	/// <summary>vkDestroyRenderPass(<c>Vk.Device</c>, <c>Vk.RenderPass</c>, <c>Vk.AllocationCallbacks*</c>)</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void DestroyRenderPass(Vk.Device device, Vk.RenderPass renderPass, Vk.AllocationCallbacks* pAllocator)
		=> vkDestroyRenderPass(device, renderPass, pAllocator);

	/// <summary>vkGetRenderAreaGranularity(<c>Vk.Device</c>, <c>Vk.RenderPass</c>, <c>Vk.Extent2D*</c>)</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void GetRenderAreaGranularity(Vk.Device device, Vk.RenderPass renderPass, Vk.Extent2D* pGranularity)
		=> vkGetRenderAreaGranularity(device, renderPass, pGranularity);

	/// <summary>vkCreateCommandPool(<c>Vk.Device</c>, <c>Vk.CommandPoolCreateInfo*</c>, <c>Vk.AllocationCallbacks*</c>, <c>Vk.CommandPool*</c>)</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result CreateCommandPool(Vk.Device device, Vk.CommandPoolCreateInfo* pCreateInfo, Vk.AllocationCallbacks* pAllocator, Vk.CommandPool* pCommandPool)
		=> vkCreateCommandPool(device, pCreateInfo, pAllocator, pCommandPool);

	/// <summary>vkDestroyCommandPool(<c>Vk.Device</c>, <c>Vk.CommandPool</c>, <c>Vk.AllocationCallbacks*</c>)</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void DestroyCommandPool(Vk.Device device, Vk.CommandPool commandPool, Vk.AllocationCallbacks* pAllocator)
		=> vkDestroyCommandPool(device, commandPool, pAllocator);

	/// <summary>vkResetCommandPool(<c>Vk.Device</c>, <c>Vk.CommandPool</c>, <c>Vk.CommandPoolResetFlags</c>)</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result ResetCommandPool(Vk.Device device, Vk.CommandPool commandPool, Vk.CommandPoolResetFlags flags)
		=> vkResetCommandPool(device, commandPool, flags);

	/// <summary>vkAllocateCommandBuffers(<c>Vk.Device</c>, <c>Vk.CommandBufferAllocateInfo*</c>, <c>Vk.CommandBuffer*</c>)</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result AllocateCommandBuffers(Vk.Device device, Vk.CommandBufferAllocateInfo* pAllocateInfo, Vk.CommandBuffer* pCommandBuffers)
		=> vkAllocateCommandBuffers(device, pAllocateInfo, pCommandBuffers);

	/// <summary>vkFreeCommandBuffers(<c>Vk.Device</c>, <c>Vk.CommandPool</c>, <c>uint</c>, <c>Vk.CommandBuffer*</c>)</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void FreeCommandBuffers(Vk.Device device, Vk.CommandPool commandPool, uint commandBufferCount, Vk.CommandBuffer* pCommandBuffers)
		=> vkFreeCommandBuffers(device, commandPool, commandBufferCount, pCommandBuffers);

	/// <summary>vkBeginCommandBuffer(<c>Vk.CommandBuffer</c>, <c>Vk.CommandBufferBeginInfo*</c>)</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result BeginCommandBuffer(Vk.CommandBuffer commandBuffer, Vk.CommandBufferBeginInfo* pBeginInfo)
		=> vkBeginCommandBuffer(commandBuffer, pBeginInfo);

	/// <summary>vkEndCommandBuffer(<c>Vk.CommandBuffer</c>)</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result EndCommandBuffer(Vk.CommandBuffer commandBuffer)
		=> vkEndCommandBuffer(commandBuffer);

	/// <summary>vkResetCommandBuffer(<c>Vk.CommandBuffer</c>, <c>Vk.CommandBufferResetFlags</c>)</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result ResetCommandBuffer(Vk.CommandBuffer commandBuffer, Vk.CommandBufferResetFlags flags)
		=> vkResetCommandBuffer(commandBuffer, flags);

	/// <summary>vkCmdBindPipeline(<c>Vk.CommandBuffer</c>, <c>Vk.PipelineBindPoint</c>, <c>Vk.Pipeline</c>)</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void CmdBindPipeline(Vk.CommandBuffer commandBuffer, Vk.PipelineBindPoint pipelineBindPoint, Vk.Pipeline pipeline)
		=> vkCmdBindPipeline(commandBuffer, pipelineBindPoint, pipeline);

	/// <summary>vkCmdSetViewport(<c>Vk.CommandBuffer</c>, <c>uint</c>, <c>uint</c>, <c>Vk.Viewport*</c>)</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void CmdSetViewport(Vk.CommandBuffer commandBuffer, uint firstViewport, uint viewportCount, Vk.Viewport* pViewports)
		=> vkCmdSetViewport(commandBuffer, firstViewport, viewportCount, pViewports);

	/// <summary>vkCmdSetScissor(<c>Vk.CommandBuffer</c>, <c>uint</c>, <c>uint</c>, <c>Vk.Rect2D*</c>)</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void CmdSetScissor(Vk.CommandBuffer commandBuffer, uint firstScissor, uint scissorCount, Vk.Rect2D* pScissors)
		=> vkCmdSetScissor(commandBuffer, firstScissor, scissorCount, pScissors);

	/// <summary>vkCmdSetLineWidth(<c>Vk.CommandBuffer</c>, <c>float</c>)</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void CmdSetLineWidth(Vk.CommandBuffer commandBuffer, float lineWidth)
		=> vkCmdSetLineWidth(commandBuffer, lineWidth);

	/// <summary>vkCmdSetDepthBias(<c>Vk.CommandBuffer</c>, <c>float</c>, <c>float</c>, <c>float</c>)</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void CmdSetDepthBias(Vk.CommandBuffer commandBuffer, float depthBiasConstantFactor, float depthBiasClamp, float depthBiasSlopeFactor)
		=> vkCmdSetDepthBias(commandBuffer, depthBiasConstantFactor, depthBiasClamp, depthBiasSlopeFactor);

	/// <summary>vkCmdSetBlendConstants(<c>Vk.CommandBuffer</c>, <c>float*</c>)</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void CmdSetBlendConstants(Vk.CommandBuffer commandBuffer, float* blendConstants)
		=> vkCmdSetBlendConstants(commandBuffer, blendConstants);

	/// <summary>vkCmdSetDepthBounds(<c>Vk.CommandBuffer</c>, <c>float</c>, <c>float</c>)</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void CmdSetDepthBounds(Vk.CommandBuffer commandBuffer, float minDepthBounds, float maxDepthBounds)
		=> vkCmdSetDepthBounds(commandBuffer, minDepthBounds, maxDepthBounds);

	/// <summary>vkCmdSetStencilCompareMask(<c>Vk.CommandBuffer</c>, <c>Vk.StencilFaceFlags</c>, <c>uint</c>)</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void CmdSetStencilCompareMask(Vk.CommandBuffer commandBuffer, Vk.StencilFaceFlags faceMask, uint compareMask)
		=> vkCmdSetStencilCompareMask(commandBuffer, faceMask, compareMask);

	/// <summary>vkCmdSetStencilWriteMask(<c>Vk.CommandBuffer</c>, <c>Vk.StencilFaceFlags</c>, <c>uint</c>)</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void CmdSetStencilWriteMask(Vk.CommandBuffer commandBuffer, Vk.StencilFaceFlags faceMask, uint writeMask)
		=> vkCmdSetStencilWriteMask(commandBuffer, faceMask, writeMask);

	/// <summary>vkCmdSetStencilReference(<c>Vk.CommandBuffer</c>, <c>Vk.StencilFaceFlags</c>, <c>uint</c>)</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void CmdSetStencilReference(Vk.CommandBuffer commandBuffer, Vk.StencilFaceFlags faceMask, uint reference)
		=> vkCmdSetStencilReference(commandBuffer, faceMask, reference);

	/// <summary>vkCmdBindDescriptorSets(<c>Vk.CommandBuffer</c>, <c>Vk.PipelineBindPoint</c>, <c>Vk.PipelineLayout</c>, <c>uint</c>, <c>uint</c>, <c>Vk.DescriptorSet*</c>, <c>uint</c>, <c>uint*</c>)</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void CmdBindDescriptorSets(Vk.CommandBuffer commandBuffer, Vk.PipelineBindPoint pipelineBindPoint, Vk.PipelineLayout layout, uint firstSet, uint descriptorSetCount, Vk.DescriptorSet* pDescriptorSets, uint dynamicOffsetCount, uint* pDynamicOffsets)
		=> vkCmdBindDescriptorSets(commandBuffer, pipelineBindPoint, layout, firstSet, descriptorSetCount, pDescriptorSets, dynamicOffsetCount, pDynamicOffsets);

	/// <summary>vkCmdBindIndexBuffer(<c>Vk.CommandBuffer</c>, <c>Vk.Buffer</c>, <c>Vk.DeviceSize</c>, <c>Vk.IndexType</c>)</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void CmdBindIndexBuffer(Vk.CommandBuffer commandBuffer, Vk.Buffer buffer, Vk.DeviceSize offset, Vk.IndexType indexType)
		=> vkCmdBindIndexBuffer(commandBuffer, buffer, offset, indexType);

	/// <summary>vkCmdBindVertexBuffers(<c>Vk.CommandBuffer</c>, <c>uint</c>, <c>uint</c>, <c>Vk.Buffer*</c>, <c>Vk.DeviceSize*</c>)</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void CmdBindVertexBuffers(Vk.CommandBuffer commandBuffer, uint firstBinding, uint bindingCount, Vk.Buffer* pBuffers, Vk.DeviceSize* pOffsets)
		=> vkCmdBindVertexBuffers(commandBuffer, firstBinding, bindingCount, pBuffers, pOffsets);

	/// <summary>vkCmdDraw(<c>Vk.CommandBuffer</c>, <c>uint</c>, <c>uint</c>, <c>uint</c>, <c>uint</c>)</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void CmdDraw(Vk.CommandBuffer commandBuffer, uint vertexCount, uint instanceCount, uint firstVertex, uint firstInstance)
		=> vkCmdDraw(commandBuffer, vertexCount, instanceCount, firstVertex, firstInstance);

	/// <summary>vkCmdDrawIndexed(<c>Vk.CommandBuffer</c>, <c>uint</c>, <c>uint</c>, <c>uint</c>, <c>int</c>, <c>uint</c>)</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void CmdDrawIndexed(Vk.CommandBuffer commandBuffer, uint indexCount, uint instanceCount, uint firstIndex, int vertexOffset, uint firstInstance)
		=> vkCmdDrawIndexed(commandBuffer, indexCount, instanceCount, firstIndex, vertexOffset, firstInstance);

	/// <summary>vkCmdDrawIndirect(<c>Vk.CommandBuffer</c>, <c>Vk.Buffer</c>, <c>Vk.DeviceSize</c>, <c>uint</c>, <c>uint</c>)</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void CmdDrawIndirect(Vk.CommandBuffer commandBuffer, Vk.Buffer buffer, Vk.DeviceSize offset, uint drawCount, uint stride)
		=> vkCmdDrawIndirect(commandBuffer, buffer, offset, drawCount, stride);

	/// <summary>vkCmdDrawIndexedIndirect(<c>Vk.CommandBuffer</c>, <c>Vk.Buffer</c>, <c>Vk.DeviceSize</c>, <c>uint</c>, <c>uint</c>)</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void CmdDrawIndexedIndirect(Vk.CommandBuffer commandBuffer, Vk.Buffer buffer, Vk.DeviceSize offset, uint drawCount, uint stride)
		=> vkCmdDrawIndexedIndirect(commandBuffer, buffer, offset, drawCount, stride);

	/// <summary>vkCmdDispatch(<c>Vk.CommandBuffer</c>, <c>uint</c>, <c>uint</c>, <c>uint</c>)</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void CmdDispatch(Vk.CommandBuffer commandBuffer, uint groupCountX, uint groupCountY, uint groupCountZ)
		=> vkCmdDispatch(commandBuffer, groupCountX, groupCountY, groupCountZ);

	/// <summary>vkCmdDispatchIndirect(<c>Vk.CommandBuffer</c>, <c>Vk.Buffer</c>, <c>Vk.DeviceSize</c>)</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void CmdDispatchIndirect(Vk.CommandBuffer commandBuffer, Vk.Buffer buffer, Vk.DeviceSize offset)
		=> vkCmdDispatchIndirect(commandBuffer, buffer, offset);

	/// <summary>vkCmdCopyBuffer(<c>Vk.CommandBuffer</c>, <c>Vk.Buffer</c>, <c>Vk.Buffer</c>, <c>uint</c>, <c>Vk.BufferCopy*</c>)</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void CmdCopyBuffer(Vk.CommandBuffer commandBuffer, Vk.Buffer srcBuffer, Vk.Buffer dstBuffer, uint regionCount, Vk.BufferCopy* pRegions)
		=> vkCmdCopyBuffer(commandBuffer, srcBuffer, dstBuffer, regionCount, pRegions);

	/// <summary>vkCmdCopyImage(<c>Vk.CommandBuffer</c>, <c>Vk.Image</c>, <c>Vk.ImageLayout</c>, <c>Vk.Image</c>, <c>Vk.ImageLayout</c>, <c>uint</c>, <c>Vk.ImageCopy*</c>)</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void CmdCopyImage(Vk.CommandBuffer commandBuffer, Vk.Image srcImage, Vk.ImageLayout srcImageLayout, Vk.Image dstImage, Vk.ImageLayout dstImageLayout, uint regionCount, Vk.ImageCopy* pRegions)
		=> vkCmdCopyImage(commandBuffer, srcImage, srcImageLayout, dstImage, dstImageLayout, regionCount, pRegions);

	/// <summary>vkCmdBlitImage(<c>Vk.CommandBuffer</c>, <c>Vk.Image</c>, <c>Vk.ImageLayout</c>, <c>Vk.Image</c>, <c>Vk.ImageLayout</c>, <c>uint</c>, <c>Vk.ImageBlit*</c>, <c>Vk.Filter</c>)</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void CmdBlitImage(Vk.CommandBuffer commandBuffer, Vk.Image srcImage, Vk.ImageLayout srcImageLayout, Vk.Image dstImage, Vk.ImageLayout dstImageLayout, uint regionCount, Vk.ImageBlit* pRegions, Vk.Filter filter)
		=> vkCmdBlitImage(commandBuffer, srcImage, srcImageLayout, dstImage, dstImageLayout, regionCount, pRegions, filter);

	/// <summary>vkCmdCopyBufferToImage(<c>Vk.CommandBuffer</c>, <c>Vk.Buffer</c>, <c>Vk.Image</c>, <c>Vk.ImageLayout</c>, <c>uint</c>, <c>Vk.BufferImageCopy*</c>)</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void CmdCopyBufferToImage(Vk.CommandBuffer commandBuffer, Vk.Buffer srcBuffer, Vk.Image dstImage, Vk.ImageLayout dstImageLayout, uint regionCount, Vk.BufferImageCopy* pRegions)
		=> vkCmdCopyBufferToImage(commandBuffer, srcBuffer, dstImage, dstImageLayout, regionCount, pRegions);

	/// <summary>vkCmdCopyImageToBuffer(<c>Vk.CommandBuffer</c>, <c>Vk.Image</c>, <c>Vk.ImageLayout</c>, <c>Vk.Buffer</c>, <c>uint</c>, <c>Vk.BufferImageCopy*</c>)</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void CmdCopyImageToBuffer(Vk.CommandBuffer commandBuffer, Vk.Image srcImage, Vk.ImageLayout srcImageLayout, Vk.Buffer dstBuffer, uint regionCount, Vk.BufferImageCopy* pRegions)
		=> vkCmdCopyImageToBuffer(commandBuffer, srcImage, srcImageLayout, dstBuffer, regionCount, pRegions);

	/// <summary>vkCmdUpdateBuffer(<c>Vk.CommandBuffer</c>, <c>Vk.Buffer</c>, <c>Vk.DeviceSize</c>, <c>Vk.DeviceSize</c>, <c>void*</c>)</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void CmdUpdateBuffer(Vk.CommandBuffer commandBuffer, Vk.Buffer dstBuffer, Vk.DeviceSize dstOffset, Vk.DeviceSize dataSize, void* pData)
		=> vkCmdUpdateBuffer(commandBuffer, dstBuffer, dstOffset, dataSize, pData);

	/// <summary>vkCmdFillBuffer(<c>Vk.CommandBuffer</c>, <c>Vk.Buffer</c>, <c>Vk.DeviceSize</c>, <c>Vk.DeviceSize</c>, <c>uint</c>)</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void CmdFillBuffer(Vk.CommandBuffer commandBuffer, Vk.Buffer dstBuffer, Vk.DeviceSize dstOffset, Vk.DeviceSize size, uint data)
		=> vkCmdFillBuffer(commandBuffer, dstBuffer, dstOffset, size, data);

	/// <summary>vkCmdClearColorImage(<c>Vk.CommandBuffer</c>, <c>Vk.Image</c>, <c>Vk.ImageLayout</c>, <c>Vk.ClearColorValue*</c>, <c>uint</c>, <c>Vk.ImageSubresourceRange*</c>)</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void CmdClearColorImage(Vk.CommandBuffer commandBuffer, Vk.Image image, Vk.ImageLayout imageLayout, Vk.ClearColorValue* pColor, uint rangeCount, Vk.ImageSubresourceRange* pRanges)
		=> vkCmdClearColorImage(commandBuffer, image, imageLayout, pColor, rangeCount, pRanges);

	/// <summary>vkCmdClearDepthStencilImage(<c>Vk.CommandBuffer</c>, <c>Vk.Image</c>, <c>Vk.ImageLayout</c>, <c>Vk.ClearDepthStencilValue*</c>, <c>uint</c>, <c>Vk.ImageSubresourceRange*</c>)</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void CmdClearDepthStencilImage(Vk.CommandBuffer commandBuffer, Vk.Image image, Vk.ImageLayout imageLayout, Vk.ClearDepthStencilValue* pDepthStencil, uint rangeCount, Vk.ImageSubresourceRange* pRanges)
		=> vkCmdClearDepthStencilImage(commandBuffer, image, imageLayout, pDepthStencil, rangeCount, pRanges);

	/// <summary>vkCmdClearAttachments(<c>Vk.CommandBuffer</c>, <c>uint</c>, <c>Vk.ClearAttachment*</c>, <c>uint</c>, <c>Vk.ClearRect*</c>)</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void CmdClearAttachments(Vk.CommandBuffer commandBuffer, uint attachmentCount, Vk.ClearAttachment* pAttachments, uint rectCount, Vk.ClearRect* pRects)
		=> vkCmdClearAttachments(commandBuffer, attachmentCount, pAttachments, rectCount, pRects);

	/// <summary>vkCmdResolveImage(<c>Vk.CommandBuffer</c>, <c>Vk.Image</c>, <c>Vk.ImageLayout</c>, <c>Vk.Image</c>, <c>Vk.ImageLayout</c>, <c>uint</c>, <c>Vk.ImageResolve*</c>)</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void CmdResolveImage(Vk.CommandBuffer commandBuffer, Vk.Image srcImage, Vk.ImageLayout srcImageLayout, Vk.Image dstImage, Vk.ImageLayout dstImageLayout, uint regionCount, Vk.ImageResolve* pRegions)
		=> vkCmdResolveImage(commandBuffer, srcImage, srcImageLayout, dstImage, dstImageLayout, regionCount, pRegions);

	/// <summary>vkCmdSetEvent(<c>Vk.CommandBuffer</c>, <c>Vk.Event</c>, <c>Vk.PipelineStageFlags</c>)</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void CmdSetEvent(Vk.CommandBuffer commandBuffer, Vk.Event @event, Vk.PipelineStageFlags stageMask)
		=> vkCmdSetEvent(commandBuffer, @event, stageMask);

	/// <summary>vkCmdResetEvent(<c>Vk.CommandBuffer</c>, <c>Vk.Event</c>, <c>Vk.PipelineStageFlags</c>)</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void CmdResetEvent(Vk.CommandBuffer commandBuffer, Vk.Event @event, Vk.PipelineStageFlags stageMask)
		=> vkCmdResetEvent(commandBuffer, @event, stageMask);

	/// <summary>vkCmdWaitEvents(<c>Vk.CommandBuffer</c>, <c>uint</c>, <c>Vk.Event*</c>, <c>Vk.PipelineStageFlags</c>, <c>Vk.PipelineStageFlags</c>, <c>uint</c>, <c>Vk.MemoryBarrier*</c>, <c>uint</c>, <c>Vk.BufferMemoryBarrier*</c>, <c>uint</c>, <c>Vk.ImageMemoryBarrier*</c>)</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void CmdWaitEvents(Vk.CommandBuffer commandBuffer, uint eventCount, Vk.Event* pEvents, Vk.PipelineStageFlags srcStageMask, Vk.PipelineStageFlags dstStageMask, uint memoryBarrierCount, Vk.MemoryBarrier* pMemoryBarriers, uint bufferMemoryBarrierCount, Vk.BufferMemoryBarrier* pBufferMemoryBarriers, uint imageMemoryBarrierCount, Vk.ImageMemoryBarrier* pImageMemoryBarriers)
		=> vkCmdWaitEvents(commandBuffer, eventCount, pEvents, srcStageMask, dstStageMask, memoryBarrierCount, pMemoryBarriers, bufferMemoryBarrierCount, pBufferMemoryBarriers, imageMemoryBarrierCount, pImageMemoryBarriers);

	/// <summary>vkCmdPipelineBarrier(<c>Vk.CommandBuffer</c>, <c>Vk.PipelineStageFlags</c>, <c>Vk.PipelineStageFlags</c>, <c>Vk.DependencyFlags</c>, <c>uint</c>, <c>Vk.MemoryBarrier*</c>, <c>uint</c>, <c>Vk.BufferMemoryBarrier*</c>, <c>uint</c>, <c>Vk.ImageMemoryBarrier*</c>)</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void CmdPipelineBarrier(Vk.CommandBuffer commandBuffer, Vk.PipelineStageFlags srcStageMask, Vk.PipelineStageFlags dstStageMask, Vk.DependencyFlags dependencyFlags, uint memoryBarrierCount, Vk.MemoryBarrier* pMemoryBarriers, uint bufferMemoryBarrierCount, Vk.BufferMemoryBarrier* pBufferMemoryBarriers, uint imageMemoryBarrierCount, Vk.ImageMemoryBarrier* pImageMemoryBarriers)
		=> vkCmdPipelineBarrier(commandBuffer, srcStageMask, dstStageMask, dependencyFlags, memoryBarrierCount, pMemoryBarriers, bufferMemoryBarrierCount, pBufferMemoryBarriers, imageMemoryBarrierCount, pImageMemoryBarriers);

	/// <summary>vkCmdBeginQuery(<c>Vk.CommandBuffer</c>, <c>Vk.QueryPool</c>, <c>uint</c>, <c>Vk.QueryControlFlags</c>)</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void CmdBeginQuery(Vk.CommandBuffer commandBuffer, Vk.QueryPool queryPool, uint query, Vk.QueryControlFlags flags)
		=> vkCmdBeginQuery(commandBuffer, queryPool, query, flags);

	/// <summary>vkCmdEndQuery(<c>Vk.CommandBuffer</c>, <c>Vk.QueryPool</c>, <c>uint</c>)</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void CmdEndQuery(Vk.CommandBuffer commandBuffer, Vk.QueryPool queryPool, uint query)
		=> vkCmdEndQuery(commandBuffer, queryPool, query);

	/// <summary>vkCmdBeginConditionalRenderingEXT(<c>Vk.CommandBuffer</c>, <c>Vk.EXT.ConditionalRenderingBeginInfo*</c>)</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void CmdBeginConditionalRenderingEXT(Vk.CommandBuffer commandBuffer, Vk.EXT.ConditionalRenderingBeginInfo* pConditionalRenderingBegin)
		=> vkCmdBeginConditionalRenderingEXT(commandBuffer, pConditionalRenderingBegin);

	/// <summary>vkCmdEndConditionalRenderingEXT(<c>Vk.CommandBuffer</c>)</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void CmdEndConditionalRenderingEXT(Vk.CommandBuffer commandBuffer)
		=> vkCmdEndConditionalRenderingEXT(commandBuffer);

	/// <summary>vkCmdResetQueryPool(<c>Vk.CommandBuffer</c>, <c>Vk.QueryPool</c>, <c>uint</c>, <c>uint</c>)</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void CmdResetQueryPool(Vk.CommandBuffer commandBuffer, Vk.QueryPool queryPool, uint firstQuery, uint queryCount)
		=> vkCmdResetQueryPool(commandBuffer, queryPool, firstQuery, queryCount);

	/// <summary>vkCmdWriteTimestamp(<c>Vk.CommandBuffer</c>, <c>Vk.PipelineStageFlags</c>, <c>Vk.QueryPool</c>, <c>uint</c>)</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void CmdWriteTimestamp(Vk.CommandBuffer commandBuffer, Vk.PipelineStageFlags pipelineStage, Vk.QueryPool queryPool, uint query)
		=> vkCmdWriteTimestamp(commandBuffer, pipelineStage, queryPool, query);

	/// <summary>vkCmdCopyQueryPoolResults(<c>Vk.CommandBuffer</c>, <c>Vk.QueryPool</c>, <c>uint</c>, <c>uint</c>, <c>Vk.Buffer</c>, <c>Vk.DeviceSize</c>, <c>Vk.DeviceSize</c>, <c>Vk.QueryResultFlags</c>)</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void CmdCopyQueryPoolResults(Vk.CommandBuffer commandBuffer, Vk.QueryPool queryPool, uint firstQuery, uint queryCount, Vk.Buffer dstBuffer, Vk.DeviceSize dstOffset, Vk.DeviceSize stride, Vk.QueryResultFlags flags)
		=> vkCmdCopyQueryPoolResults(commandBuffer, queryPool, firstQuery, queryCount, dstBuffer, dstOffset, stride, flags);

	/// <summary>vkCmdPushConstants(<c>Vk.CommandBuffer</c>, <c>Vk.PipelineLayout</c>, <c>Vk.ShaderStageFlags</c>, <c>uint</c>, <c>uint</c>, <c>void*</c>)</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void CmdPushConstants(Vk.CommandBuffer commandBuffer, Vk.PipelineLayout layout, Vk.ShaderStageFlags stageFlags, uint offset, uint size, void* pValues)
		=> vkCmdPushConstants(commandBuffer, layout, stageFlags, offset, size, pValues);

	/// <summary>vkCmdBeginRenderPass(<c>Vk.CommandBuffer</c>, <c>Vk.RenderPassBeginInfo*</c>, <c>Vk.SubpassContents</c>)</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void CmdBeginRenderPass(Vk.CommandBuffer commandBuffer, Vk.RenderPassBeginInfo* pRenderPassBegin, Vk.SubpassContents contents)
		=> vkCmdBeginRenderPass(commandBuffer, pRenderPassBegin, contents);

	/// <summary>vkCmdNextSubpass(<c>Vk.CommandBuffer</c>, <c>Vk.SubpassContents</c>)</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void CmdNextSubpass(Vk.CommandBuffer commandBuffer, Vk.SubpassContents contents)
		=> vkCmdNextSubpass(commandBuffer, contents);

	/// <summary>vkCmdEndRenderPass(<c>Vk.CommandBuffer</c>)</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void CmdEndRenderPass(Vk.CommandBuffer commandBuffer)
		=> vkCmdEndRenderPass(commandBuffer);

	/// <summary>vkCmdExecuteCommands(<c>Vk.CommandBuffer</c>, <c>uint</c>, <c>Vk.CommandBuffer*</c>)</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void CmdExecuteCommands(Vk.CommandBuffer commandBuffer, uint commandBufferCount, Vk.CommandBuffer* pCommandBuffers)
		=> vkCmdExecuteCommands(commandBuffer, commandBufferCount, pCommandBuffers);

	/// <summary>vkCreateSharedSwapchainsKHR(<c>Vk.Device</c>, <c>uint</c>, <c>Vk.KHR.SwapchainCreateInfo*</c>, <c>Vk.AllocationCallbacks*</c>, <c>Vk.KHR.Swapchain*</c>)</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result CreateSharedSwapchainsKHR(Vk.Device device, uint swapchainCount, Vk.KHR.SwapchainCreateInfo* pCreateInfos, Vk.AllocationCallbacks* pAllocator, Vk.KHR.Swapchain* pSwapchains)
		=> vkCreateSharedSwapchainsKHR(device, swapchainCount, pCreateInfos, pAllocator, pSwapchains);

	/// <summary>vkCreateSwapchainKHR(<c>Vk.Device</c>, <c>Vk.KHR.SwapchainCreateInfo*</c>, <c>Vk.AllocationCallbacks*</c>, <c>Vk.KHR.Swapchain*</c>)</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result CreateSwapchainKHR(Vk.Device device, Vk.KHR.SwapchainCreateInfo* pCreateInfo, Vk.AllocationCallbacks* pAllocator, Vk.KHR.Swapchain* pSwapchain)
		=> vkCreateSwapchainKHR(device, pCreateInfo, pAllocator, pSwapchain);

	/// <summary>vkDestroySwapchainKHR(<c>Vk.Device</c>, <c>Vk.KHR.Swapchain</c>, <c>Vk.AllocationCallbacks*</c>)</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void DestroySwapchainKHR(Vk.Device device, Vk.KHR.Swapchain swapchain, Vk.AllocationCallbacks* pAllocator)
		=> vkDestroySwapchainKHR(device, swapchain, pAllocator);

	/// <summary>vkGetSwapchainImagesKHR(<c>Vk.Device</c>, <c>Vk.KHR.Swapchain</c>, <c>uint*</c>, <c>Vk.Image*</c>)</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result GetSwapchainImagesKHR(Vk.Device device, Vk.KHR.Swapchain swapchain, uint* pSwapchainImageCount, Vk.Image* pSwapchainImages)
		=> vkGetSwapchainImagesKHR(device, swapchain, pSwapchainImageCount, pSwapchainImages);

	/// <summary>vkAcquireNextImageKHR(<c>Vk.Device</c>, <c>Vk.KHR.Swapchain</c>, <c>ulong</c>, <c>Vk.Semaphore</c>, <c>Vk.Fence</c>, <c>uint*</c>)</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result AcquireNextImageKHR(Vk.Device device, Vk.KHR.Swapchain swapchain, ulong timeout, Vk.Semaphore semaphore, Vk.Fence fence, uint* pImageIndex)
		=> vkAcquireNextImageKHR(device, swapchain, timeout, semaphore, fence, pImageIndex);

	/// <summary>vkQueuePresentKHR(<c>Vk.Queue</c>, <c>Vk.KHR.PresentInfo*</c>)</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result QueuePresentKHR(Vk.Queue queue, Vk.KHR.PresentInfo* pPresentInfo)
		=> vkQueuePresentKHR(queue, pPresentInfo);

	/// <summary>vkDebugMarkerSetObjectNameEXT(<c>Vk.Device</c>, <c>Vk.EXT.DebugMarkerObjectNameInfo*</c>)</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result DebugMarkerSetObjectNameEXT(Vk.Device device, Vk.EXT.DebugMarkerObjectNameInfo* pNameInfo)
		=> vkDebugMarkerSetObjectNameEXT(device, pNameInfo);

	/// <summary>vkDebugMarkerSetObjectTagEXT(<c>Vk.Device</c>, <c>Vk.EXT.DebugMarkerObjectTagInfo*</c>)</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result DebugMarkerSetObjectTagEXT(Vk.Device device, Vk.EXT.DebugMarkerObjectTagInfo* pTagInfo)
		=> vkDebugMarkerSetObjectTagEXT(device, pTagInfo);

	/// <summary>vkCmdDebugMarkerBeginEXT(<c>Vk.CommandBuffer</c>, <c>Vk.EXT.DebugMarkerMarkerInfo*</c>)</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void CmdDebugMarkerBeginEXT(Vk.CommandBuffer commandBuffer, Vk.EXT.DebugMarkerMarkerInfo* pMarkerInfo)
		=> vkCmdDebugMarkerBeginEXT(commandBuffer, pMarkerInfo);

	/// <summary>vkCmdDebugMarkerEndEXT(<c>Vk.CommandBuffer</c>)</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void CmdDebugMarkerEndEXT(Vk.CommandBuffer commandBuffer)
		=> vkCmdDebugMarkerEndEXT(commandBuffer);

	/// <summary>vkCmdDebugMarkerInsertEXT(<c>Vk.CommandBuffer</c>, <c>Vk.EXT.DebugMarkerMarkerInfo*</c>)</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void CmdDebugMarkerInsertEXT(Vk.CommandBuffer commandBuffer, Vk.EXT.DebugMarkerMarkerInfo* pMarkerInfo)
		=> vkCmdDebugMarkerInsertEXT(commandBuffer, pMarkerInfo);

	/// <summary>vkGetMemoryWin32HandleNV(<c>Vk.Device</c>, <c>Vk.DeviceMemory</c>, <c>Vk.NV.ExternalMemoryHandleTypeFlags</c>, <c>void**</c>)</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result GetMemoryWin32HandleNV(Vk.Device device, Vk.DeviceMemory memory, Vk.NV.ExternalMemoryHandleTypeFlags handleType, void** pHandle)
		=> vkGetMemoryWin32HandleNV(device, memory, handleType, pHandle);

	/// <summary>vkCmdExecuteGeneratedCommandsNV(<c>Vk.CommandBuffer</c>, <c>Vk.Bool32</c>, <c>Vk.NV.GeneratedCommandsInfo*</c>)</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void CmdExecuteGeneratedCommandsNV(Vk.CommandBuffer commandBuffer, Vk.Bool32 isPreprocessed, Vk.NV.GeneratedCommandsInfo* pGeneratedCommandsInfo)
		=> vkCmdExecuteGeneratedCommandsNV(commandBuffer, isPreprocessed, pGeneratedCommandsInfo);

	/// <summary>vkCmdPreprocessGeneratedCommandsNV(<c>Vk.CommandBuffer</c>, <c>Vk.NV.GeneratedCommandsInfo*</c>)</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void CmdPreprocessGeneratedCommandsNV(Vk.CommandBuffer commandBuffer, Vk.NV.GeneratedCommandsInfo* pGeneratedCommandsInfo)
		=> vkCmdPreprocessGeneratedCommandsNV(commandBuffer, pGeneratedCommandsInfo);

	/// <summary>vkCmdBindPipelineShaderGroupNV(<c>Vk.CommandBuffer</c>, <c>Vk.PipelineBindPoint</c>, <c>Vk.Pipeline</c>, <c>uint</c>)</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void CmdBindPipelineShaderGroupNV(Vk.CommandBuffer commandBuffer, Vk.PipelineBindPoint pipelineBindPoint, Vk.Pipeline pipeline, uint groupIndex)
		=> vkCmdBindPipelineShaderGroupNV(commandBuffer, pipelineBindPoint, pipeline, groupIndex);

	/// <summary>vkGetGeneratedCommandsMemoryRequirementsNV(<c>Vk.Device</c>, <c>Vk.NV.GeneratedCommandsMemoryRequirementsInfo*</c>, <c>Vk.MemoryRequirements2*</c>)</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void GetGeneratedCommandsMemoryRequirementsNV(Vk.Device device, Vk.NV.GeneratedCommandsMemoryRequirementsInfo* pInfo, Vk.MemoryRequirements2* pMemoryRequirements)
		=> vkGetGeneratedCommandsMemoryRequirementsNV(device, pInfo, pMemoryRequirements);

	/// <summary>vkCreateIndirectCommandsLayoutNV(<c>Vk.Device</c>, <c>Vk.NV.IndirectCommandsLayoutCreateInfo*</c>, <c>Vk.AllocationCallbacks*</c>, <c>Vk.NV.IndirectCommandsLayout*</c>)</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result CreateIndirectCommandsLayoutNV(Vk.Device device, Vk.NV.IndirectCommandsLayoutCreateInfo* pCreateInfo, Vk.AllocationCallbacks* pAllocator, Vk.NV.IndirectCommandsLayout* pIndirectCommandsLayout)
		=> vkCreateIndirectCommandsLayoutNV(device, pCreateInfo, pAllocator, pIndirectCommandsLayout);

	/// <summary>vkDestroyIndirectCommandsLayoutNV(<c>Vk.Device</c>, <c>Vk.NV.IndirectCommandsLayout</c>, <c>Vk.AllocationCallbacks*</c>)</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void DestroyIndirectCommandsLayoutNV(Vk.Device device, Vk.NV.IndirectCommandsLayout indirectCommandsLayout, Vk.AllocationCallbacks* pAllocator)
		=> vkDestroyIndirectCommandsLayoutNV(device, indirectCommandsLayout, pAllocator);

	/// <summary>vkCmdPushDescriptorSetKHR(<c>Vk.CommandBuffer</c>, <c>Vk.PipelineBindPoint</c>, <c>Vk.PipelineLayout</c>, <c>uint</c>, <c>uint</c>, <c>Vk.WriteDescriptorSet*</c>)</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void CmdPushDescriptorSetKHR(Vk.CommandBuffer commandBuffer, Vk.PipelineBindPoint pipelineBindPoint, Vk.PipelineLayout layout, uint set, uint descriptorWriteCount, Vk.WriteDescriptorSet* pDescriptorWrites)
		=> vkCmdPushDescriptorSetKHR(commandBuffer, pipelineBindPoint, layout, set, descriptorWriteCount, pDescriptorWrites);

	/// <summary>vkTrimCommandPool(<c>Vk.Device</c>, <c>Vk.CommandPool</c>, <c>Vk.CommandPoolTrimFlags</c>)</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void TrimCommandPool(Vk.Device device, Vk.CommandPool commandPool, Vk.CommandPoolTrimFlags flags)
		=> vkTrimCommandPool(device, commandPool, flags);

	/// <summary>vkTrimCommandPoolKHR(<c>Vk.Device</c>, <c>Vk.CommandPool</c>, <c>Vk.CommandPoolTrimFlags</c>)</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void TrimCommandPoolKHR(Vk.Device device, Vk.CommandPool commandPool, Vk.CommandPoolTrimFlags flags)
		=> vkTrimCommandPoolKHR(device, commandPool, flags);

	/// <summary>vkGetMemoryWin32HandleKHR(<c>Vk.Device</c>, <c>Vk.KHR.MemoryGetWin32HandleInfo*</c>, <c>void**</c>)</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result GetMemoryWin32HandleKHR(Vk.Device device, Vk.KHR.MemoryGetWin32HandleInfo* pGetWin32HandleInfo, void** pHandle)
		=> vkGetMemoryWin32HandleKHR(device, pGetWin32HandleInfo, pHandle);

	/// <summary>vkGetMemoryWin32HandlePropertiesKHR(<c>Vk.Device</c>, <c>Vk.ExternalMemoryHandleTypeFlags</c>, <c>void*</c>, <c>Vk.KHR.MemoryWin32HandleProperties*</c>)</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result GetMemoryWin32HandlePropertiesKHR(Vk.Device device, Vk.ExternalMemoryHandleTypeFlags handleType, void* handle, Vk.KHR.MemoryWin32HandleProperties* pMemoryWin32HandleProperties)
		=> vkGetMemoryWin32HandlePropertiesKHR(device, handleType, handle, pMemoryWin32HandleProperties);

	/// <summary>vkGetMemoryFdKHR(<c>Vk.Device</c>, <c>Vk.KHR.MemoryGetFdInfo*</c>, <c>int*</c>)</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result GetMemoryFdKHR(Vk.Device device, Vk.KHR.MemoryGetFdInfo* pGetFdInfo, int* pFd)
		=> vkGetMemoryFdKHR(device, pGetFdInfo, pFd);

	/// <summary>vkGetMemoryFdPropertiesKHR(<c>Vk.Device</c>, <c>Vk.ExternalMemoryHandleTypeFlags</c>, <c>int</c>, <c>Vk.KHR.MemoryFdProperties*</c>)</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result GetMemoryFdPropertiesKHR(Vk.Device device, Vk.ExternalMemoryHandleTypeFlags handleType, int fd, Vk.KHR.MemoryFdProperties* pMemoryFdProperties)
		=> vkGetMemoryFdPropertiesKHR(device, handleType, fd, pMemoryFdProperties);

	/// <summary>vkGetSemaphoreWin32HandleKHR(<c>Vk.Device</c>, <c>Vk.KHR.SemaphoreGetWin32HandleInfo*</c>, <c>void**</c>)</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result GetSemaphoreWin32HandleKHR(Vk.Device device, Vk.KHR.SemaphoreGetWin32HandleInfo* pGetWin32HandleInfo, void** pHandle)
		=> vkGetSemaphoreWin32HandleKHR(device, pGetWin32HandleInfo, pHandle);

	/// <summary>vkImportSemaphoreWin32HandleKHR(<c>Vk.Device</c>, <c>Vk.KHR.ImportSemaphoreWin32HandleInfo*</c>)</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result ImportSemaphoreWin32HandleKHR(Vk.Device device, Vk.KHR.ImportSemaphoreWin32HandleInfo* pImportSemaphoreWin32HandleInfo)
		=> vkImportSemaphoreWin32HandleKHR(device, pImportSemaphoreWin32HandleInfo);

	/// <summary>vkGetSemaphoreFdKHR(<c>Vk.Device</c>, <c>Vk.KHR.SemaphoreGetFdInfo*</c>, <c>int*</c>)</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result GetSemaphoreFdKHR(Vk.Device device, Vk.KHR.SemaphoreGetFdInfo* pGetFdInfo, int* pFd)
		=> vkGetSemaphoreFdKHR(device, pGetFdInfo, pFd);

	/// <summary>vkImportSemaphoreFdKHR(<c>Vk.Device</c>, <c>Vk.KHR.ImportSemaphoreFdInfo*</c>)</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result ImportSemaphoreFdKHR(Vk.Device device, Vk.KHR.ImportSemaphoreFdInfo* pImportSemaphoreFdInfo)
		=> vkImportSemaphoreFdKHR(device, pImportSemaphoreFdInfo);

	/// <summary>vkGetFenceWin32HandleKHR(<c>Vk.Device</c>, <c>Vk.KHR.FenceGetWin32HandleInfo*</c>, <c>void**</c>)</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result GetFenceWin32HandleKHR(Vk.Device device, Vk.KHR.FenceGetWin32HandleInfo* pGetWin32HandleInfo, void** pHandle)
		=> vkGetFenceWin32HandleKHR(device, pGetWin32HandleInfo, pHandle);

	/// <summary>vkImportFenceWin32HandleKHR(<c>Vk.Device</c>, <c>Vk.KHR.ImportFenceWin32HandleInfo*</c>)</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result ImportFenceWin32HandleKHR(Vk.Device device, Vk.KHR.ImportFenceWin32HandleInfo* pImportFenceWin32HandleInfo)
		=> vkImportFenceWin32HandleKHR(device, pImportFenceWin32HandleInfo);

	/// <summary>vkGetFenceFdKHR(<c>Vk.Device</c>, <c>Vk.KHR.FenceGetFdInfo*</c>, <c>int*</c>)</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result GetFenceFdKHR(Vk.Device device, Vk.KHR.FenceGetFdInfo* pGetFdInfo, int* pFd)
		=> vkGetFenceFdKHR(device, pGetFdInfo, pFd);

	/// <summary>vkImportFenceFdKHR(<c>Vk.Device</c>, <c>Vk.KHR.ImportFenceFdInfo*</c>)</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result ImportFenceFdKHR(Vk.Device device, Vk.KHR.ImportFenceFdInfo* pImportFenceFdInfo)
		=> vkImportFenceFdKHR(device, pImportFenceFdInfo);

	/// <summary>vkDisplayPowerControlEXT(<c>Vk.Device</c>, <c>Vk.KHR.Display</c>, <c>Vk.EXT.DisplayPowerInfo*</c>)</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result DisplayPowerControlEXT(Vk.Device device, Vk.KHR.Display display, Vk.EXT.DisplayPowerInfo* pDisplayPowerInfo)
		=> vkDisplayPowerControlEXT(device, display, pDisplayPowerInfo);

	/// <summary>vkRegisterDeviceEventEXT(<c>Vk.Device</c>, <c>Vk.EXT.DeviceEventInfo*</c>, <c>Vk.AllocationCallbacks*</c>, <c>Vk.Fence*</c>)</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result RegisterDeviceEventEXT(Vk.Device device, Vk.EXT.DeviceEventInfo* pDeviceEventInfo, Vk.AllocationCallbacks* pAllocator, Vk.Fence* pFence)
		=> vkRegisterDeviceEventEXT(device, pDeviceEventInfo, pAllocator, pFence);

	/// <summary>vkRegisterDisplayEventEXT(<c>Vk.Device</c>, <c>Vk.KHR.Display</c>, <c>Vk.EXT.DisplayEventInfo*</c>, <c>Vk.AllocationCallbacks*</c>, <c>Vk.Fence*</c>)</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result RegisterDisplayEventEXT(Vk.Device device, Vk.KHR.Display display, Vk.EXT.DisplayEventInfo* pDisplayEventInfo, Vk.AllocationCallbacks* pAllocator, Vk.Fence* pFence)
		=> vkRegisterDisplayEventEXT(device, display, pDisplayEventInfo, pAllocator, pFence);

	/// <summary>vkGetSwapchainCounterEXT(<c>Vk.Device</c>, <c>Vk.KHR.Swapchain</c>, <c>Vk.EXT.SurfaceCounterFlags</c>, <c>ulong*</c>)</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result GetSwapchainCounterEXT(Vk.Device device, Vk.KHR.Swapchain swapchain, Vk.EXT.SurfaceCounterFlags counter, ulong* pCounterValue)
		=> vkGetSwapchainCounterEXT(device, swapchain, counter, pCounterValue);

	/// <summary>vkGetDeviceGroupPeerMemoryFeatures(<c>Vk.Device</c>, <c>uint</c>, <c>uint</c>, <c>uint</c>, <c>Vk.PeerMemoryFeatureFlags*</c>)</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void GetDeviceGroupPeerMemoryFeatures(Vk.Device device, uint heapIndex, uint localDeviceIndex, uint remoteDeviceIndex, Vk.PeerMemoryFeatureFlags* pPeerMemoryFeatures)
		=> vkGetDeviceGroupPeerMemoryFeatures(device, heapIndex, localDeviceIndex, remoteDeviceIndex, pPeerMemoryFeatures);

	/// <summary>vkGetDeviceGroupPeerMemoryFeaturesKHR(<c>Vk.Device</c>, <c>uint</c>, <c>uint</c>, <c>uint</c>, <c>Vk.PeerMemoryFeatureFlags*</c>)</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void GetDeviceGroupPeerMemoryFeaturesKHR(Vk.Device device, uint heapIndex, uint localDeviceIndex, uint remoteDeviceIndex, Vk.PeerMemoryFeatureFlags* pPeerMemoryFeatures)
		=> vkGetDeviceGroupPeerMemoryFeaturesKHR(device, heapIndex, localDeviceIndex, remoteDeviceIndex, pPeerMemoryFeatures);

	/// <summary>vkBindBufferMemory2(<c>Vk.Device</c>, <c>uint</c>, <c>Vk.BindBufferMemoryInfo*</c>)</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result BindBufferMemory2(Vk.Device device, uint bindInfoCount, Vk.BindBufferMemoryInfo* pBindInfos)
		=> vkBindBufferMemory2(device, bindInfoCount, pBindInfos);

	/// <summary>vkBindBufferMemory2KHR(<c>Vk.Device</c>, <c>uint</c>, <c>Vk.BindBufferMemoryInfo*</c>)</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result BindBufferMemory2KHR(Vk.Device device, uint bindInfoCount, Vk.BindBufferMemoryInfo* pBindInfos)
		=> vkBindBufferMemory2KHR(device, bindInfoCount, pBindInfos);

	/// <summary>vkBindImageMemory2(<c>Vk.Device</c>, <c>uint</c>, <c>Vk.BindImageMemoryInfo*</c>)</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result BindImageMemory2(Vk.Device device, uint bindInfoCount, Vk.BindImageMemoryInfo* pBindInfos)
		=> vkBindImageMemory2(device, bindInfoCount, pBindInfos);

	/// <summary>vkBindImageMemory2KHR(<c>Vk.Device</c>, <c>uint</c>, <c>Vk.BindImageMemoryInfo*</c>)</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result BindImageMemory2KHR(Vk.Device device, uint bindInfoCount, Vk.BindImageMemoryInfo* pBindInfos)
		=> vkBindImageMemory2KHR(device, bindInfoCount, pBindInfos);

	/// <summary>vkCmdSetDeviceMask(<c>Vk.CommandBuffer</c>, <c>uint</c>)</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void CmdSetDeviceMask(Vk.CommandBuffer commandBuffer, uint deviceMask)
		=> vkCmdSetDeviceMask(commandBuffer, deviceMask);

	/// <summary>vkCmdSetDeviceMaskKHR(<c>Vk.CommandBuffer</c>, <c>uint</c>)</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void CmdSetDeviceMaskKHR(Vk.CommandBuffer commandBuffer, uint deviceMask)
		=> vkCmdSetDeviceMaskKHR(commandBuffer, deviceMask);

	/// <summary>vkGetDeviceGroupPresentCapabilitiesKHR(<c>Vk.Device</c>, <c>Vk.KHR.DeviceGroupPresentCapabilities*</c>)</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result GetDeviceGroupPresentCapabilitiesKHR(Vk.Device device, Vk.KHR.DeviceGroupPresentCapabilities* pDeviceGroupPresentCapabilities)
		=> vkGetDeviceGroupPresentCapabilitiesKHR(device, pDeviceGroupPresentCapabilities);

	/// <summary>vkGetDeviceGroupSurfacePresentModesKHR(<c>Vk.Device</c>, <c>Vk.KHR.Surface</c>, <c>Vk.KHR.DeviceGroupPresentModeFlags*</c>)</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result GetDeviceGroupSurfacePresentModesKHR(Vk.Device device, Vk.KHR.Surface surface, Vk.KHR.DeviceGroupPresentModeFlags* pModes)
		=> vkGetDeviceGroupSurfacePresentModesKHR(device, surface, pModes);

	/// <summary>vkAcquireNextImage2KHR(<c>Vk.Device</c>, <c>Vk.KHR.AcquireNextImageInfo*</c>, <c>uint*</c>)</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result AcquireNextImage2KHR(Vk.Device device, Vk.KHR.AcquireNextImageInfo* pAcquireInfo, uint* pImageIndex)
		=> vkAcquireNextImage2KHR(device, pAcquireInfo, pImageIndex);

	/// <summary>vkCmdDispatchBase(<c>Vk.CommandBuffer</c>, <c>uint</c>, <c>uint</c>, <c>uint</c>, <c>uint</c>, <c>uint</c>, <c>uint</c>)</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void CmdDispatchBase(Vk.CommandBuffer commandBuffer, uint baseGroupX, uint baseGroupY, uint baseGroupZ, uint groupCountX, uint groupCountY, uint groupCountZ)
		=> vkCmdDispatchBase(commandBuffer, baseGroupX, baseGroupY, baseGroupZ, groupCountX, groupCountY, groupCountZ);

	/// <summary>vkCmdDispatchBaseKHR(<c>Vk.CommandBuffer</c>, <c>uint</c>, <c>uint</c>, <c>uint</c>, <c>uint</c>, <c>uint</c>, <c>uint</c>)</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void CmdDispatchBaseKHR(Vk.CommandBuffer commandBuffer, uint baseGroupX, uint baseGroupY, uint baseGroupZ, uint groupCountX, uint groupCountY, uint groupCountZ)
		=> vkCmdDispatchBaseKHR(commandBuffer, baseGroupX, baseGroupY, baseGroupZ, groupCountX, groupCountY, groupCountZ);

	/// <summary>vkCreateDescriptorUpdateTemplate(<c>Vk.Device</c>, <c>Vk.DescriptorUpdateTemplateCreateInfo*</c>, <c>Vk.AllocationCallbacks*</c>, <c>Vk.DescriptorUpdateTemplate*</c>)</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result CreateDescriptorUpdateTemplate(Vk.Device device, Vk.DescriptorUpdateTemplateCreateInfo* pCreateInfo, Vk.AllocationCallbacks* pAllocator, Vk.DescriptorUpdateTemplate* pDescriptorUpdateTemplate)
		=> vkCreateDescriptorUpdateTemplate(device, pCreateInfo, pAllocator, pDescriptorUpdateTemplate);

	/// <summary>vkCreateDescriptorUpdateTemplateKHR(<c>Vk.Device</c>, <c>Vk.DescriptorUpdateTemplateCreateInfo*</c>, <c>Vk.AllocationCallbacks*</c>, <c>Vk.DescriptorUpdateTemplate*</c>)</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result CreateDescriptorUpdateTemplateKHR(Vk.Device device, Vk.DescriptorUpdateTemplateCreateInfo* pCreateInfo, Vk.AllocationCallbacks* pAllocator, Vk.DescriptorUpdateTemplate* pDescriptorUpdateTemplate)
		=> vkCreateDescriptorUpdateTemplateKHR(device, pCreateInfo, pAllocator, pDescriptorUpdateTemplate);

	/// <summary>vkDestroyDescriptorUpdateTemplate(<c>Vk.Device</c>, <c>Vk.DescriptorUpdateTemplate</c>, <c>Vk.AllocationCallbacks*</c>)</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void DestroyDescriptorUpdateTemplate(Vk.Device device, Vk.DescriptorUpdateTemplate descriptorUpdateTemplate, Vk.AllocationCallbacks* pAllocator)
		=> vkDestroyDescriptorUpdateTemplate(device, descriptorUpdateTemplate, pAllocator);

	/// <summary>vkDestroyDescriptorUpdateTemplateKHR(<c>Vk.Device</c>, <c>Vk.DescriptorUpdateTemplate</c>, <c>Vk.AllocationCallbacks*</c>)</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void DestroyDescriptorUpdateTemplateKHR(Vk.Device device, Vk.DescriptorUpdateTemplate descriptorUpdateTemplate, Vk.AllocationCallbacks* pAllocator)
		=> vkDestroyDescriptorUpdateTemplateKHR(device, descriptorUpdateTemplate, pAllocator);

	/// <summary>vkUpdateDescriptorSetWithTemplate(<c>Vk.Device</c>, <c>Vk.DescriptorSet</c>, <c>Vk.DescriptorUpdateTemplate</c>, <c>void*</c>)</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void UpdateDescriptorSetWithTemplate(Vk.Device device, Vk.DescriptorSet descriptorSet, Vk.DescriptorUpdateTemplate descriptorUpdateTemplate, void* pData)
		=> vkUpdateDescriptorSetWithTemplate(device, descriptorSet, descriptorUpdateTemplate, pData);

	/// <summary>vkUpdateDescriptorSetWithTemplateKHR(<c>Vk.Device</c>, <c>Vk.DescriptorSet</c>, <c>Vk.DescriptorUpdateTemplate</c>, <c>void*</c>)</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void UpdateDescriptorSetWithTemplateKHR(Vk.Device device, Vk.DescriptorSet descriptorSet, Vk.DescriptorUpdateTemplate descriptorUpdateTemplate, void* pData)
		=> vkUpdateDescriptorSetWithTemplateKHR(device, descriptorSet, descriptorUpdateTemplate, pData);

	/// <summary>vkCmdPushDescriptorSetWithTemplateKHR(<c>Vk.CommandBuffer</c>, <c>Vk.DescriptorUpdateTemplate</c>, <c>Vk.PipelineLayout</c>, <c>uint</c>, <c>void*</c>)</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void CmdPushDescriptorSetWithTemplateKHR(Vk.CommandBuffer commandBuffer, Vk.DescriptorUpdateTemplate descriptorUpdateTemplate, Vk.PipelineLayout layout, uint set, void* pData)
		=> vkCmdPushDescriptorSetWithTemplateKHR(commandBuffer, descriptorUpdateTemplate, layout, set, pData);

	/// <summary>vkSetHdrMetadataEXT(<c>Vk.Device</c>, <c>uint</c>, <c>Vk.KHR.Swapchain*</c>, <c>Vk.EXT.HdrMetadata*</c>)</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void SetHdrMetadataEXT(Vk.Device device, uint swapchainCount, Vk.KHR.Swapchain* pSwapchains, Vk.EXT.HdrMetadata* pMetadata)
		=> vkSetHdrMetadataEXT(device, swapchainCount, pSwapchains, pMetadata);

	/// <summary>vkGetSwapchainStatusKHR(<c>Vk.Device</c>, <c>Vk.KHR.Swapchain</c>)</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result GetSwapchainStatusKHR(Vk.Device device, Vk.KHR.Swapchain swapchain)
		=> vkGetSwapchainStatusKHR(device, swapchain);

	/// <summary>vkGetRefreshCycleDurationGOOGLE(<c>Vk.Device</c>, <c>Vk.KHR.Swapchain</c>, <c>Vk.GOOGLE.RefreshCycleDuration*</c>)</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result GetRefreshCycleDurationGOOGLE(Vk.Device device, Vk.KHR.Swapchain swapchain, Vk.GOOGLE.RefreshCycleDuration* pDisplayTimingProperties)
		=> vkGetRefreshCycleDurationGOOGLE(device, swapchain, pDisplayTimingProperties);

	/// <summary>vkGetPastPresentationTimingGOOGLE(<c>Vk.Device</c>, <c>Vk.KHR.Swapchain</c>, <c>uint*</c>, <c>Vk.GOOGLE.PastPresentationTiming*</c>)</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result GetPastPresentationTimingGOOGLE(Vk.Device device, Vk.KHR.Swapchain swapchain, uint* pPresentationTimingCount, Vk.GOOGLE.PastPresentationTiming* pPresentationTimings)
		=> vkGetPastPresentationTimingGOOGLE(device, swapchain, pPresentationTimingCount, pPresentationTimings);

	/// <summary>vkCmdSetViewportWScalingNV(<c>Vk.CommandBuffer</c>, <c>uint</c>, <c>uint</c>, <c>Vk.NV.ViewportWScaling*</c>)</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void CmdSetViewportWScalingNV(Vk.CommandBuffer commandBuffer, uint firstViewport, uint viewportCount, Vk.NV.ViewportWScaling* pViewportWScalings)
		=> vkCmdSetViewportWScalingNV(commandBuffer, firstViewport, viewportCount, pViewportWScalings);

	/// <summary>vkCmdSetDiscardRectangleEXT(<c>Vk.CommandBuffer</c>, <c>uint</c>, <c>uint</c>, <c>Vk.Rect2D*</c>)</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void CmdSetDiscardRectangleEXT(Vk.CommandBuffer commandBuffer, uint firstDiscardRectangle, uint discardRectangleCount, Vk.Rect2D* pDiscardRectangles)
		=> vkCmdSetDiscardRectangleEXT(commandBuffer, firstDiscardRectangle, discardRectangleCount, pDiscardRectangles);

	/// <summary>vkCmdSetSampleLocationsEXT(<c>Vk.CommandBuffer</c>, <c>Vk.EXT.SampleLocationsInfo*</c>)</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void CmdSetSampleLocationsEXT(Vk.CommandBuffer commandBuffer, Vk.EXT.SampleLocationsInfo* pSampleLocationsInfo)
		=> vkCmdSetSampleLocationsEXT(commandBuffer, pSampleLocationsInfo);

	/// <summary>vkGetBufferMemoryRequirements2(<c>Vk.Device</c>, <c>Vk.BufferMemoryRequirementsInfo2*</c>, <c>Vk.MemoryRequirements2*</c>)</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void GetBufferMemoryRequirements2(Vk.Device device, Vk.BufferMemoryRequirementsInfo2* pInfo, Vk.MemoryRequirements2* pMemoryRequirements)
		=> vkGetBufferMemoryRequirements2(device, pInfo, pMemoryRequirements);

	/// <summary>vkGetBufferMemoryRequirements2KHR(<c>Vk.Device</c>, <c>Vk.BufferMemoryRequirementsInfo2*</c>, <c>Vk.MemoryRequirements2*</c>)</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void GetBufferMemoryRequirements2KHR(Vk.Device device, Vk.BufferMemoryRequirementsInfo2* pInfo, Vk.MemoryRequirements2* pMemoryRequirements)
		=> vkGetBufferMemoryRequirements2KHR(device, pInfo, pMemoryRequirements);

	/// <summary>vkGetImageMemoryRequirements2(<c>Vk.Device</c>, <c>Vk.ImageMemoryRequirementsInfo2*</c>, <c>Vk.MemoryRequirements2*</c>)</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void GetImageMemoryRequirements2(Vk.Device device, Vk.ImageMemoryRequirementsInfo2* pInfo, Vk.MemoryRequirements2* pMemoryRequirements)
		=> vkGetImageMemoryRequirements2(device, pInfo, pMemoryRequirements);

	/// <summary>vkGetImageMemoryRequirements2KHR(<c>Vk.Device</c>, <c>Vk.ImageMemoryRequirementsInfo2*</c>, <c>Vk.MemoryRequirements2*</c>)</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void GetImageMemoryRequirements2KHR(Vk.Device device, Vk.ImageMemoryRequirementsInfo2* pInfo, Vk.MemoryRequirements2* pMemoryRequirements)
		=> vkGetImageMemoryRequirements2KHR(device, pInfo, pMemoryRequirements);

	/// <summary>vkGetImageSparseMemoryRequirements2(<c>Vk.Device</c>, <c>Vk.ImageSparseMemoryRequirementsInfo2*</c>, <c>uint*</c>, <c>Vk.SparseImageMemoryRequirements2*</c>)</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void GetImageSparseMemoryRequirements2(Vk.Device device, Vk.ImageSparseMemoryRequirementsInfo2* pInfo, uint* pSparseMemoryRequirementCount, Vk.SparseImageMemoryRequirements2* pSparseMemoryRequirements)
		=> vkGetImageSparseMemoryRequirements2(device, pInfo, pSparseMemoryRequirementCount, pSparseMemoryRequirements);

	/// <summary>vkGetImageSparseMemoryRequirements2KHR(<c>Vk.Device</c>, <c>Vk.ImageSparseMemoryRequirementsInfo2*</c>, <c>uint*</c>, <c>Vk.SparseImageMemoryRequirements2*</c>)</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void GetImageSparseMemoryRequirements2KHR(Vk.Device device, Vk.ImageSparseMemoryRequirementsInfo2* pInfo, uint* pSparseMemoryRequirementCount, Vk.SparseImageMemoryRequirements2* pSparseMemoryRequirements)
		=> vkGetImageSparseMemoryRequirements2KHR(device, pInfo, pSparseMemoryRequirementCount, pSparseMemoryRequirements);

	/// <summary>vkCreateSamplerYcbcrConversion(<c>Vk.Device</c>, <c>Vk.SamplerYcbcrConversionCreateInfo*</c>, <c>Vk.AllocationCallbacks*</c>, <c>Vk.SamplerYcbcrConversion*</c>)</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result CreateSamplerYcbcrConversion(Vk.Device device, Vk.SamplerYcbcrConversionCreateInfo* pCreateInfo, Vk.AllocationCallbacks* pAllocator, Vk.SamplerYcbcrConversion* pYcbcrConversion)
		=> vkCreateSamplerYcbcrConversion(device, pCreateInfo, pAllocator, pYcbcrConversion);

	/// <summary>vkCreateSamplerYcbcrConversionKHR(<c>Vk.Device</c>, <c>Vk.SamplerYcbcrConversionCreateInfo*</c>, <c>Vk.AllocationCallbacks*</c>, <c>Vk.SamplerYcbcrConversion*</c>)</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result CreateSamplerYcbcrConversionKHR(Vk.Device device, Vk.SamplerYcbcrConversionCreateInfo* pCreateInfo, Vk.AllocationCallbacks* pAllocator, Vk.SamplerYcbcrConversion* pYcbcrConversion)
		=> vkCreateSamplerYcbcrConversionKHR(device, pCreateInfo, pAllocator, pYcbcrConversion);

	/// <summary>vkDestroySamplerYcbcrConversion(<c>Vk.Device</c>, <c>Vk.SamplerYcbcrConversion</c>, <c>Vk.AllocationCallbacks*</c>)</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void DestroySamplerYcbcrConversion(Vk.Device device, Vk.SamplerYcbcrConversion ycbcrConversion, Vk.AllocationCallbacks* pAllocator)
		=> vkDestroySamplerYcbcrConversion(device, ycbcrConversion, pAllocator);

	/// <summary>vkDestroySamplerYcbcrConversionKHR(<c>Vk.Device</c>, <c>Vk.SamplerYcbcrConversion</c>, <c>Vk.AllocationCallbacks*</c>)</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void DestroySamplerYcbcrConversionKHR(Vk.Device device, Vk.SamplerYcbcrConversion ycbcrConversion, Vk.AllocationCallbacks* pAllocator)
		=> vkDestroySamplerYcbcrConversionKHR(device, ycbcrConversion, pAllocator);

	/// <summary>vkGetDeviceQueue2(<c>Vk.Device</c>, <c>Vk.DeviceQueueInfo2*</c>, <c>Vk.Queue*</c>)</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void GetDeviceQueue2(Vk.Device device, Vk.DeviceQueueInfo2* pQueueInfo, Vk.Queue* pQueue)
		=> vkGetDeviceQueue2(device, pQueueInfo, pQueue);

	/// <summary>vkCreateValidationCacheEXT(<c>Vk.Device</c>, <c>Vk.EXT.ValidationCacheCreateInfo*</c>, <c>Vk.AllocationCallbacks*</c>, <c>Vk.EXT.ValidationCache*</c>)</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result CreateValidationCacheEXT(Vk.Device device, Vk.EXT.ValidationCacheCreateInfo* pCreateInfo, Vk.AllocationCallbacks* pAllocator, Vk.EXT.ValidationCache* pValidationCache)
		=> vkCreateValidationCacheEXT(device, pCreateInfo, pAllocator, pValidationCache);

	/// <summary>vkDestroyValidationCacheEXT(<c>Vk.Device</c>, <c>Vk.EXT.ValidationCache</c>, <c>Vk.AllocationCallbacks*</c>)</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void DestroyValidationCacheEXT(Vk.Device device, Vk.EXT.ValidationCache validationCache, Vk.AllocationCallbacks* pAllocator)
		=> vkDestroyValidationCacheEXT(device, validationCache, pAllocator);

	/// <summary>vkGetValidationCacheDataEXT(<c>Vk.Device</c>, <c>Vk.EXT.ValidationCache</c>, <c>ulong*</c>, <c>void*</c>)</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result GetValidationCacheDataEXT(Vk.Device device, Vk.EXT.ValidationCache validationCache, ulong* pDataSize, void* pData)
		=> vkGetValidationCacheDataEXT(device, validationCache, pDataSize, pData);

	/// <summary>vkMergeValidationCachesEXT(<c>Vk.Device</c>, <c>Vk.EXT.ValidationCache</c>, <c>uint</c>, <c>Vk.EXT.ValidationCache*</c>)</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result MergeValidationCachesEXT(Vk.Device device, Vk.EXT.ValidationCache dstCache, uint srcCacheCount, Vk.EXT.ValidationCache* pSrcCaches)
		=> vkMergeValidationCachesEXT(device, dstCache, srcCacheCount, pSrcCaches);

	/// <summary>vkGetDescriptorSetLayoutSupport(<c>Vk.Device</c>, <c>Vk.DescriptorSetLayoutCreateInfo*</c>, <c>Vk.DescriptorSetLayoutSupport*</c>)</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void GetDescriptorSetLayoutSupport(Vk.Device device, Vk.DescriptorSetLayoutCreateInfo* pCreateInfo, Vk.DescriptorSetLayoutSupport* pSupport)
		=> vkGetDescriptorSetLayoutSupport(device, pCreateInfo, pSupport);

	/// <summary>vkGetDescriptorSetLayoutSupportKHR(<c>Vk.Device</c>, <c>Vk.DescriptorSetLayoutCreateInfo*</c>, <c>Vk.DescriptorSetLayoutSupport*</c>)</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void GetDescriptorSetLayoutSupportKHR(Vk.Device device, Vk.DescriptorSetLayoutCreateInfo* pCreateInfo, Vk.DescriptorSetLayoutSupport* pSupport)
		=> vkGetDescriptorSetLayoutSupportKHR(device, pCreateInfo, pSupport);

	/// <summary>vkGetSwapchainGrallocUsageANDROID(<c>Vk.Device</c>, <c>Vk.Format</c>, <c>Vk.ImageUsageFlags</c>, <c>int*</c>)</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result GetSwapchainGrallocUsageANDROID(Vk.Device device, Vk.Format format, Vk.ImageUsageFlags imageUsage, int* grallocUsage)
		=> vkGetSwapchainGrallocUsageANDROID(device, format, imageUsage, grallocUsage);

	/// <summary>vkGetSwapchainGrallocUsage2ANDROID(<c>Vk.Device</c>, <c>Vk.Format</c>, <c>Vk.ImageUsageFlags</c>, <c>Vk.ANDROID.SwapchainImageUsageFlags</c>, <c>ulong*</c>, <c>ulong*</c>)</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result GetSwapchainGrallocUsage2ANDROID(Vk.Device device, Vk.Format format, Vk.ImageUsageFlags imageUsage, Vk.ANDROID.SwapchainImageUsageFlags swapchainImageUsage, ulong* grallocConsumerUsage, ulong* grallocProducerUsage)
		=> vkGetSwapchainGrallocUsage2ANDROID(device, format, imageUsage, swapchainImageUsage, grallocConsumerUsage, grallocProducerUsage);

	/// <summary>vkAcquireImageANDROID(<c>Vk.Device</c>, <c>Vk.Image</c>, <c>int</c>, <c>Vk.Semaphore</c>, <c>Vk.Fence</c>)</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result AcquireImageANDROID(Vk.Device device, Vk.Image image, int nativeFenceFd, Vk.Semaphore semaphore, Vk.Fence fence)
		=> vkAcquireImageANDROID(device, image, nativeFenceFd, semaphore, fence);

	/// <summary>vkQueueSignalReleaseImageANDROID(<c>Vk.Queue</c>, <c>uint</c>, <c>Vk.Semaphore*</c>, <c>Vk.Image</c>, <c>int*</c>)</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result QueueSignalReleaseImageANDROID(Vk.Queue queue, uint waitSemaphoreCount, Vk.Semaphore* pWaitSemaphores, Vk.Image image, int* pNativeFenceFd)
		=> vkQueueSignalReleaseImageANDROID(queue, waitSemaphoreCount, pWaitSemaphores, image, pNativeFenceFd);

	/// <summary>vkGetShaderInfoAMD(<c>Vk.Device</c>, <c>Vk.Pipeline</c>, <c>Vk.ShaderStageFlags</c>, <c>Vk.AMD.ShaderInfoType</c>, <c>ulong*</c>, <c>void*</c>)</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result GetShaderInfoAMD(Vk.Device device, Vk.Pipeline pipeline, Vk.ShaderStageFlags shaderStage, Vk.AMD.ShaderInfoType infoType, ulong* pInfoSize, void* pInfo)
		=> vkGetShaderInfoAMD(device, pipeline, shaderStage, infoType, pInfoSize, pInfo);

	/// <summary>vkSetLocalDimmingAMD(<c>Vk.Device</c>, <c>Vk.KHR.Swapchain</c>, <c>Vk.Bool32</c>)</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void SetLocalDimmingAMD(Vk.Device device, Vk.KHR.Swapchain swapChain, Vk.Bool32 localDimmingEnable)
		=> vkSetLocalDimmingAMD(device, swapChain, localDimmingEnable);

	/// <summary>vkGetCalibratedTimestampsEXT(<c>Vk.Device</c>, <c>uint</c>, <c>Vk.EXT.CalibratedTimestampInfo*</c>, <c>ulong*</c>, <c>ulong*</c>)</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result GetCalibratedTimestampsEXT(Vk.Device device, uint timestampCount, Vk.EXT.CalibratedTimestampInfo* pTimestampInfos, ulong* pTimestamps, ulong* pMaxDeviation)
		=> vkGetCalibratedTimestampsEXT(device, timestampCount, pTimestampInfos, pTimestamps, pMaxDeviation);

	/// <summary>vkSetDebugUtilsObjectNameEXT(<c>Vk.Device</c>, <c>Vk.EXT.DebugUtilsObjectNameInfo*</c>)</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result SetDebugUtilsObjectNameEXT(Vk.Device device, Vk.EXT.DebugUtilsObjectNameInfo* pNameInfo)
		=> vkSetDebugUtilsObjectNameEXT(device, pNameInfo);

	/// <summary>vkSetDebugUtilsObjectTagEXT(<c>Vk.Device</c>, <c>Vk.EXT.DebugUtilsObjectTagInfo*</c>)</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result SetDebugUtilsObjectTagEXT(Vk.Device device, Vk.EXT.DebugUtilsObjectTagInfo* pTagInfo)
		=> vkSetDebugUtilsObjectTagEXT(device, pTagInfo);

	/// <summary>vkQueueBeginDebugUtilsLabelEXT(<c>Vk.Queue</c>, <c>Vk.EXT.DebugUtilsLabel*</c>)</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void QueueBeginDebugUtilsLabelEXT(Vk.Queue queue, Vk.EXT.DebugUtilsLabel* pLabelInfo)
		=> vkQueueBeginDebugUtilsLabelEXT(queue, pLabelInfo);

	/// <summary>vkQueueEndDebugUtilsLabelEXT(<c>Vk.Queue</c>)</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void QueueEndDebugUtilsLabelEXT(Vk.Queue queue)
		=> vkQueueEndDebugUtilsLabelEXT(queue);

	/// <summary>vkQueueInsertDebugUtilsLabelEXT(<c>Vk.Queue</c>, <c>Vk.EXT.DebugUtilsLabel*</c>)</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void QueueInsertDebugUtilsLabelEXT(Vk.Queue queue, Vk.EXT.DebugUtilsLabel* pLabelInfo)
		=> vkQueueInsertDebugUtilsLabelEXT(queue, pLabelInfo);

	/// <summary>vkCmdBeginDebugUtilsLabelEXT(<c>Vk.CommandBuffer</c>, <c>Vk.EXT.DebugUtilsLabel*</c>)</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void CmdBeginDebugUtilsLabelEXT(Vk.CommandBuffer commandBuffer, Vk.EXT.DebugUtilsLabel* pLabelInfo)
		=> vkCmdBeginDebugUtilsLabelEXT(commandBuffer, pLabelInfo);

	/// <summary>vkCmdEndDebugUtilsLabelEXT(<c>Vk.CommandBuffer</c>)</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void CmdEndDebugUtilsLabelEXT(Vk.CommandBuffer commandBuffer)
		=> vkCmdEndDebugUtilsLabelEXT(commandBuffer);

	/// <summary>vkCmdInsertDebugUtilsLabelEXT(<c>Vk.CommandBuffer</c>, <c>Vk.EXT.DebugUtilsLabel*</c>)</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void CmdInsertDebugUtilsLabelEXT(Vk.CommandBuffer commandBuffer, Vk.EXT.DebugUtilsLabel* pLabelInfo)
		=> vkCmdInsertDebugUtilsLabelEXT(commandBuffer, pLabelInfo);

	/// <summary>vkGetMemoryHostPointerPropertiesEXT(<c>Vk.Device</c>, <c>Vk.ExternalMemoryHandleTypeFlags</c>, <c>void*</c>, <c>Vk.EXT.MemoryHostPointerProperties*</c>)</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result GetMemoryHostPointerPropertiesEXT(Vk.Device device, Vk.ExternalMemoryHandleTypeFlags handleType, void* pHostPointer, Vk.EXT.MemoryHostPointerProperties* pMemoryHostPointerProperties)
		=> vkGetMemoryHostPointerPropertiesEXT(device, handleType, pHostPointer, pMemoryHostPointerProperties);

	/// <summary>vkCmdWriteBufferMarkerAMD(<c>Vk.CommandBuffer</c>, <c>Vk.PipelineStageFlags</c>, <c>Vk.Buffer</c>, <c>Vk.DeviceSize</c>, <c>uint</c>)</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void CmdWriteBufferMarkerAMD(Vk.CommandBuffer commandBuffer, Vk.PipelineStageFlags pipelineStage, Vk.Buffer dstBuffer, Vk.DeviceSize dstOffset, uint marker)
		=> vkCmdWriteBufferMarkerAMD(commandBuffer, pipelineStage, dstBuffer, dstOffset, marker);

	/// <summary>vkCreateRenderPass2(<c>Vk.Device</c>, <c>Vk.RenderPassCreateInfo2*</c>, <c>Vk.AllocationCallbacks*</c>, <c>Vk.RenderPass*</c>)</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result CreateRenderPass2(Vk.Device device, Vk.RenderPassCreateInfo2* pCreateInfo, Vk.AllocationCallbacks* pAllocator, Vk.RenderPass* pRenderPass)
		=> vkCreateRenderPass2(device, pCreateInfo, pAllocator, pRenderPass);

	/// <summary>vkCreateRenderPass2KHR(<c>Vk.Device</c>, <c>Vk.RenderPassCreateInfo2*</c>, <c>Vk.AllocationCallbacks*</c>, <c>Vk.RenderPass*</c>)</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result CreateRenderPass2KHR(Vk.Device device, Vk.RenderPassCreateInfo2* pCreateInfo, Vk.AllocationCallbacks* pAllocator, Vk.RenderPass* pRenderPass)
		=> vkCreateRenderPass2KHR(device, pCreateInfo, pAllocator, pRenderPass);

	/// <summary>vkCmdBeginRenderPass2(<c>Vk.CommandBuffer</c>, <c>Vk.RenderPassBeginInfo*</c>, <c>Vk.SubpassBeginInfo*</c>)</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void CmdBeginRenderPass2(Vk.CommandBuffer commandBuffer, Vk.RenderPassBeginInfo* pRenderPassBegin, Vk.SubpassBeginInfo* pSubpassBeginInfo)
		=> vkCmdBeginRenderPass2(commandBuffer, pRenderPassBegin, pSubpassBeginInfo);

	/// <summary>vkCmdBeginRenderPass2KHR(<c>Vk.CommandBuffer</c>, <c>Vk.RenderPassBeginInfo*</c>, <c>Vk.SubpassBeginInfo*</c>)</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void CmdBeginRenderPass2KHR(Vk.CommandBuffer commandBuffer, Vk.RenderPassBeginInfo* pRenderPassBegin, Vk.SubpassBeginInfo* pSubpassBeginInfo)
		=> vkCmdBeginRenderPass2KHR(commandBuffer, pRenderPassBegin, pSubpassBeginInfo);

	/// <summary>vkCmdNextSubpass2(<c>Vk.CommandBuffer</c>, <c>Vk.SubpassBeginInfo*</c>, <c>Vk.SubpassEndInfo*</c>)</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void CmdNextSubpass2(Vk.CommandBuffer commandBuffer, Vk.SubpassBeginInfo* pSubpassBeginInfo, Vk.SubpassEndInfo* pSubpassEndInfo)
		=> vkCmdNextSubpass2(commandBuffer, pSubpassBeginInfo, pSubpassEndInfo);

	/// <summary>vkCmdNextSubpass2KHR(<c>Vk.CommandBuffer</c>, <c>Vk.SubpassBeginInfo*</c>, <c>Vk.SubpassEndInfo*</c>)</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void CmdNextSubpass2KHR(Vk.CommandBuffer commandBuffer, Vk.SubpassBeginInfo* pSubpassBeginInfo, Vk.SubpassEndInfo* pSubpassEndInfo)
		=> vkCmdNextSubpass2KHR(commandBuffer, pSubpassBeginInfo, pSubpassEndInfo);

	/// <summary>vkCmdEndRenderPass2(<c>Vk.CommandBuffer</c>, <c>Vk.SubpassEndInfo*</c>)</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void CmdEndRenderPass2(Vk.CommandBuffer commandBuffer, Vk.SubpassEndInfo* pSubpassEndInfo)
		=> vkCmdEndRenderPass2(commandBuffer, pSubpassEndInfo);

	/// <summary>vkCmdEndRenderPass2KHR(<c>Vk.CommandBuffer</c>, <c>Vk.SubpassEndInfo*</c>)</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void CmdEndRenderPass2KHR(Vk.CommandBuffer commandBuffer, Vk.SubpassEndInfo* pSubpassEndInfo)
		=> vkCmdEndRenderPass2KHR(commandBuffer, pSubpassEndInfo);

	/// <summary>vkGetSemaphoreCounterValue(<c>Vk.Device</c>, <c>Vk.Semaphore</c>, <c>ulong*</c>)</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result GetSemaphoreCounterValue(Vk.Device device, Vk.Semaphore semaphore, ulong* pValue)
		=> vkGetSemaphoreCounterValue(device, semaphore, pValue);

	/// <summary>vkGetSemaphoreCounterValueKHR(<c>Vk.Device</c>, <c>Vk.Semaphore</c>, <c>ulong*</c>)</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result GetSemaphoreCounterValueKHR(Vk.Device device, Vk.Semaphore semaphore, ulong* pValue)
		=> vkGetSemaphoreCounterValueKHR(device, semaphore, pValue);

	/// <summary>vkWaitSemaphores(<c>Vk.Device</c>, <c>Vk.SemaphoreWaitInfo*</c>, <c>ulong</c>)</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result WaitSemaphores(Vk.Device device, Vk.SemaphoreWaitInfo* pWaitInfo, ulong timeout)
		=> vkWaitSemaphores(device, pWaitInfo, timeout);

	/// <summary>vkWaitSemaphoresKHR(<c>Vk.Device</c>, <c>Vk.SemaphoreWaitInfo*</c>, <c>ulong</c>)</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result WaitSemaphoresKHR(Vk.Device device, Vk.SemaphoreWaitInfo* pWaitInfo, ulong timeout)
		=> vkWaitSemaphoresKHR(device, pWaitInfo, timeout);

	/// <summary>vkSignalSemaphore(<c>Vk.Device</c>, <c>Vk.SemaphoreSignalInfo*</c>)</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result SignalSemaphore(Vk.Device device, Vk.SemaphoreSignalInfo* pSignalInfo)
		=> vkSignalSemaphore(device, pSignalInfo);

	/// <summary>vkSignalSemaphoreKHR(<c>Vk.Device</c>, <c>Vk.SemaphoreSignalInfo*</c>)</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result SignalSemaphoreKHR(Vk.Device device, Vk.SemaphoreSignalInfo* pSignalInfo)
		=> vkSignalSemaphoreKHR(device, pSignalInfo);

	/// <summary>vkGetAndroidHardwareBufferPropertiesANDROID(<c>Vk.Device</c>, <c>void*</c>, <c>Vk.ANDROID.AndroidHardwareBufferProperties*</c>)</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result GetAndroidHardwareBufferPropertiesANDROID(Vk.Device device, void* buffer, Vk.ANDROID.AndroidHardwareBufferProperties* pProperties)
		=> vkGetAndroidHardwareBufferPropertiesANDROID(device, buffer, pProperties);

	/// <summary>vkGetMemoryAndroidHardwareBufferANDROID(<c>Vk.Device</c>, <c>Vk.ANDROID.MemoryGetAndroidHardwareBufferInfo*</c>, <c>void**</c>)</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result GetMemoryAndroidHardwareBufferANDROID(Vk.Device device, Vk.ANDROID.MemoryGetAndroidHardwareBufferInfo* pInfo, void** pBuffer)
		=> vkGetMemoryAndroidHardwareBufferANDROID(device, pInfo, pBuffer);

	/// <summary>vkCmdDrawIndirectCount(<c>Vk.CommandBuffer</c>, <c>Vk.Buffer</c>, <c>Vk.DeviceSize</c>, <c>Vk.Buffer</c>, <c>Vk.DeviceSize</c>, <c>uint</c>, <c>uint</c>)</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void CmdDrawIndirectCount(Vk.CommandBuffer commandBuffer, Vk.Buffer buffer, Vk.DeviceSize offset, Vk.Buffer countBuffer, Vk.DeviceSize countBufferOffset, uint maxDrawCount, uint stride)
		=> vkCmdDrawIndirectCount(commandBuffer, buffer, offset, countBuffer, countBufferOffset, maxDrawCount, stride);

	/// <summary>vkCmdDrawIndirectCountKHR(<c>Vk.CommandBuffer</c>, <c>Vk.Buffer</c>, <c>Vk.DeviceSize</c>, <c>Vk.Buffer</c>, <c>Vk.DeviceSize</c>, <c>uint</c>, <c>uint</c>)</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void CmdDrawIndirectCountKHR(Vk.CommandBuffer commandBuffer, Vk.Buffer buffer, Vk.DeviceSize offset, Vk.Buffer countBuffer, Vk.DeviceSize countBufferOffset, uint maxDrawCount, uint stride)
		=> vkCmdDrawIndirectCountKHR(commandBuffer, buffer, offset, countBuffer, countBufferOffset, maxDrawCount, stride);

	/// <summary>vkCmdDrawIndirectCountAMD(<c>Vk.CommandBuffer</c>, <c>Vk.Buffer</c>, <c>Vk.DeviceSize</c>, <c>Vk.Buffer</c>, <c>Vk.DeviceSize</c>, <c>uint</c>, <c>uint</c>)</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void CmdDrawIndirectCountAMD(Vk.CommandBuffer commandBuffer, Vk.Buffer buffer, Vk.DeviceSize offset, Vk.Buffer countBuffer, Vk.DeviceSize countBufferOffset, uint maxDrawCount, uint stride)
		=> vkCmdDrawIndirectCountAMD(commandBuffer, buffer, offset, countBuffer, countBufferOffset, maxDrawCount, stride);

	/// <summary>vkCmdDrawIndexedIndirectCount(<c>Vk.CommandBuffer</c>, <c>Vk.Buffer</c>, <c>Vk.DeviceSize</c>, <c>Vk.Buffer</c>, <c>Vk.DeviceSize</c>, <c>uint</c>, <c>uint</c>)</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void CmdDrawIndexedIndirectCount(Vk.CommandBuffer commandBuffer, Vk.Buffer buffer, Vk.DeviceSize offset, Vk.Buffer countBuffer, Vk.DeviceSize countBufferOffset, uint maxDrawCount, uint stride)
		=> vkCmdDrawIndexedIndirectCount(commandBuffer, buffer, offset, countBuffer, countBufferOffset, maxDrawCount, stride);

	/// <summary>vkCmdDrawIndexedIndirectCountKHR(<c>Vk.CommandBuffer</c>, <c>Vk.Buffer</c>, <c>Vk.DeviceSize</c>, <c>Vk.Buffer</c>, <c>Vk.DeviceSize</c>, <c>uint</c>, <c>uint</c>)</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void CmdDrawIndexedIndirectCountKHR(Vk.CommandBuffer commandBuffer, Vk.Buffer buffer, Vk.DeviceSize offset, Vk.Buffer countBuffer, Vk.DeviceSize countBufferOffset, uint maxDrawCount, uint stride)
		=> vkCmdDrawIndexedIndirectCountKHR(commandBuffer, buffer, offset, countBuffer, countBufferOffset, maxDrawCount, stride);

	/// <summary>vkCmdDrawIndexedIndirectCountAMD(<c>Vk.CommandBuffer</c>, <c>Vk.Buffer</c>, <c>Vk.DeviceSize</c>, <c>Vk.Buffer</c>, <c>Vk.DeviceSize</c>, <c>uint</c>, <c>uint</c>)</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void CmdDrawIndexedIndirectCountAMD(Vk.CommandBuffer commandBuffer, Vk.Buffer buffer, Vk.DeviceSize offset, Vk.Buffer countBuffer, Vk.DeviceSize countBufferOffset, uint maxDrawCount, uint stride)
		=> vkCmdDrawIndexedIndirectCountAMD(commandBuffer, buffer, offset, countBuffer, countBufferOffset, maxDrawCount, stride);

	/// <summary>vkCmdSetCheckpointNV(<c>Vk.CommandBuffer</c>, <c>void*</c>)</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void CmdSetCheckpointNV(Vk.CommandBuffer commandBuffer, void* pCheckpointMarker)
		=> vkCmdSetCheckpointNV(commandBuffer, pCheckpointMarker);

	/// <summary>vkGetQueueCheckpointDataNV(<c>Vk.Queue</c>, <c>uint*</c>, <c>Vk.NV.CheckpointData*</c>)</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void GetQueueCheckpointDataNV(Vk.Queue queue, uint* pCheckpointDataCount, Vk.NV.CheckpointData* pCheckpointData)
		=> vkGetQueueCheckpointDataNV(queue, pCheckpointDataCount, pCheckpointData);

	/// <summary>vkCmdBindTransformFeedbackBuffersEXT(<c>Vk.CommandBuffer</c>, <c>uint</c>, <c>uint</c>, <c>Vk.Buffer*</c>, <c>Vk.DeviceSize*</c>, <c>Vk.DeviceSize*</c>)</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void CmdBindTransformFeedbackBuffersEXT(Vk.CommandBuffer commandBuffer, uint firstBinding, uint bindingCount, Vk.Buffer* pBuffers, Vk.DeviceSize* pOffsets, Vk.DeviceSize* pSizes)
		=> vkCmdBindTransformFeedbackBuffersEXT(commandBuffer, firstBinding, bindingCount, pBuffers, pOffsets, pSizes);

	/// <summary>vkCmdBeginTransformFeedbackEXT(<c>Vk.CommandBuffer</c>, <c>uint</c>, <c>uint</c>, <c>Vk.Buffer*</c>, <c>Vk.DeviceSize*</c>)</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void CmdBeginTransformFeedbackEXT(Vk.CommandBuffer commandBuffer, uint firstCounterBuffer, uint counterBufferCount, Vk.Buffer* pCounterBuffers, Vk.DeviceSize* pCounterBufferOffsets)
		=> vkCmdBeginTransformFeedbackEXT(commandBuffer, firstCounterBuffer, counterBufferCount, pCounterBuffers, pCounterBufferOffsets);

	/// <summary>vkCmdEndTransformFeedbackEXT(<c>Vk.CommandBuffer</c>, <c>uint</c>, <c>uint</c>, <c>Vk.Buffer*</c>, <c>Vk.DeviceSize*</c>)</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void CmdEndTransformFeedbackEXT(Vk.CommandBuffer commandBuffer, uint firstCounterBuffer, uint counterBufferCount, Vk.Buffer* pCounterBuffers, Vk.DeviceSize* pCounterBufferOffsets)
		=> vkCmdEndTransformFeedbackEXT(commandBuffer, firstCounterBuffer, counterBufferCount, pCounterBuffers, pCounterBufferOffsets);

	/// <summary>vkCmdBeginQueryIndexedEXT(<c>Vk.CommandBuffer</c>, <c>Vk.QueryPool</c>, <c>uint</c>, <c>Vk.QueryControlFlags</c>, <c>uint</c>)</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void CmdBeginQueryIndexedEXT(Vk.CommandBuffer commandBuffer, Vk.QueryPool queryPool, uint query, Vk.QueryControlFlags flags, uint index)
		=> vkCmdBeginQueryIndexedEXT(commandBuffer, queryPool, query, flags, index);

	/// <summary>vkCmdEndQueryIndexedEXT(<c>Vk.CommandBuffer</c>, <c>Vk.QueryPool</c>, <c>uint</c>, <c>uint</c>)</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void CmdEndQueryIndexedEXT(Vk.CommandBuffer commandBuffer, Vk.QueryPool queryPool, uint query, uint index)
		=> vkCmdEndQueryIndexedEXT(commandBuffer, queryPool, query, index);

	/// <summary>vkCmdDrawIndirectByteCountEXT(<c>Vk.CommandBuffer</c>, <c>uint</c>, <c>uint</c>, <c>Vk.Buffer</c>, <c>Vk.DeviceSize</c>, <c>uint</c>, <c>uint</c>)</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void CmdDrawIndirectByteCountEXT(Vk.CommandBuffer commandBuffer, uint instanceCount, uint firstInstance, Vk.Buffer counterBuffer, Vk.DeviceSize counterBufferOffset, uint counterOffset, uint vertexStride)
		=> vkCmdDrawIndirectByteCountEXT(commandBuffer, instanceCount, firstInstance, counterBuffer, counterBufferOffset, counterOffset, vertexStride);

	/// <summary>vkCmdSetExclusiveScissorNV(<c>Vk.CommandBuffer</c>, <c>uint</c>, <c>uint</c>, <c>Vk.Rect2D*</c>)</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void CmdSetExclusiveScissorNV(Vk.CommandBuffer commandBuffer, uint firstExclusiveScissor, uint exclusiveScissorCount, Vk.Rect2D* pExclusiveScissors)
		=> vkCmdSetExclusiveScissorNV(commandBuffer, firstExclusiveScissor, exclusiveScissorCount, pExclusiveScissors);

	/// <summary>vkCmdBindShadingRateImageNV(<c>Vk.CommandBuffer</c>, <c>Vk.ImageView</c>, <c>Vk.ImageLayout</c>)</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void CmdBindShadingRateImageNV(Vk.CommandBuffer commandBuffer, Vk.ImageView imageView, Vk.ImageLayout imageLayout)
		=> vkCmdBindShadingRateImageNV(commandBuffer, imageView, imageLayout);

	/// <summary>vkCmdSetViewportShadingRatePaletteNV(<c>Vk.CommandBuffer</c>, <c>uint</c>, <c>uint</c>, <c>Vk.NV.ShadingRatePalette*</c>)</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void CmdSetViewportShadingRatePaletteNV(Vk.CommandBuffer commandBuffer, uint firstViewport, uint viewportCount, Vk.NV.ShadingRatePalette* pShadingRatePalettes)
		=> vkCmdSetViewportShadingRatePaletteNV(commandBuffer, firstViewport, viewportCount, pShadingRatePalettes);

	/// <summary>vkCmdSetCoarseSampleOrderNV(<c>Vk.CommandBuffer</c>, <c>Vk.NV.CoarseSampleOrderType</c>, <c>uint</c>, <c>Vk.NV.CoarseSampleOrderCustom*</c>)</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void CmdSetCoarseSampleOrderNV(Vk.CommandBuffer commandBuffer, Vk.NV.CoarseSampleOrderType sampleOrderType, uint customSampleOrderCount, Vk.NV.CoarseSampleOrderCustom* pCustomSampleOrders)
		=> vkCmdSetCoarseSampleOrderNV(commandBuffer, sampleOrderType, customSampleOrderCount, pCustomSampleOrders);

	/// <summary>vkCmdDrawMeshTasksNV(<c>Vk.CommandBuffer</c>, <c>uint</c>, <c>uint</c>)</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void CmdDrawMeshTasksNV(Vk.CommandBuffer commandBuffer, uint taskCount, uint firstTask)
		=> vkCmdDrawMeshTasksNV(commandBuffer, taskCount, firstTask);

	/// <summary>vkCmdDrawMeshTasksIndirectNV(<c>Vk.CommandBuffer</c>, <c>Vk.Buffer</c>, <c>Vk.DeviceSize</c>, <c>uint</c>, <c>uint</c>)</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void CmdDrawMeshTasksIndirectNV(Vk.CommandBuffer commandBuffer, Vk.Buffer buffer, Vk.DeviceSize offset, uint drawCount, uint stride)
		=> vkCmdDrawMeshTasksIndirectNV(commandBuffer, buffer, offset, drawCount, stride);

	/// <summary>vkCmdDrawMeshTasksIndirectCountNV(<c>Vk.CommandBuffer</c>, <c>Vk.Buffer</c>, <c>Vk.DeviceSize</c>, <c>Vk.Buffer</c>, <c>Vk.DeviceSize</c>, <c>uint</c>, <c>uint</c>)</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void CmdDrawMeshTasksIndirectCountNV(Vk.CommandBuffer commandBuffer, Vk.Buffer buffer, Vk.DeviceSize offset, Vk.Buffer countBuffer, Vk.DeviceSize countBufferOffset, uint maxDrawCount, uint stride)
		=> vkCmdDrawMeshTasksIndirectCountNV(commandBuffer, buffer, offset, countBuffer, countBufferOffset, maxDrawCount, stride);

	/// <summary>vkCompileDeferredNV(<c>Vk.Device</c>, <c>Vk.Pipeline</c>, <c>uint</c>)</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result CompileDeferredNV(Vk.Device device, Vk.Pipeline pipeline, uint shader)
		=> vkCompileDeferredNV(device, pipeline, shader);

	/// <summary>vkCreateAccelerationStructureNV(<c>Vk.Device</c>, <c>Vk.NV.AccelerationStructureCreateInfo*</c>, <c>Vk.AllocationCallbacks*</c>, <c>Vk.NV.AccelerationStructure*</c>)</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result CreateAccelerationStructureNV(Vk.Device device, Vk.NV.AccelerationStructureCreateInfo* pCreateInfo, Vk.AllocationCallbacks* pAllocator, Vk.NV.AccelerationStructure* pAccelerationStructure)
		=> vkCreateAccelerationStructureNV(device, pCreateInfo, pAllocator, pAccelerationStructure);

	/// <summary>vkDestroyAccelerationStructureKHR(<c>Vk.Device</c>, <c>Vk.KHR.AccelerationStructure</c>, <c>Vk.AllocationCallbacks*</c>)</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void DestroyAccelerationStructureKHR(Vk.Device device, Vk.KHR.AccelerationStructure accelerationStructure, Vk.AllocationCallbacks* pAllocator)
		=> vkDestroyAccelerationStructureKHR(device, accelerationStructure, pAllocator);

	/// <summary>vkDestroyAccelerationStructureNV(<c>Vk.Device</c>, <c>Vk.KHR.AccelerationStructure</c>, <c>Vk.AllocationCallbacks*</c>)</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void DestroyAccelerationStructureNV(Vk.Device device, Vk.KHR.AccelerationStructure accelerationStructure, Vk.AllocationCallbacks* pAllocator)
		=> vkDestroyAccelerationStructureNV(device, accelerationStructure, pAllocator);

	/// <summary>vkGetAccelerationStructureMemoryRequirementsKHR(<c>Vk.Device</c>, <c>Vk.KHR.AccelerationStructureMemoryRequirementsInfo*</c>, <c>Vk.MemoryRequirements2*</c>)</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void GetAccelerationStructureMemoryRequirementsKHR(Vk.Device device, Vk.KHR.AccelerationStructureMemoryRequirementsInfo* pInfo, Vk.MemoryRequirements2* pMemoryRequirements)
		=> vkGetAccelerationStructureMemoryRequirementsKHR(device, pInfo, pMemoryRequirements);

	/// <summary>vkGetAccelerationStructureMemoryRequirementsNV(<c>Vk.Device</c>, <c>Vk.NV.AccelerationStructureMemoryRequirementsInfo*</c>, <c>Vk.KHR.MemoryRequirements2*</c>)</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void GetAccelerationStructureMemoryRequirementsNV(Vk.Device device, Vk.NV.AccelerationStructureMemoryRequirementsInfo* pInfo, Vk.KHR.MemoryRequirements2* pMemoryRequirements)
		=> vkGetAccelerationStructureMemoryRequirementsNV(device, pInfo, pMemoryRequirements);

	/// <summary>vkBindAccelerationStructureMemoryKHR(<c>Vk.Device</c>, <c>uint</c>, <c>Vk.KHR.BindAccelerationStructureMemoryInfo*</c>)</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result BindAccelerationStructureMemoryKHR(Vk.Device device, uint bindInfoCount, Vk.KHR.BindAccelerationStructureMemoryInfo* pBindInfos)
		=> vkBindAccelerationStructureMemoryKHR(device, bindInfoCount, pBindInfos);

	/// <summary>vkBindAccelerationStructureMemoryNV(<c>Vk.Device</c>, <c>uint</c>, <c>Vk.KHR.BindAccelerationStructureMemoryInfo*</c>)</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result BindAccelerationStructureMemoryNV(Vk.Device device, uint bindInfoCount, Vk.KHR.BindAccelerationStructureMemoryInfo* pBindInfos)
		=> vkBindAccelerationStructureMemoryNV(device, bindInfoCount, pBindInfos);

	/// <summary>vkCmdCopyAccelerationStructureNV(<c>Vk.CommandBuffer</c>, <c>Vk.KHR.AccelerationStructure</c>, <c>Vk.KHR.AccelerationStructure</c>, <c>Vk.KHR.CopyAccelerationStructureMode</c>)</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void CmdCopyAccelerationStructureNV(Vk.CommandBuffer commandBuffer, Vk.KHR.AccelerationStructure dst, Vk.KHR.AccelerationStructure src, Vk.KHR.CopyAccelerationStructureMode mode)
		=> vkCmdCopyAccelerationStructureNV(commandBuffer, dst, src, mode);

	/// <summary>vkCmdCopyAccelerationStructureKHR(<c>Vk.CommandBuffer</c>, <c>Vk.KHR.CopyAccelerationStructureInfo*</c>)</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void CmdCopyAccelerationStructureKHR(Vk.CommandBuffer commandBuffer, Vk.KHR.CopyAccelerationStructureInfo* pInfo)
		=> vkCmdCopyAccelerationStructureKHR(commandBuffer, pInfo);

	/// <summary>vkCopyAccelerationStructureKHR(<c>Vk.Device</c>, <c>Vk.KHR.CopyAccelerationStructureInfo*</c>)</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result CopyAccelerationStructureKHR(Vk.Device device, Vk.KHR.CopyAccelerationStructureInfo* pInfo)
		=> vkCopyAccelerationStructureKHR(device, pInfo);

	/// <summary>vkCmdCopyAccelerationStructureToMemoryKHR(<c>Vk.CommandBuffer</c>, <c>Vk.KHR.CopyAccelerationStructureToMemoryInfo*</c>)</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void CmdCopyAccelerationStructureToMemoryKHR(Vk.CommandBuffer commandBuffer, Vk.KHR.CopyAccelerationStructureToMemoryInfo* pInfo)
		=> vkCmdCopyAccelerationStructureToMemoryKHR(commandBuffer, pInfo);

	/// <summary>vkCopyAccelerationStructureToMemoryKHR(<c>Vk.Device</c>, <c>Vk.KHR.CopyAccelerationStructureToMemoryInfo*</c>)</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result CopyAccelerationStructureToMemoryKHR(Vk.Device device, Vk.KHR.CopyAccelerationStructureToMemoryInfo* pInfo)
		=> vkCopyAccelerationStructureToMemoryKHR(device, pInfo);

	/// <summary>vkCmdCopyMemoryToAccelerationStructureKHR(<c>Vk.CommandBuffer</c>, <c>Vk.KHR.CopyMemoryToAccelerationStructureInfo*</c>)</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void CmdCopyMemoryToAccelerationStructureKHR(Vk.CommandBuffer commandBuffer, Vk.KHR.CopyMemoryToAccelerationStructureInfo* pInfo)
		=> vkCmdCopyMemoryToAccelerationStructureKHR(commandBuffer, pInfo);

	/// <summary>vkCopyMemoryToAccelerationStructureKHR(<c>Vk.Device</c>, <c>Vk.KHR.CopyMemoryToAccelerationStructureInfo*</c>)</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result CopyMemoryToAccelerationStructureKHR(Vk.Device device, Vk.KHR.CopyMemoryToAccelerationStructureInfo* pInfo)
		=> vkCopyMemoryToAccelerationStructureKHR(device, pInfo);

	/// <summary>vkCmdWriteAccelerationStructuresPropertiesKHR(<c>Vk.CommandBuffer</c>, <c>uint</c>, <c>Vk.KHR.AccelerationStructure*</c>, <c>Vk.QueryType</c>, <c>Vk.QueryPool</c>, <c>uint</c>)</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void CmdWriteAccelerationStructuresPropertiesKHR(Vk.CommandBuffer commandBuffer, uint accelerationStructureCount, Vk.KHR.AccelerationStructure* pAccelerationStructures, Vk.QueryType queryType, Vk.QueryPool queryPool, uint firstQuery)
		=> vkCmdWriteAccelerationStructuresPropertiesKHR(commandBuffer, accelerationStructureCount, pAccelerationStructures, queryType, queryPool, firstQuery);

	/// <summary>vkCmdWriteAccelerationStructuresPropertiesNV(<c>Vk.CommandBuffer</c>, <c>uint</c>, <c>Vk.KHR.AccelerationStructure*</c>, <c>Vk.QueryType</c>, <c>Vk.QueryPool</c>, <c>uint</c>)</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void CmdWriteAccelerationStructuresPropertiesNV(Vk.CommandBuffer commandBuffer, uint accelerationStructureCount, Vk.KHR.AccelerationStructure* pAccelerationStructures, Vk.QueryType queryType, Vk.QueryPool queryPool, uint firstQuery)
		=> vkCmdWriteAccelerationStructuresPropertiesNV(commandBuffer, accelerationStructureCount, pAccelerationStructures, queryType, queryPool, firstQuery);

	/// <summary>vkCmdBuildAccelerationStructureNV(<c>Vk.CommandBuffer</c>, <c>Vk.NV.AccelerationStructureInfo*</c>, <c>Vk.Buffer</c>, <c>Vk.DeviceSize</c>, <c>Vk.Bool32</c>, <c>Vk.KHR.AccelerationStructure</c>, <c>Vk.KHR.AccelerationStructure</c>, <c>Vk.Buffer</c>, <c>Vk.DeviceSize</c>)</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void CmdBuildAccelerationStructureNV(Vk.CommandBuffer commandBuffer, Vk.NV.AccelerationStructureInfo* pInfo, Vk.Buffer instanceData, Vk.DeviceSize instanceOffset, Vk.Bool32 update, Vk.KHR.AccelerationStructure dst, Vk.KHR.AccelerationStructure src, Vk.Buffer scratch, Vk.DeviceSize scratchOffset)
		=> vkCmdBuildAccelerationStructureNV(commandBuffer, pInfo, instanceData, instanceOffset, update, dst, src, scratch, scratchOffset);

	/// <summary>vkWriteAccelerationStructuresPropertiesKHR(<c>Vk.Device</c>, <c>uint</c>, <c>Vk.KHR.AccelerationStructure*</c>, <c>Vk.QueryType</c>, <c>ulong</c>, <c>void*</c>, <c>ulong</c>)</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result WriteAccelerationStructuresPropertiesKHR(Vk.Device device, uint accelerationStructureCount, Vk.KHR.AccelerationStructure* pAccelerationStructures, Vk.QueryType queryType, ulong dataSize, void* pData, ulong stride)
		=> vkWriteAccelerationStructuresPropertiesKHR(device, accelerationStructureCount, pAccelerationStructures, queryType, dataSize, pData, stride);

	/// <summary>vkCmdTraceRaysKHR(<c>Vk.CommandBuffer</c>, <c>Vk.KHR.StridedBufferRegion*</c>, <c>Vk.KHR.StridedBufferRegion*</c>, <c>Vk.KHR.StridedBufferRegion*</c>, <c>Vk.KHR.StridedBufferRegion*</c>, <c>uint</c>, <c>uint</c>, <c>uint</c>)</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void CmdTraceRaysKHR(Vk.CommandBuffer commandBuffer, Vk.KHR.StridedBufferRegion* pRaygenShaderBindingTable, Vk.KHR.StridedBufferRegion* pMissShaderBindingTable, Vk.KHR.StridedBufferRegion* pHitShaderBindingTable, Vk.KHR.StridedBufferRegion* pCallableShaderBindingTable, uint width, uint height, uint depth)
		=> vkCmdTraceRaysKHR(commandBuffer, pRaygenShaderBindingTable, pMissShaderBindingTable, pHitShaderBindingTable, pCallableShaderBindingTable, width, height, depth);

	/// <summary>vkCmdTraceRaysNV(<c>Vk.CommandBuffer</c>, <c>Vk.Buffer</c>, <c>Vk.DeviceSize</c>, <c>Vk.Buffer</c>, <c>Vk.DeviceSize</c>, <c>Vk.DeviceSize</c>, <c>Vk.Buffer</c>, <c>Vk.DeviceSize</c>, <c>Vk.DeviceSize</c>, <c>Vk.Buffer</c>, <c>Vk.DeviceSize</c>, <c>Vk.DeviceSize</c>, <c>uint</c>, <c>uint</c>, <c>uint</c>)</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void CmdTraceRaysNV(Vk.CommandBuffer commandBuffer, Vk.Buffer raygenShaderBindingTableBuffer, Vk.DeviceSize raygenShaderBindingOffset, Vk.Buffer missShaderBindingTableBuffer, Vk.DeviceSize missShaderBindingOffset, Vk.DeviceSize missShaderBindingStride, Vk.Buffer hitShaderBindingTableBuffer, Vk.DeviceSize hitShaderBindingOffset, Vk.DeviceSize hitShaderBindingStride, Vk.Buffer callableShaderBindingTableBuffer, Vk.DeviceSize callableShaderBindingOffset, Vk.DeviceSize callableShaderBindingStride, uint width, uint height, uint depth)
		=> vkCmdTraceRaysNV(commandBuffer, raygenShaderBindingTableBuffer, raygenShaderBindingOffset, missShaderBindingTableBuffer, missShaderBindingOffset, missShaderBindingStride, hitShaderBindingTableBuffer, hitShaderBindingOffset, hitShaderBindingStride, callableShaderBindingTableBuffer, callableShaderBindingOffset, callableShaderBindingStride, width, height, depth);

	/// <summary>vkGetRayTracingShaderGroupHandlesKHR(<c>Vk.Device</c>, <c>Vk.Pipeline</c>, <c>uint</c>, <c>uint</c>, <c>ulong</c>, <c>void*</c>)</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result GetRayTracingShaderGroupHandlesKHR(Vk.Device device, Vk.Pipeline pipeline, uint firstGroup, uint groupCount, ulong dataSize, void* pData)
		=> vkGetRayTracingShaderGroupHandlesKHR(device, pipeline, firstGroup, groupCount, dataSize, pData);

	/// <summary>vkGetRayTracingShaderGroupHandlesNV(<c>Vk.Device</c>, <c>Vk.Pipeline</c>, <c>uint</c>, <c>uint</c>, <c>ulong</c>, <c>void*</c>)</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result GetRayTracingShaderGroupHandlesNV(Vk.Device device, Vk.Pipeline pipeline, uint firstGroup, uint groupCount, ulong dataSize, void* pData)
		=> vkGetRayTracingShaderGroupHandlesNV(device, pipeline, firstGroup, groupCount, dataSize, pData);

	/// <summary>vkGetRayTracingCaptureReplayShaderGroupHandlesKHR(<c>Vk.Device</c>, <c>Vk.Pipeline</c>, <c>uint</c>, <c>uint</c>, <c>ulong</c>, <c>void*</c>)</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result GetRayTracingCaptureReplayShaderGroupHandlesKHR(Vk.Device device, Vk.Pipeline pipeline, uint firstGroup, uint groupCount, ulong dataSize, void* pData)
		=> vkGetRayTracingCaptureReplayShaderGroupHandlesKHR(device, pipeline, firstGroup, groupCount, dataSize, pData);

	/// <summary>vkGetAccelerationStructureHandleNV(<c>Vk.Device</c>, <c>Vk.KHR.AccelerationStructure</c>, <c>ulong</c>, <c>void*</c>)</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result GetAccelerationStructureHandleNV(Vk.Device device, Vk.KHR.AccelerationStructure accelerationStructure, ulong dataSize, void* pData)
		=> vkGetAccelerationStructureHandleNV(device, accelerationStructure, dataSize, pData);

	/// <summary>vkCreateRayTracingPipelinesNV(<c>Vk.Device</c>, <c>Vk.PipelineCache</c>, <c>uint</c>, <c>Vk.NV.RayTracingPipelineCreateInfo*</c>, <c>Vk.AllocationCallbacks*</c>, <c>Vk.Pipeline*</c>)</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result CreateRayTracingPipelinesNV(Vk.Device device, Vk.PipelineCache pipelineCache, uint createInfoCount, Vk.NV.RayTracingPipelineCreateInfo* pCreateInfos, Vk.AllocationCallbacks* pAllocator, Vk.Pipeline* pPipelines)
		=> vkCreateRayTracingPipelinesNV(device, pipelineCache, createInfoCount, pCreateInfos, pAllocator, pPipelines);

	/// <summary>vkCreateRayTracingPipelinesKHR(<c>Vk.Device</c>, <c>Vk.PipelineCache</c>, <c>uint</c>, <c>Vk.KHR.RayTracingPipelineCreateInfo*</c>, <c>Vk.AllocationCallbacks*</c>, <c>Vk.Pipeline*</c>)</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result CreateRayTracingPipelinesKHR(Vk.Device device, Vk.PipelineCache pipelineCache, uint createInfoCount, Vk.KHR.RayTracingPipelineCreateInfo* pCreateInfos, Vk.AllocationCallbacks* pAllocator, Vk.Pipeline* pPipelines)
		=> vkCreateRayTracingPipelinesKHR(device, pipelineCache, createInfoCount, pCreateInfos, pAllocator, pPipelines);

	/// <summary>vkCmdTraceRaysIndirectKHR(<c>Vk.CommandBuffer</c>, <c>Vk.KHR.StridedBufferRegion*</c>, <c>Vk.KHR.StridedBufferRegion*</c>, <c>Vk.KHR.StridedBufferRegion*</c>, <c>Vk.KHR.StridedBufferRegion*</c>, <c>Vk.Buffer</c>, <c>Vk.DeviceSize</c>)</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void CmdTraceRaysIndirectKHR(Vk.CommandBuffer commandBuffer, Vk.KHR.StridedBufferRegion* pRaygenShaderBindingTable, Vk.KHR.StridedBufferRegion* pMissShaderBindingTable, Vk.KHR.StridedBufferRegion* pHitShaderBindingTable, Vk.KHR.StridedBufferRegion* pCallableShaderBindingTable, Vk.Buffer buffer, Vk.DeviceSize offset)
		=> vkCmdTraceRaysIndirectKHR(commandBuffer, pRaygenShaderBindingTable, pMissShaderBindingTable, pHitShaderBindingTable, pCallableShaderBindingTable, buffer, offset);

	/// <summary>vkGetDeviceAccelerationStructureCompatibilityKHR(<c>Vk.Device</c>, <c>Vk.KHR.AccelerationStructureVersion*</c>)</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result GetDeviceAccelerationStructureCompatibilityKHR(Vk.Device device, Vk.KHR.AccelerationStructureVersion* version)
		=> vkGetDeviceAccelerationStructureCompatibilityKHR(device, version);

	/// <summary>vkGetImageViewHandleNVX(<c>Vk.Device</c>, <c>Vk.NVX.ImageViewHandleInfo*</c>)</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public uint GetImageViewHandleNVX(Vk.Device device, Vk.NVX.ImageViewHandleInfo* pInfo)
		=> vkGetImageViewHandleNVX(device, pInfo);

	/// <summary>vkGetImageViewAddressNVX(<c>Vk.Device</c>, <c>Vk.ImageView</c>, <c>Vk.NVX.ImageViewAddressProperties*</c>)</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result GetImageViewAddressNVX(Vk.Device device, Vk.ImageView imageView, Vk.NVX.ImageViewAddressProperties* pProperties)
		=> vkGetImageViewAddressNVX(device, imageView, pProperties);

	/// <summary>vkGetDeviceGroupSurfacePresentModes2EXT(<c>Vk.Device</c>, <c>Vk.KHR.PhysicalDeviceSurfaceInfo2*</c>, <c>Vk.KHR.DeviceGroupPresentModeFlags*</c>)</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result GetDeviceGroupSurfacePresentModes2EXT(Vk.Device device, Vk.KHR.PhysicalDeviceSurfaceInfo2* pSurfaceInfo, Vk.KHR.DeviceGroupPresentModeFlags* pModes)
		=> vkGetDeviceGroupSurfacePresentModes2EXT(device, pSurfaceInfo, pModes);

	/// <summary>vkAcquireFullScreenExclusiveModeEXT(<c>Vk.Device</c>, <c>Vk.KHR.Swapchain</c>)</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result AcquireFullScreenExclusiveModeEXT(Vk.Device device, Vk.KHR.Swapchain swapchain)
		=> vkAcquireFullScreenExclusiveModeEXT(device, swapchain);

	/// <summary>vkReleaseFullScreenExclusiveModeEXT(<c>Vk.Device</c>, <c>Vk.KHR.Swapchain</c>)</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result ReleaseFullScreenExclusiveModeEXT(Vk.Device device, Vk.KHR.Swapchain swapchain)
		=> vkReleaseFullScreenExclusiveModeEXT(device, swapchain);

	/// <summary>vkAcquireProfilingLockKHR(<c>Vk.Device</c>, <c>Vk.KHR.AcquireProfilingLockInfo*</c>)</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result AcquireProfilingLockKHR(Vk.Device device, Vk.KHR.AcquireProfilingLockInfo* pInfo)
		=> vkAcquireProfilingLockKHR(device, pInfo);

	/// <summary>vkReleaseProfilingLockKHR(<c>Vk.Device</c>)</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void ReleaseProfilingLockKHR(Vk.Device device)
		=> vkReleaseProfilingLockKHR(device);

	/// <summary>vkGetImageDrmFormatModifierPropertiesEXT(<c>Vk.Device</c>, <c>Vk.Image</c>, <c>Vk.EXT.ImageDrmFormatModifierProperties*</c>)</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result GetImageDrmFormatModifierPropertiesEXT(Vk.Device device, Vk.Image image, Vk.EXT.ImageDrmFormatModifierProperties* pProperties)
		=> vkGetImageDrmFormatModifierPropertiesEXT(device, image, pProperties);

	/// <summary>vkGetBufferOpaqueCaptureAddress(<c>Vk.Device</c>, <c>Vk.BufferDeviceAddressInfo*</c>)</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public ulong GetBufferOpaqueCaptureAddress(Vk.Device device, Vk.BufferDeviceAddressInfo* pInfo)
		=> vkGetBufferOpaqueCaptureAddress(device, pInfo);

	/// <summary>vkGetBufferOpaqueCaptureAddressKHR(<c>Vk.Device</c>, <c>Vk.BufferDeviceAddressInfo*</c>)</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public ulong GetBufferOpaqueCaptureAddressKHR(Vk.Device device, Vk.BufferDeviceAddressInfo* pInfo)
		=> vkGetBufferOpaqueCaptureAddressKHR(device, pInfo);

	/// <summary>vkGetBufferDeviceAddress(<c>Vk.Device</c>, <c>Vk.BufferDeviceAddressInfo*</c>)</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public ulong GetBufferDeviceAddress(Vk.Device device, Vk.BufferDeviceAddressInfo* pInfo)
		=> vkGetBufferDeviceAddress(device, pInfo);

	/// <summary>vkGetBufferDeviceAddressKHR(<c>Vk.Device</c>, <c>Vk.BufferDeviceAddressInfo*</c>)</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public ulong GetBufferDeviceAddressKHR(Vk.Device device, Vk.BufferDeviceAddressInfo* pInfo)
		=> vkGetBufferDeviceAddressKHR(device, pInfo);

	/// <summary>vkGetBufferDeviceAddressEXT(<c>Vk.Device</c>, <c>Vk.BufferDeviceAddressInfo*</c>)</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public ulong GetBufferDeviceAddressEXT(Vk.Device device, Vk.BufferDeviceAddressInfo* pInfo)
		=> vkGetBufferDeviceAddressEXT(device, pInfo);

	/// <summary>vkInitializePerformanceApiINTEL(<c>Vk.Device</c>, <c>Vk.INTEL.InitializePerformanceApiInfo*</c>)</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result InitializePerformanceApiINTEL(Vk.Device device, Vk.INTEL.InitializePerformanceApiInfo* pInitializeInfo)
		=> vkInitializePerformanceApiINTEL(device, pInitializeInfo);

	/// <summary>vkUninitializePerformanceApiINTEL(<c>Vk.Device</c>)</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void UninitializePerformanceApiINTEL(Vk.Device device)
		=> vkUninitializePerformanceApiINTEL(device);

	/// <summary>vkCmdSetPerformanceMarkerINTEL(<c>Vk.CommandBuffer</c>, <c>Vk.INTEL.PerformanceMarkerInfo*</c>)</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result CmdSetPerformanceMarkerINTEL(Vk.CommandBuffer commandBuffer, Vk.INTEL.PerformanceMarkerInfo* pMarkerInfo)
		=> vkCmdSetPerformanceMarkerINTEL(commandBuffer, pMarkerInfo);

	/// <summary>vkCmdSetPerformanceStreamMarkerINTEL(<c>Vk.CommandBuffer</c>, <c>Vk.INTEL.PerformanceStreamMarkerInfo*</c>)</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result CmdSetPerformanceStreamMarkerINTEL(Vk.CommandBuffer commandBuffer, Vk.INTEL.PerformanceStreamMarkerInfo* pMarkerInfo)
		=> vkCmdSetPerformanceStreamMarkerINTEL(commandBuffer, pMarkerInfo);

	/// <summary>vkCmdSetPerformanceOverrideINTEL(<c>Vk.CommandBuffer</c>, <c>Vk.INTEL.PerformanceOverrideInfo*</c>)</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result CmdSetPerformanceOverrideINTEL(Vk.CommandBuffer commandBuffer, Vk.INTEL.PerformanceOverrideInfo* pOverrideInfo)
		=> vkCmdSetPerformanceOverrideINTEL(commandBuffer, pOverrideInfo);

	/// <summary>vkAcquirePerformanceConfigurationINTEL(<c>Vk.Device</c>, <c>Vk.INTEL.PerformanceConfigurationAcquireInfo*</c>, <c>Vk.INTEL.PerformanceConfiguration*</c>)</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result AcquirePerformanceConfigurationINTEL(Vk.Device device, Vk.INTEL.PerformanceConfigurationAcquireInfo* pAcquireInfo, Vk.INTEL.PerformanceConfiguration* pConfiguration)
		=> vkAcquirePerformanceConfigurationINTEL(device, pAcquireInfo, pConfiguration);

	/// <summary>vkReleasePerformanceConfigurationINTEL(<c>Vk.Device</c>, <c>Vk.INTEL.PerformanceConfiguration</c>)</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result ReleasePerformanceConfigurationINTEL(Vk.Device device, Vk.INTEL.PerformanceConfiguration configuration)
		=> vkReleasePerformanceConfigurationINTEL(device, configuration);

	/// <summary>vkQueueSetPerformanceConfigurationINTEL(<c>Vk.Queue</c>, <c>Vk.INTEL.PerformanceConfiguration</c>)</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result QueueSetPerformanceConfigurationINTEL(Vk.Queue queue, Vk.INTEL.PerformanceConfiguration configuration)
		=> vkQueueSetPerformanceConfigurationINTEL(queue, configuration);

	/// <summary>vkGetPerformanceParameterINTEL(<c>Vk.Device</c>, <c>Vk.INTEL.PerformanceParameterType</c>, <c>Vk.INTEL.PerformanceValue*</c>)</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result GetPerformanceParameterINTEL(Vk.Device device, Vk.INTEL.PerformanceParameterType parameter, Vk.INTEL.PerformanceValue* pValue)
		=> vkGetPerformanceParameterINTEL(device, parameter, pValue);

	/// <summary>vkGetDeviceMemoryOpaqueCaptureAddress(<c>Vk.Device</c>, <c>Vk.DeviceMemoryOpaqueCaptureAddressInfo*</c>)</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public ulong GetDeviceMemoryOpaqueCaptureAddress(Vk.Device device, Vk.DeviceMemoryOpaqueCaptureAddressInfo* pInfo)
		=> vkGetDeviceMemoryOpaqueCaptureAddress(device, pInfo);

	/// <summary>vkGetDeviceMemoryOpaqueCaptureAddressKHR(<c>Vk.Device</c>, <c>Vk.DeviceMemoryOpaqueCaptureAddressInfo*</c>)</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public ulong GetDeviceMemoryOpaqueCaptureAddressKHR(Vk.Device device, Vk.DeviceMemoryOpaqueCaptureAddressInfo* pInfo)
		=> vkGetDeviceMemoryOpaqueCaptureAddressKHR(device, pInfo);

	/// <summary>vkGetPipelineExecutablePropertiesKHR(<c>Vk.Device</c>, <c>Vk.KHR.PipelineInfo*</c>, <c>uint*</c>, <c>Vk.KHR.PipelineExecutableProperties*</c>)</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result GetPipelineExecutablePropertiesKHR(Vk.Device device, Vk.KHR.PipelineInfo* pPipelineInfo, uint* pExecutableCount, Vk.KHR.PipelineExecutableProperties* pProperties)
		=> vkGetPipelineExecutablePropertiesKHR(device, pPipelineInfo, pExecutableCount, pProperties);

	/// <summary>vkGetPipelineExecutableStatisticsKHR(<c>Vk.Device</c>, <c>Vk.KHR.PipelineExecutableInfo*</c>, <c>uint*</c>, <c>Vk.KHR.PipelineExecutableStatistic*</c>)</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result GetPipelineExecutableStatisticsKHR(Vk.Device device, Vk.KHR.PipelineExecutableInfo* pExecutableInfo, uint* pStatisticCount, Vk.KHR.PipelineExecutableStatistic* pStatistics)
		=> vkGetPipelineExecutableStatisticsKHR(device, pExecutableInfo, pStatisticCount, pStatistics);

	/// <summary>vkGetPipelineExecutableInternalRepresentationsKHR(<c>Vk.Device</c>, <c>Vk.KHR.PipelineExecutableInfo*</c>, <c>uint*</c>, <c>Vk.KHR.PipelineExecutableInternalRepresentation*</c>)</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result GetPipelineExecutableInternalRepresentationsKHR(Vk.Device device, Vk.KHR.PipelineExecutableInfo* pExecutableInfo, uint* pInternalRepresentationCount, Vk.KHR.PipelineExecutableInternalRepresentation* pInternalRepresentations)
		=> vkGetPipelineExecutableInternalRepresentationsKHR(device, pExecutableInfo, pInternalRepresentationCount, pInternalRepresentations);

	/// <summary>vkCmdSetLineStippleEXT(<c>Vk.CommandBuffer</c>, <c>uint</c>, <c>ushort</c>)</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void CmdSetLineStippleEXT(Vk.CommandBuffer commandBuffer, uint lineStippleFactor, ushort lineStipplePattern)
		=> vkCmdSetLineStippleEXT(commandBuffer, lineStippleFactor, lineStipplePattern);

	/// <summary>vkCreateAccelerationStructureKHR(<c>Vk.Device</c>, <c>Vk.KHR.AccelerationStructureCreateInfo*</c>, <c>Vk.AllocationCallbacks*</c>, <c>Vk.KHR.AccelerationStructure*</c>)</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result CreateAccelerationStructureKHR(Vk.Device device, Vk.KHR.AccelerationStructureCreateInfo* pCreateInfo, Vk.AllocationCallbacks* pAllocator, Vk.KHR.AccelerationStructure* pAccelerationStructure)
		=> vkCreateAccelerationStructureKHR(device, pCreateInfo, pAllocator, pAccelerationStructure);

	/// <summary>vkCmdBuildAccelerationStructureKHR(<c>Vk.CommandBuffer</c>, <c>uint</c>, <c>Vk.KHR.AccelerationStructureBuildGeometryInfo*</c>, <c>Vk.KHR.AccelerationStructureBuildOffsetInfo**</c>)</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void CmdBuildAccelerationStructureKHR(Vk.CommandBuffer commandBuffer, uint infoCount, Vk.KHR.AccelerationStructureBuildGeometryInfo* pInfos, Vk.KHR.AccelerationStructureBuildOffsetInfo** ppOffsetInfos)
		=> vkCmdBuildAccelerationStructureKHR(commandBuffer, infoCount, pInfos, ppOffsetInfos);

	/// <summary>vkCmdBuildAccelerationStructureIndirectKHR(<c>Vk.CommandBuffer</c>, <c>Vk.KHR.AccelerationStructureBuildGeometryInfo*</c>, <c>Vk.Buffer</c>, <c>Vk.DeviceSize</c>, <c>uint</c>)</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void CmdBuildAccelerationStructureIndirectKHR(Vk.CommandBuffer commandBuffer, Vk.KHR.AccelerationStructureBuildGeometryInfo* pInfo, Vk.Buffer indirectBuffer, Vk.DeviceSize indirectOffset, uint indirectStride)
		=> vkCmdBuildAccelerationStructureIndirectKHR(commandBuffer, pInfo, indirectBuffer, indirectOffset, indirectStride);

	/// <summary>vkBuildAccelerationStructureKHR(<c>Vk.Device</c>, <c>uint</c>, <c>Vk.KHR.AccelerationStructureBuildGeometryInfo*</c>, <c>Vk.KHR.AccelerationStructureBuildOffsetInfo**</c>)</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result BuildAccelerationStructureKHR(Vk.Device device, uint infoCount, Vk.KHR.AccelerationStructureBuildGeometryInfo* pInfos, Vk.KHR.AccelerationStructureBuildOffsetInfo** ppOffsetInfos)
		=> vkBuildAccelerationStructureKHR(device, infoCount, pInfos, ppOffsetInfos);

	/// <summary>vkGetAccelerationStructureDeviceAddressKHR(<c>Vk.Device</c>, <c>Vk.KHR.AccelerationStructureDeviceAddressInfo*</c>)</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public ulong GetAccelerationStructureDeviceAddressKHR(Vk.Device device, Vk.KHR.AccelerationStructureDeviceAddressInfo* pInfo)
		=> vkGetAccelerationStructureDeviceAddressKHR(device, pInfo);

	/// <summary>vkCreateDeferredOperationKHR(<c>Vk.Device</c>, <c>Vk.AllocationCallbacks*</c>, <c>Vk.KHR.DeferredOperation*</c>)</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result CreateDeferredOperationKHR(Vk.Device device, Vk.AllocationCallbacks* pAllocator, Vk.KHR.DeferredOperation* pDeferredOperation)
		=> vkCreateDeferredOperationKHR(device, pAllocator, pDeferredOperation);

	/// <summary>vkDestroyDeferredOperationKHR(<c>Vk.Device</c>, <c>Vk.KHR.DeferredOperation</c>, <c>Vk.AllocationCallbacks*</c>)</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void DestroyDeferredOperationKHR(Vk.Device device, Vk.KHR.DeferredOperation operation, Vk.AllocationCallbacks* pAllocator)
		=> vkDestroyDeferredOperationKHR(device, operation, pAllocator);

	/// <summary>vkGetDeferredOperationMaxConcurrencyKHR(<c>Vk.Device</c>, <c>Vk.KHR.DeferredOperation</c>)</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public uint GetDeferredOperationMaxConcurrencyKHR(Vk.Device device, Vk.KHR.DeferredOperation operation)
		=> vkGetDeferredOperationMaxConcurrencyKHR(device, operation);

	/// <summary>vkGetDeferredOperationResultKHR(<c>Vk.Device</c>, <c>Vk.KHR.DeferredOperation</c>)</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result GetDeferredOperationResultKHR(Vk.Device device, Vk.KHR.DeferredOperation operation)
		=> vkGetDeferredOperationResultKHR(device, operation);

	/// <summary>vkDeferredOperationJoinKHR(<c>Vk.Device</c>, <c>Vk.KHR.DeferredOperation</c>)</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result DeferredOperationJoinKHR(Vk.Device device, Vk.KHR.DeferredOperation operation)
		=> vkDeferredOperationJoinKHR(device, operation);

	/// <summary>vkCmdSetCullModeEXT(<c>Vk.CommandBuffer</c>, <c>Vk.CullModeFlags</c>)</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void CmdSetCullModeEXT(Vk.CommandBuffer commandBuffer, Vk.CullModeFlags cullMode)
		=> vkCmdSetCullModeEXT(commandBuffer, cullMode);

	/// <summary>vkCmdSetFrontFaceEXT(<c>Vk.CommandBuffer</c>, <c>Vk.FrontFace</c>)</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void CmdSetFrontFaceEXT(Vk.CommandBuffer commandBuffer, Vk.FrontFace frontFace)
		=> vkCmdSetFrontFaceEXT(commandBuffer, frontFace);

	/// <summary>vkCmdSetPrimitiveTopologyEXT(<c>Vk.CommandBuffer</c>, <c>Vk.PrimitiveTopology</c>)</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void CmdSetPrimitiveTopologyEXT(Vk.CommandBuffer commandBuffer, Vk.PrimitiveTopology primitiveTopology)
		=> vkCmdSetPrimitiveTopologyEXT(commandBuffer, primitiveTopology);

	/// <summary>vkCmdSetViewportWithCountEXT(<c>Vk.CommandBuffer</c>, <c>uint</c>, <c>Vk.Viewport*</c>)</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void CmdSetViewportWithCountEXT(Vk.CommandBuffer commandBuffer, uint viewportCount, Vk.Viewport* pViewports)
		=> vkCmdSetViewportWithCountEXT(commandBuffer, viewportCount, pViewports);

	/// <summary>vkCmdSetScissorWithCountEXT(<c>Vk.CommandBuffer</c>, <c>uint</c>, <c>Vk.Rect2D*</c>)</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void CmdSetScissorWithCountEXT(Vk.CommandBuffer commandBuffer, uint scissorCount, Vk.Rect2D* pScissors)
		=> vkCmdSetScissorWithCountEXT(commandBuffer, scissorCount, pScissors);

	/// <summary>vkCmdBindVertexBuffers2EXT(<c>Vk.CommandBuffer</c>, <c>uint</c>, <c>uint</c>, <c>Vk.Buffer*</c>, <c>Vk.DeviceSize*</c>, <c>Vk.DeviceSize*</c>, <c>Vk.DeviceSize*</c>)</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void CmdBindVertexBuffers2EXT(Vk.CommandBuffer commandBuffer, uint firstBinding, uint bindingCount, Vk.Buffer* pBuffers, Vk.DeviceSize* pOffsets, Vk.DeviceSize* pSizes, Vk.DeviceSize* pStrides)
		=> vkCmdBindVertexBuffers2EXT(commandBuffer, firstBinding, bindingCount, pBuffers, pOffsets, pSizes, pStrides);

	/// <summary>vkCmdSetDepthTestEnableEXT(<c>Vk.CommandBuffer</c>, <c>Vk.Bool32</c>)</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void CmdSetDepthTestEnableEXT(Vk.CommandBuffer commandBuffer, Vk.Bool32 depthTestEnable)
		=> vkCmdSetDepthTestEnableEXT(commandBuffer, depthTestEnable);

	/// <summary>vkCmdSetDepthWriteEnableEXT(<c>Vk.CommandBuffer</c>, <c>Vk.Bool32</c>)</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void CmdSetDepthWriteEnableEXT(Vk.CommandBuffer commandBuffer, Vk.Bool32 depthWriteEnable)
		=> vkCmdSetDepthWriteEnableEXT(commandBuffer, depthWriteEnable);

	/// <summary>vkCmdSetDepthCompareOpEXT(<c>Vk.CommandBuffer</c>, <c>Vk.CompareOp</c>)</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void CmdSetDepthCompareOpEXT(Vk.CommandBuffer commandBuffer, Vk.CompareOp depthCompareOp)
		=> vkCmdSetDepthCompareOpEXT(commandBuffer, depthCompareOp);

	/// <summary>vkCmdSetDepthBoundsTestEnableEXT(<c>Vk.CommandBuffer</c>, <c>Vk.Bool32</c>)</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void CmdSetDepthBoundsTestEnableEXT(Vk.CommandBuffer commandBuffer, Vk.Bool32 depthBoundsTestEnable)
		=> vkCmdSetDepthBoundsTestEnableEXT(commandBuffer, depthBoundsTestEnable);

	/// <summary>vkCmdSetStencilTestEnableEXT(<c>Vk.CommandBuffer</c>, <c>Vk.Bool32</c>)</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void CmdSetStencilTestEnableEXT(Vk.CommandBuffer commandBuffer, Vk.Bool32 stencilTestEnable)
		=> vkCmdSetStencilTestEnableEXT(commandBuffer, stencilTestEnable);

	/// <summary>vkCmdSetStencilOpEXT(<c>Vk.CommandBuffer</c>, <c>Vk.StencilFaceFlags</c>, <c>Vk.StencilOp</c>, <c>Vk.StencilOp</c>, <c>Vk.StencilOp</c>, <c>Vk.CompareOp</c>)</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void CmdSetStencilOpEXT(Vk.CommandBuffer commandBuffer, Vk.StencilFaceFlags faceMask, Vk.StencilOp failOp, Vk.StencilOp passOp, Vk.StencilOp depthFailOp, Vk.CompareOp compareOp)
		=> vkCmdSetStencilOpEXT(commandBuffer, faceMask, failOp, passOp, depthFailOp, compareOp);

	/// <summary>vkCreatePrivateDataSlotEXT(<c>Vk.Device</c>, <c>Vk.EXT.PrivateDataSlotCreateInfo*</c>, <c>Vk.AllocationCallbacks*</c>, <c>Vk.EXT.PrivateDataSlot*</c>)</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result CreatePrivateDataSlotEXT(Vk.Device device, Vk.EXT.PrivateDataSlotCreateInfo* pCreateInfo, Vk.AllocationCallbacks* pAllocator, Vk.EXT.PrivateDataSlot* pPrivateDataSlot)
		=> vkCreatePrivateDataSlotEXT(device, pCreateInfo, pAllocator, pPrivateDataSlot);

	/// <summary>vkDestroyPrivateDataSlotEXT(<c>Vk.Device</c>, <c>Vk.EXT.PrivateDataSlot</c>, <c>Vk.AllocationCallbacks*</c>)</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void DestroyPrivateDataSlotEXT(Vk.Device device, Vk.EXT.PrivateDataSlot privateDataSlot, Vk.AllocationCallbacks* pAllocator)
		=> vkDestroyPrivateDataSlotEXT(device, privateDataSlot, pAllocator);

	/// <summary>vkSetPrivateDataEXT(<c>Vk.Device</c>, <c>Vk.ObjectType</c>, <c>ulong</c>, <c>Vk.EXT.PrivateDataSlot</c>, <c>ulong</c>)</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result SetPrivateDataEXT(Vk.Device device, Vk.ObjectType objectType, ulong objectHandle, Vk.EXT.PrivateDataSlot privateDataSlot, ulong data)
		=> vkSetPrivateDataEXT(device, objectType, objectHandle, privateDataSlot, data);

	/// <summary>vkGetPrivateDataEXT(<c>Vk.Device</c>, <c>Vk.ObjectType</c>, <c>ulong</c>, <c>Vk.EXT.PrivateDataSlot</c>, <c>ulong*</c>)</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void GetPrivateDataEXT(Vk.Device device, Vk.ObjectType objectType, ulong objectHandle, Vk.EXT.PrivateDataSlot privateDataSlot, ulong* pData)
		=> vkGetPrivateDataEXT(device, objectType, objectHandle, privateDataSlot, pData);

	/// <summary>vkCmdCopyBuffer2KHR(<c>Vk.CommandBuffer</c>, <c>Vk.KHR.CopyBufferInfo2*</c>)</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void CmdCopyBuffer2KHR(Vk.CommandBuffer commandBuffer, Vk.KHR.CopyBufferInfo2* pCopyBufferInfo)
		=> vkCmdCopyBuffer2KHR(commandBuffer, pCopyBufferInfo);

	/// <summary>vkCmdCopyImage2KHR(<c>Vk.CommandBuffer</c>, <c>Vk.KHR.CopyImageInfo2*</c>)</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void CmdCopyImage2KHR(Vk.CommandBuffer commandBuffer, Vk.KHR.CopyImageInfo2* pCopyImageInfo)
		=> vkCmdCopyImage2KHR(commandBuffer, pCopyImageInfo);

	/// <summary>vkCmdBlitImage2KHR(<c>Vk.CommandBuffer</c>, <c>Vk.KHR.BlitImageInfo2*</c>)</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void CmdBlitImage2KHR(Vk.CommandBuffer commandBuffer, Vk.KHR.BlitImageInfo2* pBlitImageInfo)
		=> vkCmdBlitImage2KHR(commandBuffer, pBlitImageInfo);

	/// <summary>vkCmdCopyBufferToImage2KHR(<c>Vk.CommandBuffer</c>, <c>Vk.KHR.CopyBufferToImageInfo2*</c>)</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void CmdCopyBufferToImage2KHR(Vk.CommandBuffer commandBuffer, Vk.KHR.CopyBufferToImageInfo2* pCopyBufferToImageInfo)
		=> vkCmdCopyBufferToImage2KHR(commandBuffer, pCopyBufferToImageInfo);

	/// <summary>vkCmdCopyImageToBuffer2KHR(<c>Vk.CommandBuffer</c>, <c>Vk.KHR.CopyImageToBufferInfo2*</c>)</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void CmdCopyImageToBuffer2KHR(Vk.CommandBuffer commandBuffer, Vk.KHR.CopyImageToBufferInfo2* pCopyImageToBufferInfo)
		=> vkCmdCopyImageToBuffer2KHR(commandBuffer, pCopyImageToBufferInfo);

	/// <summary>vkCmdResolveImage2KHR(<c>Vk.CommandBuffer</c>, <c>Vk.KHR.ResolveImageInfo2*</c>)</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void CmdResolveImage2KHR(Vk.CommandBuffer commandBuffer, Vk.KHR.ResolveImageInfo2* pResolveImageInfo)
		=> vkCmdResolveImage2KHR(commandBuffer, pResolveImageInfo);

	/// <summary>vkCmdSetFragmentShadingRateKHR(<c>Vk.CommandBuffer</c>, <c>Vk.Extent2D*</c>, <c>Vk.KHR.FragmentShadingRateCombinerOp*</c>)</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void CmdSetFragmentShadingRateKHR(Vk.CommandBuffer commandBuffer, Vk.Extent2D* pFragmentSize, Vk.KHR.FragmentShadingRateCombinerOp* combinerOps)
		=> vkCmdSetFragmentShadingRateKHR(commandBuffer, pFragmentSize, combinerOps);

}

} // namespace Vk
