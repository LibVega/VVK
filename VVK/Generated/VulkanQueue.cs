/*
 * MIT License - Copyright(c) 2020 Sean Moss
 * This file is subject to the terms and conditions of the MIT License, the text of which can be found in the 'LICENSE'
 * file at the root of this repository, or online at<https://opensource.org/licenses/MIT>.
 */

/// This file was generated by VVKGen. Edits to this file will be lost on next generation.

using System;
using System.Runtime.InteropServices;
using System.Runtime.CompilerServices;


namespace VVK
{

public unsafe sealed partial class VulkanQueue
{
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result Submit(uint submitCount, Vk.SubmitInfo* pSubmits, Vk.Fence fence)
	{
		lock (_lock) {
			return Parent.Functions.vkQueueSubmit(Handle, submitCount, pSubmits, fence);
		}
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result WaitIdle()
	{
		lock (_lock) {
			return Parent.Functions.vkQueueWaitIdle(Handle);
		}
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result BindSparse(uint bindInfoCount, Vk.BindSparseInfo* pBindInfo, Vk.Fence fence)
	{
		lock (_lock) {
			return Parent.Functions.vkQueueBindSparse(Handle, bindInfoCount, pBindInfo, fence);
		}
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result PresentKHR(Vk.KHR.PresentInfo* pPresentInfo)
	{
		lock (_lock) {
			return Parent.Functions.vkQueuePresentKHR(Handle, pPresentInfo);
		}
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result SignalReleaseImageANDROID(uint waitSemaphoreCount, Vk.Semaphore* pWaitSemaphores, Vk.Image image, int* pNativeFenceFd)
	{
		lock (_lock) {
			return Parent.Functions.vkQueueSignalReleaseImageANDROID(Handle, waitSemaphoreCount, pWaitSemaphores, image, pNativeFenceFd);
		}
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void BeginDebugUtilsLabelEXT(Vk.EXT.DebugUtilsLabel* pLabelInfo)
	{
		lock (_lock) {
			Parent.Functions.vkQueueBeginDebugUtilsLabelEXT(Handle, pLabelInfo);
		}
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void EndDebugUtilsLabelEXT()
	{
		lock (_lock) {
			Parent.Functions.vkQueueEndDebugUtilsLabelEXT(Handle);
		}
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void InsertDebugUtilsLabelEXT(Vk.EXT.DebugUtilsLabel* pLabelInfo)
	{
		lock (_lock) {
			Parent.Functions.vkQueueInsertDebugUtilsLabelEXT(Handle, pLabelInfo);
		}
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void GetCheckpointDataNV(uint* pCheckpointDataCount, Vk.NV.CheckpointData* pCheckpointData)
	{
		lock (_lock) {
			Parent.Functions.vkGetQueueCheckpointDataNV(Handle, pCheckpointDataCount, pCheckpointData);
		}
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Vk.Result SetPerformanceConfigurationINTEL(Vk.INTEL.PerformanceConfiguration configuration)
	{
		lock (_lock) {
			return Parent.Functions.vkQueueSetPerformanceConfigurationINTEL(Handle, configuration);
		}
	}

}

} // namespace VVK
