/*
 * MIT License - Copyright(c) 2020 Sean Moss
 * This file is subject to the terms and conditions of the MIT License, the text of which can be found in the 'LICENSE'
 * file at the root of this repository, or online at<https://opensource.org/licenses/MIT>.
 */

/// This file was generated by VVKGen. Edits to this file will be lost on next generation.

using System;
using System.Runtime.InteropServices;
using System.Runtime.CompilerServices;


namespace VVK
{

public unsafe sealed partial class VulkanQueue
{
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public VulkanResult QueueSubmit(Vk.Queue queue, uint submitCount, Vk.SubmitInfo* pSubmits, Vk.Fence fence)
		=> new(Parent.Functions.vkQueueSubmit(queue, submitCount, pSubmits, fence), "vkQueueSubmit");

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public VulkanResult QueueWaitIdle(Vk.Queue queue)
		=> new(Parent.Functions.vkQueueWaitIdle(queue), "vkQueueWaitIdle");

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public VulkanResult QueueBindSparse(Vk.Queue queue, uint bindInfoCount, Vk.BindSparseInfo* pBindInfo, Vk.Fence fence)
		=> new(Parent.Functions.vkQueueBindSparse(queue, bindInfoCount, pBindInfo, fence), "vkQueueBindSparse");

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public VulkanResult QueuePresentKHR(Vk.Queue queue, Vk.KHR.PresentInfo* pPresentInfo)
	{
		if (Parent.Functions.vkQueuePresentKHR == null) { throw new VVK.FunctionNotLoadedException("vkQueuePresentKHR"); }
		return new(Parent.Functions.vkQueuePresentKHR(queue, pPresentInfo), "vkQueuePresentKHR");
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public VulkanResult QueueSignalReleaseImageANDROID(Vk.Queue queue, uint waitSemaphoreCount, Vk.Semaphore* pWaitSemaphores, Vk.Image image, int* pNativeFenceFd)
	{
		if (Parent.Functions.vkQueueSignalReleaseImageANDROID == null) { throw new VVK.FunctionNotLoadedException("vkQueueSignalReleaseImageANDROID"); }
		return new(Parent.Functions.vkQueueSignalReleaseImageANDROID(queue, waitSemaphoreCount, pWaitSemaphores, image, pNativeFenceFd), "vkQueueSignalReleaseImageANDROID");
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void QueueBeginDebugUtilsLabelEXT(Vk.Queue queue, Vk.EXT.DebugUtilsLabel* pLabelInfo)
	{
		if (Parent.Functions.vkQueueBeginDebugUtilsLabelEXT == null) { throw new VVK.FunctionNotLoadedException("vkQueueBeginDebugUtilsLabelEXT"); }
		Parent.Functions.vkQueueBeginDebugUtilsLabelEXT(queue, pLabelInfo);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void QueueEndDebugUtilsLabelEXT(Vk.Queue queue)
	{
		if (Parent.Functions.vkQueueEndDebugUtilsLabelEXT == null) { throw new VVK.FunctionNotLoadedException("vkQueueEndDebugUtilsLabelEXT"); }
		Parent.Functions.vkQueueEndDebugUtilsLabelEXT(queue);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void QueueInsertDebugUtilsLabelEXT(Vk.Queue queue, Vk.EXT.DebugUtilsLabel* pLabelInfo)
	{
		if (Parent.Functions.vkQueueInsertDebugUtilsLabelEXT == null) { throw new VVK.FunctionNotLoadedException("vkQueueInsertDebugUtilsLabelEXT"); }
		Parent.Functions.vkQueueInsertDebugUtilsLabelEXT(queue, pLabelInfo);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void GetQueueCheckpointDataNV(Vk.Queue queue, uint* pCheckpointDataCount, Vk.NV.CheckpointData* pCheckpointData)
	{
		if (Parent.Functions.vkGetQueueCheckpointDataNV == null) { throw new VVK.FunctionNotLoadedException("vkGetQueueCheckpointDataNV"); }
		Parent.Functions.vkGetQueueCheckpointDataNV(queue, pCheckpointDataCount, pCheckpointData);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public VulkanResult QueueSetPerformanceConfigurationINTEL(Vk.Queue queue, Vk.INTEL.PerformanceConfiguration configuration)
	{
		if (Parent.Functions.vkQueueSetPerformanceConfigurationINTEL == null) { throw new VVK.FunctionNotLoadedException("vkQueueSetPerformanceConfigurationINTEL"); }
		return new(Parent.Functions.vkQueueSetPerformanceConfigurationINTEL(queue, configuration), "vkQueueSetPerformanceConfigurationINTEL");
	}

}

} // namespace VVK
