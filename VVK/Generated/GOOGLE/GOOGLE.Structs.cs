/*
 * MIT License - Copyright(c) 2020 Sean Moss
 * This file is subject to the terms and conditions of the MIT License, the text of which can be found in the 'LICENSE'
 * file at the root of this repository, or online at<https://opensource.org/licenses/MIT>.
 */

/// This file was generated by VVKGen. Edits to this file will be lost on next generation.

using System;
using System.Runtime.InteropServices;
using System.Runtime.CompilerServices;


namespace Vk.GOOGLE
{

[StructLayout(LayoutKind.Sequential)]
public unsafe partial struct RefreshCycleDuration : IEquatable<RefreshCycleDuration>
{
	public ulong RefreshDuration;

	public readonly override bool Equals(object? obj) => (obj is RefreshCycleDuration o) && (this == o);
	readonly bool IEquatable<RefreshCycleDuration>.Equals(RefreshCycleDuration obj) => (this == obj);
	[MethodImpl(MethodImplOptions.AggressiveOptimization)]
	public readonly override int GetHashCode()
	{
		return
			RefreshDuration.GetHashCode()
			;
	}

	[MethodImpl(MethodImplOptions.AggressiveOptimization)]
	public static bool operator == (in RefreshCycleDuration l, in RefreshCycleDuration r)
	{
		return
			(l.RefreshDuration == r.RefreshDuration)
			;
	}

	[MethodImpl(MethodImplOptions.AggressiveOptimization)]
	public static bool operator != (in RefreshCycleDuration l, in RefreshCycleDuration r)
	{
		return
			(l.RefreshDuration != r.RefreshDuration)
			;
	}


	/// <summary>Creates a new RefreshCycleDuration value with the correct default fields.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void New(out RefreshCycleDuration value) => value = new();
}

[StructLayout(LayoutKind.Sequential)]
public unsafe partial struct PastPresentationTiming : IEquatable<PastPresentationTiming>
{
	public uint PresentID;
	public ulong DesiredPresentTime;
	public ulong ActualPresentTime;
	public ulong EarliestPresentTime;
	public ulong PresentMargin;

	public readonly override bool Equals(object? obj) => (obj is PastPresentationTiming o) && (this == o);
	readonly bool IEquatable<PastPresentationTiming>.Equals(PastPresentationTiming obj) => (this == obj);
	[MethodImpl(MethodImplOptions.AggressiveOptimization)]
	public readonly override int GetHashCode()
	{
		return
			PresentID.GetHashCode() ^ DesiredPresentTime.GetHashCode() ^ ActualPresentTime.GetHashCode() ^ EarliestPresentTime.GetHashCode()
			^ PresentMargin.GetHashCode()
			;
	}

	[MethodImpl(MethodImplOptions.AggressiveOptimization)]
	public static bool operator == (in PastPresentationTiming l, in PastPresentationTiming r)
	{
		return
			(l.PresentID == r.PresentID) && (l.DesiredPresentTime == r.DesiredPresentTime) && (l.ActualPresentTime == r.ActualPresentTime) && (l.EarliestPresentTime == r.EarliestPresentTime)
			&& (l.PresentMargin == r.PresentMargin)
			;
	}

	[MethodImpl(MethodImplOptions.AggressiveOptimization)]
	public static bool operator != (in PastPresentationTiming l, in PastPresentationTiming r)
	{
		return
			(l.PresentID != r.PresentID) || (l.DesiredPresentTime != r.DesiredPresentTime) || (l.ActualPresentTime != r.ActualPresentTime) || (l.EarliestPresentTime != r.EarliestPresentTime)
			|| (l.PresentMargin != r.PresentMargin)
			;
	}


	/// <summary>Creates a new PastPresentationTiming value with the correct default fields.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void New(out PastPresentationTiming value) => value = new();
}

[StructLayout(LayoutKind.Sequential)]
public unsafe partial struct PresentTimesInfo : IEquatable<PresentTimesInfo>
{
	public const Vk.StructureType TYPE = Vk.StructureType.PresentTimesInfoGOOGLE;

	public Vk.StructureType sType;
	public void* pNext;
	public uint SwapchainCount;
	public Vk.GOOGLE.PresentTime* Times;

	public readonly override bool Equals(object? obj) => (obj is PresentTimesInfo o) && (this == o);
	readonly bool IEquatable<PresentTimesInfo>.Equals(PresentTimesInfo obj) => (this == obj);
	[MethodImpl(MethodImplOptions.AggressiveOptimization)]
	public readonly override int GetHashCode()
	{
		return
			sType.GetHashCode() ^ ((ulong)pNext).GetHashCode() ^ SwapchainCount.GetHashCode() ^ ((ulong)Times).GetHashCode()
			;
	}

	[MethodImpl(MethodImplOptions.AggressiveOptimization)]
	public static bool operator == (in PresentTimesInfo l, in PresentTimesInfo r)
	{
		return
			(l.sType == r.sType) && (l.pNext == r.pNext) && (l.SwapchainCount == r.SwapchainCount) && (l.Times == r.Times)
			;
	}

	[MethodImpl(MethodImplOptions.AggressiveOptimization)]
	public static bool operator != (in PresentTimesInfo l, in PresentTimesInfo r)
	{
		return
			(l.sType != r.sType) || (l.pNext != r.pNext) || (l.SwapchainCount != r.SwapchainCount) || (l.Times != r.Times)
			;
	}


	/// <summary>Creates a new PresentTimesInfo value with the correct default fields.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void New(out PresentTimesInfo value) => value = new() { sType = TYPE };
}

[StructLayout(LayoutKind.Sequential)]
public unsafe partial struct PresentTime : IEquatable<PresentTime>
{
	public uint PresentID;
	public ulong DesiredPresentTime;

	public readonly override bool Equals(object? obj) => (obj is PresentTime o) && (this == o);
	readonly bool IEquatable<PresentTime>.Equals(PresentTime obj) => (this == obj);
	[MethodImpl(MethodImplOptions.AggressiveOptimization)]
	public readonly override int GetHashCode()
	{
		return
			PresentID.GetHashCode() ^ DesiredPresentTime.GetHashCode()
			;
	}

	[MethodImpl(MethodImplOptions.AggressiveOptimization)]
	public static bool operator == (in PresentTime l, in PresentTime r)
	{
		return
			(l.PresentID == r.PresentID) && (l.DesiredPresentTime == r.DesiredPresentTime)
			;
	}

	[MethodImpl(MethodImplOptions.AggressiveOptimization)]
	public static bool operator != (in PresentTime l, in PresentTime r)
	{
		return
			(l.PresentID != r.PresentID) || (l.DesiredPresentTime != r.DesiredPresentTime)
			;
	}


	/// <summary>Creates a new PresentTime value with the correct default fields.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void New(out PresentTime value) => value = new();
}

} // namespace Vk.GOOGLE
