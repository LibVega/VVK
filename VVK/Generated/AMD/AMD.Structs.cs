/*
 * MIT License - Copyright(c) 2020 Sean Moss
 * This file is subject to the terms and conditions of the MIT License, the text of which can be found in the 'LICENSE'
 * file at the root of this repository, or online at<https://opensource.org/licenses/MIT>.
 */

/// This file was generated by VVKGen. Edits to this file will be lost on next generation.

using System;
using System.Runtime.InteropServices;
using System.Runtime.CompilerServices;


namespace VVK.Vk.AMD
{

[StructLayout(LayoutKind.Sequential)]
public unsafe partial struct PipelineRasterizationStateRasterizationOrder
{
	public const Vk.StructureType TYPE = Vk.StructureType.PipelineRasterizationStateRasterizationOrderAMD;

	public Vk.StructureType sType;
	public void* pNext;
	public Vk.AMD.RasterizationOrder RasterizationOrder;

	/// <summary>Creates a new PipelineRasterizationStateRasterizationOrder value with the correct type field.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void New(out PipelineRasterizationStateRasterizationOrder value) => value = new() { sType = TYPE };
	/// <summary>Initializes the sType and pNext fields to the correct default values.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void Init(ref PipelineRasterizationStateRasterizationOrder value) { value.sType = TYPE; value.pNext = null; }
}

[StructLayout(LayoutKind.Sequential)]
public unsafe partial struct DisplayNativeHdrSurfaceCapabilities
{
	public const Vk.StructureType TYPE = Vk.StructureType.DisplayNativeHdrSurfaceCapabilitiesAMD;

	public Vk.StructureType sType;
	public void* pNext;
	public Vk.Bool32 LocalDimmingSupport;

	/// <summary>Creates a new DisplayNativeHdrSurfaceCapabilities value with the correct type field.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void New(out DisplayNativeHdrSurfaceCapabilities value) => value = new() { sType = TYPE };
	/// <summary>Initializes the sType and pNext fields to the correct default values.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void Init(ref DisplayNativeHdrSurfaceCapabilities value) { value.sType = TYPE; value.pNext = null; }
}

[StructLayout(LayoutKind.Sequential)]
public unsafe partial struct SwapchainDisplayNativeHdrCreateInfo
{
	public const Vk.StructureType TYPE = Vk.StructureType.SwapchainDisplayNativeHdrCreateInfoAMD;

	public Vk.StructureType sType;
	public void* pNext;
	public Vk.Bool32 LocalDimmingEnable;

	/// <summary>Creates a new SwapchainDisplayNativeHdrCreateInfo value with the correct type field.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void New(out SwapchainDisplayNativeHdrCreateInfo value) => value = new() { sType = TYPE };
	/// <summary>Initializes the sType and pNext fields to the correct default values.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void Init(ref SwapchainDisplayNativeHdrCreateInfo value) { value.sType = TYPE; value.pNext = null; }
}

[StructLayout(LayoutKind.Sequential)]
public unsafe partial struct TextureLODGatherFormatProperties
{
	public const Vk.StructureType TYPE = Vk.StructureType.TextureLodGatherFormatPropertiesAMD;

	public Vk.StructureType sType;
	public void* pNext;
	public Vk.Bool32 SupportsTextureGatherLODBiasAMD;

	/// <summary>Creates a new TextureLODGatherFormatProperties value with the correct type field.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void New(out TextureLODGatherFormatProperties value) => value = new() { sType = TYPE };
	/// <summary>Initializes the sType and pNext fields to the correct default values.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void Init(ref TextureLODGatherFormatProperties value) { value.sType = TYPE; value.pNext = null; }
}

[StructLayout(LayoutKind.Sequential)]
public unsafe partial struct ShaderResourceUsage
{
	public uint NumUsedVgprs;
	public uint NumUsedSgprs;
	public uint LdsSizePerLocalWorkGroup;
	public ulong LdsUsageSizeInBytes;
	public ulong ScratchMemUsageInBytes;
}

[StructLayout(LayoutKind.Sequential)]
public unsafe partial struct ShaderStatisticsInfo
{
	public Vk.ShaderStageFlags ShaderStageMask;
	public Vk.AMD.ShaderResourceUsage ResourceUsage;
	public uint NumPhysicalVgprs;
	public uint NumPhysicalSgprs;
	public uint NumAvailableVgprs;
	public uint NumAvailableSgprs;
	public fixed uint ComputeWorkGroupSize[3];
}

[StructLayout(LayoutKind.Sequential)]
public unsafe partial struct PhysicalDeviceShaderCoreProperties
{
	public const Vk.StructureType TYPE = Vk.StructureType.PhysicalDeviceShaderCorePropertiesAMD;

	public Vk.StructureType sType;
	public void* pNext;
	public uint ShaderEngineCount;
	public uint ShaderArraysPerEngineCount;
	public uint ComputeUnitsPerShaderArray;
	public uint SimdPerComputeUnit;
	public uint WavefrontsPerSimd;
	public uint WavefrontSize;
	public uint SgprsPerSimd;
	public uint MinSgprAllocation;
	public uint MaxSgprAllocation;
	public uint SgprAllocationGranularity;
	public uint VgprsPerSimd;
	public uint MinVgprAllocation;
	public uint MaxVgprAllocation;
	public uint VgprAllocationGranularity;

	/// <summary>Creates a new PhysicalDeviceShaderCoreProperties value with the correct type field.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void New(out PhysicalDeviceShaderCoreProperties value) => value = new() { sType = TYPE };
	/// <summary>Initializes the sType and pNext fields to the correct default values.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void Init(ref PhysicalDeviceShaderCoreProperties value) { value.sType = TYPE; value.pNext = null; }
}

[StructLayout(LayoutKind.Sequential)]
public unsafe partial struct PhysicalDeviceShaderCoreProperties2
{
	public const Vk.StructureType TYPE = Vk.StructureType.PhysicalDeviceShaderCoreProperties2AMD;

	public Vk.StructureType sType;
	public void* pNext;
	public Vk.AMD.ShaderCorePropertiesFlags ShaderCoreFeatures;
	public uint ActiveComputeUnitCount;

	/// <summary>Creates a new PhysicalDeviceShaderCoreProperties2 value with the correct type field.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void New(out PhysicalDeviceShaderCoreProperties2 value) => value = new() { sType = TYPE };
	/// <summary>Initializes the sType and pNext fields to the correct default values.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void Init(ref PhysicalDeviceShaderCoreProperties2 value) { value.sType = TYPE; value.pNext = null; }
}

[StructLayout(LayoutKind.Sequential)]
public unsafe partial struct DeviceMemoryOverallocationCreateInfo
{
	public const Vk.StructureType TYPE = Vk.StructureType.DeviceMemoryOverallocationCreateInfoAMD;

	public Vk.StructureType sType;
	public void* pNext;
	public Vk.AMD.MemoryOverallocationBehavior OverallocationBehavior;

	/// <summary>Creates a new DeviceMemoryOverallocationCreateInfo value with the correct type field.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void New(out DeviceMemoryOverallocationCreateInfo value) => value = new() { sType = TYPE };
	/// <summary>Initializes the sType and pNext fields to the correct default values.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void Init(ref DeviceMemoryOverallocationCreateInfo value) { value.sType = TYPE; value.pNext = null; }
}

[StructLayout(LayoutKind.Sequential)]
public unsafe partial struct PipelineCompilerControlCreateInfo
{
	public const Vk.StructureType TYPE = Vk.StructureType.PipelineCompilerControlCreateInfoAMD;

	public Vk.StructureType sType;
	public void* pNext;
	public Vk.AMD.PipelineCompilerControlFlags CompilerControlFlags;

	/// <summary>Creates a new PipelineCompilerControlCreateInfo value with the correct type field.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void New(out PipelineCompilerControlCreateInfo value) => value = new() { sType = TYPE };
	/// <summary>Initializes the sType and pNext fields to the correct default values.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void Init(ref PipelineCompilerControlCreateInfo value) { value.sType = TYPE; value.pNext = null; }
}

[StructLayout(LayoutKind.Sequential)]
public unsafe partial struct PhysicalDeviceCoherentMemoryFeatures
{
	public const Vk.StructureType TYPE = Vk.StructureType.PhysicalDeviceCoherentMemoryFeaturesAMD;

	public Vk.StructureType sType;
	public void* pNext;
	public Vk.Bool32 DeviceCoherentMemory;

	/// <summary>Creates a new PhysicalDeviceCoherentMemoryFeatures value with the correct type field.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void New(out PhysicalDeviceCoherentMemoryFeatures value) => value = new() { sType = TYPE };
	/// <summary>Initializes the sType and pNext fields to the correct default values.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void Init(ref PhysicalDeviceCoherentMemoryFeatures value) { value.sType = TYPE; value.pNext = null; }
}

} // namespace VVK.Vk.AMD
