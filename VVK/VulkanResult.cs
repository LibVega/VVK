/*
 * MIT License - Copyright (c) 2020 Sean Moss
 * This file is subject to the terms and conditions of the MIT License, the text of which can be found in the 'LICENSE'
 * file at the root of this repository, or online at <https://opensource.org/licenses/MIT>.
 */

using System;
using System.Runtime.CompilerServices;

namespace VVK
{
	/// <summary>
	/// A wrapper container that encapsultes a <see cref="Vk.Result"/> value and information about the function call
	/// that generated the result value.
	/// </summary>
	public struct VulkanResult : IEquatable<VulkanResult>
	{
		#region Fields
		/// <summary>
		/// The <see cref="Vk.Result"/> value associated with this object.
		/// </summary>
		public readonly Vk.Result Value;

		/// <summary>
		/// The name of the Vulkan function that generated the result.
		/// </summary>
		public readonly string Function;

		/// <summary>
		/// Gets if the result is representative of an error (<see cref="Value"/> is <c>&lt; 0</c>).
		/// </summary>
		public readonly bool IsError => (int)Value < 0;
		/// <summary>
		/// Gets if the result is the full success (<see cref="Value"/> is <see cref="Vk.Result.Success"/>).
		/// </summary>
		public readonly bool IsSuccess => Value == Vk.Result.Success;
		/// <summary>
		/// Gets if the result represents a status instead of an error (<see cref="Value"/> is <c>&gt;= 0</c>).
		/// </summary>
		public readonly bool IsStatus => (int)Value >= 0;
		#endregion // Fields
		
		internal VulkanResult(Vk.Result result, string function)
		{
			Value = result;
			Function = function;
		}

		#region Overrides
		readonly bool IEquatable<VulkanResult>.Equals(VulkanResult other) => other.Value == Value;

		public readonly override bool Equals(object? obj) => (obj is VulkanResult res) && (res.Value == Value);

		public readonly override int GetHashCode() => (int)Value;

		public readonly override string ToString() => Value.ToString();
		#endregion // Overrides

		/// <summary>
		/// Gets the long version of the result string, which includes the function name.
		/// </summary>
		public readonly string ToLongString() => $"{Value} ({Function})";

		/// <summary>
		/// Throws a <see cref="VulkanResultException"/> for results that are not <see cref="Vk.Result.Success"/>.
		/// </summary>
		/// <param name="callerName">The caller member name (AUTO-GENERATED BY COMPILER, DO NOT OVERRIDE).</param>
		/// <param name="callerLine">The caller line number (AUTO-GENERATED BY COMPILER, DO NOT OVERRIDE).</param>
		[MethodImpl(MethodImplOptions.NoInlining)] // Required to keep the special argument values
		public void Throw(
			[CallerMemberName] string? callerName = null,
			[CallerLineNumber] int callerLine = 0
		)
		{
			if (!IsSuccess) {
				throw new VulkanResultException(Value, Function, callerName ?? "UNKNOWN", (uint)callerLine);
			}
		}

		#region Operators
		public static bool operator == (in VulkanResult l, in VulkanResult r) => l.Value == r.Value;
		public static bool operator != (in VulkanResult l, in VulkanResult r) => l.Value != r.Value;

		public static bool operator == (in VulkanResult l, Vk.Result r) => l.Value == r;
		public static bool operator != (in VulkanResult l, Vk.Result r) => l.Value != r;

		public static bool operator == (Vk.Result l, in VulkanResult r) => l == r.Value;
		public static bool operator != (Vk.Result l, in VulkanResult r) => l != r.Value;

		public static implicit operator bool (in VulkanResult res) => res.Value == Vk.Result.Success;
		#endregion // Operators
	}
}
